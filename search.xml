<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>也谈“过客”</title>
    <url>/p/58e1b8b4.html</url>
    <content><![CDATA[<p>　　曾经用了十多年的网名“过客”，但自己很少去深思这个词的含义。昨天一个网友留言道：每个人都是自己生命中的主角，而不只是过客。也许是每个人的生活以及对这个词的理解都不同吧…<br>　　“过客”这个词在词典里解释为过路的人，在百度百科网络词汇中，过客：指在互联网上历来都是“客”源不断,从博客、威客、换客、维客、拼客、晒客和晾客后,现在竟然又冒出了过客这一新生网友群体。过客是指在网友在网络行走过程中，所浏览过的网页或网站，匆匆而过，称作“过客”。<br>　　就我的理解，所谓“过客”，便是匆匆走过的人。走过你的生活，进过你的心灵，深入过你的生命。“过客”在生活中应该一直是有的，只是以前很少有人说这个话题。随着现代文明的发展，信息的传播越来越广泛，越来越疾速，空间上的跨越也越来越方便，多元化的机会，让人与人的相遇，心灵与心灵的碰撞变得更容易了些。但这样的相遇与碰撞却还是受生活和空间的限制，于是，走近，远去，下一个走近，又无奈的远去，这样的聚聚分分不断的的产生，“过客”也就出现了。<br>　　所谓“过客”，匆匆的走过我们的生命，给生命留下一些痕迹，然后就像远飘的云彩，再顺着他们自己生命的方向悠然的离去？<br>　　徐志摩的《偶然》中也提到过这样的段，也许能更好的解释“过客”的涵义吧。“我是天空里一片云，偶尔把风影在你的波心——你不必讶异，更无须欢喜——在转瞬间消灭了踪影。你和相逢在黑夜的海上，你有你的，我有我的，方向；你记得也好，最好你忘掉，在这交会时互放的光亮！”生命与全命的相逢，就是这样偶然而难以把握，交汇时互映光辉，然后就是擦肩而过，留下记忆或遗忘。对“过客”，天长地久是无法强加的奢望。<br>　　以乎很伤感，似乎很无奈，但生命在很多时候就是这样的无助。相对于浩瀚的宇宙和无限的时空，地球就是一个匆匆的过客，而渺小的人类相对于地球，便又成了一个匆匆的过客，在漫漫的人类发展史上，每一个人是一个匆匆的过客，在一人长长的一生中，那些匆匆而来又匆匆而去的人又是我们生命中的过客。我们是过客里的过客，能选择什么，又能放弃什么？<br>　　坦然的接受这生命中聚聚分分吧，没有讶异，也不要抱怨。来了接受；去了，坦然。别人进出我们的心灵，我们也出进别人的生命，别人是你的过客，你也是别人匆匆的过客。无需奢求，只静静的享受拥有时的那份感动。同时感谢，感谢他们曾走入我们的生命…</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下读写NTFS格式</title>
    <url>/p/536760e1.html</url>
    <content><![CDATA[<h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><p>在Linux上可以使用NTFS-3G来挂载NTFS格式的硬盘。NTFS-3G 是一个开源的软件，可以实现Linux、Free BSD、Mac OSX、NetBSD 和Haiku 等操作系统中的NTFS 读写支持。  它可以安全且快速地读写Windows 系统的NTFS 分区，而不用担心数据丢失。</p>
<h1 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h1><p>Ubuntu系统默认是自带ntfs-3g的，在CentOS中可以使用<code>yum</code>命令直接安装</p>
<pre><code class="line-numbers language-bash">yum install -y ntfs-3g</code></pre>
<h1 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h1><p>先用<code>fdisk -l</code>查看需要挂载硬盘的盘符。例如为<code>/dev/sdb</code></p>
<pre><code class="line-numbers language-bash">mount -t ntfs-3g /dev/sdb /data</code></pre>
<h1 id="四、设置开机自动挂载"><a href="#四、设置开机自动挂载" class="headerlink" title="四、设置开机自动挂载"></a>四、设置开机自动挂载</h1><p>打开<code>/etc/fstab</code>文件，在最后添加</p>
<pre><code class="line-numbers language-bash"># 只读模式挂载
/dev/sdb /data ntfs-3g ro,umask=0222,defaults 0 0

# 读写模式挂载
/dev/sdb /data ntfs-3g rw,umask=0000,defaults 0 0</code></pre>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Ubuntu</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>股市中的过客</title>
    <url>/p/874c58c2.html</url>
    <content><![CDATA[<p>　　工作十多年，手里有点小积蓄，之前存银行放余额宝发现利息都赶不上物价上涨。怎么样才能不亏呢？<br>　　在四五月份的时候开始买基金，那时候白酒消费比较凶残，各平台推荐的也比较多，对于小白来说看着推荐的还长了，也就跟风进了一些白酒消费类和上证50指数基金，结果到七八月份的时候亏了10%左右。本想赚点零花钱的，结果别人把碗给端走了。<br>　　自己的钱要掌握在自己手里，于是在八月底的时候开始爬进了股市。最近上班也不算太忙，手机也可以看看行情，也不太会去追热点做短线，买了些医疗、新能源、光伏相关的股票，摸爬滚打了二个月，小赚了11.4%，把基金亏的赚了回来。<br><img src="//gitee.com/guoke3915/zw/raw/master/p/874c58c2/19826068-8f317eecb6b95b22.png" alt></p>
<p>　　当然，入市有风险，不能把所有的鸡蛋放一个篮子，合理分配是比较重要的。我是把小积蓄分成了10份，3份存银行定期、3份买基金（虽然现在比较坑还亏着，但相信长期会有赚的）、3份玩股票、最后留1份在余额宝当流动资金。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>go读取docx文档</title>
    <url>/p/c66a286f.html</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>docx 是一个带有 xml 的 zip 文件,  <a href="https://github.com/srinathh/gooxml" target="_blank" rel="noopener">srinathh/gooxml</a> 是一个用于创建 Office Open XML 文档的库.这个库只支持office 2007以及之后的版本的文档,即只能读取<code>.docx、.xlsx 和 .pptx</code>,面不能读取<code>.doc、.xls 和 .ppt</code></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><pre><code class="line-numbers language-bash">go get baliance.com/gooxml/document</code></pre>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>解析docx文档代码</p>
<pre><code class="line-numbers language-go">package main

import (
    &quot;baliance.com/gooxml/document&quot;
    &quot;fmt&quot;
    &quot;log&quot;
)

func main() {
    doc, err := document.Open(&quot;zngw.docx&quot;)
    if err != nil {
        log.Fatalf(&quot;error opening document: %s&quot;, err)
    }
    //doc.Paragraphs()得到包含文档所有的段落的切片
    for i, para := range doc.Paragraphs() {
        //run为每个段落相同格式的文字组成的片段
        fmt.Println(&quot;-----------第&quot;, i, &quot;段-------------&quot;)
        for j, run := range para.Runs() {
            fmt.Print(&quot;\t-----------第&quot;, j, &quot;格式片段-------------&quot;)
            fmt.Print(run.Text())
        }
        fmt.Println()
    }
}</code></pre>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>如有以下文档,有一个标题, 第二行是一段文字, 第三行有二种字体.</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/c66a286f/19826068-138e2a2e271824de.png" alt></p>
<p>代码读取的结果为:</p>
<pre><code class="line-numbers language-bash">-----------第 0 段-------------
    -----------第0格式片段-------------这里是标题
-----------第 1 段-------------
    -----------第0格式片段-------------这里是docx测试文档
-----------第 2 段-------------

-----------第 3 段-------------
    -----------第0格式片段-------------Hello World!    -----------第1格式片段-------------你好呀</code></pre>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 20.04 安装 Nats</title>
    <url>/p/4d81b25b.html</url>
    <content><![CDATA[<h1 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h1><p>nats是一个开源的，云原生的消息系统。核心基于EventMachine开发，原理是基于消息发布订阅机制，每台服务器上的每个模块会根据自己的消息类别向MessageBus发布多个消息主题，而同时也向自己需要交互的模块，按照需要的主题订阅消息。能够达到每秒8-11百万个消息，整个程序很小只有3M Docker image，它不支持持久化消息，如果你离线，你就不能获得消息。使用nats streaming可以做到持久化，缓存等功能。</p>
<h1 id="2、下载"><a href="#2、下载" class="headerlink" title="2、下载"></a>2、下载</h1><p>去<a href="https://github.com/nats-io" target="_blank" rel="noopener">https://github.com/nats-io</a>下载最新版本的nats-server版本。这里用<a href="https://github.com/nats-io/nats-server/releases/download/v2.6.2/nats-server-v2.6.2-linux-amd64.tar.gz" target="_blank" rel="noopener">2.6.2版本</a></p>
<h1 id="3、运行"><a href="#3、运行" class="headerlink" title="3、运行"></a>3、运行</h1><p>解压后直接运行<code>nats-server</code>就可以了</p>
<pre><code class="line-numbers language-bash">tar zxf nats-server-v2.6.2-linux-amd64.tar.gz
./nats-server-v2.6.2-linux-amd64/nats-server</code></pre>
<h1 id="4、将nats添加为服务"><a href="#4、将nats添加为服务" class="headerlink" title="4、将nats添加为服务"></a>4、将nats添加为服务</h1><pre><code class="line-numbers language-ini">vim /lib/systemd/system/nats.service

[Unit]
Description=nats-server daemon
After=syslog.target  network.target
Wants=network.target

[Service]
ExecStart=/home/nats-server/nats-server -c /home/nats-server/nats.yml
Restart= on-failure

[Install]
WantedBy=multi-user.target</code></pre>
<p>然后就可以通过<code>systemctl</code>来启动停止了</p>
<pre><code class="line-numbers language-bash">#开机启动
systemctl enable nats

# 启动
systemctl start nats

# 停止
systemctl stop nats

# 查看状态
systemctl status nats</code></pre>
<h1 id="5、启动参数配置说明"><a href="#5、启动参数配置说明" class="headerlink" title="5、启动参数配置说明"></a>5、启动参数配置说明</h1><p>在源码<a href="https://github.com/nats-io/nats-server/blob/main/main.go#L26-L81" target="_blank" rel="noopener">main.go</a>中可以看到配置参数。</p>
<pre><code class="line-numbers language-yml">服务器选项:
    -a, --addr &lt;host&gt;                绑定主机IP地址（默认是0.0.0.0）
    -p, --port &lt;port&gt;                客户端连接NATS服务器使用的端口（默认是4222）
    -n, --name &lt;server_name&gt;         服务器名字(默认:自动)
    -P, --pid &lt;file&gt;                 存储PID的文件
    -m, --http_port &lt;port&gt;           HTTP监听端口
    -ms,--https_port &lt;port&gt;          HTTPS监听端口
    -c, --config &lt;file&gt;              指定配置文件
    -t                               测试配置文并退出
    -sl,--signal &lt;signal&gt;[=&lt;pid&gt;]    向 nats-server 进程发送信号（停止、退出、重新打开、重新加载）
                                      &lt;pid&gt; 可以是 PID（例如 1）或 PID 文件的路径（例如 /var/run/nats-server.pid）
        --client_advertise &lt;string&gt;  向其他服务器广播的客户端 URL

日志选项:
    -l, --log &lt;file&gt;                 指定日志输出的文件
    -T, --logtime                    是否开启日志的时间戳（默认为true）
    -s, --syslog                     启用syslog作为日志方法
    -r, --remote_syslog &lt;addr&gt;       远程日志服务器的地址（默认为udp://localhost:514）
    -D, --debug                      开启调试输出
    -V, --trace                      跟踪原始的协议
    -VV                              详细跟踪（也跟踪系统帐户）
    -DV                              调试并跟踪
    -DVV                             调试和详细跟踪（也跟踪系统帐户）

JetStream 选项:
    -js, --jetstream                 启用 JetStream 功能。
    -sd, --store_dir &lt;dir&gt;           设置存储目录。

授权认证选项:
        --user &lt;user&gt;                连接需要的用户名
        --pass &lt;password&gt;            连接需要的密码
        --auth &lt;token&gt;               连接所需的授权令牌

TLS 安全选项:
        --tls                       启用TLS，不验证客户端（默认为false）
        --tlscert &lt;file&gt;             服务器证书文件
        --tlskey &lt;file&gt;              服务器证书私钥
        --tlsverify                  启用TLS，每一个客户端都要认证
        --tlscacert &lt;file&gt;           客户端证书CA用于认证

集群选项:
        --routes &lt;rurl-1, rurl-2&gt;    请求和连接的路由
        --cluster &lt;cluster-url&gt;      请求路由的集群 URL
        --cluster_name &lt;string&gt;      Cluster Name，如果不设置会动态生成一个
        --no_advertise &lt;bool&gt;        不向客户端通告已知的集群信息
        --cluster_advertise &lt;string&gt; 向其他服务器通告的集群 URL
        --connect_retries &lt;number&gt;   连接重试次数

常规选项:
    -h, --help                       显示帮助消息
    -v, --version                   显示版本信息
        --help_tls                   显示TLS 帮助消息</code></pre>
<h1 id="6、配置文件"><a href="#6、配置文件" class="headerlink" title="6、配置文件"></a>6、配置文件</h1><p>使用参数启动难免太复杂了点，所以可以通过-c加配置文件来启动。</p>
<p>NATS服务器配置文件的格式比较灵活，结合了传统的JSON格式和新的YAML格式的风格。<br>NATS配置文件格式支持以下语法：</p>
<pre><code class="line-numbers language-yml">Mixed Arrays: […]
Nested Maps: {…}
Multiple comment types: # and //
Key value assigments using:

    Equals sign (foo = 2)
    Colon (foo: 2)
    Whitespace (foo 2)

Maps can be assigned with no key separator

Semicolons as value terminators in key/value assignments are optional&lt;br&gt;</code></pre>
<h2 id="简单配置"><a href="#简单配置" class="headerlink" title="简单配置"></a>简单配置</h2><pre><code class="line-numbers language-yml">listen: 127.0.0.1:4222</code></pre>
<h2 id="NATS服务器配置文件示例"><a href="#NATS服务器配置文件示例" class="headerlink" title="NATS服务器配置文件示例"></a>NATS服务器配置文件示例</h2><pre><code class="line-numbers language-yml">port: 4242   # 供客户端连接的监听端口
net: apcera.me # 监听的网络地址

http_port: 8222 # HTTP监控端口

# 客户端连接的认证信息
authorization {
 user:   derek
 password: T0pS3cr3t
 timeout: 1
}

# 集群定义
cluster {

 host: &#39;127.0.0.1&#39; # 主机地址
 port: 4244     # 路由连接的入站(inbound)端口

 # 路由连接的认证信息
 authorization {
  user: route_user
  password: T0pS3cr3tT00!
  timeout: 0.5
 }

 # Routes are actively solicited and connected to from this server.
 # Other servers can connect to us if they supply the correct credentials
 # in their routes definitions from above.
 routes = [
  nats-route://user1:pass1@127.0.0.1:4245
  nats-route://user2:pass2@127.0.0.1:4246
 ]
}

# 日志选项
debug:  false
trace:  true
logtime: false
log_file: &quot;/tmp/gnatsd.log&quot;

# PID进程文件
pid_file: &quot;/tmp/gnatsd.pid&quot;

# 一些系统属性

# 客户端最大连接数
max_connections: 100

# 最大协议控制行
max_control_line: 512

# 最大的有效负载
max_payload: 65536

# 慢消费者阀值
max_pending_size: 10000000</code></pre>
<p>配置文件参考：<a href="http://article.nxpop.com/col/6304.html" target="_blank" rel="noopener">http://article.nxpop.com/col/6304.html</a></p>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>go中国家新闻出版署实名认证</title>
    <url>/p/c01f879d.html</url>
    <content><![CDATA[<p>随着网络游戏防沉迷系统的接入，实名认证验证也是一个必不可少的部分，网上有第三方的实名认证但基本上都收费，<a href="http://www.nppa.gov.cn/" target="_blank" rel="noopener">国家新闻出版署</a>提供了免费的接口，不过需要自己去提交申请，获取<code>应用标识 (APPID)</code>、<code>应用密钥 (Secret Key)</code>、<code>业务权限标识(BizId)</code>，并将请求服务器的IP设为白名单后，就可以调用<code>https:// api.wlc.nppa.gov.cn/idcard/authentication/check</code>接口来获取实名认真了。</p>
<p>这个接口中请求体body使用了AES-128/GCM + BASE64算法加密，签名使用了sha256。直接上完整的代码</p>
<pre><code class="line-numbers language-go">import (
    &quot;bytes&quot;
    &quot;crypto/aes&quot;
    &quot;crypto/cipher&quot;
    &quot;crypto/rand&quot;
    &quot;crypto/sha256&quot;
    &quot;encoding/base64&quot;
    &quot;encoding/hex&quot;
    &quot;encoding/json&quot;
    &quot;fmt&quot;
    &quot;io&quot;
    &quot;io/ioutil&quot;
    &quot;net/http&quot;
    &quot;sort&quot;
    &quot;strconv&quot;
    &quot;time&quot;
)

// 国家新闻出版署配置信息
type nppaInfo struct {
    AppId     string // 应用标识
    SecretKey string // 应用密钥
    BizId     string // 业务权限标识
}

var nppa nppaInfo

// 输入国家新闻出版署配置信息
func NppaInit(appId, secretKey, bizId string) {
    nppa = nppaInfo{
        AppId:     appId,
        SecretKey: secretKey,
        BizId:     bizId,
    }
}

// 实名验证
// ai     - 游戏内部成员标识,固定32位字符，一般使用 md5(用户ID)
// name - 实名信息中的姓名
// id     - 实名信息中身份证号码
// 返回
//         - result 是否验证成功
//         - errcode 状态码
//         - errmsg 状态描述
func NppaCheck(ai, name, id string) (result bool, errcode int, errmsg string ) {
    client := &amp;http.Client{}

    // body 参数
    param := map[string]string{
        &quot;ai&quot;:    ai,
        &quot;name&quot;:  name,
        &quot;idNum&quot;: id,
    }

    // AES-128/GCM + BASE64算法加密
    jsonParam, _ := json.Marshal(param)
    cipher, _ := gcmEncrypt(string(jsonParam))
    body, _ := json.Marshal(map[string]string{
        &quot;data&quot;: cipher,
    })

    // post请求地址
    req, _ := http.NewRequest(&quot;POST&quot;, &quot;https://api.wlc.nppa.gov.cn/idcard/authentication/check&quot;, bytes.NewReader(body))

    // header头验证信息
    headers := map[string]string{
        &quot;appId&quot;:      nppa.AppId,
        &quot;bizId&quot;:      nppa.BizId,
        &quot;timestamps&quot;: strconv.FormatInt(time.Now().UnixNano()/1e6, 10),
    }

    // 签名
    headers[&quot;sign&quot;] = sign(headers, string(body))
    headers[&quot;Content-Type&quot;] = &quot;application/json;charset=utf-8&quot;
    for k, v := range headers {
        req.Header.Set(k, v)
    }

    // 请求
    resp, err := client.Do(req)
    if err != nil {
        return false, -1, &quot;Http请求错误&quot;
    }
    defer resp.Body.Close()
    if resp.StatusCode != 200 {
        return false, resp.StatusCode, &quot;Http请求返回码错误&quot;
    }

    str, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        return false, -2, &quot;Http请求返回数据为空&quot;
    }

    var msg map[string]interface{}
    err = json.Unmarshal(str, &amp;msg)
    if err != nil {
        return false, -3, &quot;Http请求返回数据格式错误&quot;
    }

    ec, ok := msg[&quot;errcode&quot;]
    if !ok {
        return false, -3, &quot;Http请求返回数据格式错误&quot;
    }

    errcode = int(ec.(float64))
    if errcode != 0 {
        errmsg, _:= msg[&quot;errmsg&quot;]
        return false, errcode, errmsg.(string)
    }

    data, ok := msg[&quot;data&quot;]
    if !ok {
        return false, -3, &quot;Http请求返回数据格式错误&quot;
    }

    r, ok := data.(map[string]interface{})[&quot;result&quot;]
    if !ok {
        return false, -3, &quot;Http请求返回数据格式错误&quot;
    }

    status, ok := r.(map[string]interface{})[&quot;status&quot;]
    if !ok {
        return false, -3, &quot;Http请求返回数据格式错误&quot;
    }

    errcode = int(status.(float64))
    if errcode == 0{
        return true, 0, &quot;认证成功&quot;
    } else if errcode == 1 {
        return false, errcode, &quot;认证中&quot;
    }else {
        return false, errcode, &quot;认证失败&quot;
    }
}

func gcmEncrypt(originalText string) (string, error) {
    // 需要解码
    key, _ := hex.DecodeString(nppa.SecretKey)
    block, err := aes.NewCipher(key)
    if err != nil {
        return &quot;&quot;, err
    }

    aesGcm, err := cipher.NewGCM(block)
    if err != nil {
        return &quot;&quot;, err
    }

    // 向量
    nonce := make([]byte, aesGcm.NonceSize())
    if _, err := io.ReadFull(rand.Reader, nonce); err != nil {
        return &quot;&quot;, err
    }

    cipherText := aesGcm.Seal(nonce, nonce, []byte(originalText), nil)

    // encode as base64 string
    encoded := base64.StdEncoding.EncodeToString(cipherText)
    return encoded, nil
}

func sign(headers map[string]string, body string) string {
    var data string
    var keys []string
    // key排序
    for k := range headers {
        keys = append(keys, k)
    }
    sort.Strings(keys)

    // 拼接
    for _, k := range keys {
        data = data + k + headers[k]
    }
    data = nppa.SecretKey + data + body

    // 对字符串进行sha256哈希
    h := sha256.New()
    h.Write([]byte(data))
    sum := h.Sum(nil)
    return hex.EncodeToString(sum)
}</code></pre>
<p>调用</p>
<pre><code class="line-numbers language-go">func main() {
    // 初始化
    NppaInit(&quot;test-appId&quot;,&quot;2836e95fcd10e04b0069bb1ee659955b&quot;,&quot;test-bizId&quot;)

    // 使用
    userId := &quot;123456&quot;
    name := &quot;岑吾&quot;
    id := &quot;xxxxxxxxxxxxxxxxxx&quot;
    h := md5.New()
    h.Write([]byte(userId))
    ok,code,msg := NppaCheck(hex.EncodeToString(h.Sum(nil)), name, id)
    fmt.Println(ok,code,msg)
}</code></pre>
<p>详细返回参数可见<a href="https://www.aliyundrive.com/s/cfVduHgQ3Fb" target="_blank" rel="noopener">网络游戏防沉迷实名认证系统</a></p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 20.04 安装 Redis</title>
    <url>/p/618372ba.html</url>
    <content><![CDATA[<p>在 Ubuntu 20.04 上安装 Redis 可以下载<code>http://download.redis.io/redis-stable.tar.gz</code>直接运行，但也可以使用<code>apt</code>来直接按装。Ubuntu 20.04 软件源中有Redis 5.0。</p>
<pre><code class="line-numbers language-bash">sudo apt update
sudo apt install redis-server</code></pre>
<h2 id="启动、停止、重启"><a href="#启动、停止、重启" class="headerlink" title="启动、停止、重启"></a>启动、停止、重启</h2><p>安装完成后Redis会自动启动，可以用<code>systemctl</code>来控制Redis的启动、停止、重启等</p>
<pre><code class="line-numbers language-bash"># 查看状态
systemctl status redis-server.service

# 启动
systemctl start redis-server.service

# 停止
systemctl stop redis-server.service

# 重启
systemctl restart redis-server.service

# 设置开机启动
systemctl enable redis-server.service</code></pre>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><code>apt</code>安装的Redis配置文件在<code>/etc/redis/redis.conf</code></p>
<h3 id="配置远程访问"><a href="#配置远程访问" class="headerlink" title="配置远程访问"></a>配置远程访问</h3><p>注释 bind这一行</p>
<pre><code class="line-numbers language-conf">#bind 127.0.0.1</code></pre>
<h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><pre><code class="line-numbers language-conf">requirepass 密码</code></pre>
<h3 id="修改端口"><a href="#修改端口" class="headerlink" title="修改端口"></a>修改端口</h3><pre><code class="line-numbers language-conf">port 6379</code></pre>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 20.04安装Docker</title>
    <url>/p/35ea3f99.html</url>
    <content><![CDATA[<h2 id="一、卸载旧版本"><a href="#一、卸载旧版本" class="headerlink" title="一、卸载旧版本"></a>一、卸载旧版本</h2><pre><code class="line-numbers language-bash">sudo apt-get remove docker docker-engine docker.io containerd runc</code></pre>
<h2 id="二、使用官方安装脚本中的阿里云镜像自动安装"><a href="#二、使用官方安装脚本中的阿里云镜像自动安装" class="headerlink" title="二、使用官方安装脚本中的阿里云镜像自动安装"></a>二、使用官方安装脚本中的阿里云镜像自动安装</h2><pre><code class="line-numbers language-bash">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</code></pre>
<h2 id="三、启动Docker"><a href="#三、启动Docker" class="headerlink" title="三、启动Docker"></a>三、启动Docker</h2><pre><code class="line-numbers language-bash">sudo systemctl start docker</code></pre>
<h2 id="四、停止Docker"><a href="#四、停止Docker" class="headerlink" title="四、停止Docker"></a>四、停止Docker</h2><pre><code class="line-numbers language-bash">sudo systemctl stop docker.socket</code></pre>
<p>注意：停止时需要如果使用<code>sudo systemctl stop docker</code>是停止不了的，还会警告</p>
<pre><code class="line-numbers language-bash">root@ubuntu:~# systemctl stop docker
Warning: Stopping docker.service, but it can still be activated by:
  docker.socket</code></pre>
<p>原因是Docker 有两个服务进程文件，可以通过<code>cd /lib/systemd/system/ &amp;&amp; ll|grep docker</code>查看，分别是<code>docker.service unit file</code> 和 <code>docker.socket unit file</code>，上面的警告意味着如果你试图停止docker服务，但docker.socket unit file还处于激活状态。</p>
<h2 id="五、设置开机启动"><a href="#五、设置开机启动" class="headerlink" title="五、设置开机启动"></a>五、设置开机启动</h2><pre><code class="line-numbers language-bash">sudo systemctl enable docker</code></pre>
<h2 id="六、显示版本"><a href="#六、显示版本" class="headerlink" title="六、显示版本"></a>六、显示版本</h2><pre><code class="line-numbers language-bash">docker version</code></pre>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker中pull microsoft/dotnet报错</title>
    <url>/p/cf0371b3.html</url>
    <content><![CDATA[<h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p>今天在一台新的服务器中pull microsoft/dotnet的时候报错了</p>
<pre><code>docker: Error response from daemon: pull access denied for microsoft/dotnet, repository does not exist or may require &#39;docker login&#39;: denied: requested access to the resource is denied.</code></pre><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>这是因为.NET Core 2.1 和 2.2 容器映像已从 Docker Hub 中删除。 他们于 2021 年 8 月 21 日将这些映像移到了 Microsoft 容器注册表 (MCR)。 </p>
<p>使用<code>docker pull mcr.microsoft.com/dotnet/sdk:2.1</code> 来代替 <code>docker pull microsoft/dotnet</code>。</p>
<p>MCR 上的 .NET 映像可从以下存储库获得：</p>
<ul>
<li>mcr.microsoft.com/dotnet/runtime-deps</li>
<li>mcr.microsoft.com/dotnet/runtime</li>
<li>mcr.microsoft.com/dotnet/aspnet</li>
<li>mcr.microsoft.com/dotnet/sdk</li>
</ul>
<h2 id="具体的替换"><a href="#具体的替换" class="headerlink" title="具体的替换"></a>具体的替换</h2><h3 id="SDK"><a href="#SDK" class="headerlink" title="SDK"></a>SDK</h3><pre><code class="line-numbers language-txt">microsoft/dotnet:2.1-sdk -&gt; mcr.microsoft.com/dotnet/sdk:2.1
microsoft/dotnet:2-sdk -&gt; mcr.microsoft.com/dotnet/sdk:2.1
microsoft/dotnet:2.1-sdk-stretch -&gt; mcr.microsoft.com/dotnet/sdk:2.1-stretch
microsoft/dotnet:2.1-sdk-stretch-arm32v7 -&gt; mcr.microsoft.com/dotnet/sdk:2.1-stretch-arm32v7
microsoft/dotnet:2.1-sdk-nanoserver-1809 -&gt; mcr.microsoft.com/dotnet/sdk:2.1-nanoserver-1809
microsoft/dotnet:2.1-sdk-alpine -&gt; mcr.microsoft.com/dotnet/sdk:2.1-alpine
microsoft/dotnet:2.1-sdk-bionic -&gt; mcr.microsoft.com/dotnet/sdk:2.1-bionic
microsoft/dotnet:2.1-sdk-bionic-arm32v7 -&gt; mcr.microsoft.com/dotnet/sdk:2.1-bionic-arm32v7
microsoft/dotnet:latest -&gt; mcr.microsoft.com/dotnet/sdk:2.1</code></pre>
<h3 id="ASP-NET-Core"><a href="#ASP-NET-Core" class="headerlink" title="ASP.NET Core:"></a>ASP.NET Core:</h3><pre><code class="line-numbers language-txt">microsoft/dotnet:2.1-aspnetcore-runtime -&gt; mcr.microsoft.com/dotnet/aspnet:2.1
microsoft/dotnet:2-aspnetcore-runtime-&gt; mcr.microsoft.com/dotnet/aspnet:2.1
microsoft/dotnet:2.1-aspnetcore-runtime-stretch-slim -&gt; mcr.microsoft.com/dotnet/aspnet:2.1-stretch-slim
microsoft/dotnet:2.1-aspnetcore-runtime-stretch-slim-arm32v7 -&gt; mcr.microsoft.com/dotnet/aspnet:2.1-stretch-slim-arm32v7
microsoft/dotnet:2.1-aspnetcore-runtime-nanoserver-1809 -&gt; mcr.microsoft.com/dotnet/aspnet:2.1-nanoserver-1809
microsoft/dotnet:2.1-aspnetcore-runtime-alpine -&gt; mcr.microsoft.com/dotnet/aspnet:2.1-alpine
microsoft/dotnet:2.1-aspnetcore-runtime-bionic -&gt; mcr.microsoft.com/dotnet/aspnet:2.1-bionic
microsoft/dotnet:2.1-aspnetcore-runtime-bionic-arm32v7 -&gt; mcr.microsoft.com/dotnet/aspnet:2.1-bionic-arm32v7
microsoft/dotnet:aspnetcore-runtime-&gt; mcr.microsoft.com/dotnet/aspnet:2.1</code></pre>
<h3 id="NET-Runtime"><a href="#NET-Runtime" class="headerlink" title=".NET Runtime:"></a>.NET Runtime:</h3><pre><code class="line-numbers language-txt">microsoft/dotnet:2.1-runtime -&gt; mcr.microsoft.com/dotnet/runtime:2.1
microsoft/dotnet:2-runtime -&gt; mcr.microsoft.com/dotnet/runtime:2.1
microsoft/dotnet:2.1-runtime-stretch-slim -&gt; mcr.microsoft.com/dotnet/runtime:2.1-stretch-slim
microsoft/dotnet:2.1-runtime-stretch-slim-arm32v7 -&gt; mcr.microsoft.com/dotnet/runtime:2.1-stretch-slim-arm32v7
microsoft/dotnet:2.1-runtime-nanoserver-1809 -&gt; mcr.microsoft.com/dotnet/runtime:2.1-nanoserver-1809
microsoft/dotnet:2.1-runtime-alpine -&gt; mcr.microsoft.com/dotnet/runtime:2.1-alpine
microsoft/dotnet:2.1-runtime-bionic -&gt; mcr.microsoft.com/dotnet/runtime:2.1-bionic
microsoft/dotnet:2.1-runtime-bionic-arm32v7 -&gt; mcr.microsoft.com/dotnet/runtime:2.1-bionic-arm32v7
microsoft/dotnet:runtime -&gt; mcr.microsoft.com/dotnet/runtime:2.1</code></pre>
<h3 id="NET-Runtime-dependencies"><a href="#NET-Runtime-dependencies" class="headerlink" title=".NET Runtime dependencies:"></a>.NET Runtime dependencies:</h3><pre><code class="line-numbers language-txt">microsoft/dotnet:2.1-runtime-deps -&gt; mcr.microsoft.com/dotnet/runtime-deps:2.1
microsoft/dotnet:2.1-runtime-deps-stretch-slim -&gt; mcr.microsoft.com/dotnet/runtime-deps:2.1-stretch-slim
microsoft/dotnet:2.1-runtime-deps-stretch-slim-arm32v7 -&gt; mcr.microsoft.com/dotnet/runtime-deps:2.1-stretch-slim-arm32v7
microsoft/dotnet:2.1-runtime-deps-alpine -&gt; mcr.microsoft.com/dotnet/runtime-deps:2.1-alpine
microsoft/dotnet:2.1-runtime-deps-bionic -&gt; mcr.microsoft.com/dotnet/runtime-deps:2.1-bionic
microsoft/dotnet:2.1-runtime-deps-bionic-arm32v7 -&gt; mcr.microsoft.com/dotnet/runtime-deps:2.1-bionic-arm32v7
microsoft/dotnet:runtime-deps -&gt; mcr.microsoft.com/dotnet/runtime-deps:2.1</code></pre>
<p>详见dotnet/announcements 的github文档:<a href="https://github.com/dotnet/announcements/issues/197" target="_blank" rel="noopener">https://github.com/dotnet/announcements/issues/197</a></p>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Ubuntu</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 20.04修改ip</title>
    <url>/p/f798f8e0.html</url>
    <content><![CDATA[<p>ubuntu从17.10开始，已放弃在/etc/network/interfaces里固定IP的配置，即使配置也不会生效，而是改成netplan方式 ，配置写在/etc/netplan/00-installer-config.yaml或者类似名称的yaml文件里</p>
<pre><code class="line-numbers language-bash">root@ubuntu:~# ls /etc/netplan/
00-installer-config.yaml</code></pre>
<p>然后编辑 <strong>sudo vim /etc/netplan/00-installer-config.yaml</strong>文件修改ip配置。这是一个yml文件遵循yaml语法规则。具体配置如下：</p>
<pre><code class="line-numbers language-yml"># This is the network config written by &#39;subiquity&#39;
network:
  ethernets:
    ens160:                            #配置的网卡的名称
      addresses:
      - 192.168.0.121/24               #配置的静态ip地址和掩码
      dhcp4: no                        #关闭DHCP，如果需要打开DHCP则写yes
      gateway4: 192.168.0.1            #网关地址
      nameservers:
        addresses:
        - 192.168.0.1                  #DNS服务器地址，多个DNS服务器地址需要用英文逗号分隔开
        search:
        - localhost                    #本地域名解析
  version: 2</code></pre>
<p>使配置的ip地址生效</p>
<pre><code class="line-numbers language-bash">sudo netplan apply</code></pre>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 20.04修改ip</title>
    <url>/p/f798f8e0.html</url>
    <content><![CDATA[<h2 id="使用root账号本地登录"><a href="#使用root账号本地登录" class="headerlink" title="使用root账号本地登录"></a>使用root账号本地登录</h2><p>ubuntu系统默认root用户是不能登录的，密码也是空的。</p>
<p>如果要使用root用户登录，必须先为root用户设置密码</p>
<pre><code class="line-numbers language-bash">sudo passwd root</code></pre>
<p>先输入当前用户密码启动管理员权限，然后再输入二次root新密码。</p>
<h2 id="使用root账号ssh远程登录"><a href="#使用root账号ssh远程登录" class="headerlink" title="使用root账号ssh远程登录"></a>使用root账号ssh远程登录</h2><pre><code class="line-numbers language-bash">sudo vim /etc/ssh/sshd_config</code></pre>
<p>找到<code>PermitRootLogin</code>修改配置为<code>PermitRootLogin yes</code></p>
<p>重新ssh使修改配置生效</p>
<pre><code class="line-numbers language-bash">sudo  systemctl  restart  ssh</code></pre>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Ubuntu Server版</title>
    <url>/p/c1e67b27.html</url>
    <content><![CDATA[<h2 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h2><p>先去<a href="https://cn.ubuntu.com/download" target="_blank" rel="noopener">Ubuntu中国站</a>下载最新长期支持版本：<a href="https://releases.ubuntu.com/20.04/ubuntu-20.04.3-live-server-amd64.iso" target="_blank" rel="noopener">Ubuntu Server 20.04.3 LTS</a>。</p>
<h2 id="2、启动安装程序"><a href="#2、启动安装程序" class="headerlink" title="2、启动安装程序"></a>2、启动安装程序</h2><p>将ios文件刻录成光盘或者制作成u盘镜像启动，设置电脑启动项，以Ubuntu安装程序启动电脑。</p>
<p>U盘可以使用<a href="https://rufus.ie/" target="_blank" rel="noopener">rufus</a>，很简单的制作U盘镜像</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/c1e67b27/19826068-1620ccfe8864ad43.png" alt></p>
<h2 id="3、选择语言"><a href="#3、选择语言" class="headerlink" title="3、选择语言"></a>3、选择语言</h2><p><img src="//gitee.com/guoke3915/zw/raw/master/p/c1e67b27/19826068-d237416f7eabbf86.png" alt></p>
<h2 id="4、选择键盘布局"><a href="#4、选择键盘布局" class="headerlink" title="4、选择键盘布局"></a>4、选择键盘布局</h2><p><img src="//gitee.com/guoke3915/zw/raw/master/p/c1e67b27/19826068-01ce2bf329240be9.png" alt></p>
<h2 id="5、配置网络"><a href="#5、配置网络" class="headerlink" title="5、配置网络"></a>5、配置网络</h2><p><img src="//gitee.com/guoke3915/zw/raw/master/p/c1e67b27/19826068-d389b9202aebe33f.png" alt></p>
<h2 id="6、设置代理"><a href="#6、设置代理" class="headerlink" title="6、设置代理"></a>6、设置代理</h2><p><img src="//gitee.com/guoke3915/zw/raw/master/p/c1e67b27/19826068-5e768570c52bf8ca.png" alt></p>
<h2 id="7、配置-ubuntu-归档镜像"><a href="#7、配置-ubuntu-归档镜像" class="headerlink" title="7、配置 ubuntu 归档镜像"></a>7、配置 ubuntu 归档镜像</h2><p><img src="//gitee.com/guoke3915/zw/raw/master/p/c1e67b27/19826068-7f8de6c558dde676.png" alt></p>
<h2 id="8、磁盘设置"><a href="#8、磁盘设置" class="headerlink" title="8、磁盘设置"></a>8、磁盘设置</h2><p>默认是<code>Use an entire disk</code>使用整个磁盘，也可以选择<code>Custom storgage layout</code>手动分区。</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/c1e67b27/19826068-1ffc6748ef19937a.png" alt></p>
<h2 id="9、配置分区"><a href="#9、配置分区" class="headerlink" title="9、配置分区"></a>9、配置分区</h2><p><img src="//gitee.com/guoke3915/zw/raw/master/p/c1e67b27/19826068-eb5be2bfc5acbf6a.png" alt></p>
<h2 id="10、设置用户秘密"><a href="#10、设置用户秘密" class="headerlink" title="10、设置用户秘密"></a>10、设置用户秘密</h2><p><img src="//gitee.com/guoke3915/zw/raw/master/p/c1e67b27/19826068-37bf58c8df267c9c.png" alt></p>
<h2 id="11、选择软件包"><a href="#11、选择软件包" class="headerlink" title="11、选择软件包"></a>11、选择软件包</h2><p><img src="//gitee.com/guoke3915/zw/raw/master/p/c1e67b27/19826068-bf7d0d4fe0462028.png" alt></p>
<h2 id="12、等待系统安装"><a href="#12、等待系统安装" class="headerlink" title="12、等待系统安装"></a>12、等待系统安装</h2><p><img src="//gitee.com/guoke3915/zw/raw/master/p/c1e67b27/19826068-d9686d387dd11b71.png" alt></p>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>2021年CentOS8停止维护</title>
    <url>/p/60a498fe.html</url>
    <content><![CDATA[<h2 id="2021年CentOS8停止维护转向CentOS的Stream分支对你有啥影响"><a href="#2021年CentOS8停止维护转向CentOS的Stream分支对你有啥影响" class="headerlink" title="2021年CentOS8停止维护转向CentOS的Stream分支对你有啥影响?"></a>2021年CentOS8停止维护转向CentOS的Stream分支对你有啥影响?</h2><p>事情是这样的，就在2020年12月8日，CentOS开发团队的一篇文章<a href="https://link.zhihu.com/?target=https%3A//blog.centos.org/2020/12/future-is-centos-stream/">future is centos stream</a>，让<code>CentOS Linux</code>发行版止步在了CentOS8版本，并且将在2021年12月31日停止维护（原本EOL时间是2029年5月31日的），替代它的是<code>CentOS Stream</code>滚动发行版。</p>
<p>这一消息<code>震惊了全世界CentOS使用者</code>，使用如此之广的开源操作系统就这么说没就没了？！？！</p>
<p>不相信也没有办法！事实如此。</p>
<h2 id="CentOS发行版与RHEL有何关系？"><a href="#CentOS发行版与RHEL有何关系？" class="headerlink" title="CentOS发行版与RHEL有何关系？"></a>CentOS发行版与RHEL有何关系？</h2><p>可以说 CentOS Linux 与 RHEL 算是兄弟关系。</p>
<p>CentOS（Community Enterprise Operating System）是Linux发行版之一，它是来自于Red Hat Enterprise Linux（RHEL）依照开放源代码规定发布的源代码所编译而成。由于出自同样的源代码，因此有些要求高度稳定性的服务器以CentOS替代商业版的Red Hat Enterprise Linux使用。</p>
<p>两者的不同，在于CentOS并不包含封闭源代码软件。CentOS 对上游代码的主要修改是为了移除不能自由使用的商标。</p>
<h2 id="Stream滚动版会替代CentOS稳定版有什么影响呢？"><a href="#Stream滚动版会替代CentOS稳定版有什么影响呢？" class="headerlink" title="Stream滚动版会替代CentOS稳定版有什么影响呢？"></a>Stream滚动版会替代CentOS稳定版有什么影响呢？</h2><p>我们先了解下Fedora、CentOS Stream、CentOS Linux和RHEL这几个版本的上下游关系：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/19826068-f8cbca80e6e3a230.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p>如果你的服务器上安装了CentOS系统，对你的影响是：</p>
<ol>
<li>不再有bug修复更新，不会修复导致主机不稳定的BUG，同一个问题会一直让你头疼（可能没有这样的问题）。</li>
<li>不再为你提供新版本的软件包更新，以后就靠自己动手了。</li>
<li>稳定性降低，Stream滚动版可以理解为RHEL上游开发分支版本，稳定性必然是不如RHEL。对于生产系统稳定性的重要性你可以自己衡量。</li>
<li>寻找新的稳定版操作系统版本，可能是未来的<code>Rocky Linux</code>、Ubuntu或者SUSE还是ColorOS之类的其他系统。</li>
</ol>
<p>如果你的服务器是不对接公网，而仅仅是内部系统，那么对你来说影响并不大，因为很多服务软件都是你自己使用源代码编译生成的。继续使用<code>CentOS 8</code>也是可以的。</p>
<p>如果你的服务器对接公网，这就有网络安全问题啦， 一旦操作系统存在安全类的BUG，可以被攻击，那就遭了，这时你使用<code>CentOS 8</code>心里也是没底了，总觉着这是颗定时炸弹一样。换掉它早晚是你的选择。</p>
<h2 id="为什么Stream滚动版会替代CentOS呢？"><a href="#为什么Stream滚动版会替代CentOS呢？" class="headerlink" title="为什么Stream滚动版会替代CentOS呢？"></a>为什么Stream滚动版会替代CentOS呢？</h2><p>引发这一切的博客原文如下：</p>
<pre><code>CentOS Project shifts focus to CentOS Stream
Tuesday , 8, December 2020 Rich Bowen Uncategorized 669 Comments
The future of the CentOS Project is CentOS Stream, and over the next year we’ll be shifting focus from CentOS Linux, the rebuild of Red Hat Enterprise Linux (RHEL), to CentOS Stream, which tracks just ahead of a current RHEL release. CentOS Linux 8, as a rebuild of RHEL 8, will end at the end of 2021\. CentOS Stream continues after that date, serving as the upstream (development) branch of Red Hat Enterprise Linux.

Meanwhile, we understand many of you are deeply invested in CentOS Linux 7, and we’ll continue to produce that version through the remainder of the RHEL 7 life cycle.

CentOS Stream will also be the centerpiece of a major shift in collaboration among the CentOS Special Interest Groups (SIGs). This ensures SIGs are developing and testing against what becomes the next version of RHEL. This also provides SIGs a clear single goal, rather than having to build and test for two releases. It gives the CentOS contributor community a great deal of influence in the future of RHEL. And it removes confusion around what “CentOS” means in the Linux distribution ecosystem.

When CentOS Linux 8 (the rebuild of RHEL8) ends, your best option will be to migrate to CentOS Stream 8, which is a small delta from CentOS Linux 8, and has regular updates like traditional CentOS Linux releases. If you are using CentOS Linux 8 in a production environment, and are concerned that CentOS Stream will not meet your needs, we encourage you to contact Red Hat about options.

We have an FAQ to help with your information and planning needs, as you figure out how this shift of project focus might affect you.</code></pre><p>这段文字的大概总结：</p>
<pre><code>2021年CentOS项目组重点关注CentOS Stream发行版，建议将CentOS8更新到CentOS Stream发行版，
如果你不想将Stream版本应用到生产系统，可以联系RHEL（使用商业版更稳定呗）。</code></pre><p>博文下面的评论几乎都是负面的愤怒情绪，从此再也没有免费的RHEL企业版Linux系统了。</p>
<p>本文转自 <a href="https://zhuanlan.zhihu.com/p/348239763" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/348239763</a></p>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Android中使用OAID</title>
    <url>/p/a69bb014.html</url>
    <content><![CDATA[<h2 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h2><p>因传统的移动终端设备标识如国际移动设备识别码（IMEI）等已被部分国家认定为用户隐私的一部分，并存在被篡改和冒用的风险，所以在Android 10及后续版本中非厂商系统应用将无法获取IMEI、MAC等设备信息。无法获取IMEI会在用户行为统计过程中对设备识别产生一定影响。近日移动安全联盟针对该问题联合国内手机厂商推出补充设备标准体系方案，选择OAID字段作为IMEI等的替代字段。OAID字段是由中国信通院联合华为、小米、OPPO、VIVO等厂商共同推出的设备识别字段，具有一定的权威性，可满足用户行为统计的使用场景。</p>
<p>移动安全联盟官网：  <a href="http://www.msa-alliance.cn/col.jsp?id=120" target="_blank" rel="noopener">移动安全联盟刚官网地址</a><br>安全联盟SDK、文档以及申请表格：  <a href="https://xianwanlibs.oss-cn-hangzhou.aliyuncs.com/msa-demo/oaid_sdk_1.0.29.zip" target="_blank" rel="noopener">安全联盟SDK1.0.29文档及SDK</a></p>
<h2 id="目前支持的机型"><a href="#目前支持的机型" class="headerlink" title="目前支持的机型"></a>目前支持的机型</h2><table>
<thead>
<tr>
<th>厂商名称</th>
<th>支持版本</th>
</tr>
</thead>
<tbody><tr>
<td>华为</td>
<td>HMS 2.6.2 及以上</td>
</tr>
<tr>
<td>小米</td>
<td>MIUI 10.2 及以上版本</td>
</tr>
<tr>
<td>vivo</td>
<td>Android 9 及以上版本</td>
</tr>
<tr>
<td>OPPO</td>
<td>colorOS 6 大部分覆盖，colorOS 7 及以上全覆盖</td>
</tr>
<tr>
<td>联想</td>
<td>ZUI 11.4 及以上版本</td>
</tr>
<tr>
<td>三星</td>
<td>Android 10 版本</td>
</tr>
<tr>
<td>魅族</td>
<td>Android 10 版本</td>
</tr>
<tr>
<td>努比亚</td>
<td>Android 10 版本</td>
</tr>
<tr>
<td>中兴</td>
<td>Android 10 版本</td>
</tr>
<tr>
<td>华硕</td>
<td>Android 10 版本</td>
</tr>
<tr>
<td>一加</td>
<td>Android 10 版本</td>
</tr>
<tr>
<td>黑鲨</td>
<td>Android 10 版本</td>
</tr>
<tr>
<td>摩托罗拉</td>
<td>Android 10 版本</td>
</tr>
<tr>
<td>Freeme OS</td>
<td>Android 10 版本</td>
</tr>
<tr>
<td>酷赛（铂睿智恒）</td>
<td>Android 10 版本</td>
</tr>
<tr>
<td>Realme</td>
<td>colorOS 6 大部分覆盖，colorOS 7 及以上全覆盖</td>
</tr>
<tr>
<td>荣耀</td>
<td>Android 10 版本</td>
</tr>
</tbody></table>
<h2 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h2><ol>
<li>接入准备——申请证书文件（将需要申请的app信息填写到example_batch.csv表格，然后发送到<a href="mailto:msa@caict.ac.cn">msa@caict.ac.cn</a>进行申请。注意每个包名对应一个签名，申请时需要将需要申请的全部包名填写到表格中。申请后安全联盟将会把所有申请的证书发送到申请时使用的邮箱）</li>
</ol>
<ul>
<li>注意： 关于example_batch.csv表格<br>表格中的会员账号：是指在安全联盟登录的账号 <a href="http://www.msa-alliance.cn/login.jsp?url=/col.jsp?id=120" target="_blank" rel="noopener">可点击进入安全联盟登录页面</a><br>表格中的邮箱：最好填写安全联盟登录账号绑定的邮箱</li>
</ul>
<ol start="2">
<li><p>把oaid_sdk_x.x.x.aar拷贝到项的libs目录，并设置依赖，其中x.x.x代 表版本号。最新的版本为1.0.29</p>
</li>
<li><p>将证书文件（应用包名.cert.pem)、 supplierconfig.json 文件拷贝到项目 assets 目录下，（只获取oaid信息则不需要修改json配置文件，只需原样放到assets目录下即可。如果想要使用VAID，可修改里边对应内容，特别是需要设置 appid 的部分，要去对应厂商的应用商店里注册自己的 app，来获取对应appid。）</p>
</li>
<li><p>设置依赖</p>
<pre><code>implementation files(‘libs/oaid_sdk_1.0.29.aar’)</code></pre></li>
<li><p>混淆设置</p>
</li>
</ol>
<pre><code>    # sdk
    -keep class com.bun.miitmdid.** { *; }
    # asus
    -keep class com.asus.msa.SupplementaryDID.** { *; }
    -keep class com.asus.msa.sdid.** { *; }
    # freeme
    -keep class com.android.creator.** { *; }
    -keep class com.android.msasdk.** { *; }
    # huawei
    -keep class com.huawei.hms.ads.identifier.** { *; }
    #-keep class com.uodis.opendevice.aidl.** { *; }
    # lenovo
    -keep class com.zui.deviceidservice.** { *; }
    -keep class com.zui.opendeviceidlibrary.** { *; }
    # meizu
    -keep class com.meizu.flyme.openidsdk.** { *; }
    # nubia
    -keep class com.bun.miitmdid.provider.nubia.NubiaIdentityImpl
    # oppo
    -keep class com.heytap.openid.** { *; }
    # samsung
    -keep class com.samsung.android.deviceidservice.** { *; }
    # vivo
    -keep class com.vivo.identifier.** { *; }
    # xiaomi
    -keep class com.bun.miitmdid.provider.xiaomi.IdentifierManager
    # zte
    -keep class com.bun.lib.** { *; }
    # coolpad
    -keep class com.coolpad.deviceidsupport.** { *; }
</code></pre><ol start="6">
<li><p>设置 gradle 编译选项，开发者可以根据自己对平台的选择进行合理配置</p>
<pre><code>ndk { abiFilters  &#39;armeabi-v7a&#39;,&#39;x86&#39;,&#39;arm64-v8a&#39;,&#39;x86_64&#39;,&#39;armeabi&#39; }</code></pre><p>注意：考虑到 sdk 兼容性，sdk 包默认集成了常用 abi 的 so，包括 armeabi-v7a,arm64-v8a, x84, x84_64 共四种。如果需要减小 SDK 体积，可以使用压缩工具打开 aar 文件，手动删除多余的架构。</p>
</li>
<li><p>添加 oaid管理文件<code>MiitHelper.java</code></p>
</li>
</ol>
<p>根据官网源文件<code>DemoHelper.java</code>修改而来，可以根据自己需求修改，这里是cocos工程，这里将文件<code>MiitHelper.java</code>放到<code>org.cocos2dx.javascript</code>目录中。</p>
<pre><code class="line-numbers language-java">package org.cocos2dx.javascript;

import android.content.Context;
import android.util.Log;

import com.bun.miitmdid.core.InfoCode;
import com.bun.miitmdid.core.MdidSdkHelper;
import com.bun.miitmdid.interfaces.IIdentifierListener;
import com.bun.miitmdid.interfaces.IdSupplier;
import com.bun.miitmdid.pojo.IdSupplierImpl;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

public class MiitHelper implements IIdentifierListener {
    public static final String TAG = &quot;MiitHelper&quot;;
    public static final int HELPER_VERSION_CODE = 20210928; // DemoHelper版本号
    private AppIdsUpdater appIdsUpdater;
    private boolean isCertInit = false;

    public final boolean isSDKLogOn = true;                           // 1）设置 是否开启sdk日志
    public static String ASSET_FILE_NAME_CERT = &quot;&quot;;                // 2）设置 asset证书文件名

    public static void Init(Context context, AppIdsUpdater listener){
        MiitHelper miitHelper = new MiitHelper();

        ASSET_FILE_NAME_CERT = context.getPackageName()+&quot;.cert.pem&quot;;
        Log.e(TAG,ASSET_FILE_NAME_CERT);

        System.loadLibrary(&quot;nllvm1632808251147706677&quot;);  // 加固版本在调用前必须载入SDK安全库
        if(MdidSdkHelper.SDK_VERSION_CODE != HELPER_VERSION_CODE){
            Log.w(TAG,&quot;SDK version not match.&quot;);
            throw new RuntimeException(&quot;SDK version not match.&quot;);
        }
        miitHelper.appIdsUpdater = listener;

        // 获取设备号
        miitHelper.getDeviceIds(context);
    }

    /**
     * 获取OAID
     * @param cxt
     */
    public void getDeviceIds(Context cxt){
        // TODO （4）初始化SDK证书
        if(!isCertInit){ // 证书只需初始化一次
            // 证书为PEM文件中的所有文本内容（包括首尾行、换行符）
            isCertInit = MdidSdkHelper.InitCert(cxt, loadPemFromAssetFile(cxt, ASSET_FILE_NAME_CERT));
            if(!isCertInit){
                Log.w(TAG, &quot;getDeviceIds: cert init failed&quot;);
            }
        }

        //（可选）设置InitSDK接口回调超时时间(仅适用于接口为异步)，默认值为5000ms.
        // 注：请在调用前设置一次后就不再更改，否则可能导致回调丢失、重复等问题
        MdidSdkHelper.setGlobalTimeout(5000);

        // TODO （5）调用SDK获取ID
        int code = MdidSdkHelper.InitSdk(cxt, isSDKLogOn, this);

        // TODO （6）根据SDK返回的code进行不同处理
        IdSupplierImpl unsupportedIdSupplier = new IdSupplierImpl();
        if(code == InfoCode.INIT_ERROR_CERT_ERROR){                         // 证书未初始化或证书无效，SDK内部不会回调onSupport
            // APP自定义逻辑
            Log.w(TAG,&quot;cert not init or check not pass&quot;);
            onSupport(unsupportedIdSupplier);
        }else if(code == InfoCode.INIT_ERROR_DEVICE_NOSUPPORT){             // 不支持的设备, SDK内部不会回调onSupport
            // APP自定义逻辑
            Log.w(TAG,&quot;device not supported&quot;);
            onSupport(unsupportedIdSupplier);
        }else if( code == InfoCode.INIT_ERROR_LOAD_CONFIGFILE){            // 加载配置文件出错, SDK内部不会回调onSupport
            // APP自定义逻辑
            Log.w(TAG,&quot;failed to load config file&quot;);
            onSupport(unsupportedIdSupplier);
        }else if(code == InfoCode.INIT_ERROR_MANUFACTURER_NOSUPPORT){      // 不支持的设备厂商, SDK内部不会回调onSupport
            // APP自定义逻辑
            Log.w(TAG,&quot;manufacturer not supported&quot;);
            onSupport(unsupportedIdSupplier);
        }else if(code == InfoCode.INIT_ERROR_SDK_CALL_ERROR){             // sdk调用出错, SSDK内部不会回调onSupport
            // APP自定义逻辑
            Log.w(TAG,&quot;sdk call error&quot;);
            onSupport(unsupportedIdSupplier);
        } else if(code == InfoCode.INIT_INFO_RESULT_DELAY) {             // 获取接口是异步的，SDK内部会回调onSupport
            Log.i(TAG, &quot;result delay (async)&quot;);
        }else if(code == InfoCode.INIT_INFO_RESULT_OK){                  // 获取接口是同步的，SDK内部会回调onSupport
            Log.i(TAG, &quot;result ok (sync)&quot;);
        }else {
            // sdk版本高于DemoHelper代码版本可能出现的情况，无法确定是否调用onSupport
            // 不影响成功的OAID获取
            Log.w(TAG,&quot;getDeviceIds: unknown code: &quot; + code);
        }
    }

    /**
     * APP自定义的getDeviceIds(Context cxt)的接口回调
     * @param supplier
     */
    @Override
    public void onSupport(IdSupplier supplier) {
        if(supplier==null) {
            Log.w(TAG, &quot;onSupport: supplier is null&quot;);
            return;
        }
        if(appIdsUpdater ==null) {
            Log.w(TAG, &quot;onSupport: callbackListener is null&quot;);
            return;
        }
        // 获取Id信息
        // 注：IdSupplier中的内容为本次调用MdidSdkHelper.InitSdk()的结果，不会实时更新。 如需更新，需调用MdidSdkHelper.InitSdk()
        boolean isSupported = supplier.isSupported();
        boolean isLimited  = supplier.isLimited();
        String oaid=supplier.getOAID();
        String vaid=supplier.getVAID();
        String aaid=supplier.getAAID();

        //TODO (7) 自定义后续流程，以下显示到UI的示例
        String idsText= &quot;support: &quot; + (isSupported ? &quot;true&quot; : &quot;false&quot;) +
                &quot;\nlimit: &quot; + (isLimited ? &quot;true&quot; : &quot;false&quot;) +
                &quot;\nOAID: &quot; + oaid +
                &quot;\nVAID: &quot; + vaid +
                &quot;\nAAID: &quot; + aaid + &quot;\n&quot;;
        Log.d(TAG, &quot;onSupport: ids: \n&quot; + idsText);
        appIdsUpdater.onIdsValid(oaid);
    }

    public interface AppIdsUpdater {
        void onIdsValid(String oaid);
    }

    /**
     * 从asset文件读取证书内容
     * @param context
     * @param assetFileName
     * @return 证书字符串
     */
    public static String loadPemFromAssetFile(Context context, String assetFileName){
        try {
            InputStream is = context.getAssets().open(assetFileName);
            BufferedReader in = new BufferedReader(new InputStreamReader(is));
            StringBuilder builder = new StringBuilder();
            String line;
            while ((line = in.readLine()) != null){
                builder.append(line);
                builder.append(&#39;\n&#39;);
            }
            return builder.toString();
        } catch (IOException e) {
            Log.e(TAG, &quot;loadPemFromAssetFile failed&quot;);
            return &quot;&quot;;
        }
    }
}</code></pre>
<ol start="8">
<li><p>调用</p>
<p>在<code>Activity</code>的<code>onCreate</code>函数中添加初始化。这是异步调用，使用需要注意一下。</p>
</li>
</ol>
<pre><code class="line-numbers language-java">public class AppActivity extends Cocos2dxActivity implements ActivityCompat.OnRequestPermissionsResultCallback {
    public static String oaid = &quot;&quot;;

    ...

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        ...

        MiitHelper.Init(this, new MiitHelper.AppIdsUpdater(){
            @Override
            public void onIdsValid(String oaid){
                AppActivity.oaid = oaid;
            }
        });
    }

    ....
}</code></pre>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Android中使用GAID</title>
    <url>/p/632f98fb.html</url>
    <content><![CDATA[<p>在Android系统中，也有一个广告ID类似于iOS系统中的IDFA，这个就是基于Google Play Services的GAID了。但是国产手机的Andoird系统都是阉割掉了Google Play Services，所以是获取不到GAID的。</p>
<h2 id="设置依赖"><a href="#设置依赖" class="headerlink" title="设置依赖"></a>设置依赖</h2><p>在gradle中添加google sdk组件</p>
<pre><code> implementation group: &#39;com.google.android.gms&#39;, name: &#39;play-services-ads&#39;, version: &#39;15.0.0&#39;</code></pre><h2 id="获取代码"><a href="#获取代码" class="headerlink" title="获取代码"></a>获取代码</h2><pre><code class="line-numbers language-java"> //获取 GAID
public String getGAID(){
        String gaid= &quot;&quot;;
        AdvertisingIdClient.Info adInfo = null ;
        try {
            adInfo = AdvertisingIdClient.getAdvertisingIdInfo(context);
        } catch (IOException e) {
            // Unrecoverable error connecting to Google Play services (e.g.,
            // the old version of the service doesn&#39;t support getting AdvertisingId).
            Log.e(&quot;getGAID&quot;, &quot;IOException&quot;);
        } catch (GooglePlayServicesNotAvailableException e) {
            // Google Play services is not available entirely.
            Log.e(&quot;getGAID&quot;, &quot;GooglePlayServicesNotAvailableException&quot;);
        } catch (Exception e) {
            Log.e(&quot;getGAID&quot;, &quot;Exception:&quot;+e.toString());
            // Encountered a recoverable error connecting to Google Play services.
        }
        if (adInfo!= null){
            gaid= adInfo.getId();
            Log.w(&quot;getGAID&quot;, &quot;gaid:&quot;+gaid);
        }
        return gaid;
    }</code></pre>
<p>注意，此方法需要在子线程执行，不然会报错。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>go中strings包</title>
    <url>/p/774f7474.html</url>
    <content><![CDATA[<h2 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h2><p><code>func Compare(a, b string) int</code><br>按两个字符串顺序比较两个字符ASCII码值大小比较。如果 a==b，则结果为 0，如果 a &lt; b，则结果为 -1，如果 a &gt; b，则结果为 +1。</p>
<pre><code class="line-numbers language-go">// 输出　-1
fmt.Println(strings.Compare(&quot;guoke&quot;, &quot;hello&quot;))</code></pre>
<h2 id="字符串包含关系"><a href="#字符串包含关系" class="headerlink" title="字符串包含关系"></a>字符串包含关系</h2><p><code>func Contains(s, substr string) bool</code><br>判断s串中是否包含substr串。</p>
<pre><code class="line-numbers language-go">// 输出　true
fmt.Println(strings.Contains(&quot;guoke&quot;, &quot;ke&quot;))</code></pre>
<h2 id="字符串查找"><a href="#字符串查找" class="headerlink" title="字符串查找"></a>字符串查找</h2><p><code>func Index(s, str string) int</code><br>判断str字符串在s字符串中出现的第一个索引位置，-1 表示字符串 s 不包含字符串 str</p>
<pre><code class="line-numbers language-go">// 输出　2
fmt.Println(strings.Index(&quot;guoke&quot;, &quot;o&quot;))</code></pre>
<p><code>func LastIndex(s, str string) int</code><br>LastIndex返回子字符串str在s中最后一次出现的索引位置。</p>
<pre><code class="line-numbers language-go">// 输出　2
fmt.Println(strings.LastIndex(&quot;guoke&quot;, &quot;o&quot;))</code></pre>
<h2 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h2><p><code>func Replace(s, old, new string, n int) string</code><br>替换返回字符串 s 的前 n 个副本,由新替换旧的非重叠实例。如果 old 为空，则匹配字符串的开头</p>
<pre><code class="line-numbers language-go">// 输出　gaake
fmt.Println(strings.Replace(&quot;guoke&quot;, &quot;uo&quot;, &quot;aa&quot;, 1))</code></pre>
<h2 id="字符串重复"><a href="#字符串重复" class="headerlink" title="字符串重复"></a>字符串重复</h2><p><code>func Repeat(s string, count int) string</code><br>重复s字符串count次, 最后返回新生成的重复的字符串</p>
<pre><code class="line-numbers language-go">// 输出　guokeguoke
fmt.Println(strings.Repeat(&quot;guoke&quot;, 2))</code></pre>
<h2 id="剔除字符串开头和结尾的字符"><a href="#剔除字符串开头和结尾的字符" class="headerlink" title="剔除字符串开头和结尾的字符"></a>剔除字符串开头和结尾的字符</h2><p><code>func TrimSpace(s string)</code><br>剔除字符串开头和结尾的空白符号</p>
<pre><code class="line-numbers language-go">// 输出　guoke
fmt.Println(strings.TrimSpace(&quot; guoke&quot;))</code></pre>
<p><code>func Trim(s string, cutset string) string</code><br>替换指定的字符</p>
<pre><code class="line-numbers language-go">// 输出　guok
fmt.Println(strings.Trim(&quot;guoke&quot;, &quot;e&quot;))</code></pre>
<p><code>func TrimLeft(s string, cutset string)</code><br><code>func TrimRight(s string, cutset string)</code><br>剔除开头或者结尾的字符串，该方法只在开头或者结尾剔除指定的字符</p>
<h2 id="字符串大小写转换"><a href="#字符串大小写转换" class="headerlink" title="字符串大小写转换"></a>字符串大小写转换</h2><p><code>func ToLower(s string) string</code><br>所有字母转换为小写</p>
<p><code>func ToUpper(s string) string</code><br>所有字母转换为大写</p>
<h2 id="分割字符串"><a href="#分割字符串" class="headerlink" title="分割字符串"></a>分割字符串</h2><p><code>func Split(s, sep string) []string</code><br>把字符串按照sep进行分割, 返回slice</p>
<pre><code class="line-numbers language-go">// 输出　[gu kegu ke]
fmt.Println(strings.Split(&quot;guokeguoke&quot;, &quot;o&quot;))</code></pre>
<h2 id="拼接slice到字符串"><a href="#拼接slice到字符串" class="headerlink" title="拼接slice到字符串"></a>拼接slice到字符串</h2><p><code>func Join(elems []string, sep string) string</code><br>Join 连接其第一个参数的元素以创建单个字符串。 分隔符字符串 sep 放置在结果字符串中的元素之间。</p>
<pre><code class="line-numbers language-go">// 输出　aaobb
elem := []string{&quot;aa&quot;, &quot;bb&quot;}
fmt.Println(strings.Join(elem, &quot;o&quot;))</code></pre>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>go处理中文字符串</title>
    <url>/p/4638a5a6.html</url>
    <content><![CDATA[<p>先来看一个简单的例子</p>
<pre><code class="line-numbers language-go">func main() {
    str := &quot;你好guoke&quot;
    fmt.Println(&quot;字符串长度为:&quot;, len(str))
    for i:=0; i&lt;len(str); i++{
        fmt.Println(&quot;第&quot;,i+1,&quot;个字符为:&quot;,str[i:i+1])
    }
}</code></pre>
<p>输出的结果为：</p>
<pre><code class="line-numbers language-txt">字符串长度为: 11
第 1 个字符为: �
第 2 个字符为: �
第 3 个字符为: �
第 4 个字符为: �
第 5 个字符为: �
第 6 个字符为: �
第 7 个字符为: g
第 8 个字符为: u
第 9 个字符为: o
第 10 个字符为: k
第 11 个字符为: e</code></pre>
<p>从上面例子中可以看出，string是以byte数组形式存储的,而一个utf8格式的中文占3个byte.要得到正确的中文字符的长度和分割,可以使用<code>rune</code>数组来拆分. rune类型是int32的别名,一个rune可以表示一个中文字符,go也提供了rune数组自动拆分string中文字符的方法<code>rt := []rune(str)</code>.</p>
<p>我们再把上面例子修改一下：</p>
<pre><code class="line-numbers language-go">func main() {
    str := &quot;你好guoke&quot;
    rt := []rune(str)
    fmt.Println(&quot;字符串长度为:&quot;, len(rt))
    for i:=0; i&lt;len(rt); i++{
        fmt.Println(&quot;第&quot;,i+1,&quot;个字符为:&quot;,string(rt[i]))
    }
}</code></pre>
<p>得到的输出结果为：</p>
<pre><code class="line-numbers language-txt">字符串长度为: 7
第 1 个字符为: 你
第 2 个字符为: 好
第 3 个字符为: g
第 4 个字符为: u
第 5 个字符为: o
第 6 个字符为: k
第 7 个字符为: e</code></pre>
<p>这样就能比较好的处理中文了,而且不会出现乱码的情况.</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Protocolbuf不同语言生成</title>
    <url>/p/a162a42a.html</url>
    <content><![CDATA[<h1 id="protoc"><a href="#protoc" class="headerlink" title="protoc"></a>protoc</h1><p><a href="https://github.com/protocolbuffers/protobuf/releases/tag/v3.18.0" target="_blank" rel="noopener">Protocol Buffers</a>可以使用Google提供的protoc来生成不同语言的版本.</p>
<pre><code class="line-numbers language-bash">protoc -I=$SRC_DIR --type_out=$DST_DIR $SRC_DIR/file.proto</code></pre>
<ul>
<li>$SRC_DIR: proto源文件目录</li>
<li>type_out:支持的输出语言</li>
<li>$DST_DIR: 输出目录</li>
<li>file.proto: proto文件名</li>
</ul>
<p>type_out支持的输出类型有:<br>| 类型       | 语言 | 输出文件             |<br>| ———- | —- | ——————– |<br>| cpp_out    | C++  | file.pb.cc,file.pb.h |<br>| csharp_out | C#   | file.cs              |<br>| go_out     | Go   | file.pb.go           |<br>| java_out   | Java | file..java           |</p>
<h1 id="js-ts"><a href="#js-ts" class="headerlink" title="js/ts"></a>js/ts</h1><p>对于js/ts的生成,可以使用<code>protobufjs</code>插件来完成</p>
<pre><code class="line-numbers language-bash">npm install -g protobufjs</code></pre>
<pre><code class="line-numbers language-bash"># 生成js
pbjs -t static-module -w commonjs -o  file.js file.proto

# 生成ts
pbts -o file.ts file.js</code></pre>
<h1 id="脚本实现多proto生成"><a href="#脚本实现多proto生成" class="headerlink" title="脚本实现多proto生成"></a>脚本实现多proto生成</h1><p>自己用python 3.7写了一个proto生成的脚本.<a href="https://github.com/zngw/protocol" target="_blank" rel="noopener">https://github.com/zngw/protocol</a></p>
<p>将所有要生成proto源文件放在<code>proto_raw</code>目录中,可以是多个文件</p>
<pre><code class="line-numbers language-proto">//登录请求
message GameLoginReq {
    string account = 1;        // 登录帐号
    string password = 2;    // 登录密码
}

//登录返回
message GameLoginResp {
    int32 result = 1;    // 返回结果.
}</code></pre>
<p>然后使用不同的to_xx.py生成不同的语言.生成的文件在out目录中<br><img src="//gitee.com/guoke3915/zw/raw/master/p/a162a42a/19826068-d98677d445c4e601.png" alt></p>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Protobuf3语言指南（转）</title>
    <url>/p/387686d2.html</url>
    <content><![CDATA[<blockquote>
<p>英文原文：<br><a href="https://developers.google.com/protocol-buffers/docs/proto3?hl=zh-cn#generating" target="_blank" rel="noopener">Language Guide (proto3)</a><br>中文出处：<br><a href="http://www.open-open.com/home/space.php?uid=37924&do=blog&id=5873" target="_blank" rel="noopener">Protobuf语言指南</a><br><a href="http://colobu.com/2015/01/07/Protobuf-language-guide/" target="_blank" rel="noopener">[译]Protobuf 语法指南</a><br>中文出处是proto2的译文，proto3的英文出现后在原来基础上增改了，水平有限，还请指正</p>
</blockquote>
<p>这个指南描述了如何使用Protocol buffer 语言去描述你的protocol buffer 数据， 包括 .proto文件符号和如何从.proto文件生成类。包含了proto2版本的protocol buffer语言：对于老版本的proto3 符号，请见<a href="https://developers.google.com/protocol-buffers/docs/proto?hl=zh-cn" target="_blank" rel="noopener">Proto2 Language Guide</a>（以及<a href="http://colobu.com/2015/01/07/Protobuf-language-guide/" target="_blank" rel="noopener">中文译本</a>，抄了很多这里的感谢下老版本的翻译者）</p>
<p>本文是一个参考指南——如果要查看如何使用本文中描述的多个特性的循序渐进的例子，请在<a href="https://developers.google.com/protocol-buffers/docs/tutorials?hl=zh-cn" target="_blank" rel="noopener">教程</a>中查找需要的语言的教程。</p>
<h1 id="定义一个消息类型"><a href="#定义一个消息类型" class="headerlink" title="定义一个消息类型"></a>定义一个消息类型</h1><p>先来看一个非常简单的例子。假设你想定义一个“搜索请求”的消息格式，每一个请求含有一个查询字符串、你感兴趣的查询结果所在的页数，以及每一页多少条查询结果。可以采用如下的方式来定义消息类型的.proto文件了：</p>
<pre><code>syntax = &quot;proto3&quot;;

message SearchRequest {
  string query = 1;
  int32 page_number = 2;
  int32 result_per_page = 3;
}1234567</code></pre><ul>
<li>文件的第一行指定了你正在使用proto3语法：如果你没有指定这个，编译器会使用proto2。这个指定语法行必须是文件的非空非注释的第一个行。</li>
<li>SearchRequest消息格式有3个字段，在消息中承载的数据分别对应于每一个字段。其中每个字段都有一个名字和一种类型。</li>
</ul>
<h2 id="指定字段类型"><a href="#指定字段类型" class="headerlink" title="指定字段类型"></a>指定字段类型</h2><p>在上面的例子中，所有字段都是标量类型：两个整型（page_number和result_per_page），一个string类型（query）。当然，你也可以为字段指定其他的合成类型，包括枚举（enumerations）或其他消息类型。</p>
<h2 id="分配标识号"><a href="#分配标识号" class="headerlink" title="分配标识号"></a>分配标识号</h2><p>正如你所见，在消息定义中，每个字段都有唯一的一个数字标识符。这些标识符是用来在消息的二进制格式中识别各个字段的，一旦开始使用就不能够再改变。注：[1,15]之内的标识号在编码的时候会占用一个字节。[16,2047]之内的标识号则占用2个字节。所以应该为那些频繁出现的消息元素保留 [1,15]之内的标识号。切记：要为将来有可能添加的、频繁出现的标识号预留一些标识号。</p>
<p>最小的标识号可以从1开始，最大到2^29 - 1, or 536,870,911。不可以使用其中的[19000－19999]（ (从FieldDescriptor::kFirstReservedNumber 到 FieldDescriptor::kLastReservedNumber)）的标识号， Protobuf协议实现中对这些进行了预留。如果非要在.proto文件中使用这些预留标识号，编译时就会报警。同样你也不能使用早期<a href="https://developers.google.com/protocol-buffers/docs/proto3?hl=zh-cn#reserved" target="_blank" rel="noopener">保留</a>的标识号。</p>
<h2 id="指定字段规则"><a href="#指定字段规则" class="headerlink" title="指定字段规则"></a>指定字段规则</h2><p>所指定的消息字段修饰符必须是如下之一：</p>
<ul>
<li><p>singular：一个格式良好的消息应该有0个或者1个这种字段（但是不能超过1个）。</p>
</li>
<li><p>repeated：在一个格式良好的消息中，这种字段可以重复任意多次（包括0次）。重复的值的顺序会被保留。</p>
<p>在proto3中，repeated的标量域默认情况虾使用packed。</p>
<p>你可以了解更多的pakced属性在<a href="https://developers.google.com/protocol-buffers/docs/encoding?hl=zh-cn#packed" target="_blank" rel="noopener">Protocol Buffer 编码</a></p>
</li>
</ul>
<h2 id="添加更多消息类型"><a href="#添加更多消息类型" class="headerlink" title="添加更多消息类型"></a>添加更多消息类型</h2><p>在一个.proto文件中可以定义多个消息类型。在定义多个相关的消息的时候，这一点特别有用——例如，如果想定义与SearchResponse消息类型对应的回复消息格式的话，你可以将它添加到相同的.proto文件中，如：</p>
<pre><code>message SearchRequest {
  string query = 1;
  int32 page_number = 2;
  int32 result_per_page = 3;
}

message SearchResponse {
 ...
}123456789</code></pre><h2 id="添加注释"><a href="#添加注释" class="headerlink" title="添加注释"></a>添加注释</h2><p>向.proto文件添加注释，可以使用C/C++/java风格的双斜杠（//） 语法格式，如：</p>
<pre><code>message SearchRequest {
  string query = 1;
  int32 page_number = 2;  // Which page number do we want?
  int32 result_per_page = 3;  // Number of results to return per page.
}12345</code></pre><h2 id="保留标识符（Reserved）"><a href="#保留标识符（Reserved）" class="headerlink" title="保留标识符（Reserved）"></a>保留标识符（Reserved）</h2><p>如果你通过删除或者注释所有域，以后的用户可以重用标识号当你重新更新类型的时候。如果你使用旧版本加载相同的.proto文件这会导致严重的问题，包括数据损坏、隐私错误等等。现在有一种确保不会发生这种情况的方法就是指定保留标识符（and/or names, which can also cause issues for JSON serialization不明白什么意思），protocol buffer的编译器会警告未来尝试使用这些域标识符的用户。</p>
<pre><code>message Foo {
  reserved 2, 15, 9 to 11;
  reserved &quot;foo&quot;, &quot;bar&quot;;
}1234</code></pre><p>注：不要在同一行reserved声明中同时声明域名字和标识号</p>
<h2 id="从-proto文件生成了什么？"><a href="#从-proto文件生成了什么？" class="headerlink" title="从.proto文件生成了什么？"></a>从.proto文件生成了什么？</h2><p>当用protocol buffer编译器来运行.proto文件时，编译器将生成所选择语言的代码，这些代码可以操作在.proto文件中定义的消息类型，包括获取、设置字段值，将消息序列化到一个输出流中，以及从一个输入流中解析消息。</p>
<ul>
<li>对C++来说，编译器会为每个.proto文件生成一个.h文件和一个.cc文件，.proto文件中的每一个消息有一个对应的类。</li>
<li>对Java来说，编译器为每一个消息类型生成了一个.java文件，以及一个特殊的Builder类（该类是用来创建消息类接口的）。</li>
<li>对Python来说，有点不太一样——Python编译器为.proto文件中的每个消息类型生成一个含有静态描述符的模块，，该模块与一个元类（metaclass）在运行时（runtime）被用来创建所需的Python数据访问类。</li>
<li>对go来说，编译器会位每个消息类型生成了一个.pd.go文件。</li>
<li>对于Ruby来说，编译器会为每个消息类型生成了一个.rb文件。</li>
<li>javaNano来说，编译器输出类似域java但是没有Builder类</li>
<li>对于Objective-C来说，编译器会为每个消息类型生成了一个pbobjc.h文件和pbobjcm文件，.proto文件中的每一个消息有一个对应的类。</li>
<li>对于C#来说，编译器会为每个消息类型生成了一个.cs文件，.proto文件中的每一个消息有一个对应的类。</li>
</ul>
<p>你可以从如下的文档链接中获取每种语言更多API(proto3版本的内容很快就公布)。<a href="https://developers.google.com/protocol-buffers/docs/reference/overview?hl=zh-cn" target="_blank" rel="noopener">API Reference</a></p>
<h1 id="标量数值类型"><a href="#标量数值类型" class="headerlink" title="标量数值类型"></a>标量数值类型</h1><p>一个标量消息字段可以含有一个如下的类型——该表格展示了定义于.proto文件中的类型，以及与之对应的、在自动生成的访问类中定义的类型：</p>
<table>
<thead>
<tr>
<th>.proto Type</th>
<th>Notes</th>
<th>C++ Type</th>
<th>Java Type</th>
<th>Python Type[2]</th>
<th>Go Type</th>
<th>Ruby Type</th>
<th>C# Type</th>
<th>PHP Type</th>
</tr>
</thead>
<tbody><tr>
<td>double</td>
<td></td>
<td>double</td>
<td>double</td>
<td>float</td>
<td>float64</td>
<td>Float</td>
<td>double</td>
<td>float</td>
</tr>
<tr>
<td>float</td>
<td></td>
<td>float</td>
<td>float</td>
<td>float</td>
<td>float32</td>
<td>Float</td>
<td>float</td>
<td>float</td>
</tr>
<tr>
<td>int32</td>
<td>使用变长编码，对于负值的效率很低，如果你的域有可能有负值，请使用sint64替代</td>
<td>int32</td>
<td>int</td>
<td>int</td>
<td>int32</td>
<td>Fixnum 或者 Bignum（根据需要）</td>
<td>int</td>
<td>integer</td>
</tr>
<tr>
<td>uint32</td>
<td>使用变长编码</td>
<td>uint32</td>
<td>int</td>
<td>int/long</td>
<td>uint32</td>
<td>Fixnum 或者 Bignum（根据需要）</td>
<td>uint</td>
<td>integer</td>
</tr>
<tr>
<td>uint64</td>
<td>使用变长编码</td>
<td>uint64</td>
<td>long</td>
<td>int/long</td>
<td>uint64</td>
<td>Bignum</td>
<td>ulong</td>
<td>integer/string</td>
</tr>
<tr>
<td>sint32</td>
<td>使用变长编码，这些编码在负值时比int32高效的多</td>
<td>int32</td>
<td>int</td>
<td>int</td>
<td>int32</td>
<td>Fixnum 或者 Bignum（根据需要）</td>
<td>int</td>
<td>integer</td>
</tr>
<tr>
<td>sint64</td>
<td>使用变长编码，有符号的整型值。编码时比通常的int64高效。</td>
<td>int64</td>
<td>long</td>
<td>int/long</td>
<td>int64</td>
<td>Bignum</td>
<td>long</td>
<td>integer/string</td>
</tr>
<tr>
<td>fixed32</td>
<td>总是4个字节，如果数值总是比总是比228大的话，这个类型会比uint32高效。</td>
<td>uint32</td>
<td>int</td>
<td>int</td>
<td>uint32</td>
<td>Fixnum 或者 Bignum（根据需要）</td>
<td>uint</td>
<td>integer</td>
</tr>
<tr>
<td>fixed64</td>
<td>总是8个字节，如果数值总是比总是比256大的话，这个类型会比uint64高效。</td>
<td>uint64</td>
<td>long</td>
<td>int/long</td>
<td>uint64</td>
<td>Bignum</td>
<td>ulong</td>
<td>integer/string</td>
</tr>
<tr>
<td>sfixed32</td>
<td>总是4个字节</td>
<td>int32</td>
<td>int</td>
<td>int</td>
<td>int32</td>
<td>Fixnum 或者 Bignum（根据需要）</td>
<td>int</td>
<td>integer</td>
</tr>
<tr>
<td>sfixed64</td>
<td>总是8个字节</td>
<td>int64</td>
<td>long</td>
<td>int/long</td>
<td>int64</td>
<td>Bignum</td>
<td>long</td>
<td>integer/string</td>
</tr>
<tr>
<td>bool</td>
<td></td>
<td>bool</td>
<td>boolean</td>
<td>bool</td>
<td>bool</td>
<td>TrueClass/FalseClass</td>
<td>bool</td>
<td>boolean</td>
</tr>
<tr>
<td>string</td>
<td>一个字符串必须是UTF-8编码或者7-bit ASCII编码的文本。</td>
<td>string</td>
<td>String</td>
<td>str/unicode</td>
<td>string</td>
<td>String (UTF-8)</td>
<td>string</td>
<td>string</td>
</tr>
<tr>
<td>bytes</td>
<td>可能包含任意顺序的字节数据。</td>
<td>string</td>
<td>ByteString</td>
<td>str</td>
<td>[]byte</td>
<td>String (ASCII-8BIT)</td>
<td>ByteString</td>
<td>string</td>
</tr>
</tbody></table>
<p>你可以在文章<a href="https://developers.google.com/protocol-buffers/docs/encoding?hl=zh-cn" target="_blank" rel="noopener">Protocol Buffer 编码</a>中，找到更多“序列化消息时各种类型如何编码”的信息。</p>
<ol>
<li>在java中，无符号32位和64位整型被表示成他们的整型对应形似，最高位被储存在标志位中。</li>
<li>对于所有的情况，设定值会执行类型检查以确保此值是有效。</li>
<li>64位或者无符号32位整型在解码时被表示成为ilong，但是在设置时可以使用int型值设定，在所有的情况下，值必须符合其设置其类型的要求。</li>
<li>python中string被表示成在解码时表示成unicode。但是一个ASCIIstring可以被表示成str类型。</li>
<li>Integer在64位的机器上使用，string在32位机器上使用</li>
</ol>
<h1 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h1><p>当一个消息被解析的时候，如果被编码的信息不包含一个特定的singular元素，被解析的对象锁对应的域被设置位一个默认值，对于不同类型指定如下：</p>
<ul>
<li><p>对于strings，默认是一个空string</p>
</li>
<li><p>对于bytes，默认是一个空的bytes</p>
</li>
<li><p>对于bools，默认是false</p>
</li>
<li><p>对于数值类型，默认是0</p>
</li>
<li><p>对于枚举，默认是第一个定义的枚举值，必须为0;</p>
</li>
<li><p>对于消息类型（message），域没有被设置，确切的消息是根据语言确定的，详见<a href="https://developers.google.com/protocol-buffers/docs/reference/overview?hl=zh-cn" target="_blank" rel="noopener">generated code guide</a></p>
<p>对于可重复域的默认值是空（通常情况下是对应语言中空列表）。</p>
<p>注：对于标量消息域，一旦消息被解析，就无法判断域释放被设置为默认值（例如，例如boolean值是否被设置为false）还是根本没有被设置。你应该在定义你的消息类型时非常注意。例如，比如你不应该定义boolean的默认值false作为任何行为的触发方式。也应该注意如果一个标量消息域被设置为标志位，这个值不应该被序列化传输。</p>
<p>查看<a href="https://developers.google.com/protocol-buffers/docs/reference/overview?hl=zh-cn" target="_blank" rel="noopener">generated code guide</a>选择你的语言的默认值的工作细节。</p>
</li>
</ul>
<h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><p>当需要定义一个消息类型的时候，可能想为一个字段指定某“预定义值序列”中的一个值。例如，假设要为每一个SearchRequest消息添加一个 corpus字段，而corpus的值可能是UNIVERSAL，WEB，IMAGES，LOCAL，NEWS，PRODUCTS或VIDEO中的一个。 其实可以很容易地实现这一点：通过向消息定义中添加一个枚举（enum）并且为每个可能的值定义一个常量就可以了。</p>
<p>在下面的例子中，在消息格式中添加了一个叫做Corpus的枚举类型——它含有所有可能的值 ——以及一个类型为Corpus的字段：</p>
<pre><code>message SearchRequest {
  string query = 1;
  int32 page_number = 2;
  int32 result_per_page = 3;
  enum Corpus {
    UNIVERSAL = 0;
    WEB = 1;
    IMAGES = 2;
    LOCAL = 3;
    NEWS = 4;
    PRODUCTS = 5;
    VIDEO = 6;
  }
  Corpus corpus = 4;
}123456789101112131415</code></pre><p>如你所见，Corpus枚举的第一个常量映射为0：每个枚举类型必须将其第一个类型映射为0，这是因为：</p>
<ul>
<li><p>必须有有一个0值，我们可以用这个0值作为默认值。</p>
</li>
<li><p>这个零值必须为第一个元素，为了兼容proto2语义，枚举类的第一个值总是默认值。</p>
<p>你可以通过将不同的枚举常量指定位相同的值。如果这样做你需要将allow_alias设定位true，否则编译器会在别名的地方产生一个错误信息。</p>
</li>
</ul>
<pre><code>enum EnumAllowingAlias {
  option allow_alias = true;
  UNKNOWN = 0;
  STARTED = 1;
  RUNNING = 1;
}
enum EnumNotAllowingAlias {
  UNKNOWN = 0;
  STARTED = 1;
  // RUNNING = 1;  // Uncommenting this line will cause a compile error inside Google and a warning message outside.
}1234567891011</code></pre><p>枚举常量必须在32位整型值的范围内。因为enum值是使用可变编码方式的，对负数不够高效，因此不推荐在enum中使用负数。如上例所示，可以在 一个消息定义的内部或外部定义枚举——这些枚举可以在.proto文件中的任何消息定义里重用。当然也可以在一个消息中声明一个枚举类型，而在另一个不同 的消息中使用它——采用MessageType.EnumType的语法格式。</p>
<p>当对一个使用了枚举的.proto文件运行protocol buffer编译器的时候，生成的代码中将有一个对应的enum（对Java或C++来说），或者一个特殊的EnumDescriptor类（对 Python来说），它被用来在运行时生成的类中创建一系列的整型值符号常量（symbolic constants）。</p>
<p>在反序列化的过程中，无法识别的枚举值会被保存在消息中，虽然这种表示方式需要依据所使用语言而定。在那些支持开放枚举类型超出指定范围之外的语言中（例如C++和Go），为识别的值会被表示成所支持的整型。在使用封闭枚举类型的语言中（Java），使用枚举中的一个类型来表示未识别的值，并且可以使用所支持整型来访问。在其他情况下，如果解析的消息被序列号，未识别的值将保持原样。</p>
<p>关于如何在你的应用程序的消息中使用枚举的更多信息，请查看所选择的语言<a href="http://code.google.com/intl/zh-CN/apis/protocolbuffers/docs/reference/overview.html。" target="_blank" rel="noopener">generated code guide</a></p>
<h1 id="使用其他消息类型"><a href="#使用其他消息类型" class="headerlink" title="使用其他消息类型"></a>使用其他消息类型</h1><p>你可以将其他消息类型用作字段类型。例如，假设在每一个SearchResponse消息中包含Result消息，此时可以在相同的.proto文件中定义一个Result消息类型，然后在SearchResponse消息中指定一个Result类型的字段，如：</p>
<pre><code>message SearchResponse {
  repeated Result results = 1;
}

message Result {
  string url = 1;
  string title = 2;
  repeated string snippets = 3;
}123456789</code></pre><h2 id="导入定义"><a href="#导入定义" class="headerlink" title="导入定义"></a>导入定义</h2><p>在上面的例子中，Result消息类型与SearchResponse是定义在同一文件中的。如果想要使用的消息类型已经在其他.proto文件中已经定义过了呢？<br>你可以通过导入（importing）其他.proto文件中的定义来使用它们。要导入其他.proto文件的定义，你需要在你的文件中添加一个导入声明，如：</p>
<pre><code>import &quot;myproject/other_protos.proto&quot;;1</code></pre><p>默认情况下你只能使用直接导入的.proto文件中的定义. 然而， 有时候你需要移动一个.proto文件到一个新的位置， 可以不直接移动.proto文件， 只需放入一个伪 .proto 文件在老的位置， 然后使用import public转向新的位置。import public 依赖性会通过任意导入包含import public声明的proto文件传递。例如：</p>
<pre><code>// 这是新的proto
// All definitions are moved here12
// 这是久的proto
// 这是所有客户端正在导入的包
import public &quot;new.proto&quot;;
import &quot;other.proto&quot;;1234
// 客户端proto
import &quot;old.proto&quot;;
// 现在你可以使用新久两种包的proto定义了。123</code></pre><p>通过在编译器命令行参数中使用<code>-I/--proto_path</code>protocal 编译器会在指定目录搜索要导入的文件。如果没有给出标志，编译器会搜索编译命令被调用的目录。通常你只要指定proto_path标志为你的工程根目录就好。并且指定好导入的正确名称就好。</p>
<h2 id="使用proto2消息类型"><a href="#使用proto2消息类型" class="headerlink" title="使用proto2消息类型"></a>使用proto2消息类型</h2><p>在你的proto3消息中导入proto2的消息类型也是可以的，反之亦然，然后proto2枚举不可以直接在proto3的标识符中使用（如果仅仅在proto2消息中使用是可以的）。</p>
<h2 id="嵌套类型"><a href="#嵌套类型" class="headerlink" title="嵌套类型"></a>嵌套类型</h2><p>你可以在其他消息类型中定义、使用消息类型，在下面的例子中，Result消息就定义在SearchResponse消息内，如：</p>
<pre><code>message SearchResponse {
  message Result {
    string url = 1;
    string title = 2;
    repeated string snippets = 3;
  }
  repeated Result results = 1;
}12345678</code></pre><p>如果你想在它的父消息类型的外部重用这个消息类型，你需要以Parent.Type的形式使用它，如：</p>
<pre><code>message SomeOtherMessage {
  SearchResponse.Result result = 1;
}123</code></pre><p>当然，你也可以将消息嵌套任意多层，如：</p>
<pre><code>message Outer {                  // Level 0
  message MiddleAA {  // Level 1
    message Inner {   // Level 2
      int64 ival = 1;
      bool  booly = 2;
    }
  }
  message MiddleBB {  // Level 1
    message Inner {   // Level 2
      int32 ival = 1;
      bool  booly = 2;
    }
  }
}1234567891011121314</code></pre><h2 id="更新一个消息类型"><a href="#更新一个消息类型" class="headerlink" title="更新一个消息类型"></a>更新一个消息类型</h2><p>如果一个已有的消息格式已无法满足新的需求——如，要在消息中添加一个额外的字段——但是同时旧版本写的代码仍然可用。不用担心！更新消息而不破坏已有代码是非常简单的。在更新时只要记住以下的规则即可。</p>
<ul>
<li>不要更改任何已有的字段的数值标识。</li>
<li>如果你增加新的字段，使用旧格式的字段仍然可以被你新产生的代码所解析。你应该记住这些元素的默认值这样你的新代码就可以以适当的方式和旧代码产生的数据交互。相似的，通过新代码产生的消息也可以被旧代码解析：只不过新的字段会被忽视掉。注意，未被识别的字段会在反序列化的过程中丢弃掉，所以如果消息再被传递给新的代码，新的字段依然是不可用的（这和proto2中的行为是不同的，在proto2中未定义的域依然会随着消息被序列化）</li>
<li>非required的字段可以移除——只要它们的标识号在新的消息类型中不再使用（更好的做法可能是重命名那个字段，例如在字段前添加“OBSOLETE_”前缀，那样的话，使用的.proto文件的用户将来就不会无意中重新使用了那些不该使用的标识号）。</li>
<li>int32, uint32, int64, uint64,和bool是全部兼容的，这意味着可以将这些类型中的一个转换为另外一个，而不会破坏向前、 向后的兼容性。如果解析出来的数字与对应的类型不相符，那么结果就像在C++中对它进行了强制类型转换一样（例如，如果把一个64位数字当作int32来 读取，那么它就会被截断为32位的数字）。</li>
<li>sint32和sint64是互相兼容的，但是它们与其他整数类型不兼容。</li>
<li>string和bytes是兼容的——只要bytes是有效的UTF-8编码。</li>
<li>嵌套消息与bytes是兼容的——只要bytes包含该消息的一个编码过的版本。</li>
<li>fixed32与sfixed32是兼容的，fixed64与sfixed64是兼容的。</li>
<li>枚举类型与int32，uint32，int64和uint64相兼容（注意如果值不相兼容则会被截断），然而在客户端反序列化之后他们可能会有不同的处理方式，例如，未识别的proto3枚举类型会被保留在消息中，但是他的表示方式会依照语言而定。int类型的字段总会保留他们的</li>
</ul>
<h1 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h1><p>Any类型消息允许你在没有指定他们的.proto定义的情况下使用消息作为一个嵌套类型。一个Any类型包括一个可以被序列化bytes类型的任意消息，以及一个URL作为一个全局标识符和解析消息类型。为了使用Any类型，你需要导入<code>import google/protobuf/any.proto</code></p>
<pre><code>import &quot;google/protobuf/any.proto&quot;;

message ErrorStatus {
  string message = 1;
  repeated google.protobuf.Any details = 2;
}123456</code></pre><p>对于给定的消息类型的默认类型URL是<code>type.googleapis.com/packagename.messagename</code>。</p>
<p>不同语言的实现会支持动态库以线程安全的方式去帮助封装或者解封装Any值。例如在java中，Any类型会有特殊的<code>pack()</code>和<code>unpack()</code>访问器，在C++中会有<code>PackFrom()</code>和<code>UnpackTo()</code>方法。</p>
<pre><code>// Storing an arbitrary message type in Any.
NetworkErrorDetails details = ...;
ErrorStatus status;
status.add_details()-&gt;PackFrom(details);

// Reading an arbitrary message from Any.
ErrorStatus status = ...;
for (const Any&amp; detail : status.details()) {
  if (detail.Is&lt;NetworkErrorDetails&gt;()) {
    NetworkErrorDetails network_error;
    detail.UnpackTo(&amp;network_error);
    ... processing network_error ...
  }
}1234567891011121314</code></pre><p><strong>目前，用于Any类型的动态库仍在开发之中</strong><br>如果你已经很熟悉<a href="https://developers.google.com/protocol-buffers/docs/proto?hl=zh-cn" target="_blank" rel="noopener">proto2语法</a>，使用Any替换<a href="https://developers.google.com/protocol-buffers/docs/proto?hl=zh-cn#extensions" target="_blank" rel="noopener">拓展</a></p>
<h1 id="Oneof"><a href="#Oneof" class="headerlink" title="Oneof"></a>Oneof</h1><p>如果你的消息中有很多可选字段， 并且同时至多一个字段会被设置， 你可以加强这个行为，使用oneof特性节省内存.</p>
<p>Oneof字段就像可选字段， 除了它们会共享内存， 至多一个字段会被设置。 设置其中一个字段会清除其它字段。 你可以使用<code>case()</code>或者<code>WhichOneof()</code> 方法检查哪个oneof字段被设置， 看你使用什么语言了.</p>
<h2 id="使用Oneof"><a href="#使用Oneof" class="headerlink" title="使用Oneof"></a>使用Oneof</h2><p>为了在.proto定义Oneof字段， 你需要在名字前面加上oneof关键字, 比如下面例子的test_oneof:</p>
<pre><code>message SampleMessage {
  oneof test_oneof {
    string name = 4;
    SubMessage sub_message = 9;
  }
}123456</code></pre><p>然后你可以增加oneof字段到 oneof 定义中. 你可以增加任意类型的字段, 但是不能使用repeated 关键字.</p>
<p>在产生的代码中, oneof字段拥有同样的 getters 和setters， 就像正常的可选字段一样. 也有一个特殊的方法来检查到底那个字段被设置. 你可以在相应的语言<a href="https://developers.google.com/protocol-buffers/docs/reference/overview?hl=zh-cn" target="_blank" rel="noopener">API指南</a>中找到oneof API介绍.</p>
<h2 id="Oneof-特性"><a href="#Oneof-特性" class="headerlink" title="Oneof 特性"></a>Oneof 特性</h2><ul>
<li>设置oneof会自动清楚其它oneof字段的值. 所以设置多次后，只有最后一次设置的字段有值.</li>
</ul>
<pre><code>SampleMessage message;
message.set_name(&quot;name&quot;);
CHECK(message.has_name());
message.mutable_sub_message();   // Will clear name field.
CHECK(!message.has_name());12345</code></pre><ul>
<li>如果解析器遇到同一个oneof中有多个成员，只有最会一个会被解析成消息。</li>
<li>oneof不支持<code>repeated</code>.</li>
<li>反射API对oneof 字段有效.</li>
<li>如果使用C++,需确保代码不会导致内存泄漏. 下面的代码会崩溃， 因为<code>sub_message</code> 已经通过<code>set_name()</code>删除了</li>
</ul>
<pre><code>SampleMessage message;
SubMessage* sub_message = message.mutable_sub_message();
message.set_name(&quot;name&quot;);      // Will delete sub_message
sub_message-&gt;set_...            // Crashes here1234</code></pre><ul>
<li>在C++中，如果你使用<code>Swap()</code>两个oneof消息，每个消息，两个消息将拥有对方的值，例如在下面的例子中，<code>msg1</code>会拥有<code>sub_message</code>并且<code>msg2</code>会有<code>name</code>。</li>
</ul>
<pre><code>SampleMessage msg1;
msg1.set_name(&quot;name&quot;);
SampleMessage msg2;
msg2.mutable_sub_message();
msg1.swap(&amp;msg2);
CHECK(msg1.has_sub_message());
CHECK(msg2.has_name());1234567</code></pre><h2 id="向后兼容性问题"><a href="#向后兼容性问题" class="headerlink" title="向后兼容性问题"></a>向后兼容性问题</h2><p>当增加或者删除oneof字段时一定要小心. 如果检查oneof的值返回<code>None/NOT_SET</code>, 它意味着oneof字段没有被赋值或者在一个不同的版本中赋值了。 你不会知道是哪种情况，因为没有办法判断如果未识别的字段是一个oneof字段。</p>
<p>Tage 重用问题：</p>
<ul>
<li>将字段移入或移除oneof：在消息被序列号或者解析后，你也许会失去一些信息（有些字段也许会被清除）</li>
<li>删除一个字段或者加入一个字段：在消息被序列号或者解析后，这也许会清除你现在设置的oneof字段</li>
<li>分离或者融合oneof：行为与移动常规字段相似。</li>
</ul>
<h1 id="Map（映射）"><a href="#Map（映射）" class="headerlink" title="Map（映射）"></a>Map（映射）</h1><p>如果你希望创建一个关联映射，protocol buffer提供了一种快捷的语法：</p>
<pre><code>map&lt;key_type, value_type&gt; map_field = N;1</code></pre><p>其中<code>key_type</code>可以是任意Integer或者string类型（所以，除了floating和bytes的任意标量类型都是可以的）<code>value_type</code>可以是任意类型。</p>
<p>例如，如果你希望创建一个project的映射，每个<code>Projecct</code>使用一个string作为key，你可以像下面这样定义：</p>
<pre><code>map&lt;string, Project&gt; projects = 3;1</code></pre><ul>
<li>Map的字段可以是repeated。</li>
<li>序列化后的顺序和map迭代器的顺序是不确定的，所以你不要期望以固定顺序处理Map</li>
<li>当为.proto文件产生生成文本格式的时候，map会按照key 的顺序排序，数值化的key会按照数值排序。</li>
<li>从序列化中解析或者融合时，如果有重复的key则后一个key不会被使用，当从文本格式中解析map时，如果存在重复的key。</li>
</ul>
<p>生成map的API现在对于所有proto3支持的语言都可用了，你可以从<a href="https://developers.google.com/protocol-buffers/docs/reference/overview?hl=zh-cn" target="_blank" rel="noopener">API指南</a>找到更多信息。</p>
<h2 id="向后兼容性问题-1"><a href="#向后兼容性问题-1" class="headerlink" title="向后兼容性问题"></a>向后兼容性问题</h2><p>map语法序列化后等同于如下内容，因此即使是不支持map语法的protocol buffer实现也是可以处理你的数据的：</p>
<pre><code>message MapFieldEntry {
  key_type key = 1;
  value_type value = 2;
}

repeated MapFieldEntry map_field = N;123456</code></pre><h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><p>当然可以为.proto文件新增一个可选的package声明符，用来防止不同的消息类型有命名冲突。如：</p>
<pre><code>package foo.bar;
message Open { ... }12</code></pre><p>在其他的消息格式定义中可以使用包名+消息名的方式来定义域的类型，如：</p>
<pre><code>message Foo {
  ...
  required foo.bar.Open open = 1;
  ...
}12345</code></pre><p>包的声明符会根据使用语言的不同影响生成的代码。</p>
<ul>
<li>对于C++，产生的类会被包装在C++的命名空间中，如上例中的<code>Open</code>会被封装在 <code>foo::bar</code>空间中； - 对于Java，包声明符会变为java的一个包，除非在.proto文件中提供了一个明确有<code>java_package</code>；</li>
<li>对于 Python，这个包声明符是被忽略的，因为Python模块是按照其在文件系统中的位置进行组织的。</li>
<li>对于Go，包可以被用做Go包名称，除非你显式的提供一个<code>option go_package</code>在你的.proto文件中。</li>
<li>对于Ruby，生成的类可以被包装在内置的Ruby名称空间中，转换成Ruby所需的大小写样式 （首字母大写；如果第一个符号不是一个字母，则使用PB_前缀），例如<code>Open</code>会在<code>Foo::Bar</code>名称空间中。</li>
<li>对于javaNano包会使用Java包，除非你在你的文件中显式的提供一个<code>option java_package</code>。</li>
<li>对于C#包可以转换为<code>PascalCase</code>后作为名称空间，除非你在你的文件中显式的提供一个<code>option csharp_namespace</code>，例如，<code>Open</code>会在<code>Foo.Bar</code>名称空间中</li>
</ul>
<h2 id="包及名称的解析"><a href="#包及名称的解析" class="headerlink" title="包及名称的解析"></a>包及名称的解析</h2><p>Protocol buffer语言中类型名称的解析与C++是一致的：首先从最内部开始查找，依次向外进行，每个包会被看作是其父类包的内部类。当然对于 （<code>foo.bar.Baz</code>）这样以“.”分隔的意味着是从最外围开始的。</p>
<p>ProtocolBuffer编译器会解析.proto文件中定义的所有类型名。 对于不同语言的代码生成器会知道如何来指向每个具体的类型，即使它们使用了不同的规则。</p>
<h1 id="定义服务-Service"><a href="#定义服务-Service" class="headerlink" title="定义服务(Service)"></a>定义服务(Service)</h1><p>如果想要将消息类型用在RPC(远程方法调用)系统中，可以在.proto文件中定义一个RPC服务接口，protocol buffer编译器将会根据所选择的不同语言生成服务接口代码及存根。如，想要定义一个RPC服务并具有一个方法，该方法能够接收 SearchRequest并返回一个SearchResponse，此时可以在.proto文件中进行如下定义：</p>
<pre><code>service SearchService {
  rpc Search (SearchRequest) returns (SearchResponse);
}123</code></pre><p>最直观的使用protocol buffer的RPC系统是<a href="https://github.com/grpc/grpc-experiments" target="_blank" rel="noopener">gRPC</a>一个由谷歌开发的语言和平台中的开源的PRC系统，gRPC在使用protocl buffer时非常有效，如果使用特殊的protocol buffer插件可以直接为您从.proto文件中产生相关的RPC代码。</p>
<p>如果你不想使用gRPC，也可以使用protocol buffer用于自己的RPC实现，你可以从<a href="https://developers.google.com/protocol-buffers/docs/proto?hl=zh-cn#services" target="_blank" rel="noopener">proto2语言指南中找到更多信息</a></p>
<p>还有一些第三方开发的PRC实现使用Protocol Buffer。参考<a href="https://github.com/google/protobuf/blob/master/docs/third_party.md" target="_blank" rel="noopener">第三方插件wiki</a>查看这些实现的列表。</p>
<h1 id="JSON-映射"><a href="#JSON-映射" class="headerlink" title="JSON 映射"></a>JSON 映射</h1><p>Proto3 支持JSON的编码规范，使他更容易在不同系统之间共享数据，在下表中逐个描述类型。</p>
<p>如果JSON编码的数据丢失或者其本身就是<code>null</code>，这个数据会在解析成protocol buffer的时候被表示成默认值。如果一个字段在protocol buffer中表示为默认值，体会在转化成JSON的时候编码的时候忽略掉以节省空间。具体实现可以提供在JSON编码中可选的默认值。</p>
<table>
<thead>
<tr>
<th>proto3</th>
<th>JSON</th>
<th>JSON示例</th>
<th>注意</th>
</tr>
</thead>
<tbody><tr>
<td>message</td>
<td>object</td>
<td>{“fBar”: v, “g”: null, …}</td>
<td>产生JSON对象，消息字段名可以被映射成lowerCamelCase形式，并且成为JSON对象键，null被接受并成为对应字段的默认值</td>
</tr>
<tr>
<td>enum</td>
<td>string</td>
<td>“FOO_BAR”</td>
<td>枚举值的名字在proto文件中被指定</td>
</tr>
<tr>
<td>map</td>
<td>object</td>
<td>{“k”: v, …}</td>
<td>所有的键都被转换成string</td>
</tr>
<tr>
<td>repeated V</td>
<td>array</td>
<td>[v, …]</td>
<td>null被视为空列表</td>
</tr>
<tr>
<td>bool</td>
<td>true, false</td>
<td>true, false</td>
<td></td>
</tr>
<tr>
<td>string</td>
<td>string</td>
<td>“Hello World!”</td>
<td></td>
</tr>
<tr>
<td>bytes</td>
<td>base64 string</td>
<td>“YWJjMTIzIT8kKiYoKSctPUB+”</td>
<td></td>
</tr>
<tr>
<td>int32, fixed32, uint32</td>
<td>number</td>
<td>1, -10, 0</td>
<td>JSON值会是一个十进制数，数值型或者string类型都会接受</td>
</tr>
<tr>
<td>int64, fixed64, uint64</td>
<td>string</td>
<td>“1”, “-10”</td>
<td>JSON值会是一个十进制数，数值型或者string类型都会接受</td>
</tr>
<tr>
<td>float, double</td>
<td>number</td>
<td>1.1, -10.0, 0, “NaN”, “Infinity”</td>
<td>JSON值会是一个数字或者一个指定的字符串如”NaN”,”infinity”或者”-Infinity”，数值型或者字符串都是可接受的，指数符号也可以接受</td>
</tr>
<tr>
<td>Any</td>
<td>object</td>
<td>{“@type”: “url”, “f”: v, … }</td>
<td>如果一个Any保留一个特上述的JSON映射，则它会转换成一个如下形式：<code>{&quot;@type&quot;: xxx, &quot;value&quot;: yyy}</code>否则，该值会被转换成一个JSON对象，<code>@type</code>字段会被插入所指定的确定的值</td>
</tr>
<tr>
<td>Timestamp</td>
<td>string</td>
<td>“1972-01-01T10:00:20.021Z”</td>
<td>使用RFC 339，其中生成的输出将始终是Z-归一化啊的，并且使用0，3，6或者9位小数</td>
</tr>
<tr>
<td>Duration</td>
<td>string</td>
<td>“1.000340012s”, “1s”</td>
<td>生成的输出总是0，3，6或者9位小数，具体依赖于所需要的精度，接受所有可以转换为纳秒级的精度</td>
</tr>
<tr>
<td>Struct</td>
<td>object</td>
<td>{ … }</td>
<td>任意的JSON对象，见struct.proto</td>
</tr>
<tr>
<td>Wrapper types</td>
<td>various types</td>
<td>2, “2”, “foo”, true, “true”, null, 0, …</td>
<td>包装器在JSON中的表示方式类似于基本类型，但是允许nulll，并且在转换的过程中保留null</td>
</tr>
<tr>
<td>FieldMask</td>
<td>string</td>
<td>“f.fooBar,h”</td>
<td>见fieldmask.proto</td>
</tr>
<tr>
<td>ListValue</td>
<td>array</td>
<td>[foo, bar, …]</td>
<td></td>
</tr>
<tr>
<td>Value</td>
<td>value</td>
<td></td>
<td>任意JSON值</td>
</tr>
<tr>
<td>NullValue</td>
<td>null</td>
<td></td>
<td>JSON null</td>
</tr>
</tbody></table>
<h1 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h1><p>在定义.proto文件时能够标注一系列的options。Options并不改变整个文件声明的含义，但却能够影响特定环境下处理方式。完整的可用选项可以在google/protobuf/descriptor.proto找到。</p>
<p>一些选项是文件级别的，意味着它可以作用于最外范围，不包含在任何消息内部、enum或服务定义中。一些选项是消息级别的，意味着它可以用在消息定义的内部。当然有些选项可以作用在域、enum类型、enum值、服务类型及服务方法中。到目前为止，并没有一种有效的选项能作用于所有的类型。</p>
<p>如下就是一些常用的选择：</p>
<ul>
<li><code>java_package</code> (文件选项) :这个选项表明生成java类所在的包。如果在.proto文件中没有明确的声明java_package，就采用默认的包名。当然了，默认方式产生的 java包名并不是最好的方式，按照应用名称倒序方式进行排序的。如果不需要产生java代码，则该选项将不起任何作用。如：</li>
</ul>
<pre><code>option java_package = &quot;com.example.foo&quot;;1</code></pre><ul>
<li><code>java_outer_classname</code> (文件选项): 该选项表明想要生成Java类的名称。如果在.proto文件中没有明确的java_outer_classname定义，生成的class名称将会根据.proto文件的名称采用驼峰式的命名方式进行生成。如（foo_bar.proto生成的java类名为FooBar.java）,如果不生成java代码，则该选项不起任何作用。如：</li>
</ul>
<pre><code>option java_outer_classname = &quot;Ponycopter&quot;;1</code></pre><ul>
<li><pre><code>optimize_for</code></pre><p>(文件选项): 可以被设置为 SPEED, CODE_SIZE,或者LITE_RUNTIME。这些值将通过如下的方式影响C++及java代码的生成：</p>
</li>
</ul>
<ul>
<li><code>SPEED (default)</code>: protocol buffer编译器将通过在消息类型上执行序列化、语法分析及其他通用的操作。这种代码是最优的。</li>
<li><code>CODE_SIZE</code>: protocol buffer编译器将会产生最少量的类，通过共享或基于反射的代码来实现序列化、语法分析及各种其它操作。采用该方式产生的代码将比SPEED要少得多， 但是操作要相对慢些。当然实现的类及其对外的API与SPEED模式都是一样的。这种方式经常用在一些包含大量的.proto文件而且并不盲目追求速度的 应用中。</li>
<li><code>LITE_RUNTIME</code>: protocol buffer编译器依赖于运行时核心类库来生成代码（即采用libprotobuf-lite 替代libprotobuf）。这种核心类库由于忽略了一 些描述符及反射，要比全类库小得多。这种模式经常在移动手机平台应用多一些。编译器采用该模式产生的方法实现与SPEED模式不相上下，产生的类通过实现 MessageLite接口，但它仅仅是Messager接口的一个子集。</li>
</ul>
<pre><code>option optimize_for = CODE_SIZE;1</code></pre><ul>
<li><code>cc_enable_arenas</code>(文件选项):对于C++产生的代码启用<a href="https://developers.google.com/protocol-buffers/docs/reference/arenas?hl=zh-cn" target="_blank" rel="noopener">arena allocation</a></li>
<li><code>objc_class_prefix</code>(文件选项):设置Objective-C类的前缀，添加到所有Objective-C从此.proto文件产生的类和枚举类型。没有默认值，所使用的前缀应该是苹果推荐的3-5个大写字符，注意2个字节的前缀是苹果所保留的。</li>
<li><code>deprecated</code>(字段选项):如果设置为<code>true</code>则表示该字段已经被废弃，并且不应该在新的代码中使用。在大多数语言中没有实际的意义。在java中，这回变成<code>@Deprecated</code>注释，在未来，其他语言的代码生成器也许会在字标识符中产生废弃注释，废弃注释会在编译器尝试使用该字段时发出警告。如果字段没有被使用你也不希望有新用户使用它，尝试使用保留语句替换字段声明。</li>
</ul>
<pre><code>int32 old_field = 6 [deprecated=true];1</code></pre><h2 id="自定义选项"><a href="#自定义选项" class="headerlink" title="自定义选项"></a>自定义选项</h2><p>ProtocolBuffers允许自定义并使用选项。该功能应该属于一个高级特性，对于大部分人是用不到的。如果你的确希望创建自己的选项，请参看<a href="https://developers.google.com/protocol-buffers/docs/proto?hl=zh-cn#customoptions" target="_blank" rel="noopener"> Proto2 Language Guide</a>。注意创建自定义选项使用了拓展，拓展只在proto3中可用。</p>
<h1 id="生成访问类"><a href="#生成访问类" class="headerlink" title="生成访问类"></a>生成访问类</h1><p>可以通过定义好的.proto文件来生成Java,Python,C++, Ruby, JavaNano, Objective-C,或者C# 代码，需要基于.proto文件运行protocol buffer编译器protoc。如果你没有安装编译器，下载<a href="https://developers.google.com/protocol-buffers/docs/downloads?hl=zh-cn" target="_blank" rel="noopener">安装包</a>并遵照README安装。对于Go,你还需要安装一个特殊的代码生成器插件。你可以通过GitHub上的<a href="https://github.com/golang/protobuf/" target="_blank" rel="noopener">protobuf库</a>找到安装过程</p>
<p>通过如下方式调用protocol编译器：</p>
<pre><code>protoc --proto_path=IMPORT_PATH --cpp_out=DST_DIR --java_out=DST_DIR --python_out=DST_DIR --go_out=DST_DIR --ruby_out=DST_DIR --javanano_out=DST_DIR --objc_out=DST_DIR --csharp_out=DST_DIR path/to/file.proto1</code></pre><ul>
<li><p><code>IMPORT_PATH</code>声明了一个.proto文件所在的解析import具体目录。如果忽略该值，则使用当前目录。如果有多个目录则可以多次调用<code>--proto_path</code>，它们将会顺序的被访问并执行导入。<code>-I=IMPORT_PATH</code>是<code>--proto_path</code>的简化形式。</p>
</li>
<li><p>当然也可以提供一个或多个输出路径：</p>
</li>
</ul>
<ul>
<li><code>--cpp_out</code> 在目标目录DST_DIR中产生C++代码，可以在<a href="https://developers.google.com/protocol-buffers/docs/reference/cpp-generated?hl=zh-cn" target="_blank" rel="noopener">C++代码生成参考</a>中查看更多。</li>
<li><code>--java_out</code> 在目标目录DST_DIR中产生Java代码，可以在 <a href="https://developers.google.com/protocol-buffers/docs/reference/java-generated?hl=zh-cn" target="_blank" rel="noopener">Java代码生成参考</a>中查看更多。</li>
<li><code>--python_out</code> 在目标目录 DST_DIR 中产生Python代码，可以在<a href="https://developers.google.com/protocol-buffers/docs/reference/python-generated?hl=zh-cn" target="_blank" rel="noopener">Python代码生成参考</a>中查看更多。</li>
<li><code>--go_out</code> 在目标目录 DST_DIR 中产生Go代码，可以在<a href="https://developers.google.com/protocol-buffers/docs/reference/go-generated?hl=zh-cn" target="_blank" rel="noopener">GO代码生成参考</a>中查看更多。</li>
<li><code>--ruby_out</code>在目标目录 DST_DIR 中产生Go代码，参考正在制作中。</li>
<li><code>--javanano_out</code>在目标目录DST_DIR中生成JavaNano，JavaNano代码生成器有一系列的选项用于定制自定义生成器的输出：你可以通过生成器的<a href="https://github.com/google/protobuf/tree/master/javanano" target="_blank" rel="noopener">README</a>查找更多信息，JavaNano参考正在制作中。</li>
<li><code>--objc_out</code>在目标目录DST_DIR中产生Object代码，可以在<a href="https://developers.google.com/protocol-buffers/docs/reference/objective-c-generated?hl=zh-cn" target="_blank" rel="noopener">Objective-C代码生成参考</a>中查看更多。</li>
<li><code>--csharp_out</code>在目标目录DST_DIR中产生Object代码，可以在<a href="https://developers.google.com/protocol-buffers/docs/reference/csharp-generated?hl=zh-cn" target="_blank" rel="noopener">C#代码生成参考</a>中查看更多。</li>
<li><code>--php_out</code>在目标目录DST_DIR中产生Object代码，可以在<a href="https://developers.google.com/protocol-buffers/docs/reference/php-generated?hl=zh-cn" target="_blank" rel="noopener">PHP代码生成参考</a>中查看更多。</li>
</ul>
<p>作为一个方便的拓展，如果DST_DIR以.zip或者.jar结尾，编译器会将输出写到一个ZIP格式文件或者符合JAR标准的.jar文件中。注意如果输出已经存在则会被覆盖，编译器还没有智能到可以追加文件。<br>- 你必须提议一个或多个.proto文件作为输入，多个.proto文件可以只指定一次。虽然文件路径是相对于当前目录的，每个文件必须位于其IMPORT_PATH下，以便每个文件可以确定其规范的名称。</p>
<p>本文转自：<a href="https://blog.csdn.net/u011518120/article/details/54604615" target="_blank" rel="noopener">https://blog.csdn.net/u011518120/article/details/54604615</a></p>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>go使用base64编码</title>
    <url>/p/a4fc4ca7.html</url>
    <content><![CDATA[<p>Go中的系统库中提供了<code>encoding/base64</code>编码/解码的内置支持.</p>
<p><code>encoding/base64</code>提供了四种模式的编码/解码</p>
<ul>
<li>StdEncoding：常规编码</li>
<li>URLEncoding：URL safe 编码</li>
<li>RawStdEncoding：常规编码，末尾不补 =</li>
<li>RawURLEncoding：URL safe 编码，末尾不补 =</li>
</ul>
<p>其中，URL safe 编码，相当于是替换掉字符串中的特殊字符，+ 和 /。</p>
<p>各种模式的编码/解码测试用例如下:</p>
<pre><code class="line-numbers language-go">package main

import (
    &quot;encoding/base64&quot;
    &quot;fmt&quot;
)

func main() {
    msg := []byte(&quot;Hello world. 你好，世界！&quot;)

    encoded := base64.StdEncoding.EncodeToString(msg)
    fmt.Println(encoded)
    // SGVsbG8gd29ybGQuIOS9oOWlve+8jOS4lueVjO+8gQ==

    decoded, _ := base64.StdEncoding.DecodeString(encoded)
    fmt.Println(string(decoded))
    // Hello world. 你好，世界！

    encoded = base64.RawStdEncoding.EncodeToString(msg)
    fmt.Println(encoded)
    // SGVsbG8gd29ybGQuIOS9oOWlve+8jOS4lueVjO+8gQ

    decoded, _ = base64.RawStdEncoding.DecodeString(encoded)
    fmt.Println(string(decoded))
    // Hello world. 你好，世界！

    encoded = base64.URLEncoding.EncodeToString(msg)
    fmt.Println(encoded)
    // SGVsbG8gd29ybGQuIOS9oOWlve-8jOS4lueVjO-8gQ==

    decoded, _ = base64.URLEncoding.DecodeString(encoded)
    fmt.Println(string(decoded))
    // Hello world. 你好，世界！

    encoded = base64.RawURLEncoding.EncodeToString(msg)
    fmt.Println(encoded)
    // SGVsbG8gd29ybGQuIOS9oOWlve-8jOS4lueVjO-8gQ

    decoded, _ = base64.RawURLEncoding.DecodeString(encoded)
    fmt.Println(string(decoded))
    // Hello world. 你好，世界！
}</code></pre>
<p>本文参考：<a href="https://syaning.github.io/go-pkgs/encoding/base64.html" target="_blank" rel="noopener">https://syaning.github.io/go-pkgs/encoding/base64.html</a></p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>go使用des加密</title>
    <url>/p/6d5b1f54.html</url>
    <content><![CDATA[<h2 id="一、DES算法简介"><a href="#一、DES算法简介" class="headerlink" title="一、DES算法简介"></a>一、DES算法简介</h2><p>DES(Data Encryption Standard)是一种常见的分组加密算法，由IBM公司在1971年提出。它是一种对称加密算法，也就是说它使用同一个密钥来加密和解密数据。</p>
<h2 id="二、密钥"><a href="#二、密钥" class="headerlink" title="二、密钥"></a>二、密钥</h2><p>DES使用一个56位的初始密钥，但是这里提供的是一个64位的值，这是因为在硬件实现中每8位可以用于奇偶校验。可以通过设定8位字符串，由<code>crypto/des</code>库的<code>des.NewCipher(key)</code>函数生成密钥</p>
<h2 id="三、填充算法"><a href="#三、填充算法" class="headerlink" title="三、填充算法"></a>三、填充算法</h2><p>DES分组的大小是64位，如果加密的数据长度不是64位的倍数，可以按照某种具体的规则来填充位。常用的填充算法有<code>pkcs5</code>，<code>zero</code>等</p>
<h3 id="pkcs5填充"><a href="#pkcs5填充" class="headerlink" title="pkcs5填充"></a>pkcs5填充</h3><pre><code class="line-numbers language-go">//pkcs5补码算法
func pkcs5Padding(ciphertext []byte, blockSize int) []byte {
    padding := blockSize - len(ciphertext)%blockSize
    padtext := bytes.Repeat([]byte{byte(padding)}, padding)
    return append(ciphertext, padtext...)
}

//pkcs5减码算法
func pkcs5UnPadding(origData []byte) []byte {
    length := len(origData)
    unpadding := int(origData[length-1])
    return origData[:(length - unpadding)]
}</code></pre>
<h3 id="zero填充"><a href="#zero填充" class="headerlink" title="zero填充"></a>zero填充</h3><pre><code class="line-numbers language-go">//zero补码算法
func zeroPadding(ciphertext []byte, blockSize int) []byte {
    padding := blockSize - len(ciphertext)%blockSize
    padtext := bytes.Repeat([]byte{0}, padding)
    return append(ciphertext, padtext...)
}

//zero减码算法
func zeroUnPadding(origData []byte) []byte {
    return bytes.TrimFunc(origData,
        func(r rune) bool {
            return r == rune(0)
        })
}</code></pre>
<h2 id="四、加密模式"><a href="#四、加密模式" class="headerlink" title="四、加密模式"></a>四、加密模式</h2><ul>
<li>密码分组链接模式（Cipher Block Chaining，简称CBC）：是一种循环模式，前一个分组的密文和当前分组的明文异或操作后再加密，这样做的目的是增强破解难度。</li>
<li>电码本模式（Electronic Codebook Book，简称ECB）：是一种基础的加密方式，密文被分割成分组长度相等的块（不足补齐），然后单独一个个加密，一个个输出组成密文。</li>
<li>计算器模式（Counter，简称CTR）：计算器模式不常见，在CTR模式中， 有一个自增的算子，这个算子用密钥加密之后的输出和明文异或的结果得到密文，相当于一次一密。这种加密方式简单快速，安全可靠，而且可以并行加密，但是在计算器不能维持很长的情况下，密钥只能使用一次。</li>
<li>输出反馈模式（Output FeedBack，简称OFB）：实际上是一种反馈模式，目的也是增强破解的难度。</li>
<li>密码反馈模式（Cipher FeedBack，简称CFB）：实际上是一种反馈模式，目的也是增强破解的难度。</li>
</ul>
<pre><code class="line-numbers language-go">//---------------DES ECB加密--------------------
// data: 明文数据
// key: 密钥字符串
// 返回密文数据
func DesECBEncrypt(data, key []byte) []byte {
    //NewCipher创建一个新的加密块
    block, err := des.NewCipher(key)
    if err != nil {
        return nil
    }

    bs := block.BlockSize()
    // pkcs5填充
    data = pkcs5Padding(data, bs)
    if len(data)%bs != 0 {
        return nil
    }

    out := make([]byte, len(data))
    dst := out
    for len(data) &gt; 0 {
        //Encrypt加密第一个块，将其结果保存到dst
        block.Encrypt(dst, data[:bs])
        data = data[bs:]
        dst = dst[bs:]
    }
    return out
}

//---------------DES ECB解密--------------------
// data: 密文数据
// key: 密钥字符串
// 返回明文数据
func DesECBDecrypter(data, key []byte) []byte {
    //NewCipher创建一个新的加密块
    block, err := des.NewCipher(key)
    if err != nil {
        return nil
    }

    bs := block.BlockSize()
    if len(data)%bs != 0 {
        return nil
    }

    out := make([]byte, len(data))
    dst := out
    for len(data) &gt; 0 {
        //Encrypt加密第一个块，将其结果保存到dst
        block.Decrypt(dst, data[:bs])
        data = data[bs:]
        dst = dst[bs:]
    }

    // pkcs5填充
    out = pkcs5UnPadding(out)

    return out
}

//---------------DES CBC加密--------------------
// data: 明文数据
// key: 密钥字符串
// iv:iv向量
// 返回密文数据
func DesCBCEncrypt(data, key, iv []byte) []byte {
    block, err := des.NewCipher(key)
    if err != nil {
        return nil
    }

    // pkcs5填充
    data = pkcs5Padding(data, block.BlockSize())
    cryptText := make([]byte, len(data))

    blockMode := cipher.NewCBCEncrypter(block, iv)
    blockMode.CryptBlocks(cryptText, data)
    return cryptText
}

//---------------DES CBC解密--------------------
// data: 密文数据
// key: 密钥字符串
// iv:iv向量
// 返回明文数据
func DesCBCDecrypter(data, key, iv []byte) []byte {
    block, err := des.NewCipher(key)
    if err != nil {
        return nil
    }

    blockMode := cipher.NewCBCDecrypter(block, iv)
    cryptText := make([]byte, len(data))
    blockMode.CryptBlocks(cryptText, data)
    // pkcs5填充
    cryptText = pkcs5UnPadding(cryptText)

    return cryptText
}

//---------------DES CTR加密--------------------
// data: 明文数据
// key: 密钥字符串
// iv:iv向量
// 返回密文数据
func DesCTREncrypt(data, key, iv []byte) []byte {
    block, err := des.NewCipher(key)
    if err != nil {
        return nil
    }

    // pkcs5填充
    data = pkcs5Padding(data, block.BlockSize())
    cryptText := make([]byte, len(data))

    blockMode := cipher.NewCTR(block, iv)
    blockMode.XORKeyStream(cryptText, data)
    return cryptText
}

//---------------DES CTR解密--------------------
// data: 密文数据
// key: 密钥字符串
// iv:iv向量
// 返回明文数据
func DesCTRDecrypter(data, key, iv []byte) []byte {
    block, err := des.NewCipher(key)
    if err != nil {
        return nil
    }

    blockMode := cipher.NewCTR(block, iv)
    cryptText := make([]byte, len(data))
    blockMode.XORKeyStream(cryptText, data)

    // pkcs5填充
    cryptText = pkcs5UnPadding(cryptText)

    return cryptText
}

//---------------DES OFB加密--------------------
// data: 明文数据
// key: 密钥字符串
// iv:iv向量
// 返回密文数据
func DesOFBEncrypt(data, key, iv []byte) []byte {
    block, err := des.NewCipher(key)
    if err != nil {
        return nil
    }

    // pkcs5填充
    data = pkcs5Padding(data, block.BlockSize())
    cryptText := make([]byte, len(data))

    blockMode := cipher.NewOFB(block, iv)
    blockMode.XORKeyStream(cryptText, data)
    return cryptText
}

//---------------DES OFB解密--------------------
// data: 密文数据
// key: 密钥字符串
// iv:iv向量
// 返回明文数据
func DesOFBDecrypter(data, key, iv []byte) []byte {
    block, err := des.NewCipher(key)
    if err != nil {
        return nil
    }

    blockMode := cipher.NewOFB(block, iv)
    cryptText := make([]byte, len(data))
    blockMode.XORKeyStream(cryptText, data)

    // pkcs5填充
    cryptText = pkcs5UnPadding(cryptText)

    return cryptText
}

//---------------DES CFB加密--------------------
// data: 明文数据
// key: 密钥字符串
// iv:iv向量
// 返回密文数据
func DesCFBEncrypt(data, key, iv []byte) []byte {
    block, err := des.NewCipher(key)
    if err != nil {
        return nil
    }

    // pkcs5填充
    data = pkcs5Padding(data, block.BlockSize())
    cryptText := make([]byte, len(data))

    blockMode := cipher.NewCFBDecrypter(block, iv)
    blockMode.XORKeyStream(cryptText, data)
    return cryptText
}

//---------------DES CFB解密--------------------
// data: 密文数据
// key: 密钥字符串
// iv:iv向量
// 返回明文数据
func DesCFBDecrypter(data, key, iv []byte) []byte {
    block, err := des.NewCipher(key)
    if err != nil {
        return nil
    }

    blockMode := cipher.NewCFBEncrypter(block, iv)
    cryptText := make([]byte, len(data))
    blockMode.XORKeyStream(cryptText, data)

    // pkcs5填充
    cryptText = pkcs5UnPadding(cryptText)

    return cryptText
}</code></pre>
<h2 id="五、测试"><a href="#五、测试" class="headerlink" title="五、测试"></a>五、测试</h2><pre><code class="line-numbers language-go">import (
    &quot;bytes&quot;
    &quot;crypto/cipher&quot;
    &quot;crypto/des&quot;
    &quot;encoding/base64&quot;
    &quot;fmt&quot;
)

func main() {
    key := []byte(&quot;12345678&quot;)
    src := []byte(&quot;这是需要加密的明文哦！&quot;)

    // ECB 加密
    cipher := DesECBEncrypt(src, key)

    // 转base64
    bs64 := base64.StdEncoding.EncodeToString(cipher)
    fmt.Println(bs64)

    // 转回byte
    bt, err := base64.StdEncoding.DecodeString(bs64)
    if err != nil {
        fmt.Println(&quot;base64转换失败&quot;)
    }
    // ECB 解密
    str := DesECBEncrypt(bt, key)
    fmt.Println(str)
}</code></pre>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>go身份证号验证算法</title>
    <url>/p/66e389af.html</url>
    <content><![CDATA[<h2 id="一、起因"><a href="#一、起因" class="headerlink" title="一、起因"></a>一、起因</h2><p>因国家规定游戏都要加入防止未成年人沉迷，所以实名认证的身份证验证成了基操，而公安授权的第三方实名验证（如：腾讯云、数据宝等）验证都是收费的，而且都是请求就收费，不然验证成功还是失败，所以，为了节省开销，可以先在本地服务器验证。</p>
<p>因为18位身份证的最后一位是校验位，前6位是地区，中间8位是出生日期，我们可以在这三方面做本地验证。</p>
<h2 id="二、加载配置"><a href="#二、加载配置" class="headerlink" title="二、加载配置"></a>二、加载配置</h2><p>加载一份地区的<a href="https://raw.githubusercontent.com/zngw/idcard/main/area.json" target="_blank" rel="noopener">area.json</a>配置文件</p>
<pre><code class="line-numbers language-go">// key-地区编码
// value-地区名
var area = make(map[string]string)

// 初始化地区配置
func Init(c string)  {
    raw, err := ioutil.ReadFile(c)
    if err != nil {
        fmt.Println(&quot;无本地配置文件：%w&quot;, err)
        err = nil
        return
    }

    err = json.Unmarshal(raw, &amp;area)
    if err != nil {
        err = fmt.Errorf(&quot;解析基本配置文件失败：%w&quot;, err)
        return
    }
}</code></pre>
<h2 id="三、验证"><a href="#三、验证" class="headerlink" title="三、验证"></a>三、验证</h2><p>对算法、地区、出生日期验证</p>
<pre><code class="line-numbers language-go">func Check(id string) bool {
    // 身份证位数不对
    if len(id) != 15 &amp;&amp; len(id) != 18 {
        return false
    }

    // 转大写
    id = strings.ToUpper(id)

    if len(id) == 18 {
        // 验证算法
        if !checkValidNo18(id) {
            fmt.Println(id,&quot;身份证算法验证失败！&quot;)
            return false
        }

    }else {
        // 转18位
        id = idCard15To18(id)
    }

    // 生日验证
    if !checkBirthdayCode(id[6:14]) {
        fmt.Println(id,&quot;生日验证失败！&quot;)
        return false
    }

    // 验证地址
    if !checkAddressCode(id[:6]) {
        fmt.Println(id,&quot;地址验证失败！&quot;)
        return false
    }

    return true
}

//15位身份证转为18位
var weight = [17]int{7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2}
var validValue = [11]byte{&#39;1&#39;, &#39;0&#39;, &#39;X&#39;, &#39;9&#39;, &#39;8&#39;, &#39;7&#39;, &#39;6&#39;, &#39;5&#39;, &#39;4&#39;, &#39;3&#39;, &#39;2&#39;}

// 15位转18位
func idCard15To18(id15 string) string {
    nLen := len(id15)
    if nLen != 15 {
        return &quot;身份证不是15位！&quot;
    }
    id18 := make([]byte, 0)
    id18 = append(id18, id15[:6]...)
    id18 = append(id18, &#39;1&#39;, &#39;9&#39;)
    id18 = append(id18, id15[6:]...)

    sum := 0
    for i, v := range id18 {
        n, _ := strconv.Atoi(string(v))
        sum += n * weight[i]
    }
    mod := sum % 11
    id18 = append(id18, validValue[mod])
    return string(id18)
}

//18位身份证校验码
func checkValidNo18(id string) bool {
    //string -&gt; []byte
    id18 := []byte(id)
    nSum := 0
    for i := 0; i &lt; len(id18)-1; i++ {
        n, _ := strconv.Atoi(string(id18[i]))
        nSum += n * weight[i]
    }
    //mod得出18位身份证校验码
    mod := nSum % 11
    if validValue[mod] == id18[17] {
        return true
    }

    return false
}

// 验证生日
func checkBirthdayCode(birthday string) bool {
    year, _ := strconv.Atoi(birthday[:4])
    month, _ := strconv.Atoi(birthday[4:6])
    day, _ := strconv.Atoi(birthday[6:])

    curYear, curMonth, curDay := time.Now().Date()
    //出生日期大于现在的日期
    if year &lt; 1900 || year &gt; curYear || month &lt;= 0 || month &gt; 12 || day &lt;= 0 || day &gt; 31 {
        return false
    }

    if year == curYear {
        if month &gt; int(curMonth) {
            return false
        } else if month == int(curMonth) &amp;&amp; day &gt; curDay {
            return false
        }
    }

    //出生日期在2月份
    if 2 == month {
        //闰年2月只有29号
        if isLeapYear(year) &amp;&amp; day &gt; 29 {
            return false
        } else if day &gt; 28 { //非闰年2月只有28号
            return false
        }
    } else if 4 == month || 6 == month || 9 == month || 11 == month { //小月只有30号
        if day &gt; 30 {
            return false
        }
    }

    return true
}

// 判断是否为闰年
func isLeapYear(year int) bool {
    if year &lt;= 0 {
        return false
    }
    if (year%4 == 0 &amp;&amp; year%100 != 0) || year%400 == 0 {
        return true
    }
    return false
}

// 验证地区
// strict: true-验证详细， false-验证省
func checkAddressCode(address string) bool {
    if _, ok := area[address]; ok {
        return true
    }

    return false
}</code></pre>
<h2 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h2><pre><code class="line-numbers language-go">package main

import (
    &quot;fmt&quot;
    &quot;github.com/zngw/idcard&quot;
)

func main()  {
    idcard.Init(&quot;./area.json&quot;)
    fmt.Println(idcard.Check(&quot;xxxxxxxxxxxxxxxxxx&quot;))
}</code></pre>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 安装 pm2 运行出错</title>
    <url>/p/14f21a82.html</url>
    <content><![CDATA[<h2 id="一、起因"><a href="#一、起因" class="headerlink" title="一、起因"></a>一、起因</h2><p>在CentOS中使用<code>yum install npm</code>安装npm后，再安装pm2时，运行<code>pm2 -v</code>出错</p>
<pre><code>[root@zngw ~]# pm2 -v
/usr/lib/node_modules/pm2/node_modules/chalk/source/index.js:103
    ...styles,
    ^^^

SyntaxError: Unexpected token ...
    at createScript (vm.js:56:10)
    at Object.runInThisContext (vm.js:97:10)
    at Module._compile (module.js:549:28)
    at Object.Module._extensions..js (module.js:586:10)
    at Module.load (module.js:494:32)
    at tryModuleLoad (module.js:453:12)
    at Function.Module._load (module.js:445:3)
    at Module.require (module.js:504:17)
    at require (internal/module.js:20:19)
    at Object.&lt;anonymous&gt; (/usr/lib/node_modules/pm2/constants.js:10:14)</code></pre><h2 id="二、分析"><a href="#二、分析" class="headerlink" title="二、分析"></a>二、分析</h2><p>这是因为npm版本过低导致的，用的是阿里云的更新源，这个版本中的npm版本是<code>3.10.10</code>，node版本是<code>v6.17.1</code>。node版本更新到v10及以上版本就可以了。</p>
<h2 id="三、解决办法"><a href="#三、解决办法" class="headerlink" title="三、解决办法"></a>三、解决办法</h2><h3 id="1、卸载npm"><a href="#1、卸载npm" class="headerlink" title="1、卸载npm"></a>1、卸载npm</h3><pre><code class="line-numbers language-bash">npm uninstall npm -g</code></pre>
<h3 id="2、安装gcc"><a href="#2、安装gcc" class="headerlink" title="2、安装gcc"></a>2、安装gcc</h3><pre><code class="line-numbers language-bash">yum install gcc gcc-c++</code></pre>
<h3 id="3、下载node安装包"><a href="#3、下载node安装包" class="headerlink" title="3、下载node安装包"></a>3、下载node安装包</h3><pre><code class="line-numbers language-bash">mkdir -p /home/npm
cd /home/npm
wget https://npm.taobao.org/mirrors/node/v10.14.1/node-v10.14.1-linux-x64.tar.gz</code></pre>
<h3 id="4、解压"><a href="#4、解压" class="headerlink" title="4、解压"></a>4、解压</h3><pre><code class="line-numbers language-bash">tar -xvf  node-v10.14.1-linux-x64.tar.gz
mv node-v10.14.1-linux-x64 node</code></pre>
<h3 id="5、添加环境变量"><a href="#5、添加环境变量" class="headerlink" title="5、添加环境变量"></a>5、添加环境变量</h3><pre><code class="line-numbers language-bash">vi /etc/profile

# 在最后添加
export NODE_HOME=/home/npm/node  
export PATH=$NODE_HOME/bin:$PATH</code></pre>
<p><code>/home/npm/node</code> 为前面node解压的目录</p>
<h3 id="6、刷新"><a href="#6、刷新" class="headerlink" title="6、刷新"></a>6、刷新</h3><pre><code class="line-numbers language-bash">source /etc/profile</code></pre>
<p>查看</p>
<pre><code class="line-numbers language-bash">[root@zngw ~]# node -v
v10.14.1
[root@zngw ~]# npm -v
6.4.1</code></pre>
<h3 id="7、安装pm2"><a href="#7、安装pm2" class="headerlink" title="7、安装pm2"></a>7、安装pm2</h3><pre><code class="line-numbers language-bash">npm install -g pm2</code></pre>
<h3 id="8、测试"><a href="#8、测试" class="headerlink" title="8、测试"></a>8、测试</h3><pre><code class="line-numbers language-bash">[root@zngw ~]# pm2 -v
5.1.1</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>go使用md5</title>
    <url>/p/7ea5e881.html</url>
    <content><![CDATA[<p>在go中的系统加密包<code>crypto/md5</code>包中，提供了<code>New()</code>和<code>Sum()</code>函数来获取md5值。</p>
<h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><pre><code class="line-numbers language-go">import &quot;crypto/md5&quot;</code></pre>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="32位md5加密后字符串"><a href="#32位md5加密后字符串" class="headerlink" title="32位md5加密后字符串"></a>32位md5加密后字符串</h3><pre><code class="line-numbers language-go">// 返回一个32位md5加密后的字符串
func Md5(str string) string {
    h := md5.New()
    h.Write([]byte(str))
    return hex.EncodeToString(h.Sum(nil))
}</code></pre>
<h3 id="16位md5加密后字符串"><a href="#16位md5加密后字符串" class="headerlink" title="16位md5加密后字符串"></a>16位md5加密后字符串</h3><p>16位md5加密字符串就是32位最中间的那16位，可以先使用md5计算出32位字符串，再取其中的[8:24]子字符串就可以了</p>
<pre><code class="line-numbers language-go">func Md5To16(str string) string {
    return Md5(str)[8:24]
}</code></pre>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><pre><code class="line-numbers language-go">
import (
    &quot;crypto/md5&quot;
    &quot;encoding/hex&quot;
    &quot;fmt&quot;
)

func main() {
    fmt.Println(Md5(&quot;guoke&quot;))
    fmt.Println(Md5To16(&quot;guoke&quot;))
}</code></pre>
<p>输出测试结果为:</p>
<pre><code>f1ae62e1c76c5150f9b0d7e17db95dab
c76c5150f9b0d7e1</code></pre><p>对面cmd5网站md5数据<br><img src="//gitee.com/guoke3915/zw/raw/master/p/7ea5e881/19826068-94b873a877e19b9c.png" alt></p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>将 .pem 文件与 .ppk 互相转换</title>
    <url>/p/9dd52052.html</url>
    <content><![CDATA[<h2 id="一、Windows中"><a href="#一、Windows中" class="headerlink" title="一、Windows中"></a>一、Windows中</h2><h3 id="安装PuTTYgen"><a href="#安装PuTTYgen" class="headerlink" title="安装PuTTYgen"></a>安装PuTTYgen</h3><p>先下载<a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html" target="_blank" rel="noopener">PuTTYgen</a>，直接安装。</p>
<h3 id="将-pem-文件转换为-ppk-文件"><a href="#将-pem-文件转换为-ppk-文件" class="headerlink" title="将 .pem 文件转换为 .ppk 文件"></a>将 .pem 文件转换为 .ppk 文件</h3><p>1、启动 PuTTYgen</p>
<p>2、点File-&gt;Load private key。修改文件类型为<code>All Files(*.*)</code>，加入pem文件</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/9dd52052/19826068-4ef480f75c00e994.png" alt></p>
<p>3、点File-&gt;Save private key。导出为ppk文件</p>
<h3 id="将-ppk-文件转换为-pem-文件"><a href="#将-ppk-文件转换为-pem-文件" class="headerlink" title="将 .ppk 文件转换为 .pem 文件"></a>将 .ppk 文件转换为 .pem 文件</h3><p>1、启动 PuTTYgen</p>
<p>2、点File-&gt;Load private key。直接load加入ppk文件</p>
<p>3、点Conversions-&gt;Export OpenSSH key，输入导出密钥文件名 *.pem</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/9dd52052/19826068-39593c8e45dbd67a.png" alt></p>
<h2 id="Linux中"><a href="#Linux中" class="headerlink" title="Linux中"></a>Linux中</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre><code class="line-numbers language-bash">yum install -y putty</code></pre>
<h3 id="将-pem-文件转换为-ppk-文件-1"><a href="#将-pem-文件转换为-ppk-文件-1" class="headerlink" title="将 .pem 文件转换为 .ppk 文件"></a>将 .pem 文件转换为 .ppk 文件</h3><pre><code class="line-numbers language-bash">puttygen pemKey.pem -o ppkKey.ppk -O private</code></pre>
<h3 id="将-ppk-文件转换为-pem-文件-1"><a href="#将-ppk-文件转换为-pem-文件-1" class="headerlink" title="将 .ppk 文件转换为 .pem 文件"></a>将 .ppk 文件转换为 .pem 文件</h3><pre><code class="line-numbers language-bash">puttygen ppkkey.ppk -O private-openssh -o pemkey.pem</code></pre>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>软件使用</tag>
        <tag>Window</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>go中Nats基本使用</title>
    <url>/p/be3543e0.html</url>
    <content><![CDATA[<p>NATS是一个开源的，云原生的消息系统。前面讲过<a href="https://www.jianshu.com/p/ba6de3508fa6" target="_blank" rel="noopener">CentOS 7 安装nats server</a>。当NATS作为发布-订阅引擎时，它提供了三种消息传递模式：</p>
<ul>
<li>发布-订阅</li>
<li>队列</li>
<li>请求-响应</li>
</ul>
<p>下面简单介绍一下Go中实现这三种消息传递。</p>
<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><pre><code class="line-numbers language-bash">go get github.com/nats-io/nats.go/</code></pre>
<h2 id="二、导入"><a href="#二、导入" class="headerlink" title="二、导入"></a>二、导入</h2><pre><code class="line-numbers language-go">import &quot;github.com/nats-io/nats.go&quot;</code></pre>
<h2 id="三、连接Nats服务器"><a href="#三、连接Nats服务器" class="headerlink" title="三、连接Nats服务器"></a>三、连接Nats服务器</h2><pre><code class="line-numbers language-go">// 直接传入nats服务器端口和地址就可以了
nc, _ := nats.Connect(&quot;nats://127.0.0.1:4222&quot;)</code></pre>
<h2 id="四、消息传递"><a href="#四、消息传递" class="headerlink" title="四、消息传递"></a>四、消息传递</h2><h3 id="订阅者"><a href="#订阅者" class="headerlink" title="订阅者"></a>订阅者</h3><pre><code class="line-numbers language-go">package main

import (
    &quot;fmt&quot;
    &quot;github.com/nats-io/nats.go&quot;
    &quot;os/signal&quot;
    &quot;runtime&quot;
    &quot;syscall&quot;
)

func main() {
    // 连接Nats服务器
    nc, _ := nats.Connect(&quot;nats://127.0.0.1:4222&quot;)

    // 发布-订阅 模式，异步订阅 test1
    _, _ = nc.Subscribe(&quot;test1&quot;, func(m *nats.Msg) {
        fmt.Printf(&quot;Received a message: %s\n&quot;, string(m.Data))
    })

    // 队列 模式，订阅 test2， 队列为queue, test2 发向所有队列，同一队列只有一个能收到消息
    _, _ = nc.QueueSubscribe(&quot;test2&quot;, &quot;queue&quot;, func(msg *nats.Msg) {
        fmt.Printf(&quot;Queue a message: %s\n&quot;, string(msg.Data))
    })

    // 请求-响应， 响应 test3 消息。
    _, _ = nc.Subscribe(&quot;test3&quot;, func(m *nats.Msg) {
        fmt.Printf(&quot;Reply a message: %s\n&quot;, string(m.Data))
        _ = nc.Publish(m.Reply, []byte(&quot;I can help!!&quot;))
    })

    // 持续发送不需要关闭
    //_ = nc.Drain()

    // 关闭连接
    //nc.Close()

    // 阻止进程结束而收不到消息
    signal.Ignore(syscall.SIGHUP)
    runtime.Goexit()
}</code></pre>
<h3 id="发布者"><a href="#发布者" class="headerlink" title="发布者"></a>发布者</h3><pre><code class="line-numbers language-go">import (
    &quot;fmt&quot;
    &quot;github.com/nats-io/nats.go&quot;
    &quot;time&quot;
)

func main() {

    // 连接Nats服务器
    nc, _ := nats.Connect(&quot;nats://127.0.0.1:4222&quot;)

    // 发布-订阅 模式，向 test1 发布一个 `Hello World` 数据
    _ = nc.Publish(&quot;test1&quot;, []byte(&quot;Hello World&quot;))

    // 队列 模式，发布是一样的，只是订阅不同，向 test2 发布一个 `Hello zngw` 数据
    _ = nc.Publish(&quot;test2&quot;, []byte(&quot;Hello zngw&quot;))

    // 请求-响应， 向 test3 发布一个 `help me` 请求数据，设置超时间3秒，如果有多个响应，只接收第一个收到的消息
    msg, err := nc.Request(&quot;test3&quot;, []byte(&quot;help me&quot;), 3*time.Second)
    if err != nil {
        fmt.Println(err)
    } else {
        fmt.Printf(&quot;help answer : %s\n&quot;, string(msg.Data))
    }

    // 持续发送不需要关闭
    //_ = nc.Drain()

    // 关闭连接
    //nc.Close()
}
</code></pre>
<h2 id="五、subject-通配符"><a href="#五、subject-通配符" class="headerlink" title="五、subject 通配符"></a>五、subject 通配符</h2><p>nats-server 在管理 subject 的时候是通过’.’ 进行分割的，server 底层是使用 tree module 分层管理 subject. 此处有两个通配符<code>*</code>和<code>&gt;</code>。</p>
<ul>
<li><p><code>*</code>可以匹配以<code>.</code>分割的一切。如：<br><code>nc.Subscribe(&quot;aa.*.cc&quot;, func(m *Msg) {})</code> 可以匹配 <code>aa.11.cc</code>、<code>aa.zngw.cc</code>,但不能匹配<code>aa.11.zngw.cc</code></p>
</li>
<li><p><code>&gt;</code> 需要放在通配符最后，匹配后面所有长度。如：<br><code>nc.Subscribe(&quot;aa.&gt;&quot;, func(m *Msg) {})</code>，这个匹配所有 <code>aa.</code>开送的subject </p>
</li>
</ul>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP和UDP端口测试</title>
    <url>/p/fd94168b.html</url>
    <content><![CDATA[<p>我们测试电脑网是否正常的时候习惯用ping，但ping是基于ICMP协议，所认它并不能检测TCP或UDP端口是否正常。</p>
<h2 id="telnet命令"><a href="#telnet命令" class="headerlink" title="telnet命令"></a>telnet命令</h2><p>在linux和win中都可以用telnet命令来测试TCP的端口是否正常。</p>
<h3 id="linux下安装"><a href="#linux下安装" class="headerlink" title="linux下安装"></a>linux下安装</h3><pre><code class="line-numbers language-bash">yum install -y telnet</code></pre>
<h3 id="win下安装"><a href="#win下安装" class="headerlink" title="win下安装"></a>win下安装</h3><p>进入 控制面板-&gt; 所有控制面板项 -&gt; 程序和功能 -&gt; 启用或关闭Windows功能，找到 <code>Telnet Client</code>并开启</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/fd94168b/19826068-baf270d9c20600a8.png" alt></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><code>telnet IP/域名 port</code></p>
<pre><code class="line-numbers language-bash">[root@zngw ~]# telnet zengwu.com.cn 80
Trying 8.141.190.210...
Connected to zengwu.com.cn.
Escape character is &#39;^]&#39;.
^CConnection closed by foreign host.</code></pre>
<p>说明zengwu.com.cn的80端口是联通的</p>
<h2 id="nc命令"><a href="#nc命令" class="headerlink" title="nc命令"></a>nc命令</h2><h3 id="linux下安装-1"><a href="#linux下安装-1" class="headerlink" title="linux下安装"></a>linux下安装</h3><pre><code class="line-numbers language-bash">yum install -y nc</code></pre>
<h3 id="win下安装-1"><a href="#win下安装-1" class="headerlink" title="win下安装"></a>win下安装</h3><p>win下需要下载netcat运行程序<a href="https://eternallybored.org/misc/netcat/" target="_blank" rel="noopener">https://eternallybored.org/misc/netcat/</a></p>
<p>下载后直接解压，将<code>nc.exe</code>复制到<code>C:\Windows\System32</code>目录或装<code>nc.exe</code>添加到系统path环境变量中</p>
<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><h4 id="测试TCP"><a href="#测试TCP" class="headerlink" title="测试TCP"></a>测试TCP</h4><p><code>nc -vz IP/域名 port</code></p>
<pre><code class="line-numbers language-bash">[root@zngw ~]# nc -vz zengwu.com.cn 80
Ncat: Version 7.50 ( https://nmap.org/ncat )
Ncat: Connected to 8.141.190.210:80.
Ncat: 0 bytes sent, 0 bytes received in 0.04 seconds.</code></pre>
<h4 id="测试UDP"><a href="#测试UDP" class="headerlink" title="测试UDP"></a>测试UDP</h4><p><code>nc -vuz IP/域名 port</code></p>
<pre><code class="line-numbers language-bash">[root@qy ~]# nc -vuz zengwu.com.cn 5000
Ncat: Version 7.50 ( https://nmap.org/ncat )
Ncat: Connected to 8.141.190.210:80:5000.
Ncat: UDP packet sent successfully
Ncat: 1 bytes sent, 0 bytes received in 0.11 seconds.</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>go使用spf13cobra库</title>
    <url>/p/bb5c39b2.html</url>
    <content><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p><a href="http://github.com/spf13/cobra" target="_blank" rel="noopener">cobra</a>是一个命令行程序库，其提供简单的接口来创建强大现代的CLI接口，可以用来编写命令行程序。同时，它也提供了一个脚手架， 用于生成基于 cobra 的应用程序框架。</p>
<h2 id="二、概念"><a href="#二、概念" class="headerlink" title="二、概念"></a>二、概念</h2><p>Cobra基于三个基本概念commands,arguments和flags。其中commands代表行为，arguments代表数值，flags代表对行为的改变。<br>基本模型如下：<br><code>APPNAME VERB NOUN --ADJECTIVE</code>或者<code>APPNAME COMMAND ARG --FLAG</code></p>
<p>例如：</p>
<pre><code class="line-numbers language-go"># server是commands，port是flag
hugo server --port=1313

# clone是commands，URL是arguments，brae是flags
git clone URL --bare</code></pre>
<h3 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h3><p>Commands是应用的中心点，同样commands可以有子命令(children commands)，其分别包含不同的行为。<br>Commands的结构体如下：</p>
<pre><code class="line-numbers language-go">type Command struct {
    Use string // The one-line usage message.
    Short string // The short description shown in the &#39;help&#39; output.
    Long string // The long message shown in the &#39;help &lt;this-command&gt;&#39; output.
    Run func(cmd *Command, args []string) // Run runs the command.
}</code></pre>
<h3 id="Flags"><a href="#Flags" class="headerlink" title="Flags"></a>Flags</h3><p>Flags用来改变commands的行为。其完全支持POSIX命令行模式和Go的flag包。这里的flag使用的是<a href="https://github.com/spf13/pflag" target="_blank" rel="noopener">spf13/pflag</a>包，具体可以参考<a href="https://o-my-chenjian.com/2017/09/20/Using-Flag-And-Pflag-With-Golang/" target="_blank" rel="noopener">Golang之使用Flag和Pflag</a>.</p>
<p>cobra 中选项分为Flags，一种是永久选项，定义它的命令和其子命令都可以使用。通过给根命令添加一个选项定义全局选项。 另一种是本地选项，只能在定义它的命令中使用。</p>
<p>与flag一样，存储选项的变量也需要提前定义好：</p>
<pre><code class="line-numbers language-go">var Verbose bool
var Source string</code></pre>
<p>设置永久Flags：</p>
<pre><code class="line-numbers language-go">rootCmd.PersistentFlags().BoolVarP(&amp;Verbose, &quot;verbose&quot;, &quot;v&quot;, false, &quot;verbose output&quot;)</code></pre>
<p>设置本地Flags：</p>
<pre><code class="line-numbers language-go">localCmd.Flags().StringVarP(&amp;Source, &quot;source&quot;, &quot;s&quot;, &quot;&quot;, &quot;Source directory to read from&quot;)</code></pre>
<h3 id="Arguments"><a href="#Arguments" class="headerlink" title="Arguments"></a>Arguments</h3><h4 id="Leagacy-arg-validation有以下几类："><a href="#Leagacy-arg-validation有以下几类：" class="headerlink" title="Leagacy arg validation有以下几类："></a>Leagacy arg validation有以下几类：</h4><ul>
<li>NoArgs: 如果包含任何位置参数，命令报错</li>
<li>ArbitraryArgs: 命令接受任何参数</li>
<li>OnlyValidArgs: 如果有位置参数不在ValidArgs中，命令报错</li>
<li>MinimumArgs(init): 如果参数数目少于N个后，命令行报错</li>
<li>MaximumArgs(init): 如果参数数目多余N个后，命令行报错</li>
<li>ExactArgs(init): 如果参数数目不是N个话，命令行报错</li>
<li>RangeArgs(min, max): 如果参数数目不在范围(min, max)中，命令行报错</li>
</ul>
<p>如: 命令行参数不少于1个</p>
<pre><code class="line-numbers language-go">var helloCmd = &amp;cobra.Command {
    Use: &quot;hello&quot;,
    Short: &quot;hello 子命令.&quot;,
    Long: &quot;这是一个Hello 子命令&quot;,
    Args:  cobra.MinimumNArgs(1),
    Run: runHello,
}</code></pre>
<h4 id="自字义Arguments判断"><a href="#自字义Arguments判断" class="headerlink" title="自字义Arguments判断"></a>自字义Arguments判断</h4><pre><code class="line-numbers language-go">var cmd = &amp;cobra.Command{
  Use: &quot;hello&quot;,
  Short: &quot;hello&quot;,
  Args: func(cmd *cobra.Command, args []string) error {
    if len(args) &lt; 1 {
      return errors.New(&quot;requires at least one arg&quot;)
    }
    if myapp.IsValidColor(args[0]) {
      return nil
    }
    return fmt.Errorf(&quot;invalid color specified: %s&quot;, args[0])
  },
  Run: func(cmd *cobra.Command, args []string) {
    fmt.Println(&quot;Hello, World!&quot;)
  },
}</code></pre>
<h2 id="三、快速使用"><a href="#三、快速使用" class="headerlink" title="三、快速使用"></a>三、快速使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre><code class="line-numbers language-go">go get github.com/spf13/cobra/cobra</code></pre>
<h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><pre><code class="line-numbers language-go">import  &quot;github.com/spf13/cobra&quot;</code></pre>
<h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><pre><code class="line-numbers language-bash"> ▾ cjapp/
    ▾ cmd/
        hello.go
        root.go
        version.go
      go.mod
      main.go</code></pre>
<h4 id="go-mod"><a href="#go-mod" class="headerlink" title="go.mod"></a>go.mod</h4><pre><code class="line-numbers language-mod">module zngw

go 1.14

require github.com/spf13/cobra v1.2.1</code></pre>
<h4 id="root-go"><a href="#root-go" class="headerlink" title="root.go"></a>root.go</h4><pre><code class="line-numbers language-go">package cmd

import (
    &quot;fmt&quot;
    &quot;github.com/spf13/cobra&quot;
)

var rootCmd = &amp;cobra.Command {
    Use: &quot;zngw&quot;,
    Short: &quot;这是 cobra 测试程序主入口&quot;,
    Long: `这是 cobra 测试程序主入口， 无参数启动时进入`,
    Run: runRoot,
}

func Execute() {
    if err := rootCmd.Execute(); err != nil {
        panic(err)
    }
}

func runRoot(cmd *cobra.Command, args []string)  {
    fmt.Printf(&quot;execute %s args:%v \n&quot;, cmd.Name(), args)
    // TODO 这里处理无参数启动时程序处理
}</code></pre>
<h4 id="hello-go"><a href="#hello-go" class="headerlink" title="hello.go"></a>hello.go</h4><pre><code class="line-numbers language-go">package cmd

import (
    &quot;fmt&quot;
    &quot;github.com/spf13/cobra&quot;
)

var helloCmd = &amp;cobra.Command {
    Use: &quot;hello&quot;,
    Short: &quot;hello 子命令.&quot;,
    Long: &quot;这是一个Hello 子命令&quot;,
    Args:  cobra.MinimumNArgs(1),
    Run: runHello,
}

func init() {
    rootCmd.AddCommand(helloCmd)
}

func runHello(cmd *cobra.Command, args []string)  {
    // TODO 这里处理hello子命令

    fmt.Println(&quot;Hello &quot;, args[0])
}</code></pre>
<h4 id="version-go"><a href="#version-go" class="headerlink" title="version.go"></a>version.go</h4><pre><code class="line-numbers language-go">package cmd

import (
    &quot;fmt&quot;
    &quot;github.com/spf13/cobra&quot;
)

var versionCmd = &amp;cobra.Command {
    Use: &quot;version&quot;,
    Short: &quot;version 子命令.&quot;,
    Long: &quot;这是一个version 子命令&quot;,
    Run: runVersion,
}

func init() {
    rootCmd.AddCommand(versionCmd)
}

func runVersion(cmd *cobra.Command, args []string)  {
    // TODO 这里处理version子命令

    fmt.Println(&quot;version is 1.0.0&quot;)
}</code></pre>
<h4 id="main-go"><a href="#main-go" class="headerlink" title="main.go"></a>main.go</h4><pre><code class="line-numbers language-go">package main

import (
    &quot;zngw/cmd&quot;
    )

func main()  {
    cmd.Execute()
}</code></pre>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>进入工程目录，直接使用<code>go build</code>编译,编译后的可执行程序为zngw.exe</p>
<ul>
<li>自带<code>-h</code>参数,生成帮助信息</li>
</ul>
<pre><code class="line-numbers language-bash">E:\55\cobra&gt;zngw -h
这是 cobra 测试程序主入口， 无参数启动时进入

Usage:
  zngw [flags]
  zngw [command]

Available Commands:
  completion  generate the autocompletion script for the specified shell
  hello       hello 子命令.
  help        Help about any command
  version     version 子命令.

Flags:
  -h, --help   help for zngw

Use &quot;zngw [command] --help&quot; for more information about a command.</code></pre>
<ul>
<li>测试子命令</li>
</ul>
<pre><code class="line-numbers language-bash">E:\55\zngw&gt;zngw
execute zngw args:[]

E:\55\zngw&gt;zngw hello guoke
Hello  guoke

E:\55\zngw&gt;zngw version
version is 1.0.0</code></pre>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>go使用redis</title>
    <url>/p/87d17cc3.html</url>
    <content><![CDATA[<p>在go中可以使用<a href="https://github.com/go-redis/redis" target="_blank" rel="noopener">github.com/go-redis/redis</a>来操作Redis</p>
<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><p>现在最新的版本是 v8</p>
<pre><code class="line-numbers language-bash">go get github.com/go-redis/redis/v8</code></pre>
<h2 id="二、导入包"><a href="#二、导入包" class="headerlink" title="二、导入包"></a>二、导入包</h2><pre><code class="line-numbers language-go">import (
    &quot;context&quot;
    &quot;github.com/go-redis/redis/v8&quot;
)</code></pre>
<h2 id="三、连接Redis"><a href="#三、连接Redis" class="headerlink" title="三、连接Redis"></a>三、连接Redis</h2><p>使用初始化InitRedis来连接Redis数据库，输入的url参数为格式。如：<code>redis://:123456@127.0.0.1:6379</code></p>
<ul>
<li>redis://： 协议头，固定格式</li>
<li>:前面 ：redis无用户，所以为空</li>
<li>123456：redis密码</li>
<li>127.0.0.1： redis ip</li>
<li>6379： redis 端口</li>
</ul>
<pre><code class="line-numbers language-go">var client *redis.Client

// url为redis地址
func InitRedis(url string) (err error) {
    if strings.HasPrefix(url, &quot;redis://&quot;) {
        url = url[8:]
    }

    var pwd string
    if c := strings.Index(url, &quot;@&quot;); c != -1 {
        pair := strings.SplitN(url[:c], &quot;:&quot;, 2)
        if len(pair) &gt; 1 {
            pwd = pair[1]
        }
        url = url[c+1:]
    }

    client = redis.NewClient(&amp;redis.Options{
        Addr:     url,
        Password: pwd,
        DB:       0,
    })

    return
}</code></pre>
<h2 id="四、string字符串操作"><a href="#四、string字符串操作" class="headerlink" title="四、string字符串操作"></a>四、string字符串操作</h2><pre><code class="line-numbers language-go">     // 判断key是否存在
    _, err := client.Get(context.Background(), &quot;zngw&quot;).Result()
    if err == redis.Nil {
        fmt.Println(&quot;key不存在&quot;)
    } else {
        fmt.Println(&quot;key存在&quot;)
    }

    // 设置string
    err = client.Set(context.Background(), &quot;zngw&quot;, &quot;hello&quot;, 0).Err()
    if err != nil {
        fmt.Println(err)
    }

    // 获取string
    val2, err := client.Get(context.Background(), &quot;zngw&quot;).Result()
    if err != nil {
        fmt.Println(err)
    }
    fmt.Println(&quot;读取 zngw :&quot;, val2)

    // 设置带超时时间的string
    set, err := client.SetNX(context.Background(), &quot;guoke&quot;, &quot;hello&quot;, 10*time.Second).Result()
    if set {
        fmt.Println(&quot;设置成功&quot;)
    } else {
        fmt.Println(&quot;设置失败&quot;)
    }</code></pre>
<h2 id="五、Hash操作"><a href="#五、Hash操作" class="headerlink" title="五、Hash操作"></a>五、Hash操作</h2><pre><code class="line-numbers language-go">    // 设置Hash Key
    err = client.HSet(context.Background(), &quot;key&quot;, &quot;hash:key&quot;, &quot;value&quot;).Err()
    if err != nil {
        fmt.Println(err)
    }

    // 获取Hash Key
    val1, err := client.HGet(context.Background(), &quot;key&quot;, &quot;hash:key&quot;).Result()
    if err != nil {
        fmt.Println(err)
    }
    fmt.Println(&quot;读取 zngw :&quot;, val1)

    // 获取Key所有键值
    val2, err := client.HGetAll(context.Background(), &quot;key&quot;).Result()
    if err != nil {
        fmt.Println(err)
    }

    for k, v := range val2 {
        fmt.Println(&quot;key:&quot;, k, &quot;value:&quot;, v)
    }</code></pre>
<h2 id="六、批量处理"><a href="#六、批量处理" class="headerlink" title="六、批量处理"></a>六、批量处理</h2><pre><code class="line-numbers language-go">func batchSet() {
    pipeline := client.Pipeline()
    ctx := context.Background()
    for i := 0; i &lt; 100; i++ {
        key := fmt.Sprintf(&quot;%d&quot;, i)
        pipeline.HSet(ctx, key, map[string]interface{}{key: key})
    }

    _, err := pipeline.Exec(ctx)
    if err != nil {
        panic(err)
    }
}

func batchGet() {
    pipeline := client.Pipeline()
    ctx := context.Background()
    result := make([]*redis.StringStringMapCmd, 0)
    for i := 0; i &lt; 100; i++ {
        key := fmt.Sprintf(&quot;%d&quot;, i)
        result = append(result, pipeline.HGetAll(ctx, key))
    }

    _, _ = pipeline.Exec(ctx)
    for _, r := range result {
        v, err := r.Result()
        if err != nil {
            panic(err)
        }

        fmt.Println(v)
    }
}</code></pre>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>go使用Google Authenticator二次验证</title>
    <url>/p/b84da620.html</url>
    <content><![CDATA[<p>很多网站或应用登录验证除了账号密码外还加了二次验证，有短信验证码、邮箱验证码的，Google Authenticator二次验证使用范围也越来越广泛了。</p>
<h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><p>一般都是基于时间戳的Google Authenticator动态口令，这是一个每隔30s会动态生成一个6位数的数字，只要手机端时间与服务器时间误差不超过30秒，基本上生成生成动态口令一致。</p>
<h2 id="二、操作过程"><a href="#二、操作过程" class="headerlink" title="二、操作过程"></a>二、操作过程</h2><h3 id="1、-下载-Google-身份验证器"><a href="#1、-下载-Google-身份验证器" class="headerlink" title="1、 下载 Google 身份验证器"></a>1、 下载 Google 身份验证器</h3><h3 id="2、-生成秘钥"><a href="#2、-生成秘钥" class="headerlink" title="2、 生成秘钥"></a>2、 生成秘钥</h3><p>使用代码中的<code>GetSecret()</code>函数生成密钥字符串，然后将字符串保存到用户登录信息中，然后将密钥字符串添加到<code>Google 身份验证器</code>中</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/b84da620/19826068-5dd5071e44dc576c.png" alt></p>
<h3 id="3、验证字Google-Code"><a href="#3、验证字Google-Code" class="headerlink" title="3、验证字Google Code"></a>3、验证字Google Code</h3><p>将<code>Google 身份验证器</code>中的Google Code 6位数字输入验证<code>VerifyCode(secret string, code int32) bool</code></p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/b84da620/19826068-d635bb2d103896d7.png" alt></p>
<h2 id="三、实现代码"><a href="#三、实现代码" class="headerlink" title="三、实现代码"></a>三、实现代码</h2><pre><code class="line-numbers language-go">// @Title
// @Description $
// @Author  55
// @Date  2021/9/16
package main

import (
    &quot;crypto/hmac&quot;
    &quot;crypto/rand&quot;
    &quot;crypto/sha1&quot;
    &quot;encoding/base32&quot;
    &quot;fmt&quot;
    &quot;strings&quot;
    &quot;time&quot;
)

func main() {

    fmt.Println(&quot;----------------- 生成secret -------------------&quot;)
    secret := GetSecret()
    fmt.Println(&quot;secret:&quot; + secret)

    fmt.Println(&quot;----------------- 信息校验----------------------&quot;)
    var code int32
    fmt.Print(&quot;请输入Google Code:&quot;)
    for {
        _, err := fmt.Scan(&amp;code)
        if err == nil {
            break
        }

        fmt.Print(&quot;输入错误，请重新输入：&quot;)
    }

    b := VerifyCode(secret, code)
    if b {
        fmt.Println(&quot;验证成功！&quot;)
    } else {
        fmt.Println(&quot;验证失败！&quot;)
    }
}

func GetSecret() string {
    randomStr := randStr(16)
    return strings.ToUpper(randomStr)
}

func randStr(strSize int) string {
    dictionary := &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;
    var bytes = make([]byte, strSize)
    _, _ = rand.Read(bytes)
    for k, v := range bytes {
        bytes[k] = dictionary[v%byte(len(dictionary))]
    }
    return string(bytes)
}

// 为了考虑时间误差，判断前当前时间及前后30秒时间
func VerifyCode(secret string, code int32) bool {
    // 当前google值
    if getCode(secret, 0) == code {
        return true
    }

    // 前30秒google值
    if getCode(secret, -30) == code {
        return true
    }

    // 后30秒google值
    if getCode(secret, 30) == code {
        return true
    }

    return false
}

// 获取Google Code
func getCode(secret string, offset int64) int32 {
    key, err := base32.StdEncoding.DecodeString(secret)
    if err != nil {
        fmt.Println(err)
        return 0
    }

    // generate a one-time password using the time at 30-second intervals
    epochSeconds := time.Now().Unix() + offset
    return int32(oneTimePassword(key, toBytes(epochSeconds/30)))
}

func toBytes(value int64) []byte {
    var result []byte
    mask := int64(0xFF)
    shifts := [8]uint16{56, 48, 40, 32, 24, 16, 8, 0}
    for _, shift := range shifts {
        result = append(result, byte((value&gt;&gt;shift)&amp;mask))
    }
    return result
}

func toUint32(bytes []byte) uint32 {
    return (uint32(bytes[0]) &lt;&lt; 24) + (uint32(bytes[1]) &lt;&lt; 16) +
        (uint32(bytes[2]) &lt;&lt; 8) + uint32(bytes[3])
}

func oneTimePassword(key []byte, value []byte) uint32 {
    // sign the value using HMAC-SHA1
    hmacSha1 := hmac.New(sha1.New, key)
    hmacSha1.Write(value)
    hash := hmacSha1.Sum(nil)

    // We&#39;re going to use a subset of the generated hash.
    // Using the last nibble (half-byte) to choose the index to start from.
    // This number is always appropriate as it&#39;s maximum decimal 15, the hash will
    // have the maximum index 19 (20 bytes of SHA1) and we need 4 bytes.
    offset := hash[len(hash)-1] &amp; 0x0F

    // get a 32-bit (4-byte) chunk from the hash starting at offset
    hashParts := hash[offset : offset+4]

    // ignore the most significant bit as per RFC 4226
    hashParts[0] = hashParts[0] &amp; 0x7F

    number := toUint32(hashParts)

    // size to 6 digits
    // one million is the first number with 7 digits so the remainder
    // of the division will always return &lt; 7 digits
    pwd := number % 1000000

    return pwd
}</code></pre>
<h2 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h2><pre><code class="line-numbers language-test">----------------- 生成secret -------------------
secret:SASMVFZPOQVPXKTW
----------------- 信息校验----------------------
请输入Google Code:199186
验证成功！</code></pre>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云盘分享文件格式</title>
    <url>/p/f41fb63a.html</url>
    <content><![CDATA[<p>经过一段时间的公测，不限速的<a href="https://pages.aliyundrive.com/mobile-page/web/beinvited.html?code=f01dcaf" target="_blank" rel="noopener">阿里云盘</a>终于上线了，而且开放了分享功能，依然是不限速。<br>目前阿里云盘支持分享单个文件和整个文件夹，文件格式方面支持分享图片、视频、文档，具体的支持列表如下：</p>
<ul>
<li>图片支持以下格式: PNG、JPG、JPEG、BMP、GIF、WEBP</li>
<li>视频文件支持以下格式: AVI、FLV、MP4、MPG、ASF、WMV、MOV、WMA、RMVB、RM、 FLASH、TS</li>
<li>音频文件支持以下格式: MP3、WAV、AAC、WMA、OGG、M4A、AMR、 AUDIO、M3U8</li>
<li>文档支持以下格式: PDF、WORD、TXT、PPT、 EXCEL、 OUTLOOK、 VISIO、RTF<br>很可惜的是，目前并不支持 ZIP、RAR 等压缩包等格式的分享，所以很多资源只能修改扩展名后再分享出去。比如要分享一个zip，需要把文件格式改为mp4之类的，别人下好后再改回来再用。</li>
</ul>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
      </tags>
  </entry>
  <entry>
    <title>ping IPV6地址</title>
    <url>/p/5c33192f.html</url>
    <content><![CDATA[<p>现在ipv6使用越来越多了，那怎么ping ipv6的地址呢</p>
<h2 id="win中"><a href="#win中" class="headerlink" title="win中"></a>win中</h2><p>win中可以在cmd窗口中使用<code>ping -6 [ipv6 地址]</code>来ping ipv6的地址。</p>
<p>如：ipv6的地址为[fe80::2204:fff:fee6:10c5] </p>
<pre><code class="line-numbers language-bat">C:\Users\Administrator&gt;ping -6 fe80::2204:fff:fee6:10c5

正在 Ping fe80::2204:fff:fee6:10c5 具有 32 字节的数据:
来自 fe80::2204:fff:fee6:10c5 的回复: 时间&lt;1ms
来自 fe80::2204:fff:fee6:10c5 的回复: 时间&lt;1ms
来自 fe80::2204:fff:fee6:10c5 的回复: 时间&lt;1ms</code></pre>
<h2 id="linux中"><a href="#linux中" class="headerlink" title="linux中"></a>linux中</h2><p>先使用ifconfig查看网卡ID。然后使用 <code>ping6  -I [网卡ID] [ipv6地址]</code>。<br>如：这里的网卡为<code>ens192</code>，ipv6的地址为[fe80::2204:fff:fee6:10c5] </p>
<pre><code class="line-numbers language-bash">[root@zngw ~]# ping6 -I ens192 fe80::2204:fff:fee6:10c5
PING fe80::2204:fff:fee6:10c5(fe80::2204:fff:fee6:10c5) from fe80::8709:722a:ba7d:37d7%ens192 ens192: 56 data bytes
64 bytes from fe80::2204:fff:fee6:10c5%ens192: icmp_seq=1 ttl=64 time=0.230 ms
64 bytes from fe80::2204:fff:fee6:10c5%ens192: icmp_seq=2 ttl=64 time=0.122 ms
64 bytes from fe80::2204:fff:fee6:10c5%ens192: icmp_seq=3 ttl=64 time=0.117 ms</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>go判断interface类型及类型转换</title>
    <url>/p/1b129c20.html</url>
    <content><![CDATA[<p>在golang中，interface{}允许接纳任意值，类似于Java中的Object类型。</p>
<p>可以直接用<code>switch value.(type)</code> 来判断类型，如：</p>
<pre><code class="line-numbers language-go">type Test struct {
    Test string
}

func test(value interface{}) {
    switch value.(type) {
    case string:
        // 将interface转为string字符串类型
        fmt.Println(&quot;value type is string&quot;)
    case int32:
        // 将interface转为int32类型
        fmt.Println(&quot;value type is int32&quot;)
    case int64:
        // 将interface转为int64类型
        fmt.Println(&quot;value type is int64&quot;)
    case Test:
        // 将interface转为Test struct类型
        fmt.Println(&quot;value type is Test struct&quot;)
    case []int:
        // 将interface转为切片类型
        fmt.Println(&quot;value type is Test []int&quot;)
    default:
        fmt.Println(&quot;unknown&quot;)
    }
}</code></pre>
<p>如果是单类型判断和转换可以用 <code>v , ok = value.(type)</code> 来判断和转换。</p>
<ul>
<li>v：转换后的值</li>
<li>ok：是否转换成功，如果类型不对，返回false</li>
<li>value：interface{}变量</li>
<li>type：需要转换的类型，如：string、int32、int64、float64等等</li>
</ul>
<p>如interface{}转string：</p>
<pre><code class="line-numbers language-go">func test(value interface{}) {

    if op, ok := value.(string); ok {
        fmt.Println(&quot;value type is string:&quot;, op)
    } else {
        fmt.Println(&quot;value type is not string&quot;)
    }
}</code></pre>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go中操作MongoDB</title>
    <url>/p/c9922d75.html</url>
    <content><![CDATA[<p>之前用了mgo.v2来操作MongoDB数据库，后面发现MongoDB 5时mgo.v2连接就出问题了。然后就改用<code>mongo-driver</code>来操作MongoDB数据库。</p>
<h2 id="1、pool-连接池模式"><a href="#1、pool-连接池模式" class="headerlink" title="1、pool 连接池模式"></a>1、pool 连接池模式</h2><pre><code class="line-numbers language-go">func ConnectToDB(uri, name string, timeout time.Duration) (*mongo.Database, error)  {
    // 设置连接超时时间
    ctx, cancel := context.WithTimeout(context.Background(), timeout)
    defer cancel()
    // 通过传进来的uri连接相关的配置
    o := options.Client().ApplyURI(uri)
    // 发起链接
    client, err := mongo.Connect(ctx, o)
    if err != nil {
        log.Fatal(err)
        return nil, err
    }
    // 判断服务是不是可用
    if err = client.Ping(context.Background(), readpref.Primary()); err != nil {
        log.Fatal(err)
        return nil, err
    }
    // 返回 client
    return client.Database(name), nil
}</code></pre>
<h2 id="2、AddOne-新增一条数据"><a href="#2、AddOne-新增一条数据" class="headerlink" title="2、AddOne 新增一条数据"></a>2、AddOne 新增一条数据</h2><pre><code class="line-numbers language-go">func AddOne(t *Test)  {
    objId, err := collection.InsertOne(context.TODO(), &amp;t)
    if err != nil {
        log.Println(err)
        return
    }
    log.Println(&quot;录入数据成功，objId:&quot;,objId)
}</code></pre>
<h2 id="3、删除一条数据"><a href="#3、删除一条数据" class="headerlink" title="3、删除一条数据"></a>3、删除一条数据</h2><pre><code class="line-numbers language-go">func Del(m bson.M)  {
    deleteResult, err := collection.DeleteOne(context.Background(), m)
    if err != nil {
        log.Fatal(err)
    }
    log.Println(&quot;collection.DeleteOne:&quot;, deleteResult)
}</code></pre>
<h2 id="4、EditOne-编辑一条数据"><a href="#4、EditOne-编辑一条数据" class="headerlink" title="4、EditOne 编辑一条数据"></a>4、EditOne 编辑一条数据</h2><pre><code class="line-numbers language-go">func EditOne(t *Test,m bson.M)  {
    update := bson.M{&quot;$set&quot;: t}
    updateResult, err := collection.UpdateOne(context.Background(),  m, update)
    if err != nil {
        log.Fatal(err)
    }
    log.Println(&quot;collection.UpdateOne:&quot;, updateResult)
}</code></pre>
<h2 id="5、更新数据-存在更新，不存在就新增"><a href="#5、更新数据-存在更新，不存在就新增" class="headerlink" title="5、更新数据 - 存在更新，不存在就新增"></a>5、更新数据 - 存在更新，不存在就新增</h2><pre><code class="line-numbers language-go">func Update(t *Test,m bson.M)  {
    update := bson.M{&quot;$set&quot;: t}
    updateOpts := options.Update().SetUpsert(true)
    updateResult, err := collection.UpdateOne(context.Background(), m, update, updateOpts)
    if err != nil {
        log.Fatal(err)
    }
    log.Println(&quot;collection.UpdateOne:&quot;, updateResult)
}</code></pre>
<h2 id="6、Sectle-模糊查询"><a href="#6、Sectle-模糊查询" class="headerlink" title="6、Sectle 模糊查询"></a>6、Sectle 模糊查询</h2><pre><code class="line-numbers language-go">func Sectle(m bson.M)  {
    cur, err := collection.Find(context.Background(), m)
    if err != nil {
        log.Fatal(err)
    }
    if err := cur.Err(); err != nil {
        log.Fatal(err)
    }

    for cur.Next(context.Background()) {
        var t Test
        if err = cur.Decode(&amp;t); err != nil {
            log.Fatal(err)
        }
        log.Println(&quot;collection.Find name=primitive.Regex{xx}: &quot;, t)
    }
    _ = cur.Close(context.Background())
}</code></pre>
<h2 id="7、准确搜索一条数据"><a href="#7、准确搜索一条数据" class="headerlink" title="7、准确搜索一条数据"></a>7、准确搜索一条数据</h2><pre><code class="line-numbers language-go">func GetOne(m bson.M)  {
    var one Test
    err := collection.FindOne(context.Background(), m).Decode(&amp;one)
    if err != nil {
        log.Fatal(err)
    }
    log.Println(&quot;collection.FindOne: &quot;, one)
}</code></pre>
<h2 id="8、GetList-获取多条数据"><a href="#8、GetList-获取多条数据" class="headerlink" title="8、GetList 获取多条数据"></a>8、GetList 获取多条数据</h2><pre><code class="line-numbers language-go">func GetList(m bson.M)  {
    cur, err := collection.Find(context.Background(), m)
    if err != nil {
        log.Fatal(err)
    }
    if err := cur.Err(); err != nil {
        log.Fatal(err)
    }
    var all []*Test
    err = cur.All(context.Background(), &amp;all)
    if err != nil {
        log.Fatal(err)
    }
    _ = cur.Close(context.Background())

    log.Println(&quot;collection.Find curl.All: &quot;, all)
    for _, one := range all {
        log.Println(&quot;Id:&quot;,one.Id,&quot; - name:&quot;,one.Name,&quot; - level:&quot;,one.Level)
    }
}</code></pre>
<h2 id="9、统计collection的数据总数"><a href="#9、统计collection的数据总数" class="headerlink" title="9、统计collection的数据总数"></a>9、统计collection的数据总数</h2><pre><code class="line-numbers language-go">func Count()  {
    count, err := collection.CountDocuments(context.Background(), bson.D{})
    if err != nil {
        log.Fatal(count)
    }
    log.Println(&quot;collection.CountDocuments:&quot;, count)
}</code></pre>
<h2 id="10、测试"><a href="#10、测试" class="headerlink" title="10、测试"></a>10、测试</h2><pre><code class="line-numbers language-go">import (
    &quot;context&quot;
    &quot;go.mongodb.org/mongo-driver/bson&quot;
    &quot;go.mongodb.org/mongo-driver/bson/primitive&quot;
    &quot;go.mongodb.org/mongo-driver/mongo&quot;
    &quot;go.mongodb.org/mongo-driver/mongo/options&quot;
    &quot;go.mongodb.org/mongo-driver/mongo/readpref&quot;
    &quot;log&quot;
    &quot;time&quot;
)

// 数据结构体
type Test struct {
    Id string `bson:&quot;_id&quot;`
    Name string `bson:&quot;name&quot;`
    Level int `bson:&quot;level&quot;`
}

var db *mongo.Database                 // database 话柄
var collection *mongo.Collection     // collection 话柄

func main() {
    uri := &quot;mongodb://root:123456@127.0.0.1:27017/admin&quot;
    name := &quot;Test&quot;
    maxTime := time.Duration(2)     // 链接超时时间
    table := &quot;test&quot;                 // 表名

    db, err := ConnectToDB(uri, name, maxTime)
    if err != nil {
        panic(&quot;链接数据库有误!&quot;)
    }

    collection = db.Collection(table)

    t := Test{
        Id:    &quot;1&quot;,
        Name:  &quot;zngw&quot;,
        Level: 55,
    }

    // 添加一条数据
    AddOne(&amp;t)

    // EditOne 编辑一条数据
    t.Name = &quot;guoke&quot;
    EditOne(&amp;t, bson.M{&quot;_id&quot;:1})

    // 删除一条数据
    Del(bson.M{&quot;_id&quot;:1})

    // 更新数据 - 存在更新，不存在就新增
    Update(&amp;t, bson.M{&quot;_id&quot;:&quot;1&quot;})

        // Sectle 模糊查询
    Sectle(bson.M{&quot;name&quot;: primitive.Regex{Pattern: &quot;guo&quot;}})

        // 准确搜索一条数据
    GetOne(bson.M{&quot;name&quot;:&quot;guoke&quot;})

        // 统计collection的数据总数
    Count()

        // GetList 获取多条数据
    GetList(bson.M{&quot;level&quot;:55})
}</code></pre>
<pre><code>2021/09/10 23:39:54 录入数据成功，objId: &amp;{1}
2021/09/10 23:39:54 collection.UpdateOne: &amp;{0 0 0 &lt;nil&gt;}
2021/09/10 23:39:54 collection.DeleteOne: &amp;{0}
2021/09/10 23:39:54 collection.UpdateOne: &amp;{1 1 0 &lt;nil&gt;}
2021/09/10 23:39:54 collection.Find name=primitive.Regex{xx}:  {1 guoke 55}
2021/09/10 23:39:54 collection.FindOne:  {1 guoke 55}
2021/09/10 23:39:54 collection.CountDocuments: 1
2021/09/10 23:39:54 collection.Find curl.All:  [0xc0000a2b40]
2021/09/10 23:39:54 Id: 1  - name: guoke  - level: 55</code></pre>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 中使用日志模块</title>
    <url>/p/66a02e20.html</url>
    <content><![CDATA[<p>之前使用过go自带的<code>log</code>和<code>seelog</code>日志，后来又发现一个好用的日志<a href="https://beego.me/docs/module/logs.md" target="_blank" rel="noopener">beego日志模块</a>。<br>在原有的日志中加入了一个tag，只要设置要显示的tag后才会打印出日志，没有设置的tag不显示。</p>
<h2 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h2><pre><code class="line-numbers language-bash">go get github.com/beego/beego/v2/core/logs</code></pre>
<h2 id="2、引入包"><a href="#2、引入包" class="headerlink" title="2、引入包"></a>2、引入包</h2><pre><code class="line-numbers language-go">import (
    &quot;github.com/beego/beego/v2/core/logs&quot;
)</code></pre>
<h2 id="3、初始化配置"><a href="#3、初始化配置" class="headerlink" title="3、初始化配置"></a>3、初始化配置</h2><pre><code class="line-numbers language-go">func init() {
    Log = logs.NewLogger(200)

    // 日志输出调用的文件名和文件行号，默认为false
    Log.EnableFuncCallDepth(true)

    // 如果你的应用自己封装了调用 log 包,那么需要设置 SetLogFuncCallDepth
    // 默认是 2,也就是直接调用的层级,如果你封装了多层,那么需要根据自己的需求进行调整.
    Log.SetLogFuncCallDepth(3)
}</code></pre>
<h3 id="4、设置日志文件"><a href="#4、设置日志文件" class="headerlink" title="4、设置日志文件"></a>4、设置日志文件</h3><pre><code class="line-numbers language-go">var Tags = make(map[string]bool)

// 初始化日志参数
// logWay: file-输出到文件；console-输出到控制台
// logFile: 日志文件
// logLevel: 日志等级
// maxDays: 日志保留天数
// disableLogColor: 是否显示颜色
// tags: 日志显示tag
func InitLog(logWay string, logFile string, logLevel string, maxDays int64, disableLogColor bool, tags []string) {
    setLogFile(logWay, logFile, maxDays, disableLogColor)
    setLogLevel(logLevel)
    setTags(tags)
}

// 设置显示tag
func setTags(tags []string)  {
    if tags != nil {
        for _, tag := range tags {
            Tags[tag] = true
        }
    }
}

// 设置日志文件参数
// logWay: file or console
func setLogFile(logWay string, logFile string, maxdays int64, disableLogColor bool) {
    if logWay == &quot;console&quot; {
        params := &quot;&quot;
        if disableLogColor {
            params = fmt.Sprintf(`{&quot;color&quot;: false}`)
        }
        _ = Log.SetLogger(&quot;console&quot;, params)
    } else {
        params := fmt.Sprintf(`{&quot;filename&quot;: &quot;%s&quot;, &quot;maxdays&quot;: %d}`, logFile, maxdays)
        _ = Log.SetLogger(&quot;file&quot;, params)
    }
}

// 设置日志显示等级
// value: error, warning, info, debug, trace
func setLogLevel(logLevel string) {
    level := 4 // warning
    switch logLevel {
    case &quot;error&quot;:
        level = 3
    case &quot;warn&quot;:
        level = 4
    case &quot;info&quot;:
        level = 6
    case &quot;debug&quot;:
        level = 7
    case &quot;trace&quot;:
        level = 8
    default:
        level = 4
    }
    Log.SetLevel(level)
}

// 获取tag是否显示
func getTag(tag string) (msg string, show bool) {
    if _, ok := Tags[tag]; !ok {
        return
    }

    msg = &quot;[Tag:&quot;+tag+&quot;] &quot;
    show = true

    return
}</code></pre>
<h2 id="5、日志接口封装"><a href="#5、日志接口封装" class="headerlink" title="5、日志接口封装"></a>5、日志接口封装</h2><pre><code class="line-numbers language-go">// wrap log
func Error(tag, format string, v ...interface{}) {
    tag, show := getTag(tag)
    if show {
        Log.Error(tag+format, v...)
    }
}

func Warn(tag,format string, v ...interface{}) {
    tag, show := getTag(tag)
    if show {
        Log.Warn(tag+format, v...)
    }
}

func Info(tag,format string, v ...interface{}) {
    tag, show := getTag(tag)
    if show {
        Log.Info(tag+format, v...)
    }
}

func Debug(tag,format string, v ...interface{}) {
    tag, show := getTag(tag)
    if show {
        Log.Debug(tag+format, v...)
    }
}

func Trace(tag,format string, v ...interface{}) {
    tag, show := getTag(tag)
    if show {
        Log.Trace(tag+format, v...)
    }
}</code></pre>
<h2 id="6、测试"><a href="#6、测试" class="headerlink" title="6、测试"></a>6、测试</h2><pre><code class="line-numbers language-go">package main

import (
    &quot;github.com/zngw/log&quot;
)

func main() {
    // 不设置显示tag
    // log.Init(&quot;&quot;,nil)

    // 初始化日志
    log.InitLog(&quot;file&quot;,&quot;logs/file.log&quot;,&quot;trace&quot;,30,true,[]string{&quot;sys&quot;,&quot;net&quot;})

    // 输出日志: 2019-11-15 01:06:01.215 [D] [main.go:15]  [Tag:sys] [Hello World]
    log.Trace(&quot;sys&quot;,&quot;Hello World&quot;)

    // 输出日志: 2019-11-15 01:06:01.215 [D] [main.go:18]  [Tag:net] [Hello Golang]
    log.Trace(&quot;net&quot;,&quot;Hello Golang&quot;)

    // 这条日志不在显示的tag内，故不输出
    log.Trace(&quot;test&quot;,&quot;Hello zngw&quot;)

    // 输出错误日志: 2019-11-15 01:06:01.215 [E] [main.go:24]  [Tag:net] [Error]
    log.Error(&quot;sys&quot;,&quot;Error&quot;)
}</code></pre>
<p>完整代码参考：<a href="https://github.com/zngw/log" target="_blank" rel="noopener">https://github.com/zngw/log</a></p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>iPhone使用蓝牙鼠标</title>
    <url>/p/c2e36a2e.html</url>
    <content><![CDATA[<p>iPhone手机系统在iOS 13之后，可以支持蓝牙鼠标了。</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>手机：iPhone X</li>
<li>系统：iOS 14.3</li>
<li>鼠标：雷柏AG200</li>
</ul>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="1、手机连接蓝牙鼠标"><a href="#1、手机连接蓝牙鼠标" class="headerlink" title="1、手机连接蓝牙鼠标"></a>1、手机连接蓝牙鼠标</h3><p>按鼠标说明开启蓝牙，使用手机蓝牙连接鼠标。</p>
<h3 id="2、进入手机辅助功能"><a href="#2、进入手机辅助功能" class="headerlink" title="2、进入手机辅助功能"></a>2、进入手机辅助功能</h3><p><img src="//gitee.com/guoke3915/zw/raw/master/p/c2e36a2e/19826068-ef8773b0642d6a59.png" alt></p>
<h3 id="3、进入触控"><a href="#3、进入触控" class="headerlink" title="3、进入触控"></a>3、进入触控</h3><p><img src="//gitee.com/guoke3915/zw/raw/master/p/c2e36a2e/19826068-632f3788b2e23a4a.png" alt></p>
<h3 id="4、进入辅助触控"><a href="#4、进入辅助触控" class="headerlink" title="4、进入辅助触控"></a>4、进入辅助触控</h3><p><img src="//gitee.com/guoke3915/zw/raw/master/p/c2e36a2e/19826068-565db71b19f6757f.png" alt></p>
<h3 id="5、进入鼠标键"><a href="#5、进入鼠标键" class="headerlink" title="5、进入鼠标键"></a>5、进入鼠标键</h3><p><img src="//gitee.com/guoke3915/zw/raw/master/p/c2e36a2e/19826068-feb441ed12bc67bf.png" alt></p>
<h3 id="6、启用鼠标键"><a href="#6、启用鼠标键" class="headerlink" title="6、启用鼠标键"></a>6、启用鼠标键</h3><p><img src="//gitee.com/guoke3915/zw/raw/master/p/c2e36a2e/19826068-509faccc5bb77465.png" alt></p>
<p>这样连接后启用成功后，鼠标屏幕上会有一个小圆点，这个就是鼠标了，可以使用鼠标移动这个小圆点，滚轮、左右键都可以正常使用哈。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>网页内容无法复制</title>
    <url>/p/f72f6493.html</url>
    <content><![CDATA[<p>最近越来越多的网站都不能复制了，有的要会员有的要登录等等。。。</p>
<p>我们以Chrome浏览器为例。</p>
<h2 id="1、-源代码复制"><a href="#1、-源代码复制" class="headerlink" title="1、 源代码复制"></a>1、 源代码复制</h2><p>右键对应的网站，选择<code>查看网页源代码</code>，在源文件找到对应要复制的文字，再复制。不过这个代码有点麻烦，可能包含格式化内容，有点难度</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/f72f6493/19826068-a7eff87dbec54b54.png" alt></p>
<h2 id="2、图文识别"><a href="#2、图文识别" class="headerlink" title="2、图文识别"></a>2、图文识别</h2><p>对于简单文字不太多的网站，可以使用图文识别来完成。QQ截图就有这个功能，可以选用QQ截图装要复制的文字截图，再按图文识别按钮，再从识别出来的内容中复制出来</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/f72f6493/19826068-e0116f7167efa048.png" alt></p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/f72f6493/19826068-aefc5858433bec60.png" alt></p>
<h2 id="3、使用网页插件"><a href="#3、使用网页插件" class="headerlink" title="3、使用网页插件"></a>3、使用网页插件</h2><p>这里推荐一款简单的插件<a href="https://chrome.google.com/webstore/detail/simple-allow-copy/aefehdhdciieocakfobpaaolhipkcpgc/related?utm_source=chrome-app-launcher-info-dialog" target="_blank" rel="noopener">Simple Allow Copy</a>。离线安装包<a href="https://raw.githubusercontent.com/zngw/cdn/master/SaveAllResources-0.1.8_0.crx" target="_blank" rel="noopener">SaveAllResources-0.1.8_0.crx</a>，安装后就和正常网页一样复制了</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/f72f6493/19826068-4fda473a95974914.png" alt></p>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10开机默认开启数字小键盘</title>
    <url>/p/b378ee31.html</url>
    <content><![CDATA[<h2 id="打开注册表"><a href="#打开注册表" class="headerlink" title="打开注册表"></a>打开注册表</h2><p>按<code>Windows + R</code>打开运行窗口，输入<code>regedit</code>打开注册表编辑器</p>
<h2 id="找到注册表"><a href="#找到注册表" class="headerlink" title="找到注册表"></a>找到注册表</h2><p>找到<code>计算机\HKEY_USERS\.DEFAULT\Control Panel\Keyboard</code>项中的<code>InitialKeyboardIndicators</code>值</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/b378ee31/19826068-73d08a1688123c6e.png" alt></p>
<h2 id="修改值"><a href="#修改值" class="headerlink" title="修改值"></a>修改值</h2><p>将<code>InitialKeyboardIndicators</code>值由<code>2147483648</code>，修改为<code>2</code></p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/b378ee31/19826068-e41a3886ec04f805.png" alt></p>
<p>InitialKeyboardIndicators值说明：</p>
<ul>
<li>0：在登录后关闭数字锁定</li>
<li>1：禁用数字锁定</li>
<li>2：在登录后开启数字锁定。（登录页面时还是关闭的）</li>
</ul>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>TortoiseGit使用ssh密钥连接git服务器</title>
    <url>/p/443aa556.html</url>
    <content><![CDATA[<p>使用ssh密钥连接git服务器相对于账号密码来说会安全一丢丢，密钥不丢问题不大。而且很git服务提供商如：github、gitee等都提供ssh密钥访问，可以自己设定密钥。这样就可以把不同平台设置成同一个密钥，然后就可以一个密钥访问所有的git服务器。</p>
<p>下面以github为例。</p>
<h2 id="1、生成密钥"><a href="#1、生成密钥" class="headerlink" title="1、生成密钥"></a>1、生成密钥</h2><p>如果已有密钥跳过这一步。如果没有密钥,可以用ssh-keygen来生成</p>
<pre><code class="line-numbers language-bash">ssh-keygen -t rsa</code></pre>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/443aa556/19826068-ae9df31ac506d507.png" alt></p>
<ol>
<li>执行命令： ssh-keygen -t rsa</li>
<li>输入密钥存储路径，直接回车则为默认路径</li>
<li>输入密钥密码，直接回车为空密码</li>
<li>重复确认密码</li>
<li>生成成功，生成路径</li>
</ol>
<h2 id="2、进入github个人设置页面，使用SSH-and-GPG-keys添加一个SSH-keys，将公钥（rsa-pub文件中的内容）复制上去。"><a href="#2、进入github个人设置页面，使用SSH-and-GPG-keys添加一个SSH-keys，将公钥（rsa-pub文件中的内容）复制上去。" class="headerlink" title="2、进入github个人设置页面，使用SSH and GPG keys添加一个SSH keys，将公钥（rsa.pub文件中的内容）复制上去。"></a>2、进入github个人设置页面，使用<code>SSH and GPG keys</code>添加一个SSH keys，将公钥（rsa.pub文件中的内容）复制上去。</h2><p><img src="//gitee.com/guoke3915/zw/raw/master/p/443aa556/19826068-4bdeda6d3744c136.png" alt></p>
<h2 id="3、TortoiseGit添加密钥"><a href="#3、TortoiseGit添加密钥" class="headerlink" title="3、TortoiseGit添加密钥"></a>3、TortoiseGit添加密钥</h2><p>找到TortoiseGit安装目录的<code>bin/pageant.exe</code>，启动，并添加私钥匙文件<br><img src="//gitee.com/guoke3915/zw/raw/master/p/443aa556/19826068-3784cdc82eb27047.png" alt></p>
<h2 id="4、Clone工程"><a href="#4、Clone工程" class="headerlink" title="4、Clone工程"></a>4、Clone工程</h2><p>从github项目中，获取ssh地址</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/443aa556/19826068-d002d28847435ea8.png" alt></p>
<p>直接Clone这个地址就可以了直接clone了<br><img src="//gitee.com/guoke3915/zw/raw/master/p/443aa556/19826068-086edfe00d3c074d.png" alt></p>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>夜</title>
    <url>/p/63ba6ddb.html</url>
    <content><![CDATA[<p>一个房间，一个人，一张床，面对慢慢长夜。周围的环境是如此的安静，静的可以听到外面的虫鸣声，同时也能听到自己那不安的心跳声。在这宁静的长夜中，上眼皮疲惫的吻上了下眼皮。但他们的好景不长，瞬间被无心睡眠的我强制拉开。不知怎么了，最近老感觉到很疲惫，但却又不睡不着；不知怎么了，最近老是有很多奇怪的想法浮现在脑海，不知所措；不知怎么了，老感觉还有很多事没完成，却又想不起具体是什么。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>QQ浏览器自动安装恶意扩展</title>
    <url>/p/fdf63154.html</url>
    <content><![CDATA[<p>最近几天遇到一个很奇葩的事，就是每次打开QQ浏览器后发现会有一个<strong>数科网维OFD阅读器</strong>的扩展插件，而且每次禁用和删除都不管用。只要你重新开打QQ浏览器他就会自动安装过来。折腾了半天，把自己电脑上的进程和服务都查了一遍，也没发现有可疑的存在。监控网络，发现启动时只有QQ浏览器进行下载了。还以为是自己浏览器账号上的，退出了帐号启动浏览器依然还会下载这个破插件，浏览器卸载重装问题依然存在。这些公司好好的浏览器不做，天天研究这些恶意插件。</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/fdf63154/19826068-d5f7dd3efb15fdcc.png" alt></p>
<p>暂时找不到下载的源头，那就不让它下载成功吧。<br>查看扩展插件详情得到插件的ID为<code>ncpacdbneepombepkfkonmdhffjdccpm</code>，找到QQ浏览器的扩展插件目录<code>C:\Users\Administrator\AppData\Local\Tencent\QQBrowser\User Data\Default\Extensions</code>，目录下会有一个<code>ncpacdbneepombepkfkonmdhffjdccpm</code>文件夹。退出QQ浏览器，将<code>ncpacdbneepombepkfkonmdhffjdccpm</code>文件夹删除,并新建文本文件,重命名为<code>ncpacdbneepombepkfkonmdhffjdccpm</code>，注意这里要去掉txt后缀。<br>然后右键文件，属性，改属性改为<code>只读</code>，并<code>应用</code></p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/fdf63154/19826068-afdfd6166dc1039b.png" alt></p>
<p>切换到<code>安全</code>选项，<code>编辑</code>权限，将系统、用户组、用组这个权限都设定为<code>决绝</code>。<br><img src="//gitee.com/guoke3915/zw/raw/master/p/fdf63154/19826068-d5776761cfd55a4e.png" alt></p>
<p>这样就可以了，每次启动浏览器时还是会下载插件，会在一个temp临时目录中，因为win系统文件和文件夹不能重名，而且<code>ncpacdbneepombepkfkonmdhffjdccpm</code>文件无任何权限对它进行删除修改，所以，下载过来的插件无法重命名成功，这样插件就安装失败了。虽然治标不治本，先这样用的，等有时间了再研究你是怎么让qq浏览器启动时安装你的。</p>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>有车的烦恼</title>
    <url>/p/2bf2e4f1.html</url>
    <content><![CDATA[<p>开车费油，停车收费也就算了，昨天晚上无聊刷视频看到有人说汽油也是有保质期的，于是在网上搜了一下，基本上是汽油在邮箱内保质期为三个月左右。想想离上次加油有二个多月了呀。去车上看了一下，还有小半箱油，理论可行驶距离360公里。平时想着油耗越少越好，现在这360公里要怎么开完啊。现在疫情又不好上高速开出去浪，不然遇上网上段子上说的那样，上去时好好的，下不了了就麻烦了。如果在小区外转圈，上次试了一下一圈三四公里，这转上100圈会不会被人报警给抓了呀。疫情期间想在家安安静静的吃饭睡觉打游戏就那么难吗</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Go frp内网穿透防暴力破解工具</title>
    <url>/p/a669cc72.html</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>最近自己的frp服务器上，老是会被一些莫名其妙的人尝试暴力破击我的远程链接密码，虽然16位大小写数字加特殊字符的密码很难破解，但看着也烦，还影响心情。于是打算自己写一个小工具，分析破解的IP所在地和攻击频率，将它加到防火墙中去直接屏蔽。</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/a669cc72/19826068-687fed97218ea00d.png" alt></p>
<h1 id="步骤分析"><a href="#步骤分析" class="headerlink" title="步骤分析"></a>步骤分析</h1><h2 id="1、监听日志"><a href="#1、监听日志" class="headerlink" title="1、监听日志"></a>1、监听日志</h2><p>frp 0.36之后的版本是有tcp连接的日志的，格式为<br><code>2021/08/24 12:04:04 [I] [proxy.go:162] [70107e20979a59c9] [ZNGW] get a user connection [119.1.97.214:3807]</code></p>
<p>只要<a href="https://www.jianshu.com/p/5e83a282890e" target="_blank" rel="noopener">实时监听日志文件</a>，并从这个格式中提取出我们需要的 配置的TCP转发名（ZNGW）和请求者IP(119.1.97.214) 就可以了</p>
<h2 id="2、获取IP地理位置"><a href="#2、获取IP地理位置" class="headerlink" title="2、获取IP地理位置"></a>2、获取IP地理位置</h2><p>可以通过获取ip位置的一些api接口获取，如<a href="http://ip-api.com/json/119.1.97.214?lang=zh-CN" target="_blank" rel="noopener">http://ip-api.com/json/<code>ip地址字串</code>?lang=zh-CN</a></p>
<pre><code class="line-numbers language-json">{
  status: &quot;success&quot;,
  country: &quot;中国&quot;,
  countryCode: &quot;CN&quot;,
  region: &quot;GZ&quot;,
  regionName: &quot;贵州&quot;,
  city: &quot;兴义&quot;,
  zip: &quot;&quot;,
  lat: 25.0502,
  lon: 104.9877,
  timezone: &quot;Asia/Shanghai&quot;,
  isp: &quot;Chinanet&quot;,
  org: &quot;Chinanet GZ&quot;,
  as: &quot;AS4134 CHINANET-BACKBONE&quot;,
  query: &quot;119.1.97.214&quot;
}</code></pre>
<h2 id="3、根据配置规则决定是否限制"><a href="#3、根据配置规则决定是否限制" class="headerlink" title="3、根据配置规则决定是否限制"></a>3、根据配置规则决定是否限制</h2><p>可以指定一张规则表，什么地方的ip可以访问，什么地方的ip不能访问，什么地方的ip访问有频率限制等</p>
<pre><code class="line-numbers language-yaml"># 规则访问
rules:

  # 按数组顺序来，匹配到了就按匹配的规则执行，跳过此规则。
  # 地区以 http://ip-api.com/json/?lang=zh-CN 查询的结果为准
  # 端口: -1 所有端口
  # time: 时间区间
  # count: 访问次数，-1不限，0限制。其他为 time时间内访问count次，超出频率就限制

  - # 中国上海IP允许
    port: -1
    country: 中国
    regionName: 上海
    city: 上海
    time: 1
    count: -1

  - # 中国地区IP跳过地域判断
    port: -1
    country: 中国
    regionName:
    city:
    time: 600
    count: 3

  - # 其他地区IP禁止
    port: -1
    country:
    regionName:
    city:
    time: 1
    count: 0</code></pre>
<h2 id="4、加入防火墙"><a href="#4、加入防火墙" class="headerlink" title="4、加入防火墙"></a>4、加入防火墙</h2><p>linux有iptables和firewall二种防火墙，win中有Microsoft Defender，这些都是可以通过命令行来添加拒绝通过的规则的。</p>
<ul>
<li>iptables: <code>iptables -I INPUT -s 119.1.97.214 -j DROP</code></li>
<li>firewall: <code>firewall-cmd --permanent --add-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;119.1.97.214&quot; reject&quot;</code></li>
<li>Microsoft Defender: <code>netsh advfirewall firewall add rule name=119.1.97.214 dir=in action=block protocol=TCP remoteip=119.1.97.214</code></li>
</ul>
<p>大致思路是这样，然后抽空花了点时间，用Go写了一个这样的小工具。完整代码：<a href="https://github.com/zngw/frptables" target="_blank" rel="noopener">https://github.com/zngw/frptables</a></p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>目前已经在frp服务器上运行1天了，效果还是有的，可以明显看日志文件链接数变少了，也添加了几个明显的攻击者IP到防火墙中</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/a669cc72/19826068-cf963e660ac8af18.png" alt></p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go执行命令行操作</title>
    <url>/p/3c35fa1b.html</url>
    <content><![CDATA[<p>go中提供了<code>os/exec</code>包使用<code>Command</code>函数可以完成一些调用命令行的操作。因为系统的不同，调用的参数会有点些不一样。</p>
<ul>
<li>linux中使用使用为 <code>exec.Command(&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;ls&quot;)</code></li>
<li>windows中使用使用为 <code>exec.Command(&quot;cmd&quot;,&quot;/c&quot;,&quot;ls&quot;)</code></li>
</ul>
<p>其他的创建执行都是一样的。</p>
<p>我们可以封装一个函数，输入需要执行的命令，输入返回结果</p>
<pre><code class="line-numbers language-go">import (
    &quot;bufio&quot;
    &quot;fmt&quot;
    &quot;os/exec&quot;
)

func Command(arg ...string) (result string) {
    name := &quot;/bin/bash&quot;
    c := &quot;-c&quot;
    // 根据系统设定不同的命令name
    if runtime.GOOS == &quot;windows&quot; {
        name = &quot;cmd&quot;
        c = &quot;/C&quot;
    }
    arg = append([]string{c}, arg...)
    cmd := exec.Command(name, arg...)

    //创建获取命令输出管道
    stdout, err := cmd.StdoutPipe()
    if err != nil {
        log.Error(&quot;Error:can not obtain stdout pipe for command:%s\n&quot;, err)
        return
    }

    //执行命令
    if err := cmd.Start(); err != nil {
        log.Error(&quot;Error:The command is err,&quot;, err)
        return
    }

    //读取所有输出
    bytes, err := ioutil.ReadAll(stdout)
    if err != nil {
        log.Error(&quot;ReadAll Stdout:&quot;, err.Error())
        return
    }

    if err := cmd.Wait(); err != nil {
        log.Error(&quot;wait:&quot;, err.Error())
        return
    }

    result = string(bytes)
    return
}</code></pre>
<p>调用测试</p>
<pre><code class="line-numbers language-go">package main

func main() {
    result := Command(&quot;ls&quot;)
        fmt.Println(result)

    result := Command(&quot;df&quot;,&quot;-h&quot;)
        fmt.Println(result)

    result := Command(&quot;df -h&quot;)
        fmt.Println(result)
}</code></pre>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/3c35fa1b/19826068-9c1111fb92960a41.png" alt></p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go实时监听日志文件内容</title>
    <url>/p/3acb208a.html</url>
    <content><![CDATA[<p>最近自己的frp转发的一些内网远程连接，老是被莫名其妙的人进行暴力破解，而且破解的IP大都是国外的。于是想写个程序实时监听frp的日志文件，分析ip，根据ip的所在地以及链接的频率直接把它加到防火墙黑名单中。<br>要实现这个功能，首先就是要能实时监听日志文件，类似于实现Linux中<code>tail -f</code>效果的功能。本来想自己写的，后面搜了一下github上有人已经写好了<a href="https://github.com/hpcloud/tail" target="_blank" rel="noopener">tail库</a>，功能已经很强大了，只要拿来适当传入传数用用就可以了。</p>
<pre><code class="line-numbers language-go">package main

import (
    &quot;fmt&quot;
    &quot;time&quot;

    &quot;github.com/hpcloud/tail&quot;
)

func main() {
    fileName := &quot;./log/frps.log&quot;                         // 被监听的文件，即frp日志文件
    config := tail.Config{
        ReOpen:    true,                                 // 重新打开
        Follow:    true,                                 // 是否跟随
        Location:  &amp;tail.SeekInfo{Offset: 0, Whence: 2}, // 从文件的哪个地方开始读
        MustExist: false,                                // 文件不存在不报错
        Poll:      true,                                 // 监听新行，使用tail -f，这个参数非常重要
    }

    tails, err := tail.TailFile(fileName, config)
    if err != nil {
        fmt.Println(&quot;tail file failed, err:&quot;, err)
        return
    }

    var  line *tail.Line
    var  ok   bool

    for {
        line, ok = &lt;-tails.Lines
        if !ok {
            fmt.Printf(&quot;tail file close reopen, filename:%s\n&quot;, tails.Filename)
            time.Sleep(time.Second)
            continue
        }

        fmt.Println(line.Text)
    }
}</code></pre>
<p>以上程序执行就想当于<code>tail -f ./log/frps.log</code>。每次新增每行的数据都在<code>line.Text</code>中的，之后就可以用这个日志数据来分析判定哪些IP是攻击者，加到防火墙中去了。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Android Studio远程调试夜神模拟器</title>
    <url>/p/6486512d.html</url>
    <content><![CDATA[<h1 id="1、问题"><a href="#1、问题" class="headerlink" title="1、问题"></a>1、问题</h1><p>之前写过<a href="https://www.jianshu.com/p/e4a0e9f4f1d9" target="_blank" rel="noopener">Android Studio调试夜神模拟器</a>，但是Android Studio和模拟器不在同一机器上该怎么调试呢，今天遇到一个问题，就是测试用模拟器出现一个bug，但到本地或真机上时，这个bug就没有了。在他机器上安装环境又太麻，所以直接远程调试就行了。</p>
<h1 id="2、环境"><a href="#2、环境" class="headerlink" title="2、环境"></a>2、环境</h1><ul>
<li>安装夜神模拟器的系统为:win10，ip是:192.168.0.55</li>
<li>Android Studio 环境的机器和模拟器的机器在同一局域网内</li>
</ul>
<h1 id="3、开启端口转发"><a href="#3、开启端口转发" class="headerlink" title="3、开启端口转发"></a>3、开启端口转发</h1><p>夜神默认提供了 <code>127.0.0.1:62001</code>的本地调试连接。它监听的是127.0.0.1这个本地连接，非本机不能访问，只要把这个这个端口转发到局域网上去就可以了。</p>
<p>使用管理员权限打开cmd窗口执行</p>
<pre><code class="line-numbers language-bat">netsh interface portproxy add v4tov4 62001 127.0.0.1 62001

:: 查看转发是否设置成功
netsh interface portproxy show all

:: 退出时删除转发
netsh interface portproxy delete v4tov4 listenport=62001 listenaddress=* protocol=tcp</code></pre>
<h1 id="4、开启防火墙端口"><a href="#4、开启防火墙端口" class="headerlink" title="4、开启防火墙端口"></a>4、开启防火墙端口</h1><h3 id="4-1-进入系统防火墙页面-gt-“高级设置”-gt-“入站规则”-gt-“新建-规则”-gt-“端口”"><a href="#4-1-进入系统防火墙页面-gt-“高级设置”-gt-“入站规则”-gt-“新建-规则”-gt-“端口”" class="headerlink" title="4.1 进入系统防火墙页面 -&gt; “高级设置” -&gt; “入站规则” -&gt; “新建 规则” -&gt; “端口”"></a>4.1 进入系统防火墙页面 -&gt; “高级设置” -&gt; “入站规则” -&gt; “新建 规则” -&gt; “端口”</h3><p><img src="//gitee.com/guoke3915/zw/raw/master/p/6486512d/19826068-5fa5afe7d903a8ed.png" alt></p>
<h3 id="4-2-选择TCP协议，端口号为62001"><a href="#4-2-选择TCP协议，端口号为62001" class="headerlink" title="4.2 选择TCP协议，端口号为62001"></a>4.2 选择TCP协议，端口号为62001</h3><p><img src="//gitee.com/guoke3915/zw/raw/master/p/6486512d/19826068-ad16d840241fc9f0.png" alt></p>
<h3 id="4-3-允许连接"><a href="#4-3-允许连接" class="headerlink" title="4.3 允许连接"></a>4.3 允许连接</h3><p><img src="//gitee.com/guoke3915/zw/raw/master/p/6486512d/19826068-e0cde974d5ae308b.png" alt></p>
<h3 id="4-4-勾选网络配置"><a href="#4-4-勾选网络配置" class="headerlink" title="4.4 勾选网络配置"></a>4.4 勾选网络配置</h3><p><img src="//gitee.com/guoke3915/zw/raw/master/p/6486512d/19826068-21c2c13001474bd2.png" alt></p>
<h3 id="4-5-取个规则名字完成"><a href="#4-5-取个规则名字完成" class="headerlink" title="4.5 取个规则名字完成"></a>4.5 取个规则名字完成</h3><p><img src="//gitee.com/guoke3915/zw/raw/master/p/6486512d/19826068-e7d0e4f389958060.png" alt></p>
<h1 id="5、adb连接调试"><a href="#5、adb连接调试" class="headerlink" title="5、adb连接调试"></a>5、adb连接调试</h1><p>在局域网另一台电脑上启动Android Studio，在Android SDK目录中找到<code>platform-tools/adb.exe</code>。使用 <code>adb connect 192.168.0.55:62001</code>，连接成功后，Android Studio就可以看到新的模拟器了</p>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>iptables限制连接频率</title>
    <url>/p/fc1a7f47.html</url>
    <content><![CDATA[<h1 id="一、起因"><a href="#一、起因" class="headerlink" title="一、起因"></a>一、起因</h1><p>前面暴力破解我frp转发远程登录的小伙伴还在，每天查看日志都能发现有一大堆的连接日志。一直让它这样折腾下去也不是办法，于是打算就用iptables来限制一下连接频率。</p>
<h1 id="二、实现"><a href="#二、实现" class="headerlink" title="二、实现"></a>二、实现</h1><p>把每个尝试远程登录的客户端 IP 记录在一个临时列表中，只要列表中的 IP一小时以内，尝试登录次数达到3次（包括密码输错3次，以及重复登录-退出达到3次，以及连续登录达到3次）。第3次登录时将被拒绝，持续一小时后才能再次登录，注意，前2次成功的登录并不会断开，除非你自行退出，否则已经成功的登录会话将保持连接，后续的登录尝试将被拒绝一小时。<br>可以在iptables中添加3条规则来限定，并且假设第一条规则将添加至 INPUT 链的第一条规则，注意 -I 选项后接的 INPUT 链规则编号，按照这里的操作输入，这3条规则将变成 INPUT 链的前3条规则，从而达到优先匹配进站的远程连接请求的目的：<br>这里的时间和次数根据自己的需求修改。</p>
<pre><code>iptables -I INPUT 1 -p tcp -m tcp --dport 3389 -m state --state NEW -m recent --set --name gk
iptables -I INPUT 2 -p tcp -m tcp --dport 3389 -m state --state NEW -m recent --update --seconds 3600 --hitcount 3 --name gk -j DROP
iptables -I INPUT 3 -p tcp -m tcp --dport 3389 -j ACCEPT

</code></pre><h1 id="附：iptables参数解析和iptables增、删、改、查操作"><a href="#附：iptables参数解析和iptables增、删、改、查操作" class="headerlink" title="附：iptables参数解析和iptables增、删、改、查操作"></a>附：iptables参数解析和iptables增、删、改、查操作</h1><h2 id="iptables参数解析"><a href="#iptables参数解析" class="headerlink" title="iptables参数解析"></a>iptables参数解析</h2><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><p>iptables [-t table] COMMAND chain CRETIRIA -j ACTION</p>
<ul>
<li>-t table ：3个filter nat mangle</li>
<li>COMMAND：定义如何对规则进行管理</li>
<li>chain：指定你接下来的规则到底是在哪个链上操作的，当定义策略的时候，是可以省略的</li>
<li>CRETIRIA:指定匹配标准</li>
<li>-j ACTION :指定如何进行处理</li>
</ul>
<h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>-F</td>
<td>清空规则链</td>
<td>iptables -F</td>
</tr>
<tr>
<td>-L</td>
<td>查看规则链</td>
<td>iptables -L</td>
</tr>
<tr>
<td>-A</td>
<td>追加规则</td>
<td>iptables -A INPUT</td>
</tr>
<tr>
<td>-D</td>
<td>删除规则</td>
<td>iptables -D INPUT 1</td>
</tr>
<tr>
<td>-R</td>
<td>修改规则</td>
<td>iptable -R INPUT 1 -s 192.168.120.0 -j DROP</td>
</tr>
<tr>
<td>-I</td>
<td>在头部插入规则</td>
<td>iptables -I INPUT 1 –dport 80 -j ACCEPT</td>
</tr>
<tr>
<td>-L</td>
<td>查看规则</td>
<td>iptables -L INPUT</td>
</tr>
<tr>
<td>-N</td>
<td>新的规则</td>
<td>iptables -N allowed</td>
</tr>
<tr>
<td>-V</td>
<td>查看iptables版本</td>
<td>iptables -V</td>
</tr>
<tr>
<td>-p</td>
<td>协议（tcp/udp/icmp）</td>
<td>iptables -A INPUT -p tcp</td>
</tr>
<tr>
<td>-s</td>
<td>匹配原地址，加” ! “表示除这个IP外</td>
<td>iptables -A INPUT -s 192.168.1.1</td>
</tr>
<tr>
<td>-d</td>
<td>匹配目的地址</td>
<td>iptables -A INPUT -d 192.168.12.1</td>
</tr>
<tr>
<td>–sport</td>
<td>匹配源端口流入的数据</td>
<td>iptables -A INPUT -p tcp –sport 22</td>
</tr>
<tr>
<td>–dport</td>
<td>匹配目的端口流出的数据</td>
<td>iptables -A INPUT -p tcp –dport 22</td>
</tr>
<tr>
<td>-i</td>
<td>匹配入口网卡流入的数据</td>
<td>iptables -A INPUT -i eth0</td>
</tr>
<tr>
<td>-o</td>
<td>匹配出口网卡流出的数据</td>
<td>iptables -A FORWARD -o eth0</td>
</tr>
<tr>
<td>-j</td>
<td>要进行的处理动作:DROP(丢弃)，REJECT(拒绝)，ACCEPT(接受)，SANT(基于原地址的转换)</td>
<td>iptable -A INPUT 1 -s 192.168.120.0 -j DROP</td>
</tr>
<tr>
<td>–to-source</td>
<td>指定SANT转换后的地址</td>
<td>iptables -t nat -A POSTROUTING -s 192.168.10.0/24 -j SANT –to-source 172.16.100.1</td>
</tr>
<tr>
<td>-t</td>
<td>表名(raw、mangle、nat、filter)</td>
<td>iptables -t nat</td>
</tr>
<tr>
<td>-m</td>
<td>使用扩展模块来进行数据包的匹配(multiport/tcp/state/addrtype)</td>
<td>iptables -m multiport</td>
</tr>
</tbody></table>
<h3 id="动作说明"><a href="#动作说明" class="headerlink" title="动作说明"></a>动作说明</h3><p>处理动作除了 ACCEPT、REJECT、DROP、REDIRECT 和 MASQUERADE 以外，还多出 LOG、ULOG、DNAT、SNAT、MIRROR、QUEUE、RETURN、TOS、TTL、MARK 等，其中某些处理动作不会中断过滤程序，某些处理动作则会中断同一规则链的过滤，并依照前述流程继续进行下一个规则链的过滤，一直到堆栈中的规则检查完毕为止。透过这种机制所带来的好处是，我们可以进行复杂、多重的封包过滤，简单的说，iptables 可以进行纵横交错式的过滤（tables）而非链状过滤（chains）。</p>
<table>
<thead>
<tr>
<th>动作</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>ACCEPT</td>
<td>将封包放行，进行完此处理动作后，将不再比对其它规则，直接跳往下一个规则链（nat:postrouting）</td>
<td></td>
</tr>
<tr>
<td>REJECT</td>
<td>拦阻该封包，并传送封包通知对方，可以传送的封包有几个选择：ICMP port-unreachable、ICMP echo-reply 或是 tcp-reset（这个封包会要求对方关闭联机），进行完此处理动作后，将不再比对其它规则，直接 中断过滤程序。</td>
<td>iptables -A FORWARD -p TCP –dport 22 -j REJECT –reject-with tcp-reset</td>
</tr>
<tr>
<td>DROP</td>
<td>丢弃封包不予处理，进行完此处理动作后，将不再比对其它规则，直接中断过滤程序。</td>
<td></td>
</tr>
<tr>
<td>REDIRECT</td>
<td>将封包重新导向到另一个端口（PNAT），进行完此处理动作后，将 会继续比对其它规则。 这个功能可以用来实作通透式 porxy 或用来保护 web 服务器。</td>
<td>iptables -t nat -A PREROUTING -p tcp –dport 80 -j REDIRECT –to-ports 8080</td>
</tr>
<tr>
<td>MASQUERADE</td>
<td>改写封包来源 IP 为防火墙 NIC IP，可以指定 port 对应的范围，进行完此处理动作后，直接跳往下一个规则炼（mangle:postrouting）。这个功能与 SNAT 略有不同，当进行 IP 伪装时，不需指定要伪装成哪个 IP，IP 会从网卡直接读取，当使用拨接连线时，IP 通常是由 ISP 公司的 DHCP 服务器指派的，这个时候 MASQUERADE 特别有用。</td>
<td>iptables -t nat -A POSTROUTING -p TCP -j MASQUERADE –to-ports 1024-31000</td>
</tr>
<tr>
<td>LOG</td>
<td>将封包相关讯息纪录在 /var/log 中，详细位置请查阅 /etc/syslog.conf 组态档，进行完此处理动作后，将会继续比对其它规则。</td>
<td>iptables -A INPUT -p tcp -j LOG –log-prefix “INPUT packets”</td>
</tr>
<tr>
<td>SNAT</td>
<td>改写封包来源 IP 为某特定 IP 或 IP 范围，可以指定 port 对应的范围，进行完此处理动作后，将直接跳往下一个规则炼（mangle:postrouting）。</td>
<td>iptables -t nat -A POSTROUTING -p tcp-o eth0 -j SNAT –to-source 194.236.50.155-194.236.50.160:1024-32000</td>
</tr>
<tr>
<td>DNAT</td>
<td>改写封包目的地 IP 为某特定 IP 或 IP 范围，可以指定 port 对应的范围，进行完此处理动作后，将会直接跳往下一个规则炼（filter:input 或 filter:forward）。</td>
<td>iptables -t nat -A PREROUTING -p tcp -d 15.45.23.67 –dport 80 -j DNAT –to-destination 192.168.1.1-192.168.1.10:80-100</td>
</tr>
<tr>
<td>MIRROR</td>
<td>镜射封包，也就是将来源 IP 与目的地 IP 对调后，将封包送回，进行完此处理动作后，将会中断过滤程序。</td>
<td></td>
</tr>
<tr>
<td>QUEUE</td>
<td>中断过滤程序，将封包放入队列，交给其它程序处理。透过自行开发的处理程序，可以进行其它应用，例如：计算联机费用……等。</td>
<td></td>
</tr>
<tr>
<td>RETURN</td>
<td>结束在目前规则炼中的过滤程序，返回主规则炼继续过滤，如果把自订规则炼看成是一个子程序，那么这个动作，就相当于提早结束子程序并返回到主程序中。</td>
<td></td>
</tr>
<tr>
<td>MARK</td>
<td>将封包标上某个代号，以便提供作为后续过滤的条件判断依据，进行完此处理动作后，将会继续比对其它规则。</td>
<td>iptables -t mangle -A PREROUTING -p tcp –dport 22 -j MARK –set-mark 2</td>
</tr>
</tbody></table>
<h2 id="iptables增、删、改、查操作"><a href="#iptables增、删、改、查操作" class="headerlink" title="iptables增、删、改、查操作"></a>iptables增、删、改、查操作</h2><h3 id="添加防火墙规则"><a href="#添加防火墙规则" class="headerlink" title="添加防火墙规则"></a>添加防火墙规则</h3><pre><code class="line-numbers language-bash">iptables -A INPUT -p tcp -m tcp --dport 21 -j ACCEPT</code></pre>
<p>开放21端口，-A默认是插入到尾部的，可以-I来插入到指定位置</p>
<h3 id="查下iptable规则"><a href="#查下iptable规则" class="headerlink" title="查下iptable规则"></a>查下iptable规则</h3><pre><code class="line-numbers language-bash">#查看所有规则
iptables -nvL --line-number

#查看21端口
iptables -L -n --line-number |grep 21  </code></pre>
<p>加 –line-number可以显示规则序号，在删除的时候比较方便 </p>
<h3 id="删除iptables规则"><a href="#删除iptables规则" class="headerlink" title="删除iptables规则"></a>删除iptables规则</h3><pre><code class="line-numbers language-bash">iptables -D INPUT 3  //删除input的第3条规则  
iptables -t nat -D POSTROUTING 1  //删除nat表中postrouting的第一条规则  
iptables -F INPUT   //清空 filter表INPUT所有规则  
iptables -F    //清空所有规则  
iptables -t nat -F POSTROUTING   //清空nat表POSTROUTING所有规则  </code></pre>
<h3 id="修改规则"><a href="#修改规则" class="headerlink" title="修改规则"></a>修改规则</h3><pre><code class="line-numbers language-bash">iptables -R INPUT 3 -j DROP    //将规则3改成DROP  </code></pre>
<p>iptables参数解析来自：<a href="https://www.jianshu.com/p/5a604b4ef342" target="_blank" rel="noopener">https://www.jianshu.com/p/5a604b4ef342</a><br>iptables增、删、改、查操作参考：<a href="http://blog.51yip.com/linux/1404.html" target="_blank" rel="noopener">http://blog.51yip.com/linux/1404.html</a></p>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 安装nats server</title>
    <url>/p/9d8a3d6.html</url>
    <content><![CDATA[<h1 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h1><p>nats是一个开源的，云原生的消息系统。核心基于EventMachine开发，原理是基于消息发布订阅机制，每台服务器上的每个模块会根据自己的消息类别向MessageBus发布多个消息主题，而同时也向自己需要交互的模块，按照需要的主题订阅消息。能够达到每秒8-11百万个消息，整个程序很小只有3M Docker image，它不支持持久化消息，如果你离线，你就不能获得消息。使用nats streaming可以做到持久化，缓存等功能。</p>
<h1 id="2、下载"><a href="#2、下载" class="headerlink" title="2、下载"></a>2、下载</h1><p>去<a href="https://github.com/nats-io" target="_blank" rel="noopener">https://github.com/nats-io</a>下载最新版本的nats-server版本。这里用<a href="https://github.com/nats-io/nats-server/releases/download/v2.3.4/nats-server-v2.3.4-linux-amd64.tar.gz" target="_blank" rel="noopener">2.3.4版本</a></p>
<h1 id="3、运行"><a href="#3、运行" class="headerlink" title="3、运行"></a>3、运行</h1><p>解压后直接运行<code>nats-server</code>就可以了</p>
<pre><code class="line-numbers language-bash">tar zxf nats-server-v2.3.4-linux-amd64.tar.gz
./nats-server-v2.3.4-linux-amd64/nats-server</code></pre>
<h1 id="4、将nats添加为服务"><a href="#4、将nats添加为服务" class="headerlink" title="4、将nats添加为服务"></a>4、将nats添加为服务</h1><pre><code class="line-numbers language-bash">vim /etc/systemd/system/nats.service

[Unit]
Description=frps daemon
After=syslog.target  network.target
Wants=network.target

[Service]
Type=simple
ExecStart=/home/nats-server-v2.3.4-linux-amd64/nats-server -c /home/nats-server-v2.3.4-linux-amd64/nats.yml
Restart= always
RestartSec=1min

[Install]
WantedBy=multi-user.target</code></pre>
<p>然后就可以通过<code>systemctl</code>来启动停止了</p>
<pre><code class="line-numbers language-bash">#开机启动
systemctl enable nats

# 启动
systemctl start nats

# 停止
systemctl stop nats

# 查看状态
systemctl status nats</code></pre>
<h1 id="5、启动参数配置说明"><a href="#5、启动参数配置说明" class="headerlink" title="5、启动参数配置说明"></a>5、启动参数配置说明</h1><p>在源码<a href="https://github.com/nats-io/nats-server/blob/main/main.go#L26-L81" target="_blank" rel="noopener">main.go</a>中可以看到配置参数。</p>
<pre><code class="line-numbers language-yml">服务器选项:
    -a, --addr &lt;host&gt;                绑定主机IP地址（默认是0.0.0.0）
    -p, --port &lt;port&gt;                客户端连接NATS服务器使用的端口（默认是4222）
    -n, --name &lt;server_name&gt;         服务器名字(默认:自动)
    -P, --pid &lt;file&gt;                 存储PID的文件
    -m, --http_port &lt;port&gt;           HTTP监听端口
    -ms,--https_port &lt;port&gt;          HTTPS监听端口
    -c, --config &lt;file&gt;              指定配置文件
    -t                               测试配置文并退出
    -sl,--signal &lt;signal&gt;[=&lt;pid&gt;]    向 nats-server 进程发送信号（停止、退出、重新打开、重新加载）
                                      &lt;pid&gt; 可以是 PID（例如 1）或 PID 文件的路径（例如 /var/run/nats-server.pid）
        --client_advertise &lt;string&gt;  向其他服务器广播的客户端 URL

日志选项:
    -l, --log &lt;file&gt;                 指定日志输出的文件
    -T, --logtime                    是否开启日志的时间戳（默认为true）
    -s, --syslog                     启用syslog作为日志方法
    -r, --remote_syslog &lt;addr&gt;       远程日志服务器的地址（默认为udp://localhost:514）
    -D, --debug                      开启调试输出
    -V, --trace                      跟踪原始的协议
    -VV                              详细跟踪（也跟踪系统帐户）
    -DV                              调试并跟踪
    -DVV                             调试和详细跟踪（也跟踪系统帐户）

JetStream 选项:
    -js, --jetstream                 启用 JetStream 功能。
    -sd, --store_dir &lt;dir&gt;           设置存储目录。

授权认证选项:
        --user &lt;user&gt;                连接需要的用户名
        --pass &lt;password&gt;            连接需要的密码
        --auth &lt;token&gt;               连接所需的授权令牌

TLS 安全选项:
        --tls                       启用TLS，不验证客户端（默认为false）
        --tlscert &lt;file&gt;             服务器证书文件
        --tlskey &lt;file&gt;              服务器证书私钥
        --tlsverify                  启用TLS，每一个客户端都要认证
        --tlscacert &lt;file&gt;           客户端证书CA用于认证

集群选项:
        --routes &lt;rurl-1, rurl-2&gt;    请求和连接的路由
        --cluster &lt;cluster-url&gt;      请求路由的集群 URL
        --cluster_name &lt;string&gt;      Cluster Name，如果不设置会动态生成一个
        --no_advertise &lt;bool&gt;        不向客户端通告已知的集群信息
        --cluster_advertise &lt;string&gt; 向其他服务器通告的集群 URL
        --connect_retries &lt;number&gt;   连接重试次数

常规选项:
    -h, --help                       显示帮助消息
    -v, --version                   显示版本信息
        --help_tls                   显示TLS 帮助消息</code></pre>
<h1 id="6、配置文件"><a href="#6、配置文件" class="headerlink" title="6、配置文件"></a>6、配置文件</h1><p>使用参数启动难免太复杂了点，所以可以通过-c加配置文件来启动。</p>
<p>NATS服务器配置文件的格式比较灵活，结合了传统的JSON格式和新的YAML格式的风格。<br>NATS配置文件格式支持以下语法：</p>
<pre><code class="line-numbers language-yml">Mixed Arrays: […]
Nested Maps: {…}
Multiple comment types: # and //
Key value assigments using:

    Equals sign (foo = 2)
    Colon (foo: 2)
    Whitespace (foo 2)

Maps can be assigned with no key separator

Semicolons as value terminators in key/value assignments are optional&lt;br&gt;</code></pre>
<p>NATS服务器配置文件示例</p>
<pre><code class="line-numbers language-yml">port: 4242   # 供客户端连接的监听端口
net: apcera.me # 监听的网络地址

http_port: 8222 # HTTP监控端口

# 客户端连接的认证信息
authorization {
 user:   derek
 password: T0pS3cr3t
 timeout: 1
}

# 集群定义
cluster {

 host: &#39;127.0.0.1&#39; # 主机地址
 port: 4244     # 路由连接的入站(inbound)端口

 # 路由连接的认证信息
 authorization {
  user: route_user
  password: T0pS3cr3tT00!
  timeout: 0.5
 }

 # Routes are actively solicited and connected to from this server.
 # Other servers can connect to us if they supply the correct credentials
 # in their routes definitions from above.
 routes = [
  nats-route://user1:pass1@127.0.0.1:4245
  nats-route://user2:pass2@127.0.0.1:4246
 ]
}

# 日志选项
debug:  false
trace:  true
logtime: false
log_file: &quot;/tmp/gnatsd.log&quot;

# PID进程文件
pid_file: &quot;/tmp/gnatsd.pid&quot;

# 一些系统属性

# 客户端最大连接数
max_connections: 100

# 最大协议控制行
max_control_line: 512

# 最大的有效负载
max_payload: 65536

# 慢消费者阀值
max_pending_size: 10000000</code></pre>
<p>配置文件参考：<a href="http://article.nxpop.com/col/6304.html" target="_blank" rel="noopener">http://article.nxpop.com/col/6304.html</a></p>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>svn sqlit:attempt to write a readonly database</title>
    <url>/p/df5eff21.html</url>
    <content><![CDATA[<p>在CentOS上导入了一个svn仓库后,发现提交文件出现了<code>post commit FS processing had error: sqlite:attempt to write a readonly database</code> 的报错提示。</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/df5eff21/19826068-ddba09a580ff1bb3.png" alt></p>
<p>这是svn仓库中的db内某些文件的权限不对，无法写入导致的。</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>进入仓库的db目录，查看db目录下的权限</p>
<pre><code class="line-numbers language-bash">cd /home/svn/test/db
ls -lrt

total 3408
-rw-r--rw- 1 root   root       0 Aug  2 21:34 write-lock
drwxr-srwx 3 root   root    4096 Aug  2 21:34 revs
drwxr-srwx 3 root   root    4096 Aug  2 21:34 revprops
-rw-r--rw- 1 root   root       5 Aug  2 21:34 fs-type
-rw-r--rw- 1 root   root       0 Aug  2 21:34 txn-current-lock
-rw-r--rw- 1 root   root       2 Aug  2 21:34 min-unpacked-rev
-rw-r--rw- 1 root   root    1959 Aug  2 21:34 fsfs.conf
-r--r--rw- 1 root   root      22 Aug  2 21:34 format
-rw-r--rw- 1 root   root      37 Aug  2 22:39 uuid
-rw-r--r-- 1 root   root 3444736 Aug  2 22:44 rep-cache.db
-rw-r--rw- 1 apache root       3 Aug 13 14:33 txn-current
-rw-r--rw- 1 apache root       4 Aug 13 14:33 current
drwxr-srwx 2 root   root    4096 Aug 13 14:33 txn-protorevs
drwxr-srwx 2 root   root    4096 Aug 13 14:33 transactions</code></pre>
<p>可以看到rep-cache.db文件用户没有写的权限，添加一下就可以了</p>
<pre><code class="line-numbers language-bash">chmod 646 rep-cache.db</code></pre>
<p>然后,再重新提交一下,这个错误就不存在了。</p>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>遛车</title>
    <url>/p/af61435e.html</url>
    <content><![CDATA[<p>见过遛猫遛狗遛娃的，遛车的没见过吧。<br>现在家离公司又近，上班走路几分钟就到了，也用不着开车，天气又热加上疫情关系周末也没有出去玩。转眼间就过去一个月了，前二天收到短信说车上电瓶电压过低，请即使启动车子充电，周末了正好把车开出去遛遛，最后把车开出去在小区外，一圈、二圈、三圈的遛了半个多小时。<br>当初买车的时候公司离家比较远，上下班开个车比挤地铁舒服，周末也可以约二三好友去周边玩玩，感觉有个车还挺方便的，现在发现车纯属累赘，留之无用弃之可惜。开车费油，停车收费，放久了还得开出来遛遛。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS安装kafka</title>
    <url>/p/d72d4123.html</url>
    <content><![CDATA[<p>前面写到过在<a href="/p/7077d4d2.html">Docker中安装kafka</a>，今天讲讲直接在直接在主机上安装kafka。</p>
<h1 id="1、安装JDK1-8"><a href="#1、安装JDK1-8" class="headerlink" title="1、安装JDK1.8"></a>1、安装JDK1.8</h1><p>直接用yum安装，还可以省去配置的麻烦。</p>
<pre><code class="line-numbers language-bash">yum install -y java-1.8.0-openjdk</code></pre>
<h1 id="2-下载kafka"><a href="#2-下载kafka" class="headerlink" title="2. 下载kafka"></a>2. 下载kafka</h1><p>去官网：<a href="http://kafka.apache.org/downloads.html" target="_blank" rel="noopener">http://kafka.apache.org/downloads.html</a>找到自己需要的版本。用wget直接下载。并解压到 <code>/opt/kafka</code>目录中</p>
<pre><code class="line-numbers language-bash">wget https://mirrors.bfsu.edu.cn/apache/kafka/2.8.0/kafka_2.12-2.8.0.tgz
tar zxf kafka_2.12-2.8.0.tgz
mv kafka_2.12-2.8.0 /opt/kafka</code></pre>
<h1 id="2-单zookeeper单broker"><a href="#2-单zookeeper单broker" class="headerlink" title="2. 单zookeeper单broker"></a>2. 单zookeeper单broker</h1><h2 id="2-1-启动-zookeeper"><a href="#2-1-启动-zookeeper" class="headerlink" title="2.1 启动 zookeeper"></a>2.1 启动 zookeeper</h2><pre><code class="line-numbers language-bash">cd /opt/kafka
bin/zookeeper-server-start.sh -daemon config/zookeeper.properties</code></pre>
<h2 id="2-2-启动kafka"><a href="#2-2-启动kafka" class="headerlink" title="2.2 启动kafka"></a>2.2 启动kafka</h2><pre><code class="line-numbers language-bash">cd /opt/kafka
bin/kafka-server-start.sh -daemon config/server.properties</code></pre>
<h2 id="2-3-测试"><a href="#2-3-测试" class="headerlink" title="2.3 测试"></a>2.3 测试</h2><h3 id="2-3-1-创建topic"><a href="#2-3-1-创建topic" class="headerlink" title="2.3.1 创建topic"></a>2.3.1 创建topic</h3><p>使用kafka-topics.sh 创建单分区单副本的topic test</p>
<pre><code class="line-numbers language-bash">bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test</code></pre>
<p>查看topic：</p>
<pre><code class="line-numbers language-bash">bin/kafka-topics.sh --list --zookeeper localhost:2181</code></pre>
<h3 id="2-3-2-消费消息"><a href="#2-3-2-消费消息" class="headerlink" title="2.3.2 消费消息"></a>2.3.2 消费消息</h3><p>使用kafka-console-consumer.sh 接收消息并在终端打印</p>
<pre><code class="line-numbers language-bash">bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning</code></pre>
<h3 id="2-3-3-产生消息"><a href="#2-3-3-产生消息" class="headerlink" title="2.3.3 产生消息"></a>2.3.3 产生消息</h3><p>另启一个终端，使用kafka-console-producer.sh 发送消息</p>
<pre><code class="line-numbers language-bash">bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test </code></pre>
<p>在生产消息这边输入的字符串，在消费消息终端实时显示出来</p>
<h2 id="2-4-配置开机自启"><a href="#2-4-配置开机自启" class="headerlink" title="2.4 配置开机自启"></a>2.4 配置开机自启</h2><h2 id="2-4-1-配置zookeeper"><a href="#2-4-1-配置zookeeper" class="headerlink" title="2.4.1 配置zookeeper"></a>2.4.1 配置zookeeper</h2><p>新建 <code>/etc/systemd/system/zookeeper.service</code>文件并添加以下内容</p>
<pre><code class="line-numbers language-ini">vim /etc/systemd/system/zookeeper.service

[Unit]
Description=Zookeeper service
After=network.target

[Service]
Type=simple
User=root
Group=root
ExecStart=/opt/kafka/bin/zookeeper-server-start.sh /opt/kafka/config/zookeeper.properties
ExecStop=/opt/kafka/bin/zookeeper-server-stop.sh
Restart=on-failure

[Install]
WantedBy=multi-user.target</code></pre>
<h2 id="2-4-2-配置kafka"><a href="#2-4-2-配置kafka" class="headerlink" title="2.4.2 配置kafka"></a>2.4.2 配置kafka</h2><p>新建 <code>/etc/systemd/system/kafka.service</code>文件并添加以下内容</p>
<pre><code class="line-numbers language-ini">vim /etc/systemd/system/kafka.service

[Unit]
Description=Apache Kafka server (broker)
After=network.target  zookeeper.service

[Service]
Type=simple
User=root
Group=root
ExecStart=/opt/kafka/bin/kafka-server-start.sh /opt/kafka/config/server.properties
ExecStop=/opt/kafka/bin/kafka-server-stop.sh
Restart=on-failure

[Install]
WantedBy=multi-user.target</code></pre>
<p>:: 这里要等zookeeper.service启动后再启动</p>
<h2 id="2-4-2-使配置生效"><a href="#2-4-2-使配置生效" class="headerlink" title="2.4.2 使配置生效"></a>2.4.2 使配置生效</h2><pre><code class="line-numbers language-bash">systemctl enable zookeeper
systemctl enable kafka</code></pre>
<h2 id="2-4-3-启动、停止"><a href="#2-4-3-启动、停止" class="headerlink" title="2.4.3 启动、停止"></a>2.4.3 启动、停止</h2><pre><code class="line-numbers language-bash"># 启动
systemctl start zookeeper
systemctl start kafka

# 停止
systemctl stop zookeeper
systemctl stop kafka

# 查看状态
systemctl status zookeeper
systemctl status kafka</code></pre>
<h1 id="3-单zookeeper多broker-集群配置"><a href="#3-单zookeeper多broker-集群配置" class="headerlink" title="3. 单zookeeper多broker 集群配置"></a>3. 单zookeeper多broker 集群配置</h1><h2 id="3-1-准备工作"><a href="#3-1-准备工作" class="headerlink" title="3.1 准备工作"></a>3.1 准备工作</h2><ul>
<li>zookeeper在 192.168.0.108:2181</li>
<li>broker0: 192.168.0.108:9092</li>
<li>broker1: 192.168.0.103:9092</li>
</ul>
<h2 id="3-2-修改kafka配置"><a href="#3-2-修改kafka配置" class="headerlink" title="3.2 修改kafka配置"></a>3.2 修改kafka配置</h2><p>这里需要修改<code>/opt/kafka/config/server.properties</code>配置</p>
<h2 id="3-2-1-broker0"><a href="#3-2-1-broker0" class="headerlink" title="3.2.1 broker0"></a>3.2.1 broker0</h2><pre><code class="line-numbers language-bash">vim /opt/kafka/config/server.properties

# 修改broker.id
broker.id=0

# 高可用值改为3，默认是1，多broker时改为3或以上，不然topic的分区副本全在broker0上，干掉broker0无法容灾
offsets.topic.replication.factor=3

# 修改监听
listeners=PLAINTEXT://192.168.0.108:9092</code></pre>
<h2 id="3-2-2-broker1"><a href="#3-2-2-broker1" class="headerlink" title="3.2.2 broker1"></a>3.2.2 broker1</h2><pre><code class="line-numbers language-bash">vim /opt/kafka/config/server.properties

# 修改broker.id
broker.id=1

# 高可用值改为3，默认是1，多broker时改为3或以上，不然topic的分区副本全在broker0上，干掉broker0无法容灾
offsets.topic.replication.factor=3

# 修改监听
listeners=PLAINTEXT://192.168.0.103:9092

# 修改zookeeper地址
zookeeper.connect=192.168.0.108:2181</code></pre>
<h2 id="3-3-启动"><a href="#3-3-启动" class="headerlink" title="3.3 启动"></a>3.3 启动</h2><p>先启动zookeeper。再以<code>bin/kafka-server-start.sh config/server.properties</code>命令或配置systemctl方式分辨启动broker0和broker1</p>
<h2 id="3-4-测试"><a href="#3-4-测试" class="headerlink" title="3.4 测试"></a>3.4 测试</h2><h3 id="3-4-1-创建"><a href="#3-4-1-创建" class="headerlink" title="3.4.1 创建"></a>3.4.1 创建</h3><p>创建2复本(replication-factor 2)、1分区(partitions 1)的topic test2</p>
<pre><code class="line-numbers language-bash"># 创建
bin/kafka-topics.sh --create --bootstrap-server 192.168.0.108:9092 --replication-factor 2 --partitions 1 --topic test2

# 查看状态
bin/kafka-topics.sh --describe --bootstrap-server 192.168.0.108:9092 --topic test2</code></pre>
<h3 id="3-4-2-消费消息"><a href="#3-4-2-消费消息" class="headerlink" title="3.4.2 消费消息"></a>3.4.2 消费消息</h3><pre><code class="line-numbers language-bash">bin/kafka-console-consumer.sh --bootstrap-server 192.168.0.103:9092 --from-beginning --topic test2</code></pre>
<h3 id="3-4-3-生产消息"><a href="#3-4-3-生产消息" class="headerlink" title="3.4.3 生产消息"></a>3.4.3 生产消息</h3><p>另启动终端发送消息</p>
<pre><code class="line-numbers language-bash">bin/kafka-console-producer.sh --bootstrap-server 192.168.0.103:9092 --topic test2</code></pre>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/d72d4123/19826068-fa9224524ec00a62.png" alt></p>
<h3 id="3-4-4-测试容灾"><a href="#3-4-4-测试容灾" class="headerlink" title="3.4.4 测试容灾"></a>3.4.4 测试容灾</h3><p>这里我把刚才producer 和 consumer 连接的 192.168.0.103节点给干掉，可以看到 consumer的日志打印,已经自动切换到了192.168.0.108节点上，再次测试发送消息接收消息，producer也打印了切换节点的日志</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/d72d4123/19826068-179f886b73d3638b.png" alt></p>
<h1 id="4-多zookeeper多broker-集群配置"><a href="#4-多zookeeper多broker-集群配置" class="headerlink" title="4. 多zookeeper多broker 集群配置"></a>4. 多zookeeper多broker 集群配置</h1><p>分别在多个节点按上述方式安装Kafka，配置启动多个Zookeeper 实例。 </p>
<ul>
<li>zookeeper在 192.168.0.103:2181</li>
<li>zookeeper在 192.168.0.108:2181</li>
<li>broker0: 192.168.0.108:9092</li>
<li>broker1: 192.168.0.103:9092</li>
</ul>
<p>在每个zookeeper的配置<code>/opt/kafka/config/zookeeper.properties</code>最后添加以下配置</p>
<pre><code class="line-numbers language-bash">vim /opt/kafka/config/zookeeper.properties

initLimit=5    ##Leader服务器等待Follower启动并完成数据同步的时间，默认值10，表示tickTime的10倍
syncLimit=2    ##Leader服务器和Follower之间进行心跳检测的最大延时时间，默认值5，表示tickTime的5倍
server.1=192.168.0.103:2888:3888
server.2=192.168.0.108:2888:3888</code></pre>
<p>在每个kafka的配置<code>/opt/kafka/config/server.properties</code>修改zookeeper.connect</p>
<pre><code class="line-numbers language-bash">zookeeper.connect=192.168.0.103:2181,192.168.0.108:2181</code></pre>
<p>测试流程和单zookeeper多broker一样。</p>
<h1 id="5-server-properties配置说明"><a href="#5-server-properties配置说明" class="headerlink" title="5. server.properties配置说明"></a>5. server.properties配置说明</h1><pre><code class="line-numbers language-conf">#broker的全局唯一编号，不能重复
broker.id=0

#用来监听链接IP和端口，producer或consumer将在此建立连接
#listeners=PLAINTEXT://:9092
listeners=PLAINTEXT://192.168.0.108:9092

#处理网络请求的线程数量
num.network.threads=3

#用来处理磁盘IO的线程数量
num.io.threads=8

#发送套接字的缓冲区大小
socket.send.buffer.bytes=102400

#接受套接字的缓冲区大小
socket.receive.buffer.bytes=102400

#请求套接字的缓冲区大小
socket.request.max.bytes=104857600

#kafka运行日志存放的路径
log.dirs=/tmp/kafka-logs

#topic在当前broker上的分片个数
num.partitions=1

#用来恢复和清理data下数据的线程数量
num.recovery.threads.per.data.dir=1

# 高可用broker值，多broker集群时，这个值建议大于等于3
offsets.topic.replication.factor=3
transaction.state.log.replication.factor=1
transaction.state.log.min.isr=1

#segment文件保留的最长时间，超时将被删除
log.retention.hours=168

#日志文件中每个segment的大小，默认为1G
log.segment.bytes=1073741824

#周期性检查文件大小的时间
log.retention.check.interval.ms=300000

#broker需要使用zookeeper连接
zookeeper.connect=192.168.0.108:2181

#zookeeper链接超时时间
zookeeper.connection.timeout.ms=18000

# 空消费组延时，默认为3
group.initial.rebalance.delay.ms=3</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>暴力破解一个16位密码需要多长时间</title>
    <url>/p/8123553c.html</url>
    <content><![CDATA[<p>最近在公司电脑上用了frp内网穿透开了一个远程桌面，方便周末放便在家里连上去。查看了一下最近的frp日志，发现有人在暴力破解我电脑的密码。<br><img src="//gitee.com/guoke3915/zw/raw/master/p/8123553c/19826068-2d3a3b49d0cffae5.png" alt></p>
<p>我设定的系统密码是16位大小写+数字+合法特殊符号的无规律字符。算一下，这一种密码的什为<code>abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&amp;*()-_+=~</code>[]{}|\:;&quot;‘&lt;&gt;,.?/`一共96个，16位密码就是 96^16可能。按这种频率，1秒1次需要1兆6501亿8684万8891兆6500亿年才能破解完。即使他使用密码字典有优化加上算力提升快个上亿倍，也需要1兆年。让他继续破着玩呗</p>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx禁止未绑定的域名访问</title>
    <url>/p/b054683d.html</url>
    <content><![CDATA[<h1 id="禁止所有未授权域名及IP访问"><a href="#禁止所有未授权域名及IP访问" class="headerlink" title="禁止所有未授权域名及IP访问"></a>禁止所有未授权域名及IP访问</h1><p>添加一条default_server的规则，如下：</p>
<pre><code class="line-numbers language-conf">server {
    listen 80 default_server;
    listen 443 ssl default_server;
    server_name _;

    ssl_certificate &lt;path to cert&gt;;
    ssl_certificate_key &lt;path to key&gt;;
    return 403;
}</code></pre>
<ul>
<li>listen 80 default_server: 指定该 server 配置段为 80 端口的默认主机，即对于未绑定的域名指向你的服务器时，匹配不到你配置的虚拟主机域名后，会默认使用这个虚拟主机。</li>
<li>listen 443 ss default_server: 指定该 server 配置段为 443 端口的默认主机，即对于未绑定的域名指向你的服务器时，匹配不到你配置的虚拟主机域名后，会默认使用这个虚拟主机。</li>
<li>server_name _: 此处的_可以换成任意其他无效字符或无效的域名，表示该 server 配置不会被正常访问到。</li>
<li>ssl_certificate、ssl_certificate_key：ssl证书，随便弄个证书就可以了，不然nginx加载配置会报错。</li>
<li>return 403：设置默认ip的80、443端口下的所有为绑定域名访问后，返回403错误。</li>
</ul>
<h1 id="将所有未授权域名及IP访问跳转到指定网页"><a href="#将所有未授权域名及IP访问跳转到指定网页" class="headerlink" title="将所有未授权域名及IP访问跳转到指定网页"></a>将所有未授权域名及IP访问跳转到指定网页</h1><pre><code class="line-numbers language-conf">server {
    listen 80 default_server;
    server_name _;
    rewrite ^(.*)  http://zengwu.com.cn permanent;
}</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker中修改MySQL密码</title>
    <url>/p/ea258294.html</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>MySQL是安装在Docker中的，项目中使用的都是非root账号登录的MySQL且没有mysql库的权限,时间一长就把root的密码给忘记了.</p>
<h1 id="修改密码步骤"><a href="#修改密码步骤" class="headerlink" title="修改密码步骤"></a>修改密码步骤</h1><h2 id="1-通过docker-exec命令进入容器内"><a href="#1-通过docker-exec命令进入容器内" class="headerlink" title="1. 通过docker exec命令进入容器内"></a>1. 通过docker exec命令进入容器内</h2><pre><code class="line-numbers language-bash">#  mysql-5.7 为数据库容器名
docker exec -it  mysql-5.7 /bin/sh</code></pre>
<h2 id="2-安装编辑器"><a href="#2-安装编辑器" class="headerlink" title="2. 安装编辑器"></a>2. 安装编辑器</h2><p>不知道是否我安装的MySQL镜像的问题,容器中没有vim也没有vi,所以自己安装一个,如果有可以跳过</p>
<pre><code class="line-numbers language-bash">apt-get update
apt-get install vim</code></pre>
<h2 id="3-修改配置跳过密码验证"><a href="#3-修改配置跳过密码验证" class="headerlink" title="3. 修改配置跳过密码验证"></a>3. 修改配置跳过密码验证</h2><pre><code class="line-numbers language-bash">vim /etc/mysql/conf.d/docker.cnf

# 在最后添加skip-grant-tables
[mysqld]
skip-host-cache
skip-name-resolve
skip-grant-tables</code></pre>
<p>也可以修改my.cnf,这个文件所有MySQL通用,docker.cnf只有docker中存在</p>
<pre><code class="line-numbers language-bash">vim /etc/mysql/my.cnf

# 在最后添加skip-grant-tables
...
skip-grant-tables</code></pre>
<p>修改完后保存并退出容器</p>
<h2 id="4-重启MySQL"><a href="#4-重启MySQL" class="headerlink" title="4. 重启MySQL"></a>4. 重启MySQL</h2><h2 id="5-再次进入容器-直接登录MySQL"><a href="#5-再次进入容器-直接登录MySQL" class="headerlink" title="5. 再次进入容器,直接登录MySQL"></a>5. 再次进入容器,直接登录MySQL</h2><pre><code class="line-numbers language-bash">docker exec -it  mysql-5.7 /bin/sh

# 在容器中使用mysql可以直接登录
mysql</code></pre>
<h2 id="5-修改root账号密码"><a href="#5-修改root账号密码" class="headerlink" title="5. 修改root账号密码"></a>5. 修改root账号密码</h2><pre><code class="line-numbers language-mysql"># MySQL 5.7.6+版本以上
use mysql;
UPDATE user SET authentication_string = PASSWORD(&#39;g123455.&#39;) WHERE user = &#39;root&#39;;
flush privileges;

# MySQL 5.7.6版本以下
use mysql;
UPDATE user SET password= PASSWORD(&#39;g123455.&#39;) WHERE user = &#39;root&#39;;
flush privileges;</code></pre>
<h2 id="6-还原配置"><a href="#6-还原配置" class="headerlink" title="6.  还原配置"></a>6.  还原配置</h2><p>按第3步,删除skip-grant-tables,还原配置.退出容器,重启MySQL就可以了</p>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>iPhone敲击背面打开健康码</title>
    <url>/p/345f39ad.html</url>
    <content><![CDATA[<p>最近因疫情的原因，健康码使用越来越频繁了，坐个公交、进个商城写字楼都要查一下，为了方便，iPhone可以设定敲击手机背面二/三下就打开健康码。</p>
<h2 id="1-找到快捷指令，并新建快捷指令"><a href="#1-找到快捷指令，并新建快捷指令" class="headerlink" title="1. 找到快捷指令，并新建快捷指令"></a>1. 找到快捷指令，并新建快捷指令</h2><p><img src="//gitee.com/guoke3915/zw/raw/master/p/345f39ad/19826068-a9651adba514f199.png" alt></p>
<h2 id="2-在弹出的新建页面划到最下面，找到支付宝中的健康码"><a href="#2-在弹出的新建页面划到最下面，找到支付宝中的健康码" class="headerlink" title="2.  在弹出的新建页面划到最下面，找到支付宝中的健康码"></a>2.  在弹出的新建页面划到最下面，找到支付宝中的健康码</h2><p><img src="//gitee.com/guoke3915/zw/raw/master/p/345f39ad/19826068-c38b0448f164b92c.png" alt></p>
<h2 id="3-确认健康码指令"><a href="#3-确认健康码指令" class="headerlink" title="3.  确认健康码指令"></a>3.  确认健康码指令</h2><p><img src="//gitee.com/guoke3915/zw/raw/master/p/345f39ad/19826068-d92ebfd83bf7e25a.png" alt></p>
<h2 id="4-给指令命个名，并完成添加"><a href="#4-给指令命个名，并完成添加" class="headerlink" title="4. 给指令命个名，并完成添加"></a>4. 给指令命个名，并完成添加</h2><p><img src="//gitee.com/guoke3915/zw/raw/master/p/345f39ad/19826068-0512c1593ee7e052.png" alt></p>
<h2 id="5-打开设置中的辅助功能-在里面找到触控"><a href="#5-打开设置中的辅助功能-在里面找到触控" class="headerlink" title="5. 打开设置中的辅助功能,在里面找到触控"></a>5. 打开<code>设置</code>中的<code>辅助功能</code>,在里面找到<code>触控</code></h2><p><img src="//gitee.com/guoke3915/zw/raw/master/p/345f39ad/19826068-77c35109eec02deb.png" alt></p>
<h2 id="6-进入轻点背面"><a href="#6-进入轻点背面" class="headerlink" title="6. 进入轻点背面"></a>6. 进入<code>轻点背面</code></h2><p><img src="//gitee.com/guoke3915/zw/raw/master/p/345f39ad/19826068-3ed2ba114bb9bbb8.png" alt></p>
<h2 id="7-轻点两下-三下这个看个人习惯-个人觉得两下容易误触-所以选择轻点三下"><a href="#7-轻点两下-三下这个看个人习惯-个人觉得两下容易误触-所以选择轻点三下" class="headerlink" title="7. 轻点两下/三下这个看个人习惯,个人觉得两下容易误触,所以选择轻点三下"></a>7. 轻点两下/三下这个看个人习惯,个人觉得两下容易误触,所以选择<code>轻点三下</code></h2><p><img src="//gitee.com/guoke3915/zw/raw/master/p/345f39ad/19826068-25dab691f5330f88.png" alt></p>
<h2 id="8-向下拉-在快捷指令里找到前面新建的健康码，勾选并依次返回。然后就可以轻点手机背面三下打开健康码了"><a href="#8-向下拉-在快捷指令里找到前面新建的健康码，勾选并依次返回。然后就可以轻点手机背面三下打开健康码了" class="headerlink" title="8. 向下拉,在快捷指令里找到前面新建的健康码，勾选并依次返回。然后就可以轻点手机背面三下打开健康码了"></a>8. 向下拉,在快捷指令里找到前面新建的<code>健康码</code>，勾选并依次返回。然后就可以轻点手机背面三下打开健康码了</h2><p><img src="//gitee.com/guoke3915/zw/raw/master/p/345f39ad/19826068-ddb5a6fbbac9bf0b.png" alt></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx -s reload不生效问题</title>
    <url>/p/ef33ca7f.html</url>
    <content><![CDATA[<p><code>nginx -s reload</code> 重新加载配置的时候,可能会不生效。这个很大的可能是配置文件出错了。所以呢，我们可以先用<code>nginx -t</code>先来测试配置文件是否正确,如果有问题先改正后就可以用<code>nginx -s reload</code>再来重新加载了。</p>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10测试模式</title>
    <url>/p/ee9cd1cc.html</url>
    <content><![CDATA[<p>系统测试模式指的是系统禁用驱动程序强制签名模式，用于关闭系统驱动签名，安装一些没有经过签名的驱动和程序。</p>
<h1 id="开始测试模式"><a href="#开始测试模式" class="headerlink" title="开始测试模式"></a>开始测试模式</h1><ul>
<li>1、以管理员模式运行cmd</li>
<li><ol start="2">
<li>在“命令行提示符”输入“bcdedit /set testsigning on”回车，然后命令行提示符会显示“操作成功完成”，就打开Windows测试模式了。</li>
</ol>
</li>
<li>3、重启电脑后，桌面右下角出现了“测试模式”的水印。</li>
</ul>
<h1 id="关闭测试模式"><a href="#关闭测试模式" class="headerlink" title="关闭测试模式"></a>关闭测试模式</h1><ul>
<li>1、以管理员模式运行cmd</li>
<li><ol start="2">
<li>在“命令行提示符”输入“bcdedit /set testsigning off”回车，然后命令行提示符会显示“操作成功完成”，就打开Windows测试模式了。</li>
</ol>
</li>
<li>3、重启电脑后，桌面右下角“测试模式”的水印就不见了。</li>
</ul>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10上读写ext4</title>
    <url>/p/a3a32f3e.html</url>
    <content><![CDATA[<p>在win10上可以用Ext2Fsd，这个需要使用0.70及以上版本才支持win10，并且系统需要开启测试模式。</p>
<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>可以去<a href="https://www.acc.umu.se/~bosse/ext2fsd/0.70/" target="_blank" rel="noopener">https://www.acc.umu.se/~bosse/ext2fsd/0.70/</a>下载 <a href="https://www.acc.umu.se/~bosse/ext2fsd/0.70/Ext2Fsd-0.70b3w10-setup.exe" target="_blank" rel="noopener">Ext2Fsd-0.70b3w10-setup.exe</a>版本</p>
<h1 id="开启测试模式"><a href="#开启测试模式" class="headerlink" title="开启测试模式"></a>开启测试模式</h1><p>以管理员模式运行cmd， 在“命令行提示符”输入<code>bcdedit /set testsigning on</code>回车，然后命令行提示符会显示“操作成功完成”，就打开Windows测试模式了。</p>
<h1 id="安装ext2fsd"><a href="#安装ext2fsd" class="headerlink" title="安装ext2fsd"></a>安装ext2fsd</h1><p>直接默认安装在c盘就好了。安装后重启电脑，进入测试模式，桌面右下角出现了“测试模式”的水印</p>
<h1 id="挂在ext4磁盘"><a href="#挂在ext4磁盘" class="headerlink" title="挂在ext4磁盘"></a>挂在ext4磁盘</h1><p>以管理员权限运行<code>C:\Program Files\Ext2Fsd\Ext2Mgr.exe</code>,选择ext4分区（这是可能会显示ext4），右键<code>加载装配点盘符</code><br><img src="//gitee.com/guoke3915/zw/raw/master/p/a3a32f3e/19826068-cfd72746d6c1314d.png" alt></p>
<p>挂载完后就和正常的ntfs格式的磁盘一样使用就行了。</p>
<h1 id="注意！！"><a href="#注意！！" class="headerlink" title="注意！！"></a>注意！！</h1><p>如果不需要了或退出<code>win10测试模式</code>时，最好卸载掉这个Ext2Fsd，下次用的时候再安装。测试过好几次退出测试模式，再重新开启测试模式后系统会蓝屏，可能是恢复正常模式后系统验证驱动签名会把这个Ext2Fsd弄坏吧，然后再次进入测试模式后就蓝屏了。</p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Intellij IDE修改jar并打包</title>
    <url>/p/41a71aca.html</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>之前写的一个封装了支付宝微信红包、支付的一个jar包，在项目的版本库中没找到源码（可能当时忘记提交了），后面换电脑忘记备份就没有了，现在只能在运行的项目中找到这个jar库。现在要用改一下支付宝的账号和Key，而且这个还是写在java中的常量，只能反编译jar包改了再打包回去了。</p>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="1-查看原jar包配置"><a href="#1-查看原jar包配置" class="headerlink" title="1. 查看原jar包配置"></a>1. 查看原jar包配置</h2><p>用压缩软件打开jar，查看jar的配置为maven工程，查看pom.xml文件可以得到maven工程的groupId、artifactId、version这些信息。</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/41a71aca/19826068-8fc2e98a2c478274.png" alt></p>
<h2 id="2-新建一个项目"><a href="#2-新建一个项目" class="headerlink" title="2. 新建一个项目"></a>2. 新建一个项目</h2><p>打开Intellij IDE，根据前面的maven配置新建项目</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/41a71aca/19826068-902bbd25b970a546.png" alt></p>
<p>用配置jar包中的pom.xml新建<br><img src="//gitee.com/guoke3915/zw/raw/master/p/41a71aca/19826068-e660893700465d9d.png" alt></p>
<h2 id="3-导入jar包"><a href="#3-导入jar包" class="headerlink" title="3. 导入jar包"></a>3. 导入jar包</h2><p>将recharge-1.0.jar包复制到项目中去，并添加jar到库<br><img src="//gitee.com/guoke3915/zw/raw/master/p/41a71aca/19826068-34fc7457394fc4ed.png" alt></p>
<p>如果jar包中用引用了第三方的jar库，也把第三方的jar包复制到项目中，并也添加到库</p>
<h2 id="4-导入pom-xml配置"><a href="#4-导入pom-xml配置" class="headerlink" title="4. 导入pom.xml配置"></a>4. 导入pom.xml配置</h2><p>将jar包中的pom.xml配置复制到项目的pom.xml中，并更新。</p>
<h2 id="5-定位到要改的代码"><a href="#5-定位到要改的代码" class="headerlink" title="5. 定位到要改的代码"></a>5. 定位到要改的代码</h2><p>在工程左侧直接打开recharge-1.0.jar，找到要修改的代码(Intellij IDE可以直接反编译jar及内部的class)，因为是自己以前写的，所以很快就能找到要改的代码在哪.</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/41a71aca/19826068-c32da1ba832b0d57.png" alt></p>
<h2 id="6-新建对应的package包"><a href="#6-新建对应的package包" class="headerlink" title="6. 新建对应的package包"></a>6. 新建对应的package包</h2><p><img src="//gitee.com/guoke3915/zw/raw/master/p/41a71aca/19826068-6369bd689f54a8f4.png" alt></p>
<h2 id="7-新建对应的java文件"><a href="#7-新建对应的java文件" class="headerlink" title="7. 新建对应的java文件"></a>7. 新建对应的java文件</h2><p><img src="//gitee.com/guoke3915/zw/raw/master/p/41a71aca/19826068-de22672b9a933e04.png" alt></p>
<h2 id="8-复杂文件内容"><a href="#8-复杂文件内容" class="headerlink" title="8. 复杂文件内容"></a>8. 复杂文件内容</h2><p>将class反编译好的代码直接复制到新建的java文件中，修改需要修改的代码段</p>
<h2 id="9-新建中引用文件"><a href="#9-新建中引用文件" class="headerlink" title="9. 新建中引用文件"></a>9. 新建中引用文件</h2><p>因为前面将再个jar包引用为了库，大多数引用的文件都还是可以在jar中找到的，如果有找不到的重复第6、7、8步骤，将改动文件中引用的jar中的class文件也新建对应的java出来。如果项目复杂这里可能会重复很多,装每个引用的文件都复制到对应包下的java文件中</p>
<h2 id="10-编译class"><a href="#10-编译class" class="headerlink" title="10. 编译class"></a>10. 编译class</h2><p>根据引用顺序，将java文件一个一个的<code>Recompile&#39;PlatformAlipay.java&#39;</code>编码成class</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/41a71aca/19826068-aac6f70cefa9d847.png" alt></p>
<h2 id="11-替换jar中的修改后的class文件"><a href="#11-替换jar中的修改后的class文件" class="headerlink" title="11. 替换jar中的修改后的class文件"></a>11. 替换jar中的修改后的class文件</h2><p>在项目输出目录找到新编译的class文件</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/41a71aca/19826068-85d5cd63b3afc73d.png" alt></p>
<p>用好压直接打开jar，找到对应位置，直接把class替换进去，会自动压缩</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/41a71aca/19826068-e18dd997fac265a8.png" alt></p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/41a71aca/19826068-e6f3f46ba14df41a.png" alt></p>
<p>到此，jar修改重新打包就完成了。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 修改容器名</title>
    <url>/p/7c835d62.html</url>
    <content><![CDATA[<p>docker 容器创建好了并运行了，后因某些原因感觉容器名不太好，可以用<code>docker rename 原容器名  新容器名</code>来修改容器名的</p>
<pre><code class="line-numbers language-bash"># 将 mysql 改为 mysql-5.7
docker stop mysql 
docker rename mysql  mysql-5.7
docker start mysql-5.7</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>SVN主从仓库搭建</title>
    <url>/p/bf5ff9ab.html</url>
    <content><![CDATA[<h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><p>最近公司服务器做了些调整，SVN服务器搭建在内网服务器上，但在云服务器上做一个备份。然后就想到了SVN主从仓库的搭建了。</p>
<h1 id="二、环境"><a href="#二、环境" class="headerlink" title="二、环境"></a>二、环境</h1><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><p>CentOS 7.6</p>
<h2 id="主服务器"><a href="#主服务器" class="headerlink" title="主服务器"></a>主服务器</h2><p>局域网服务器 IP: 192.168.0.100</p>
<h2 id="从服务器"><a href="#从服务器" class="headerlink" title="从服务器"></a>从服务器</h2><p>阿里云服务器 IP: 47.97.208.x</p>
<h2 id="svn版本"><a href="#svn版本" class="headerlink" title="svn版本"></a>svn版本</h2><p>svnserve, version 1.7.14 (r1542130)</p>
<h1 id="三、步骤"><a href="#三、步骤" class="headerlink" title="三、步骤"></a>三、步骤</h1><h2 id="1、-安装svn环境"><a href="#1、-安装svn环境" class="headerlink" title="1、 安装svn环境"></a>1、 安装svn环境</h2><p>分别在二台服务器上安装SVN环境，并创建对应的仓库（这里可以是单仓库也可以是多仓库，二边保持一致就行了。如果是多仓库，每个创建的配置需要按下面步骤分别走一遍）。</p>
<p>svn环境搭建及配置Nginx转发和数据迁移可以参考之前写的文章，这里就不在复述了<br><a href="/p/24020ba2.html">CentOS中svn服务器安装与使用</a><br><a href="/p/187e3f43.html">SVN服务器跨平台迁移</a><br><a href="/p/55745dfb.html">Nginx转发SVN</a></p>
<h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h3><ul>
<li>主服务器svn仓库: <code>/home/svn/test</code>，配置http协议：<code>http://192.168.0.100/test/</code></li>
<li>从服务器svn仓库: <code>/home/svn/test_backup</code>，因为只作备份，直接使用svn协议：<code>svn://47.97.208.x/test_backup/</code></li>
<li>二台服务都有相同的账号和权限管理文件。账号 <code>zengwu=zw123.</code>、<code>guoke=gk123.</code>都有test仓库所有读写权限</li>
</ul>
<h2 id="2、-在备份机上，修改刚刚创建的SVN库里的钩子脚本pre-revprop-change"><a href="#2、-在备份机上，修改刚刚创建的SVN库里的钩子脚本pre-revprop-change" class="headerlink" title="2、 在备份机上，修改刚刚创建的SVN库里的钩子脚本pre-revprop-change"></a>2、 在备份机上，修改刚刚创建的SVN库里的钩子脚本pre-revprop-change</h2><pre><code class="line-numbers language-bash">cd /home/svn/test_backup
cp pre-revprop-change.tmpl pre-revprop-change
chmod +x pre-revprop-change
vim pre-revprop-change

#!/bin/sh
# 直接在脚本最前面加入exit 0退出程序就可以了
exit 0</code></pre>
<h2 id="3、-在主机上，初始化版本"><a href="#3、-在主机上，初始化版本" class="headerlink" title="3、 在主机上，初始化版本"></a>3、 在主机上，初始化版本</h2><p>因为主机在内网，外网无穿透情况下无法访问内网，所以同步操作在主机上执行。</p>
<pre><code class="line-numbers language-bash">svnsync init svn://47.97.208.x/test svn://192.168.0.103/test --username zengwu --password zw123. --no-auth-cache</code></pre>
<ul>
<li>svnsync init 从库的URL  主库的URL </li>
<li>–username –password: svn账号密码</li>
<li>–no-auth-cache: 不缓存账号密码</li>
</ul>
<h2 id="4、在主机上，开始同步主库的SVN数据"><a href="#4、在主机上，开始同步主库的SVN数据" class="headerlink" title="4、在主机上，开始同步主库的SVN数据"></a>4、在主机上，开始同步主库的SVN数据</h2><pre><code class="line-numbers language-bash">svnsync sync --non-interactive svn://47.97.208.x/test --username zengwu --password zw123.</code></pre>
<h2 id="5、在主机上，修改hooks下的post-commit脚本进行SVN实时同步"><a href="#5、在主机上，修改hooks下的post-commit脚本进行SVN实时同步" class="headerlink" title="5、在主机上，修改hooks下的post-commit脚本进行SVN实时同步"></a>5、在主机上，修改hooks下的post-commit脚本进行SVN实时同步</h2><p>svn每次提交成功后，会调用hooks下的post-commit脚本，所以在这里将同步数据语句加入其中就可以了。</p>
<pre><code class="line-numbers language-bash">cd /home/svn/test
cp post-commit.tmpl post-commit
chmod +x post-commit
vim post-commit

#!/bin/sh
# 直接在脚本最前面加入
svnsync sync --non-interactive svn://47.97.208.x/test --username zengwu --password zw123.
# 如果没有其他调整直接退出,默认的后面的代码可以不用执行
exit 0</code></pre>
<h1 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h1><p>本地Checkout: <code>http://192.168.0.100/test/</code> 为 test目录<br>本地Checkout: <code>svn://47.97.208.x/test_backup/</code> 为test_back目录<br>在test目录中创建<code>测试.txt</code>文件并以zengwu账号提交<br>在test目录中创建<code>测试1.txt</code> 文件并以guoke账号提交<br>在test_backup目录中update能更新到<code>测试.txt</code>和<code>测试1.txt</code> 文件。<br>查看二个目录的日志也是一样的。</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/bf5ff9ab/19826068-4950b8c6bba7786c.png" alt></p>
<h1 id="五、题外话"><a href="#五、题外话" class="headerlink" title="五、题外话"></a>五、题外话</h1><p>如果换过来，主服务器在外网云服上，从服务器在内网中，因为外网服务器无法使用<code>svn://192.168.0.100/test/</code>内网IP来访问时，该如何实现。</p>
<p>这里可以借助内网穿透服务来实现，如我们可以搭建一个<a href="/p/8426a0a1.html">frp内网穿</a>。<br>外网服务器为frp服务器，内网服务为frp客户端，在内网frp客户配置加入svn的tcp协议穿透</p>
<pre><code class="line-numbers language-ini">[SVN]
type = tcp
local_ip = 0.0.0.0
local_port = 3690
remote_port = 3691</code></pre>
<p>然后外网服务器可以使用<code>svn://127.0.0.1:3691/test/</code>来访问内网svn仓库了,其他配置和前面一样.</p>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>yum update -y的坑</title>
    <url>/p/7b3f3637.html</url>
    <content><![CDATA[<p>如果在线上环境或已经有服务器运行的时候,在使用<code>yum update</code>语更新的时候，千万千万不要带参数<code>-y</code>。<br>今天因要线上环境中安装一个服务，习惯性的用了<code>yum update -y</code>。结果docker有更新，因为使用了-y参数,系统就默认的给docker升级了，导致docker上运行的所有服务都挂了或重启了，然后自己还不知道，最后玩家反馈给客服游戏登录不上了，才去检测一下发现docker重启了，部分服务没有启动成功。<br>更新有风险，操作需要谨慎！</p>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>全球国际语言缩写代码</title>
    <url>/p/701b672e.html</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>国家/地区</th>
<th>语言代码</th>
<th>国家/地区</th>
<th>语言代码</th>
</tr>
</thead>
<tbody><tr>
<td>简体中文(中国)</td>
<td>zh-cn</td>
<td>繁体中文(台湾地区)</td>
<td>zh-tw</td>
</tr>
<tr>
<td>繁体中文(香港)</td>
<td>zh-hk</td>
<td>英语(香港)</td>
<td>en-hk</td>
</tr>
<tr>
<td>英语(美国)</td>
<td>en-us</td>
<td>英语(英国)</td>
<td>en-gb</td>
</tr>
<tr>
<td>英语(全球)</td>
<td>en-ww</td>
<td>英语(加拿大)</td>
<td>en-ca</td>
</tr>
<tr>
<td>英语(澳大利亚)</td>
<td>en-au</td>
<td>英语(爱尔兰)</td>
<td>en-ie</td>
</tr>
<tr>
<td>英语(芬兰)</td>
<td>en-fi</td>
<td>芬兰语(芬兰)</td>
<td>fi-fi</td>
</tr>
<tr>
<td>英语(丹麦)</td>
<td>en-dk</td>
<td>丹麦语(丹麦)</td>
<td>da-dk</td>
</tr>
<tr>
<td>英语(以色列)</td>
<td>en-il</td>
<td>希伯来语(以色列)</td>
<td>he-il</td>
</tr>
<tr>
<td>英语(南非)</td>
<td>en-za</td>
<td>英语(印度)</td>
<td>en-in</td>
</tr>
<tr>
<td>英语(挪威)</td>
<td>en-no</td>
<td>英语(新加坡)</td>
<td>en-sg</td>
</tr>
<tr>
<td>英语(新西兰)</td>
<td>en-nz</td>
<td>英语(印度尼西亚)</td>
<td>en-id</td>
</tr>
<tr>
<td>英语(菲律宾)</td>
<td>en-ph</td>
<td>英语(泰国)</td>
<td>en-th</td>
</tr>
<tr>
<td>英语(马来西亚)</td>
<td>en-my</td>
<td>英语(阿拉伯)</td>
<td>en-xa</td>
</tr>
<tr>
<td>韩文(韩国)</td>
<td>ko-kr</td>
<td>日语(日本)</td>
<td>ja-jp</td>
</tr>
<tr>
<td>荷兰语(荷兰)</td>
<td>nl-nl</td>
<td>荷兰语(比利时)</td>
<td>nl-be</td>
</tr>
<tr>
<td>葡萄牙语(葡萄牙)</td>
<td>pt-pt</td>
<td>葡萄牙语(巴西)</td>
<td>pt-br</td>
</tr>
<tr>
<td>法语(法国)</td>
<td>fr-fr</td>
<td>法语(卢森堡)</td>
<td>fr-lu</td>
</tr>
<tr>
<td>法语(瑞士)</td>
<td>fr-ch</td>
<td>法语(比利时)</td>
<td>fr-be</td>
</tr>
<tr>
<td>法语(加拿大)</td>
<td>fr-ca</td>
<td>西班牙语(拉丁美洲)</td>
<td>es-la</td>
</tr>
<tr>
<td>西班牙语(西班牙)</td>
<td>es-es</td>
<td>西班牙语(阿根廷)</td>
<td>es-ar</td>
</tr>
<tr>
<td>西班牙语(美国)</td>
<td>es-us</td>
<td>西班牙语(墨西哥)</td>
<td>es-mx</td>
</tr>
<tr>
<td>西班牙语(哥伦比亚)</td>
<td>es-co</td>
<td>西班牙语(波多黎各)</td>
<td>es-pr</td>
</tr>
<tr>
<td>德语(德国)</td>
<td>de-de</td>
<td>德语(奥地利)</td>
<td>de-at</td>
</tr>
<tr>
<td>德语(瑞士)</td>
<td>de-ch</td>
<td>俄语(俄罗斯)</td>
<td>ru-ru</td>
</tr>
<tr>
<td>意大利语(意大利)</td>
<td>it-it</td>
<td>希腊语(希腊)</td>
<td>el-gr</td>
</tr>
<tr>
<td>挪威语(挪威)</td>
<td>no-no</td>
<td>匈牙利语(匈牙利)</td>
<td>hu-hu</td>
</tr>
<tr>
<td>土耳其语(土耳其)</td>
<td>tr-tr</td>
<td>捷克语(捷克共和国)</td>
<td>cs-cz</td>
</tr>
<tr>
<td>斯洛文尼亚语</td>
<td>sl-sl</td>
<td>波兰语(波兰)</td>
<td>pl-pl</td>
</tr>
<tr>
<td>瑞典语(瑞典)</td>
<td>sv-se</td>
<td>西班牙语 (智利)</td>
<td>es-cl</td>
</tr>
</tbody></table>
<p>备用查询。本文转自：<a href="https://www.cnblogs.com/mien/archive/2008/08/22/1273950.html" target="_blank" rel="noopener">https://www.cnblogs.com/mien/archive/2008/08/22/1273950.html</a></p>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
      </tags>
  </entry>
  <entry>
    <title>svn: Can’t open file ‘/home/svn/test/db/txn-current-lock’: Permission denied</title>
    <url>/p/501c3a0f.html</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>在CentOS中安装好svn后用svn协议能正常访问，加了httpd转成http协议后，提交时就出现了<code>Can’t open file &#39;/home/svn/test/db/txn-current-lock&#39;: Permission denied</code>错误.</p>
<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>svn服务器搭建和启动都是用的root用户，所以创建的svn仓库目录<code>/home/svn/test</code>也属于root,所以用svn协议直接用svn服务器的时候就正常. 但是httpd默认用的是apache用户，使用http的时候，就对/home/svn/test目录没有写权限了。</p>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>对<code>/home/svn/test</code>目录下的所有文件和子目录添加Users的读写权限</p>
<pre><code class="line-numbers language-bash">chmod -R o+rw /home/svn/test</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>pm2安装使用</title>
    <url>/p/dabcd6f5.html</url>
    <content><![CDATA[<p>pm2是node管理与守护进程工具.</p>
<h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><pre><code class="line-numbers language-bash">npm install -g pm2</code></pre>
<h2 id="2-单个启动"><a href="#2-单个启动" class="headerlink" title="2. 单个启动"></a>2. 单个启动</h2><pre><code class="line-numbers language-bash">pm2 start app.js  # 启动
pm2 start app.js -i 4 # 启动4个应用实例，自动负载均衡

# 监听文件变化，配合pm2 logs，方便本地开发
pm2 start app.js --watch

pm2 start app.js -n test  # 启动并命名为test</code></pre>
<h2 id="3-批量启动"><a href="#3-批量启动" class="headerlink" title="3. 批量启动"></a>3. 批量启动</h2><p>新建.json文件如server.json，配置如下</p>
<pre><code class="line-numbers language-json">{
    &quot;apps&quot;: [{
        &quot;name&quot;: &quot;appA&quot;,
        &quot;script&quot;: &quot;./appA.js&quot;,
        &quot;watch&quot;: false
    }, {
        &quot;name&quot;: &quot;appB&quot;,
        &quot;script&quot;: &quot;./appB.js&quot;,
        &quot;watch&quot;: false
    }]
}</code></pre>
<p>启动</p>
<pre><code class="line-numbers language-bash">pm2 start server.json</code></pre>
<h2 id="4-重启"><a href="#4-重启" class="headerlink" title="4. 重启"></a>4. 重启</h2><pre><code class="line-numbers language-bash">pm2 restart app_name/app_id  # 重启
pm2 restart all  # 重启所有进程，相当stop+start
pm2 reload all  # 0秒停机重载进程 (用于不间断进程)</code></pre>
<h2 id="5-查看"><a href="#5-查看" class="headerlink" title="5. 查看"></a>5. 查看</h2><pre><code class="line-numbers language-bash">pm2 list # 查看进程
pm2 logs # 查看日志
pm2 show app_name|app_id # 查看进程详情
pm2 monit  # 查看CPU和内存资源占用</code></pre>
<h2 id="6-停止"><a href="#6-停止" class="headerlink" title="6. 停止"></a>6. 停止</h2><pre><code class="line-numbers language-bash">pm2 stop app_name/app_id
pm2 stop all  # 停止所有</code></pre>
<h2 id="7-删除"><a href="#7-删除" class="headerlink" title="7. 删除"></a>7. 删除</h2><pre><code class="line-numbers language-bash">pm2 delete app_name/app_id  # 从列表中删除指定的进程
pm2 delete all # 从列表中删除全部进程
pm2 kill # 杀死守护进程</code></pre>
<h2 id="8-开机自启动"><a href="#8-开机自启动" class="headerlink" title="8. 开机自启动"></a>8. 开机自启动</h2><pre><code class="line-numbers language-bash">pm2 startup  # 创建开机自启动命令
pm2 save  # 保存当前应用列表
pm2 resurrect  # 重新加载保存的应用列表
pm2 unstartup  # 移除开机自启动</code></pre>
<h2 id="9-pm2更新"><a href="#9-pm2更新" class="headerlink" title="9. pm2更新"></a>9. pm2更新</h2><pre><code class="line-numbers language-bash">pm2 save # 保存当前应用列表
npm install pm2 -g
pm2 update</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7 安装c++17</title>
    <url>/p/984e3b7.html</url>
    <content><![CDATA[<p>在linux时编译c++时，需要安装对应的编译环境。</p>
<p>安装 devtoolset-7 工具包，并执行 <code>scl enable devtoolset-7 bash</code>就可以安装c++17环境</p>
<pre><code class="line-numbers language-bash">yum install centos-release-scl
yum-config-manager --enable rhel-server-rhscl-7-rpms
yum install devtoolset-7
scl enable devtoolset-7 bash</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>samba访问慢</title>
    <url>/p/d03ef573.html</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>在CentOS 7上安装了文件共享服务samba，但是其他电脑第一次访问的时候总是要等好几分钟才会弹出输入账号密码的页面来。</p>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>保持<code>/etc/hosts</code>中主机名与<code>HOSTNAME</code>一致.</p>
<h2 id="1-查看主机名"><a href="#1-查看主机名" class="headerlink" title="1. 查看主机名"></a>1. 查看主机名</h2><pre><code class="line-numbers language-bash">hostname
zngw # 这里的主机名为zngw</code></pre>
<h2 id="2-修改hosts配置"><a href="#2-修改hosts配置" class="headerlink" title="2. 修改hosts配置"></a>2. 修改hosts配置</h2><pre><code class="line-numbers language-bash">vim /etc/hosts

# 修改前

127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6

# 修改后

127.0.0.1   localhost zngw
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</code></pre>
<h1 id="重启网络"><a href="#重启网络" class="headerlink" title="重启网络"></a>重启网络</h1><pre><code class="line-numbers language-bash">service network restart</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH登录虚拟机的CentOS慢的问题</title>
    <url>/p/2a7bd2cf.html</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>在vmwave esxi中装了几台CentOS 7 的虚拟机，每次用ssh工具登录的时候需要等待的时间特别久，大概半分钟左右。</p>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><h2 id="1-修改sshd-config配置"><a href="#1-修改sshd-config配置" class="headerlink" title="1. 修改sshd_config配置"></a>1. 修改sshd_config配置</h2><p>用编辑器打开<code>vim /etc/ssh/sshd_config</code>文件修改<code>UseDNS</code>属性</p>
<pre><code class="line-numbers language-conf">#UseDNS yes 这里把注释打开，并设置值为no
UseDNS no</code></pre>
<h2 id="2-重启sshd服务"><a href="#2-重启sshd服务" class="headerlink" title="2. 重启sshd服务"></a>2. 重启sshd服务</h2><pre><code class="line-numbers language-bash">service sshd restart</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Vmware ESXi 7.0克隆虚拟机</title>
    <url>/p/2bfcd977.html</url>
    <content><![CDATA[<p>Vmware ESXi 7.0 网页管理页面是没有克隆选择的。我们可以通过导出和磁盘导入来完成克隆。</p>
<h1 id="导出虚拟机配置和硬盘"><a href="#导出虚拟机配置和硬盘" class="headerlink" title="导出虚拟机配置和硬盘"></a>导出虚拟机配置和硬盘</h1><p>在虚拟机管理页面，选中需要克隆的虚拟机，点右上角<code>操作</code>页面，选择<code>导出</code>。导出vmdk到本地就行了。<br><img src="//gitee.com/guoke3915/zw/raw/master/p/2bfcd977/19826068-4db34453a396cec9.png" alt></p>
<h1 id="用虚拟机磁盘文件和配置创建虚拟机"><a href="#用虚拟机磁盘文件和配置创建虚拟机" class="headerlink" title="用虚拟机磁盘文件和配置创建虚拟机"></a>用虚拟机磁盘文件和配置创建虚拟机</h1><h2 id="1-创建新的虚拟机"><a href="#1-创建新的虚拟机" class="headerlink" title="1. 创建新的虚拟机"></a>1. 创建新的虚拟机</h2><p>在虚拟机管理页面中，创建新的虚拟机，选择<code>从OVF或OVA文件部署虚拟机</code><br><img src="//gitee.com/guoke3915/zw/raw/master/p/2bfcd977/19826068-f3fdf8d7616e2447.png" alt></p>
<h2 id="2-选择虚拟机配置和磁盘文件"><a href="#2-选择虚拟机配置和磁盘文件" class="headerlink" title="2. 选择虚拟机配置和磁盘文件"></a>2. 选择虚拟机配置和磁盘文件</h2><p>设置虚拟机的名称，并将之前导出的虚拟机配置文件(.ovf)和虚拟机磁盘文件(.vmdk)拖入<br><img src="//gitee.com/guoke3915/zw/raw/master/p/2bfcd977/19826068-7afa1dfa0a49843b.png" alt></p>
<h2 id="3-选择虚拟机存储位置"><a href="#3-选择虚拟机存储位置" class="headerlink" title="3. 选择虚拟机存储位置"></a>3. 选择虚拟机存储位置</h2><p><img src="//gitee.com/guoke3915/zw/raw/master/p/2bfcd977/19826068-28265699ac09bfba.png" alt></p>
<h2 id="4-选择虚拟机所在的VLAN"><a href="#4-选择虚拟机所在的VLAN" class="headerlink" title="4. 选择虚拟机所在的VLAN"></a>4. 选择虚拟机所在的VLAN</h2><p><img src="//gitee.com/guoke3915/zw/raw/master/p/2bfcd977/19826068-26023c96f3b60ca5.png" alt></p>
<h2 id="5-确认配置并完成新建"><a href="#5-确认配置并完成新建" class="headerlink" title="5. 确认配置并完成新建"></a>5. 确认配置并完成新建</h2><p>这里的<code>缺少所需的磁盘映像</code>不用管,点完成的进入创建的时候会先上传第二步中选择的磁盘文件.</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/2bfcd977/19826068-edbdca126c2b36c5.png" alt></p>
<p>等待上传并创建完虚拟机就可以用了。</p>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7磁盘扩容</title>
    <url>/p/7db53bb6.html</url>
    <content><![CDATA[<p>最近弄了台Dell R730服务器,在vmware esxi中安装了台CentOS7，装好后发现磁盘空间太小了，于是就打算扩容一下。</p>
<h2 id="一、调整磁盘大小"><a href="#一、调整磁盘大小" class="headerlink" title="一、调整磁盘大小"></a>一、调整磁盘大小</h2><p>进入虚拟机操作页面，设置好需要的硬盘的大小</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/7db53bb6/19826068-3f0add60aff44276.png" alt></p>
<h2 id="二、创建新分区"><a href="#二、创建新分区" class="headerlink" title="二、创建新分区"></a>二、创建新分区</h2><p>先用<code>fdisk -l</code>查出硬盘为<code>/dev/sda</code>，再用<code>fdisk /dev/sda</code>创建新分区</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/7db53bb6/19826068-378719b4f205c5aa.png" alt></p>
<h2 id="三、创建物理卷"><a href="#三、创建物理卷" class="headerlink" title="三、创建物理卷"></a>三、创建物理卷</h2><p>需要先重启，使用<code>reboot</code></p>
<pre><code class="line-numbers language-bash">pvcreate /dev/sda3</code></pre>
<p>查看物理卷信息<code>pvdisplay</code></p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/7db53bb6/19826068-2bc85c9532d2637f.png" alt></p>
<h2 id="四、新分区加入到根目录分区centos中"><a href="#四、新分区加入到根目录分区centos中" class="headerlink" title="四、新分区加入到根目录分区centos中"></a>四、新分区加入到根目录分区centos中</h2><p>将新增加的分区<code>/dev/sda3</code>加入到根目录分区centos中:使用<code>vgextend centos /dev/sda3</code>命令,<code>vgdisplay</code>查看卷组信息，空闲有924G可以使用</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/7db53bb6/19826068-2efed4759608b64f.png" alt></p>
<h2 id="五、增加容量"><a href="#五、增加容量" class="headerlink" title="五、增加容量"></a>五、增加容量</h2><p>通过查看卷组信息发现空闲924G，我们可以增加924G。使用<code>lvresize -L +924G /dev/mapper/centos-root</code>命令</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/7db53bb6/19826068-c2dc79840d32cb25.png" alt></p>
<h2 id="六、刷新磁盘容量"><a href="#六、刷新磁盘容量" class="headerlink" title="六、刷新磁盘容量"></a>六、刷新磁盘容量</h2><p>使用<code>df -hT</code>可以查看磁盘文件系统</p>
<pre><code class="line-numbers language-bash"># resize2fs 命令 针对的是ext2、ext3、ext4文件系统
resize2fs /dev/mapper/centos-root

# xfs_growfs 命令 针对的是xfs文件系统
xfs_growfs /dev/mapper/centos-root</code></pre>
<h2 id="七、查看容量"><a href="#七、查看容量" class="headerlink" title="七、查看容量"></a>七、查看容量</h2><p>成功从100G扩容到1000G了</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/7db53bb6/19826068-9c53e8775639c136.png" alt></p>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx转发SVN</title>
    <url>/p/55745dfb.html</url>
    <content><![CDATA[<p>在Linux中安装好subversion服务器后，使用的是svn协议，要让他使用http/https协议可以借助Nginx+httpd。</p>
<h1 id="一、安装配置svn服务"><a href="#一、安装配置svn服务" class="headerlink" title="一、安装配置svn服务"></a>一、安装配置svn服务</h1><p>前面有讲过，这里就不再复述了<a href="/p/24020ba2.html">CentOS中svn服务器安装与使用</a></p>
<p>假设有svn仓库:</p>
<ul>
<li>test1: /home/svn/test1</li>
<li>test2: /home/svn/test2</li>
<li>两仓库的账号和权限认证文件都为：<code>/home/svn/passwd</code>、<code>/home/svn/authz</code></li>
<li>svn以<code>/home/svn</code>为根目录启动</li>
</ul>
<h1 id="二、安装httpd"><a href="#二、安装httpd" class="headerlink" title="二、安装httpd"></a>二、安装httpd</h1><p>使用Apache HTTP服务将svn协议转成http协议，需要安装<code>httpd</code>和<code>mod_dav_svn</code></p>
<pre><code class="line-numbers language-bash">yum install httpd mod_dav_svn -y</code></pre>
<h1 id="三、配置httpd"><a href="#三、配置httpd" class="headerlink" title="三、配置httpd"></a>三、配置httpd</h1><h2 id="添svn-conf配置"><a href="#添svn-conf配置" class="headerlink" title="添svn.conf配置"></a>添svn.conf配置</h2><p>增加配置文件<code>/etc/httpd/conf.d/svn.conf</code></p>
<pre><code class="line-numbers language-conf">#创建并编辑配置文件
vim /etc/httpd/conf.d/svn.conf

# 添加内容
&lt;Location /&gt;
        DAV svn
        SVNParentPath /home/svn/
        AuthType Basic
        AuthName &quot;Authorization Realm&quot;
        AuthUserFile /home/svn/passwdfile
        AuthzSVNAccessFile /home/svn/authz
        Require valid-user
        SVNAdvertiseV2Protocol Off
&lt;/Location&gt;</code></pre>
<ul>
<li>SVNParentPath  多仓库的根目录，如果是单仓库配置用SVNPath</li>
<li>AuthUserFile 账号密码文件，这里后面需要新建一个，这密码是加密的与svn服务配置的账号密码一样就可以了</li>
<li>AuthzSVNAccessFile 权限设置文件，与svn服务使用同一个文件</li>
</ul>
<h2 id="配置http用户名密码认证文件-home-svn-passwdfile"><a href="#配置http用户名密码认证文件-home-svn-passwdfile" class="headerlink" title="配置http用户名密码认证文件 /home/svn/passwdfile"></a>配置http用户名密码认证文件 <code>/home/svn/passwdfile</code></h2><pre><code class="line-numbers language-bash">htpasswd -cb /home/svn/passwdfile user password</code></pre>
<p>用htpasswd 创建账号(user)、密码(password)，这里的账号密码需要和svn服务器中/home/svn/passwd文件的一致</p>
<h2 id="配置-etc-httpd-conf-httpd-conf"><a href="#配置-etc-httpd-conf-httpd-conf" class="headerlink" title="配置/etc/httpd/conf/httpd.conf"></a>配置/etc/httpd/conf/httpd.conf</h2><pre><code class="line-numbers language-conf">vim /etc/httpd/conf/httpd.conf
# 这里需要配置Listen和ServerName
Listen = 8369
ServerName = 127.0.0.1:8369</code></pre>
<h2 id="设置防火墙和Selinux"><a href="#设置防火墙和Selinux" class="headerlink" title="设置防火墙和Selinux"></a>设置防火墙和Selinux</h2><pre><code class="line-numbers language-bash"># 因为httpd的8369端口不对外开放，所以可以不开放这个端口。如果要放开可以用
firewall-cmd --zone=public --remove-port=8369/tcp --permanent
firewall-cmd --reload

# 设置selinux开放httpd
semanage port -a -t http_port_t -p tcp 8369
semanage permissive -a httpd_t</code></pre>
<ul>
<li>如果semanage未定义可以参考<a href="/p/cb8e2633.html">CentOS7 中安装semanage来设置selinux</a></li>
</ul>
<h1 id="四、重启httpd"><a href="#四、重启httpd" class="headerlink" title="四、重启httpd"></a>四、重启httpd</h1><pre><code class="line-numbers language-bash">systemctl restart httpd
systemctl enable httpd</code></pre>
<h1 id="五、配置nginx"><a href="#五、配置nginx" class="headerlink" title="五、配置nginx"></a>五、配置nginx</h1><p>在<code>/etc/nginx/nginx.conf</code>配置中添加svn转发</p>
<pre><code class="line-numbers language-conf"># http转发
server {
        listen          80;
        server_name     svn.zngw.icu;  # svn的域名

        location = /favicon.ico {
                log_not_found   off;
        }

        location / {
                proxy_pass http://localhost:8369;

                # header 开始
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header   Cookie $http_cookie;
                # header 结束

                # 单文件大小
                client_max_body_size 5000M;
        }
}

# https转发
server {
    listen 443 ssl;
    server_name  svn.zngw.icu;
    #ssl on;
    ssl_certificate /etc/nginx/key/ svn.zngw.icu.crt;
    ssl_certificate_key /etc/nginx/key/ svn.zngw.icu.key;
    ssl_session_timeout  5m;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;     #指定SSL服务器端支持的协议版本
    ssl_ciphers  HIGH:!aNULL:!MD5;
    #ssl_ciphers  ALL：!ADH：!EXPORT56：RC4+RSA：+HIGH：+MEDIUM：+LOW：+SSLv2：+EXP;    #指定加密算法
    ssl_prefer_server_ciphers   on;    #在使用SSLv3和TLS协议时指定服务器的加密算法要优先于客户端的加密算法

    # rewrite ^ http://$http_host$request_uri? permanent;
    location / {
                proxy_pass http://localhost:8369;

                # header 开始
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header   Cookie $http_cookie;
                # header 结束

                # 单文件大小
                client_max_body_size 5000M;
    }
}</code></pre>
<h1 id="重新加载Nginx配置"><a href="#重新加载Nginx配置" class="headerlink" title="重新加载Nginx配置"></a>重新加载Nginx配置</h1><pre><code class="line-numbers language-bash">nginx -s reload</code></pre>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>在流量器中直接输入 <code>http://svn.zngw.icu/test1</code> 可以弹出账号登录页面，登录成功可以访问网页版的svn。用svn客户端checkout <code>http://svn.zngw.icu/test1</code> 就可以下载test1项目</p>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker中安装0wnCloud</title>
    <url>/p/ecd4fe93.html</url>
    <content><![CDATA[<h1 id="一-、安装MySQL"><a href="#一-、安装MySQL" class="headerlink" title="一 、安装MySQL"></a>一 、安装MySQL</h1><p>mysql官方docker镜像已经版本到8.x的版本了,这里需要安装mysql 5.7版本就可以了</p>
<pre><code class="line-numbers language-bash">docker run --name owncloud-mysql5.7 -d \
-p 3306:3306 \
-e MYSQL_ROOT_PASSWORD=Owncloud \
-e MYSQL_DATABASE=owncloud \
-e MYSQL_USER=owncloud \
-e MYSQL_PASSWORD=Owncloud \
-v /data/owncloud/mysql:/var/lib/mysql \
mysql:5.7</code></pre>
<ul>
<li>设置容器名为: owncloud-mysql5.7</li>
<li>映射端口为: 3306</li>
<li>MYSQL_ROOT_PASSWORD: root账号密码</li>
<li>MYSQL_DATABASE: 创建数据库</li>
<li>MYSQL_USER: 新建用户</li>
<li>MYSQL_PASSWORD: 新建用户密码</li>
<li>映射数据库数据目录/data/owncloud/mysql</li>
</ul>
<h1 id="二、查看MySQL容器中的IP"><a href="#二、查看MySQL容器中的IP" class="headerlink" title="二、查看MySQL容器中的IP"></a>二、查看MySQL容器中的IP</h1><pre><code class="line-numbers language-bash">docker inspect -f &#39;{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}&#39; owncloud-mysql5.7</code></pre>
<p>这里查出来的ip是<code>172.17.0.5</code></p>
<h1 id="三、安装ownCloud"><a href="#三、安装ownCloud" class="headerlink" title="三、安装ownCloud"></a>三、安装ownCloud</h1><pre><code class="line-numbers language-bash">docker run --name owncloud --link owncloud-mysql5.7:mysql  \
-v /data/owncloud/data:/var/www/html/data \
-p 8080:80 \
-d owncloud</code></pre>
<ul>
<li>映射ownCloud的/var/www/html/data目录到/data/owncloud/data</li>
<li>映射端口为8080</li>
</ul>
<h1 id="四、配置nginx反向代理"><a href="#四、配置nginx反向代理" class="headerlink" title="四、配置nginx反向代理"></a>四、配置nginx反向代理</h1><p>在nginx配置文件中添加配置</p>
<pre><code class="line-numbers language-bash">upstream pan_server{
    server  127.0.0.1:8080;
}

server {
    listen   80;
    server_name cloud.xxx.cn;
    access_log /etc/nginx/log/cloud.access.log;
    error_log /etc/nginx/log/cloud.error.log;

    proxy_set_header X-Forwarded-For $remote_addr;

    location / {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        add_header Cache-Control  &quot;no-cache&quot;;

        proxy_pass http://pan_server;
        limit_rate 256m;
        client_max_body_size 0;
    }
}</code></pre>
<h1 id="五、初始化owncloud配置"><a href="#五、初始化owncloud配置" class="headerlink" title="五、初始化owncloud配置"></a>五、初始化owncloud配置</h1><p>浏览器输入nginx代理地址: cloud.xxx.cn<br><img src="https://upload-images.jianshu.io/upload_images/19826068-143e0a7b3531050c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<h1 id="六、修改owncloud主机地址"><a href="#六、修改owncloud主机地址" class="headerlink" title="六、修改owncloud主机地址"></a>六、修改owncloud主机地址</h1><p>默认用的是初始设置时的域名为网盘的域名，如果要修改域名，可以进入容器改配置文件，如果不需要修改，后面步骤可以 直接跳过了。</p>
<ul>
<li>进入容器</li>
</ul>
<pre><code class="line-numbers language-bash">docker exec -it owncloud /bin/bash</code></pre>
<ul>
<li>安装文本编辑器</li>
</ul>
<pre><code class="line-numbers language-bash">apt-get update
apt-get install vim</code></pre>
<ul>
<li>修改配置文件</li>
</ul>
<pre><code class="line-numbers language-bash"># 用vip打开配置文件
vim /var/www/html/config/config.php

# 修改
array(
  0=&gt;&#39;127.0.0.1&#39;
)
# 修改为
array(
  0=&gt;&#39;cloud.xxx.cn&#39;
)

# 修改
&quot;overwrite.cli.url&#39; =&gt; &quot;http://127.0.0.1&quot; ,
# 修改为
&quot;overwrite.cli.url&#39; =&gt; &quot;http://cloud.xxx.cn&quot; ,</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx转发frp Http协议</title>
    <url>/p/e2be0e13.html</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>由于服务器上的80端口被Nginx占用了，所以frp就没法监听80端口了。但是可以用Nginx反向代理转发frp中http协议。</p>
<h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><ul>
<li>frp 监听http端口为:8080</li>
<li>转发域名:test.zngw.icu</li>
<li></li>
</ul>
<h1 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h1><p>新加转发配置</p>
<pre><code class="line-numbers language-conf">server {
        listen 80;
        server_name test.zngw.icu;

        location / {
            proxy_pass http://localhost:8080;
            proxy_redirect off;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        }
    }</code></pre>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
      </tags>
  </entry>
  <entry>
    <title>systemctl 如何启动、关闭、开机启用禁用服务</title>
    <url>/p/c9bcfd50.html</url>
    <content><![CDATA[<p>以nginx服务为例</p>
<h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><pre><code class="line-numbers language-bash">systemctl start nginx</code></pre>
<h2 id="关闭服务"><a href="#关闭服务" class="headerlink" title="关闭服务"></a>关闭服务</h2><pre><code class="line-numbers language-bash">systemctl stop nginx</code></pre>
<h2 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h2><pre><code class="line-numbers language-bash">systemctl restart nginx</code></pre>
<h2 id="显示服务的状态"><a href="#显示服务的状态" class="headerlink" title="显示服务的状态"></a>显示服务的状态</h2><pre><code class="line-numbers language-bash">systemctl status nginx</code></pre>
<h2 id="在开机时启用服务"><a href="#在开机时启用服务" class="headerlink" title="在开机时启用服务"></a>在开机时启用服务</h2><pre><code class="line-numbers language-bash">systemctl enable nginx</code></pre>
<h2 id="在开机时禁用服务"><a href="#在开机时禁用服务" class="headerlink" title="在开机时禁用服务"></a>在开机时禁用服务</h2><pre><code class="line-numbers language-bash">systemctl disable nginx</code></pre>
<h2 id="查看服务是否开机启动"><a href="#查看服务是否开机启动" class="headerlink" title="查看服务是否开机启动"></a>查看服务是否开机启动</h2><pre><code class="line-numbers language-bash">systemctl is-enabled nginx</code></pre>
<h2 id="查看已启动的服务列表"><a href="#查看已启动的服务列表" class="headerlink" title="查看已启动的服务列表"></a>查看已启动的服务列表</h2><pre><code class="line-numbers language-bash">systemctl list-unit-files|grep enabled</code></pre>
<h2 id="查看启动失败的服务列表"><a href="#查看启动失败的服务列表" class="headerlink" title="查看启动失败的服务列表"></a>查看启动失败的服务列表</h2><pre><code class="line-numbers language-bash">systemctl --failed</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>iPhone投屏到Win10</title>
    <url>/p/b8ec883a.html</url>
    <content><![CDATA[<ul>
<li><p>iPhone手机与win10电脑在同一局域网内，切未开启ap隔离，即iPhone和win电脑可以相互通讯。</p>
</li>
<li><p>下载<a href="https://github.com/xfirefly/Airplay-SDK/tree/master/windows-receiver" target="_blank" rel="noopener">Airplay播放器</a>中的<a href="https://github.com/xfirefly/Airplay-SDK/blob/master/windows-receiver/win-airplay.zip" target="_blank" rel="noopener" title="win-airplay.zip">win-airplay.zip</a></p>
</li>
<li><p>iPhone投屏依赖于Airplay，所以需要在win系统中优先安装Apple Bonjour 广播服务。 先安装zip包内的 Bonjour64.msi 或 Bonjour.msi</p>
</li>
<li><p>运行压缩包中的Blueberry-Airplay.exe程序，弹出的防火墙设置中运行Blueberry-Airplay.exe</p>
</li>
<li><p>设置设备名和选项，点开启服务<br><img src="//gitee.com/guoke3915/zw/raw/master/p/b8ec883a/19826068-3c98b2d7a8485988.png" alt></p>
</li>
<li><p>最后在iPhone手机里屏幕镜像中找到设备名的设备<br><img src="//gitee.com/guoke3915/zw/raw/master/p/b8ec883a/19826068-17fb824bcd17bc8f.png" alt></p>
</li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>SVN仓库定时增量备份</title>
    <url>/p/b223c6a4.html</url>
    <content><![CDATA[<p><code>svnadmin dump</code>命令可以导出指定的版本，可以通过<code>cron</code>计划任务定时执行脚本达到定时增量备份svn仓库的目的</p>
<h1 id="增量备份svn脚本"><a href="#增量备份svn脚本" class="headerlink" title="增量备份svn脚本"></a>增量备份svn脚本</h1><p>创建备份脚本并赋予可执行权限<code>/home/backup/svnbackup.sh</code></p>
<pre><code class="line-numbers language-bash"># !bin/bash

# svn仓库目录
repo=/home/svn/test

# 备份目录
src=/home/backup/test

#=======================================
# 脚本所在目录
basepath=$(cd &quot;$(dirname &quot;$0&quot;)&quot;;pwd)

# 配置文件
cfg=${basepath}/svn.conf

# 读取配置文件中上次备份版本
v0=
if [ -f $cfg ]; then
  v0=$(cat $cfg)
fi

if [ ! $v0 ]; then
  echo &quot;未备份过，从0开始&quot; 
  let v0=0
else
  echo &quot;上次备份版本号: $v0&quot; 
  let v0++
fi

# 查询当前仓库版本
v1=$(svnlook youngest ${repo})
echo &quot;当前仓库版本号: $v1&quot; 

if [ $v0 -gt $v1 ]
then
  echo &quot;没有新增，无需备份&quot;
  exit 0
fi

if [ ! -d &quot;${src}&quot; ]; then
  mkdir -p &quot;${src}&quot;
fi

# 备份文件
dumpfile=${src}/${v0}-${v1}.dump
if [ -f $dumpfile ]; then
  echo &quot;当前仓库版已备份&quot;
  echo $v1 &gt; $cfg
  exit 0
fi

# 开始备份
let v0++
echo &quot;备份仓库 $repo 版本号: $v0-$v1 -&gt; $dumpfile&quot;
svnadmin dump ${repo} -r ${v0}:${v1} --incremental &gt; $dumpfile

# 写入配置文件
echo $v1 &gt; $cfg</code></pre>
<ul>
<li>这里要修改repo仓库所在目录</li>
<li>修改备份文件绝对目录src</li>
<li>备份时会在脚本所有目录生成一个svn.conf配置文件记录已经备份的最新版本号，如果不当文件不存在则从版本0开始备份，手动修改/删除配置文件会导致备份版本号出错。</li>
<li>备份文件名为 <code>开始版本号-结束版本号.dump</code></li>
</ul>
<h1 id="添加定时任务"><a href="#添加定时任务" class="headerlink" title="添加定时任务"></a>添加定时任务</h1><pre><code class="line-numbers language-bash">crontab -e

# 每周日零晨3点备份
0 3 * * 0 /home/backup/svnbackup.sh</code></pre>
<p>重启</p>
<pre><code class="line-numbers language-bash">systemctl restart crond</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>C#中MongoDB aggregate 运用</title>
    <url>/p/cb35f4c.html</url>
    <content><![CDATA[<p>db.collection.aggregate([array]);<br>array可是是任何一个或多个操作符。<br>操作符介绍：</p>
<ul>
<li>$project：包含、排除、重命名和显示字段</li>
<li>$match：查询，需要同find()一样的参数</li>
<li>$limit：限制结果数量</li>
<li>$skip：忽略结果的数量</li>
<li>$sort：按照给定的字段排序结果</li>
<li>$group：按照给定表达式组合结果</li>
<li>$unwind：分割嵌入数组到自己顶层文件</li>
</ul>
<h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><pre><code class="line-numbers language-json"> {_id:1,name:&quot;a&quot;,status:1,num:1}
 {_id:2,name:&quot;a&quot;,status:0,num:2}
 {_id:3,name:&quot;b&quot;,status:1,num:3}
 {_id:4,name:&quot;c&quot;,status:1,num:4}
 {_id:5,name:&quot;d&quot;,status:1,num:5}</code></pre>
<h2 id="应用一：统计name的数量和总数"><a href="#应用一：统计name的数量和总数" class="headerlink" title="应用一：统计name的数量和总数"></a>应用一：统计name的数量和总数</h2><ul>
<li>mongodb语法</li>
</ul>
<pre><code class="line-numbers language-json">db.collection.aggregate([
    {
        $group: {
            _id: &quot;$name&quot;,
            count: {
                $sum: 1
            },
            total: {
                $sum: &quot;$num&quot;
            }
        }]);</code></pre>
<ul>
<li>C# 使用</li>
</ul>
<pre><code class="line-numbers language-C#">        var group = new BsonDocument
        {
            {
                &quot;$group&quot;, new BsonDocument{
                   {
                       &quot;_id&quot;, &quot;$name&quot;
                   },
                   {
                       &quot;count&quot;, new BsonDocument{
                           {&quot;$sum&quot;, 1}
                       }
                   },
                   {
                       &quot;total&quot;, new BsonDocument{
                           {&quot;$sum&quot;, &quot;$num&quot;}
                       }
                   }
               }
            }
        };

        var col = MDB.RechargeDB.GetCollection&lt;BsonDocument&gt;(&quot;CollectionName&quot;);
        var list = col.Aggregate().Group(group).ToList();</code></pre>
<h2 id="应用二：统计status-1的name的数量"><a href="#应用二：统计status-1的name的数量" class="headerlink" title="应用二：统计status=1的name的数量"></a>应用二：统计status=1的name的数量</h2><ul>
<li>mongodb语法</li>
</ul>
<pre><code class="line-numbers language-json">db.collection.aggregate([
    {
        $match: {
            status: 1
        }
    },
    {
        $group: {
            _id: &quot;$name&quot;,
            count: {
                $sum: 1
            }
        }
    }
]);</code></pre>
<ul>
<li>C# 使用</li>
</ul>
<pre><code class="line-numbers language-C#">        var match = new BsonDocument
        {
            {
                &quot;$match&quot;, new BsonDocument{
                    {
                        &quot;status&quot;, 1              
                    }
                }
            }
        };

        var group = new BsonDocument
        {
            {
                &quot;$group&quot;, new BsonDocument{
                   {
                       &quot;_id&quot;, &quot;$name&quot;
                   },
                   {
                       &quot;count&quot;, new BsonDocument{
                           {&quot;$sum&quot;, 1}
                       }
                   }
               }
            }
        };

        var col = MDB.RechargeDB.GetCollection&lt;BsonDocument&gt;(&quot;CollectionName&quot;);
        var list = col.Aggregate().Match(match).Group(group).ToList();</code></pre>
<h2 id="应用三：统计name的数量，并且数量为小于2的"><a href="#应用三：统计name的数量，并且数量为小于2的" class="headerlink" title="应用三：统计name的数量，并且数量为小于2的"></a>应用三：统计name的数量，并且数量为小于2的</h2><ul>
<li>mongodb语法</li>
</ul>
<pre><code class="line-numbers language-json">db.collection.aggregate([
    {
        $group: {
            _id: &quot;$name&quot;,
            count: {
                $sum: 1
            }
        },
        {
            $match: {
                count: {
                    $lt: 2
                }
            }
        }]);</code></pre>
<ul>
<li>C# 使用</li>
</ul>
<pre><code class="line-numbers language-C#">        var group = new BsonDocument
        {
            {
                &quot;$group&quot;, new BsonDocument{
                   {
                       &quot;_id&quot;, &quot;$name&quot;
                   },
                   {
                       &quot;count&quot;, new BsonDocument{
                           {&quot;$sum&quot;, 1}
                       }
                   }
               }
            }
        };

        var match = new BsonDocument
        {
            {
                &quot;$match&quot;, new BsonDocument{
                    {
                        &quot;count&quot;, new BsonDocument{
                           {&quot;$lt&quot;, 2}
                       }             
                    }
                }
            }
        };

        var col = MDB.RechargeDB.GetCollection&lt;BsonDocument&gt;(&quot;CollectionName&quot;);
        var list = col.Aggregate().Group(group).Match(match).ToList();</code></pre>
<h2 id="应用四：统计stauts-1的name的数量，并且数量为1的"><a href="#应用四：统计stauts-1的name的数量，并且数量为1的" class="headerlink" title="应用四：统计stauts=1的name的数量，并且数量为1的"></a>应用四：统计stauts=1的name的数量，并且数量为1的</h2><ul>
<li>mongodb语法</li>
</ul>
<pre><code class="line-numbers language-json">db.collection.aggregate([
    {
        $match: {
            status: 1
        }
    },
    {
        $group: {
            _id: &quot;$name&quot;,
            count: {
                $sum: 1
            }
        }
    },
    {
        $match: {
            count: 1
        }
    }
]);</code></pre>
<ul>
<li>C# 使用</li>
</ul>
<pre><code class="line-numbers language-C#">        var match1 = new BsonDocument
        {
            {
                &quot;$match&quot;, new BsonDocument{
                    {
                        &quot;status&quot;, 1              
                    }
                }
            }
        };

        var group = new BsonDocument
        {
            {
                &quot;$group&quot;, new BsonDocument{
                   {
                       &quot;_id&quot;, &quot;$name&quot;
                   },
                   {
                       &quot;count&quot;, new BsonDocument{
                           {&quot;$sum&quot;, 1}
                       }
                   }
               }
            }
        };

        var match2 = new BsonDocument
        {
            {
                &quot;$match&quot;, new BsonDocument{
                    {
                        &quot;count&quot;, 1       
                    }
                }
            }
        };

        var col = MDB.RechargeDB.GetCollection&lt;BsonDocument&gt;(&quot;CollectionName&quot;);
        var list = col.Aggregate().Match(match1).Group(group).Match(match2).ToList();</code></pre>
]]></content>
      <categories>
        <category>CSharp(C#)</category>
      </categories>
      <tags>
        <tag>CSharp(C#)</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux查询进程信息脚本</title>
    <url>/p/b7955d87.html</url>
    <content><![CDATA[<h1 id="一、通过进程ID查询"><a href="#一、通过进程ID查询" class="headerlink" title="一、通过进程ID查询"></a>一、通过进程ID查询</h1><ul>
<li>将脚本保存为pid.sh文件</li>
</ul>
<pre><code class="line-numbers language-bash"># !bin/bash

# 命令行参数获取进程ID
P=$1

# 命令行无参数，手动输入
if [ ! $P ]; then
  read -p &quot;请输入查询的PID：&quot; P
fi

# 判断进程是否存在
n=`ps -aux|awk &#39;$2~/^&#39;$P&#39;$/{print $11}&#39;|wc -l`
if [ $n -eq 0 ]; then
  echo &quot;该PID不存在！！&quot;
  exit
fi

# 输出进程信息
echo &quot;--------------------------------&quot;
echo &quot;进程PID:$P&quot;
echo &quot;进程命令：`ps -aux| awk &#39;$2~/^&#39;$P&#39;$/{print$11}&#39;`&quot;
echo &quot;进程所属用户: `ps -aux| awk &#39;$2~/^&#39;$P&#39;$/{print$1}&#39;`&quot;
echo &quot;CPU占用率：`ps -aux| awk &#39;$2~/^&#39;$P&#39;$/{print$3}&#39;`%&quot;
echo &quot;内存占用率：`ps -aux| awk &#39;$2~/^&#39;$P&#39;$/{print$4}&#39;`%&quot;
echo &quot;进程开始运行的时刻：`ps -aux| awk &#39;$2~/^&#39;$P&#39;$/{print$9}&#39;`&quot;
echo &quot;进程运行的时间：`ps -aux| awk &#39;$2~/^&#39;$P&#39;$/{print$10}&#39;`&quot;
echo &quot;进程状态：`ps -aux| awk &#39;$2~/^&#39;$P&#39;$/{print$8}&#39;`&quot;
echo &quot;进程虚拟内存：`ps -aux| awk &#39;$2~/^&#39;$P&#39;$/{print$5}&#39;`&quot;
echo &quot;进程共享内存：`ps -aux| awk &#39;$2~/^&#39;$P&#39;$/{print$6}&#39;`&quot;
echo &quot;--------------------------------&quot;</code></pre>
<ul>
<li>使用</li>
</ul>
<pre><code class="line-numbers language-bash">./pid.sh 1
--------------------------------
进程PID:1
进程命令：/usr/lib/systemd/systemd
进程所属用户: root
CPU占用率：0.0%
内存占用率：0.0%
进程开始运行的时刻：2020
进程运行的时间：45:50
进程状态：Ss
进程虚拟内存：191276
进程共享内存：2896
--------------------------------</code></pre>
<p>或</p>
<pre><code class="line-numbers language-bash">./pid.sh 
请输入查询的PID：1
--------------------------------
进程PID:1
进程命令：/usr/lib/systemd/systemd
进程所属用户: root
CPU占用率：0.0%
内存占用率：0.0%
进程开始运行的时刻：2020
进程运行的时间：45:50
进程状态：Ss
进程虚拟内存：191276
进程共享内存：2896
--------------------------------</code></pre>
<h1 id="二、通过进程名查询"><a href="#二、通过进程名查询" class="headerlink" title="二、通过进程名查询"></a>二、通过进程名查询</h1><ul>
<li>将脚本保存为name.sh文件</li>
</ul>
<pre><code class="line-numbers language-bash"># !bin/bash

# 命令行参数获取进程名
NAME=$1

# 命令行无参数，手动输入
if [ ! $NAME ]; then
  read -p &quot;请输入查询的PID：&quot; NAME
fi

# 判断进程是否存在
N=`ps -aux | grep $NAME| grep -v grep | wc -l`
if [ $N -le 0 ]; then
  echo &quot;该进程名没有运行！&quot;
  exit
fi

i=1
while [ $N -gt 0 ];do
  echo &quot;进程PID: `ps -aux | grep $NAME| grep -v grep | awk &#39;NR==&#39;$i&#39;{print$0}&#39;| awk &#39;{print$2}&#39;`&quot;
  echo &quot;进程命令：`ps -aux | grep $NAME| grep -v grep | awk &#39;NR==&#39;$i&#39;{print$0}&#39;| awk &#39;{print$11}&#39;`&quot;
  echo &quot;进程所属用户: `ps -aux | grep $NAME| grep -v grep | awk &#39;NR==&#39;$i&#39;{print$0}&#39;| awk &#39;{print$1}&#39;`&quot;
  echo &quot;CPU占用率：`ps -aux | grep $NAME| grep -v grep | awk &#39;NR==&#39;$i&#39;{print$0}&#39;| awk &#39;{print$3}&#39;`%&quot;
  echo &quot;内存占用率：`ps -aux | grep $NAME| grep -v grep | awk &#39;NR==&#39;$i&#39;{print$0}&#39;| awk &#39;{print$4}&#39;`%&quot;
  echo &quot;进程开始运行的时刻：`ps -aux | grep $NAME| grep -v grep | awk &#39;NR==&#39;$i&#39;{print$0}&#39;| awk &#39;{print$9}&#39;`&quot;
  echo &quot;进程运行的时间：`  ps -aux | grep $NAME| grep -v grep | awk &#39;NR==&#39;$i&#39;{print$0}&#39;| awk &#39;{print$11}&#39;`&quot;
  echo &quot;进程状态：`ps -aux | grep $NAME| grep -v grep | awk &#39;NR==&#39;$i&#39;{print$0}&#39;| awk &#39;{print$8}&#39;`&quot;
  echo &quot;进程虚拟内存：`ps -aux | grep $NAME| grep -v grep | awk &#39;NR==&#39;$i&#39;{print$0}&#39;| awk &#39;{print$5}&#39;`&quot;
  echo &quot;进程共享内存：`ps -aux | grep $NAME| grep -v grep | awk &#39;NR==&#39;$i&#39;{print$0}&#39;| awk &#39;{print$6}&#39;`&quot;
  echo &quot;***************************************************************&quot;
  let N-- i++
done</code></pre>
<ul>
<li>使用</li>
</ul>
<pre><code class="line-numbers language-bash">./name.sh mongod
进程PID: 23493
进程命令：mongod
进程所属用户: polkitd
CPU占用率：0.3%
内存占用率：3.8%
进程开始运行的时刻：Feb20
进程运行的时间：mongod
进程状态：SLsl
进程虚拟内存：2097836
进程共享内存：299936</code></pre>
<p>或</p>
<pre><code class="line-numbers language-bash">./name.sh 
请输入查询的PID：mongod
进程PID: 23493
进程命令：mongod
进程所属用户: polkitd
CPU占用率：0.3%
内存占用率：3.8%
进程开始运行的时刻：Feb20
进程运行的时间：mongod
进程状态：SLsl
进程虚拟内存：2097836
进程共享内存：299936</code></pre>
<p>本文参考:<a href="https://www.jianshu.com/p/a984a0930700" target="_blank" rel="noopener">https://www.jianshu.com/p/a984a0930700</a></p>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7修改主机名</title>
    <url>/p/4dacdda1.html</url>
    <content><![CDATA[<pre><code class="line-numbers language-bash">[root@localhost ~]$ hostnamectl set-hostname zngw             # 使用这个命令会立即生效且重启也生效
[root@localhost~]$ hostname                                                 # 查看下
zngw

# 重启后查看
[root@zngw~]$ hostname                                                 # 查看下
zngw</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云域名动态DDNS配置</title>
    <url>/p/28861ff9.html</url>
    <content><![CDATA[<h1 id="一、设置阿里云域名管理账号"><a href="#一、设置阿里云域名管理账号" class="headerlink" title="一、设置阿里云域名管理账号"></a>一、设置阿里云域名管理账号</h1><p>为了安全，我们新建一个子账号，仅编程访问且只有域名修改的权限。</p>
<h2 id="1-1-登录阿里云控制台"><a href="#1-1-登录阿里云控制台" class="headerlink" title="1.1 登录阿里云控制台"></a>1.1 登录阿里云控制台</h2><h2 id="1-2-在产品与服务中搜“访问控制”"><a href="#1-2-在产品与服务中搜“访问控制”" class="headerlink" title="1.2 在产品与服务中搜“访问控制”"></a>1.2 在产品与服务中搜“访问控制”</h2><p><img src="//gitee.com/guoke3915/zw/raw/master/p/28861ff9/19826068-c93998114daf88e5.png" alt></p>
<h2 id="1-3-创建新用户，只勾选编程访问。"><a href="#1-3-创建新用户，只勾选编程访问。" class="headerlink" title="1.3 创建新用户，只勾选编程访问。"></a>1.3 创建新用户，只勾选编程访问。</h2><p>这里要记住AccessKeyID和AccessKey Secret，后面需要用到。</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/28861ff9/19826068-5145a4f21ea0f05f.png" alt></p>
<h2 id="1-4-添加DNS管理权限"><a href="#1-4-添加DNS管理权限" class="headerlink" title="1.4 添加DNS管理权限"></a>1.4 添加DNS管理权限</h2><p>找到AliyunDNSFullAccess权限，并添加。<br><img src="//gitee.com/guoke3915/zw/raw/master/p/28861ff9/19826068-17da027e68bdac3d.png" alt></p>
<h1 id="二、编写程序实时判断本地公网IP并修改阿里云域名解析IP"><a href="#二、编写程序实时判断本地公网IP并修改阿里云域名解析IP" class="headerlink" title="二、编写程序实时判断本地公网IP并修改阿里云域名解析IP"></a>二、编写程序实时判断本地公网IP并修改阿里云域名解析IP</h1><h2 id="2-1-新建maven项目，并添加阿里云开发工具包。"><a href="#2-1-新建maven项目，并添加阿里云开发工具包。" class="headerlink" title="2.1 新建maven项目，并添加阿里云开发工具包。"></a>2.1 新建maven项目，并添加阿里云开发工具包。</h2><pre><code class="line-numbers language-xml">&lt;dependency&gt;
    &lt;groupId&gt;com.aliyun&lt;/groupId&gt;
    &lt;artifactId&gt;aliyun-java-sdk-alidns&lt;/artifactId&gt;
    &lt;version&gt;2.0.10&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.aliyun&lt;/groupId&gt;
    &lt;artifactId&gt;aliyun-java-sdk-core&lt;/artifactId&gt;
    &lt;version&gt;4.3.2&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
      &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
      &lt;artifactId&gt;fastjson&lt;/artifactId&gt;
      &lt;version&gt;1.2.76&lt;/version&gt;
    &lt;/dependency&gt;</code></pre>
<h2 id="2-2-配置文件"><a href="#2-2-配置文件" class="headerlink" title="2.2 配置文件"></a>2.2 配置文件</h2><pre><code class="line-numbers language-json">{
  &quot;regionId&quot;: &quot;cn-hangzhou&quot;,
  &quot;accessKeyId&quot;: &quot;前面创建账号的AccessKeyID&quot;,
  &quot;secret&quot;: &quot;前面创建账号的AccessKey Secret&quot;,
  &quot;tld&quot;:&quot;zengwu.com.cn&quot;,
  &quot;rr&quot;: &quot;a&quot;,
  &quot;dnsInterval&quot;: 86400,
  &quot;ipInterval&quot;: 10
}</code></pre>
<ul>
<li>regionId: 区域,域名管理一般是杭州”cn-hangzhou”</li>
<li>accessKeyId: 前面创建账号的AccessKeyID</li>
<li>secret: 前面创建账号的AccessKey Secret</li>
<li>tld: 顶级域名</li>
<li>rr: 主机名</li>
<li>dnsInterval: 检查阿里云DNS配置的间隔时间(秒)</li>
<li>ipInterval: 检查本地公网IP的间隔时间(秒)</li>
</ul>
<h2 id="2-3-程序代码"><a href="#2-3-程序代码" class="headerlink" title="2.3 程序代码"></a>2.3 程序代码</h2><pre><code class="line-numbers language-java">package com.zngw.aliddns;

import com.alibaba.fastjson.JSON;
import com.aliyuncs.DefaultAcsClient;
import com.aliyuncs.IAcsClient;
import com.aliyuncs.alidns.model.v20150109.DescribeSubDomainRecordsRequest;
import com.aliyuncs.alidns.model.v20150109.DescribeSubDomainRecordsResponse;
import com.aliyuncs.alidns.model.v20150109.UpdateDomainRecordRequest;
import com.aliyuncs.alidns.model.v20150109.UpdateDomainRecordResponse;
import com.aliyuncs.exceptions.ClientException;
import com.aliyuncs.profile.DefaultProfile;
import com.google.gson.Gson;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * DDNS  class
 *
 * @author 55
 * @date 2021/6/28
 */
public class DDNS {
    private String recordsIp = &quot;&quot;;      // 域名IP
    private long lastDnsTime = 0;       // 上次域名查询时间
    private long lastIpTime = 0;        // 上次公网ip查询时间
    private String host = null;         // 完整域名
    private Config cfg = null;          // 配置文件

    /**
     * 初始化
     */
    private void init(String filename){
        String cfgStr = readJsonFile(filename);
        cfg = JSON.parseObject(cfgStr, Config.class);
        if (cfg == null){
            System.out.println(&quot;读取配置文件&quot;+filename+&quot;失败&quot;);
            return;
        }
        cfg.dnsInterval *= 1000;
        cfg.ipInterval *= 1000;

        host = cfg.rr + &quot;.&quot; +cfg.tld;
        if (cfg.rr == null || cfg.rr.length() == 0 || &quot;@&quot;.equals(cfg.rr)){
            // 顶级域名处理
            cfg.rr = &quot;@&quot;;
            host = cfg.tld;
        }
    }

    /**
     * 获取当前主机公网IP
     */
    private String getCurrenHostIp() {
        // 这里使用jsonip.com第三方接口获取本地IP
        String jsonip = &quot;https://jsonip.com&quot;;
        // 接口返回结果
        String result = &quot;&quot;;
        BufferedReader in = null;
        try {
            // 使用HttpURLConnection网络请求第三方接口
            URL url = new URL(jsonip);
            HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
            urlConnection.setRequestMethod(&quot;GET&quot;);
            urlConnection.connect();
            in = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            String line;
            while((line = in.readLine()) != null) {
                result += line;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        // 使用finally块来关闭输入流
        finally {
            try {
                if (in != null) {
                    in.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
        //  正则表达式，提取xxx.xxx.xxx.xxx，将IP地址从接口返回结果中提取出来
        String rexp = &quot;(\\d{1,3}\\.){3}\\d{1,3}&quot;;
        Pattern pat = Pattern.compile(rexp);
        Matcher mat = pat.matcher(result);
        String res = &quot;&quot;;
        while (mat.find()) {
            res = mat.group();
            break;
        }
        return res;
    }
    /**
     * 获取主域名的所有解析记录列表
     */
    private DescribeSubDomainRecordsResponse describeSubDomainRecords(DescribeSubDomainRecordsRequest request, IAcsClient client) {
        try{
            // 调用SDK发送请求
            return client.getAcsResponse(request);
        } catch (ClientException e) {
            e.printStackTrace();
            // 发生调用错误，抛出运行时异常
            throw new RuntimeException();
        }
    }
    /**
     * 修改解析记录
     */
    private UpdateDomainRecordResponse updateDomainRecord(UpdateDomainRecordRequest request, IAcsClient client) {
        try {
            //  调用SDK发送请求
            return client.getAcsResponse(request);
        } catch (ClientException e) {
            e.printStackTrace();
            //  发生调用错误，抛出运行时异常
            throw new RuntimeException();
        }
    }

    /**
     * 检测IP是否改变，改变了就修改
     */
    private void check(String ip){
        //  设置鉴权参数，初始化客户端
        DefaultProfile profile;
        profile = DefaultProfile.getProfile(cfg.regionId,cfg.accessKeyId,cfg.secret);
        IAcsClient client = new DefaultAcsClient(profile);

        //查询指定域名的最新解析记录
        DescribeSubDomainRecordsRequest describeSubDomainRecordsRequest = new DescribeSubDomainRecordsRequest();
        describeSubDomainRecordsRequest.setSubDomain(host);
        DescribeSubDomainRecordsResponse describeSubDomainRecordsResponse = describeSubDomainRecords(describeSubDomainRecordsRequest, client);
        List&lt;DescribeSubDomainRecordsResponse.Record&gt; domainRecords = describeSubDomainRecordsResponse.getDomainRecords();
        //最新的一条解析记录
        if (domainRecords.size() != 0) {
            DescribeSubDomainRecordsResponse.Record record = domainRecords.get(0);
            //  记录ID
            String recordId = record.getRecordId();
            //  记录值
            recordsIp = record.getValue();

            if (!ip.equals(recordsIp)) {
                //  修改解析记录
                UpdateDomainRecordRequest updateDomainRecordRequest = new UpdateDomainRecordRequest();
                //  主机记录
                updateDomainRecordRequest.setRR(cfg.rr);
                //  记录ID
                updateDomainRecordRequest.setRecordId(recordId);
                //  将主机记录值改为当前主机IP
                updateDomainRecordRequest.setValue(ip);
                //  解析记录类型
                updateDomainRecordRequest.setType(&quot;A&quot;);
                UpdateDomainRecordResponse updateDomainRecordResponse = updateDomainRecord(updateDomainRecordRequest, client);

                System.out.println(&quot;域名 &quot;+host+&quot; 解析地址已修改为:&quot; + ip);

                recordsIp = ip;
            }
        }
    }

    /**
     * 运行检测
     */
    private void run(){
        while (true){
            long now = System.currentTimeMillis();

            //  当前主机公网IP
            String ip = getCurrenHostIp();

            // 查询域名服务器值是否改变
            if (lastDnsTime &lt; now){
                check(ip);
                lastIpTime = now + cfg.ipInterval;
                lastDnsTime = now + cfg.dnsInterval;
            }

            // 公网IP是否发生改变
            if (lastIpTime &lt; now){
                if (ip!=null &amp;&amp; !ip.equals(recordsIp)){
                    check(ip);
                    lastDnsTime = now + cfg.dnsInterval;
                }
                lastIpTime = now + cfg.ipInterval;
            }

            try {
                // 进程睡眠释放CPU并达到延迟效果
                Thread.sleep(Math.min( lastIpTime,lastDnsTime) - now -1);
            }catch(InterruptedException e)
            {
                e.printStackTrace();
            }
        }
    }

    /**
     * 读取json文件，返回json串
     * @param fileName
     * @return
     */
    public String readJsonFile(String fileName) {
        String jsonStr = &quot;&quot;;
        try {
            File jsonFile = new File(fileName);
            FileReader fileReader = new FileReader(jsonFile);

            Reader reader = new InputStreamReader(new FileInputStream(jsonFile), &quot;utf-8&quot;);
            int ch = 0;
            StringBuffer sb = new StringBuffer();
            while ((ch = reader.read()) != -1) {
                sb.append((char) ch);
            }

            fileReader.close();
            reader.close();
            jsonStr = sb.toString();
            return jsonStr;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    public static void main(String[] args) {
        String filename = &quot;./config.json&quot;;
        DDNS ddns = new DDNS();
        ddns.init(filename);
        ddns.run();
    }
}</code></pre>
<h1 id="三、运行"><a href="#三、运行" class="headerlink" title="三、运行"></a>三、运行</h1><p>编译好jar程序，将jar和config.json放到同一目录下,直接后台运行jar就可以了。</p>
<p>附：<a href="https://github.com/zngw/aliddns" target="_blank" rel="noopener">完整mavn项目</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 最小安装后安装图形页面</title>
    <url>/p/684f404f.html</url>
    <content><![CDATA[<p>最初安装CentOS的时候，默认选择了最小安装，但是想用图形页面了，可以再安装图形页面。</p>
<h1 id="1-直接使用命令安装"><a href="#1-直接使用命令安装" class="headerlink" title="1. 直接使用命令安装"></a>1. 直接使用命令安装</h1><pre><code class="line-numbers language-bash">yum -y groupinstall &quot;GNOME Desktop&quot;</code></pre>
<h1 id="2-查看和设置默认运行"><a href="#2-查看和设置默认运行" class="headerlink" title="2. 查看和设置默认运行"></a>2. 查看和设置默认运行</h1><pre><code class="line-numbers language-bash"># 查看默认开机页面
systemctl get-default

# 设置为开机默认启动图形界面
systemctl set-default graphical.target 

# 设置开机默认启动命令模式
systemctl set-default multi-user.target </code></pre>
<h1 id="3-重启生效"><a href="#3-重启生效" class="headerlink" title="3. 重启生效"></a>3. 重启生效</h1>]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 挂载新硬盘</title>
    <url>/p/b7b3b90b.html</url>
    <content><![CDATA[<p>CentOS中新加了一块硬盘，默认是发现不了的，需要挂载到系统中。这里将新硬盘挂载到<code>/data</code>目录下.</p>
<h2 id="查看硬盘状态"><a href="#查看硬盘状态" class="headerlink" title="查看硬盘状态"></a>查看硬盘状态</h2><p>使用fdisk -l开查看但钱状态下磁盘情况，这里新硬盘的标识为/dev/sdb，因为硬盘之前在win中使用过，所以这里的磁盘标签类型：dos。</p>
<pre><code class="line-numbers language-bash">fdisk -l

磁盘 /dev/sdb：2000.4 GB, 2000398934016 字节，3907029168 个扇区
Units = 扇区 of 1 * 512 = 512 bytes
扇区大小(逻辑/物理)：512 字节 / 512 字节
I/O 大小(最小/最佳)：512 字节 / 512 字节
磁盘标签类型：dos
磁盘标识符：0x04fc5a3c

   设备 Boot      Start         End      Blocks   Id  System
/dev/sdb1               1  4294967295  2147483647+  ee  GPT

磁盘 /dev/sda：107.4 GB, 107374182400 字节，209715200 个扇区
Units = 扇区 of 1 * 512 = 512 bytes
扇区大小(逻辑/物理)：512 字节 / 512 字节
I/O 大小(最小/最佳)：512 字节 / 512 字节
磁盘标签类型：dos
磁盘标识符：0x000a970d

   设备 Boot      Start         End      Blocks   Id  System
/dev/sda1   *        2048     2099199     1048576   83  Linux
/dev/sda2         2099200   209469439   103685120   8e  Linux LVM

磁盘 /dev/mapper/centos-root：97.7 GB, 97710505984 字节，190840832 个扇区
Units = 扇区 of 1 * 512 = 512 bytes
扇区大小(逻辑/物理)：512 字节 / 512 字节
I/O 大小(最小/最佳)：512 字节 / 512 字节


磁盘 /dev/mapper/centos-swap：8455 MB, 8455716864 字节，16515072 个扇区
Units = 扇区 of 1 * 512 = 512 bytes
扇区大小(逻辑/物理)：512 字节 / 512 字节
I/O 大小(最小/最佳)：512 字节 / 512 字节</code></pre>
<h2 id="2-新建分区"><a href="#2-新建分区" class="headerlink" title="2. 新建分区"></a>2. 新建分区</h2><p>使用<code>fdisk /dev/sdb</code>命令进行分区。</p>
<pre><code class="line-numbers language-bash">fdisk /dev/sdb
欢迎使用 fdisk (util-linux 2.23.2)。

更改将停留在内存中，直到您决定将更改写入磁盘。
使用写入命令前请三思。

命令(输入 m 获取帮助)：m
命令操作
   a   toggle a bootable flag
   b   edit bsd disklabel
   c   toggle the dos compatibility flag
   d   delete a partition
   g   create a new empty GPT partition table
   G   create an IRIX (SGI) partition table
   l   list known partition types
   m   print this menu
   n   add a new partition
   o   create a new empty DOS partition table
   p   print the partition table
   q   quit without saving changes
   s   create a new empty Sun disklabel
   t   change a partition&#39;s system id
   u   change display/entry units
   v   verify the partition table
   w   write table to disk and exit
   x   extra functionality (experts only)</code></pre>
<h3 id="2-1-删除原有分区（新硬盘跳过）"><a href="#2-1-删除原有分区（新硬盘跳过）" class="headerlink" title="2.1 删除原有分区（新硬盘跳过）"></a>2.1 删除原有分区（新硬盘跳过）</h3><p>使用d命令删除,哪果只有一个分区会直接删除,如果多个分区需要选择删除的分区。删除后可以用p查看，最后用w保存并退出</p>
<pre><code class="line-numbers language-bash">fdisk /dev/sdb
欢迎使用 fdisk (util-linux 2.23.2)。

更改将停留在内存中，直到您决定将更改写入磁盘。
使用写入命令前请三思。


命令(输入 m 获取帮助)：d
已选择分区 1
分区 1 已删除

命令(输入 m 获取帮助)：p

磁盘 /dev/sdb：2000.4 GB, 2000398934016 字节，3907029168 个扇区
Units = 扇区 of 1 * 512 = 512 bytes
扇区大小(逻辑/物理)：512 字节 / 512 字节
I/O 大小(最小/最佳)：512 字节 / 512 字节
磁盘标签类型：dos
磁盘标识符：0x04fc5a3c

   设备 Boot      Start         End      Blocks   Id  System

命令(输入 m 获取帮助)：w
The partition table has been altered!

Calling ioctl() to re-read partition table.
正在同步磁盘。</code></pre>
<h3 id="2-2-新建分区"><a href="#2-2-新建分区" class="headerlink" title="2.2 新建分区"></a>2.2 新建分区</h3><p>使用n命令创建分区,p设置分区号,设置扇区大小(默认2048就行),最后w保存退出</p>
<pre><code class="line-numbers language-bash">fdisk /dev/sdb
欢迎使用 fdisk (util-linux 2.23.2)。

更改将停留在内存中，直到您决定将更改写入磁盘。
使用写入命令前请三思。


命令(输入 m 获取帮助)：n
Partition type:
   p   primary (0 primary, 0 extended, 4 free)
   e   extended
Select (default p): p
分区号 (1-4，默认 1)：1
起始 扇区 (2048-3907029167，默认为 2048)：
将使用默认值 2048
Last 扇区, +扇区 or +size{K,M,G} (2048-3907029167，默认为 3907029167)：
将使用默认值 3907029167
分区 1 已设置为 Linux 类型，大小设为 1.8 TiB

命令(输入 m 获取帮助)：w
The partition table has been altered!

Calling ioctl() to re-read partition table.
正在同步磁盘。</code></pre>
<h2 id="3-格式化分区"><a href="#3-格式化分区" class="headerlink" title="3. 格式化分区"></a>3. 格式化分区</h2><p>用mkfs.ext3格式化新分区</p>
<pre><code class="line-numbers language-bash"># 格式化整个磁盘
mkfs.ext3 /dev/sdb

# 格式化单个分区
mkfs.ext3 /dev/sdb1</code></pre>
<h2 id="4-挂载使用"><a href="#4-挂载使用" class="headerlink" title="4. 挂载使用"></a>4. 挂载使用</h2><pre><code class="line-numbers language-bash"># 新建一个挂载点。
mkdir /data 

# 挂载。
mount /dev/sdb1 /data</code></pre>
<h2 id="5-开机自动挂载"><a href="#5-开机自动挂载" class="headerlink" title="5. 开机自动挂载"></a>5. 开机自动挂载</h2><p>在vi /etc/fstab中添加新硬盘的挂载信息，添加下面一行:<br>/dev/sdb1 /data ext3 defaults 1 2（如果还有一个分区就是1 3，以此类推)<br>这样,每次开机后,系统会自动将/dev/sdb1挂载到/data</p>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>DNSmasq安装与配置</title>
    <url>/p/eb3047f5.html</url>
    <content><![CDATA[<h1 id="一、起因"><a href="#一、起因" class="headerlink" title="一、起因"></a>一、起因</h1><p>现在很多路由都支持自定义hosts，可以将局域网中的域名解析到自定义的IP中，但是公司用了华为ASG当路由， 这个就不能自定义hosts了，所以可以局域网中搭建一个内网DNS服务器，然后将华为ASC的DNS配置成内网DNS服务器IP就可以了。</p>
<h1 id="二、DNSmasq的简介"><a href="#二、DNSmasq的简介" class="headerlink" title="二、DNSmasq的简介"></a>二、DNSmasq的简介</h1><p>这里用轻量的Dnsmasq服务器来实现内网DNS服务器搭建。Dnsmasq 是提供 DNS 缓存和 DHCP 服务功能。作为域名解析服务器(DNS)，dnsmasq可以通过缓存 DNS 请求来提高对访问过的网址的连接速度。作为DHCP 服务器，dnsmasq 可以用于为局域网电脑分配内网ip地址和提供路由。DNS和DHCP两个功能可以同时或分别单独实现。dnsmasq轻量且易配置，适用于个人用户或少于50台主机的网络。此外它还自带了一个 PXE 服务器。</p>
<h1 id="三、安装DNSmasq"><a href="#三、安装DNSmasq" class="headerlink" title="三、安装DNSmasq"></a>三、安装DNSmasq</h1><pre><code class="line-numbers language-bash">yum install -y dnsmasq</code></pre>
<h1 id="四、开启防火墙"><a href="#四、开启防火墙" class="headerlink" title="四、开启防火墙"></a>四、开启防火墙</h1><pre><code class="line-numbers language-bash">firewall-cmd --zone=public --add-port=53/tcp --permanent
firewall-cmd --zone=public --add-port=53/udp --permanent
firewall-cmd --reload</code></pre>
<h1 id="五、简单配置启用hosts功能"><a href="#五、简单配置启用hosts功能" class="headerlink" title="五、简单配置启用hosts功能"></a>五、简单配置启用hosts功能</h1><p>先做一个简单快捷的配置，配置一个类似于本地hosts功能的DNS。</p>
<h2 id="5-1-vim-etc-dnsmasq-conf"><a href="#5-1-vim-etc-dnsmasq-conf" class="headerlink" title="5.1 vim /etc/dnsmasq.conf"></a>5.1 vim /etc/dnsmasq.conf</h2><pre><code class="line-numbers language-conf">no-hosts                              # 此配置可以直接查询上游DNS了
resolv-file=/etc/resolv.dnsmasq.conf  # 配置上游服务文件，严格按照文件中的顺序进行查找
strict-order                          # 取消这一行的注释，表示严格按照resolv.conf中的顺序进行查找。
listen-address=192.168.0.2,127.0.0.1  # 如果想允许所有的用户使用你的DNS解析服务器，把listen-address去掉即可。
addn-hosts=/etc/dnsmasq.hosts         # 配置DNS服务器hosts文件</code></pre>
<h2 id="5-2-vim-etc-resolv-dnsmasq-conf"><a href="#5-2-vim-etc-resolv-dnsmasq-conf" class="headerlink" title="5.2 vim /etc/resolv.dnsmasq.conf"></a>5.2 vim /etc/resolv.dnsmasq.conf</h2><p>配置上游的DNS</p>
<pre><code class="line-numbers language-conf">nameserver 8.8.8.8
nameserver 114.114.114.114</code></pre>
<h2 id="5-3-vim-etc-dnsmasq-hosts"><a href="#5-3-vim-etc-dnsmasq-hosts" class="headerlink" title="5.3 vim /etc/dnsmasq.hosts"></a>5.3 vim /etc/dnsmasq.hosts</h2><p>配置DNS服务器的hosts文件</p>
<pre><code class="line-numbers language-conf"># 这里就是配置ip 域名的解析
# 如：将 guoke.com 解析到 192.168.0.55
192.168.0.55 guoke.com</code></pre>
<h1 id="六、启动"><a href="#六、启动" class="headerlink" title="六、启动"></a>六、启动</h1><pre><code class="line-numbers language-bash">systemctl start dnsmasq   # 启动
systemctl stop dnsmasq    # 关闭
systemctl restart dnsmasq # 重启
systemctl enable dnsmasq  # 设置开机启动 </code></pre>
<h1 id="七、-etc-dnsmasq-conf详细解析"><a href="#七、-etc-dnsmasq-conf详细解析" class="headerlink" title="七、/etc/dnsmasq.conf详细解析"></a>七、/etc/dnsmasq.conf详细解析</h1><h2 id="7-1-提升DNS加快解析速度，server-后面可以添加指定的DNS，例如国内外不同的网站使用不同的DNS。"><a href="#7-1-提升DNS加快解析速度，server-后面可以添加指定的DNS，例如国内外不同的网站使用不同的DNS。" class="headerlink" title="7.1 提升DNS加快解析速度，server=后面可以添加指定的DNS，例如国内外不同的网站使用不同的DNS。"></a>7.1 提升DNS加快解析速度，server=后面可以添加指定的DNS，例如国内外不同的网站使用不同的DNS。</h2><h4 id="国内指定DNS"><a href="#国内指定DNS" class="headerlink" title="国内指定DNS"></a>国内指定DNS</h4><pre><code class="line-numbers language-conf">server=/cn/114.114.114.114
server=/taobao.com/114.114.114.114
server=/taobaocdn.com/114.114.114.114</code></pre>
<h4 id="国外指定DNS"><a href="#国外指定DNS" class="headerlink" title="国外指定DNS"></a>国外指定DNS</h4><pre><code class="line-numbers language-conf">server=/google.com/8.8.8.8</code></pre>
<h2 id="7-2-屏蔽网页广告，将指广告的URL指定127这个IP，就可以将网页上讨厌的广告给去掉了。"><a href="#7-2-屏蔽网页广告，将指广告的URL指定127这个IP，就可以将网页上讨厌的广告给去掉了。" class="headerlink" title="7.2 屏蔽网页广告，将指广告的URL指定127这个IP，就可以将网页上讨厌的广告给去掉了。"></a>7.2 屏蔽网页广告，将指广告的URL指定127这个IP，就可以将网页上讨厌的广告给去掉了。</h2><pre><code class="line-numbers language-conf">address=/ad.youku.com/127.0.0.1
address=/ad.iqiyi.com/127.0.0.1</code></pre>
<h2 id="7-3-指定域名解析到特定的IP上。这个功能可以让你控制一些网站的访问，非法的DNS就经常把一些正规的网站解析到不正确IP上。"><a href="#7-3-指定域名解析到特定的IP上。这个功能可以让你控制一些网站的访问，非法的DNS就经常把一些正规的网站解析到不正确IP上。" class="headerlink" title="7.3 指定域名解析到特定的IP上。这个功能可以让你控制一些网站的访问，非法的DNS就经常把一些正规的网站解析到不正确IP上。"></a>7.3 指定域名解析到特定的IP上。这个功能可以让你控制一些网站的访问，非法的DNS就经常把一些正规的网站解析到不正确IP上。</h2><pre><code class="line-numbers language-conf">address=/zengwu.com.cn/39.98.60.8</code></pre>
<h1 id="八、附-etc-dnsmasq-conf文件解析"><a href="#八、附-etc-dnsmasq-conf文件解析" class="headerlink" title="八、附/etc/dnsmasq.conf文件解析"></a>八、附/etc/dnsmasq.conf文件解析</h1><pre><code class="line-numbers language-conf"># 不加载本地的 /etc/hosts 文件

#no-hosts

# 添加读取额外的 hosts 文件路径，可以多次指定。如果指定为目录，则读取目录中的所有文件。

#addn-hosts=/etc/dnsmasq.hosts.d

# 读取目录中的所有文件，文件更新将自动读取

#hostsdir=/etc/dnsmasq.hosts.d

# 例如，/etc/hosts中的os01将扩展成os01.example.com

#expand-hosts



##############################################################################

# 缓存时间设置，一般不需要设置

# 本地 hosts 文件的缓存时间，通常不要求缓存本地，这样更改hosts文件后就即时生效。

#local-ttl=3600

# 同 local-ttl 仅影响 DHCP 租约

#dhcp-ttl=&lt;time&gt;

# 对于上游返回的值没有ttl时，dnsmasq给一个默认的ttl，一般不需要设置，

#neg-ttl=&lt;time&gt;

# 指定返回给客户端的ttl时间，一般不需要设置

#max-ttl=&lt;time&gt;

# 设置在缓存中的条目的最大 TTL。

#max-cache-ttl=&lt;time&gt;

# 不需要设置，除非你知道你在做什么。

#min-cache-ttl=&lt;time&gt;

# 一般不需要设置

#auth-ttl=&lt;time&gt;



##############################################################################

# 记录dns查询日志，如果指定 log-queries=extra 那么在每行开始处都有额外的日志信息。

#log-queries

# 设置日志记录器，&#39;-&#39; 为 stderr，也可以是文件路径。默认为：DAEMON，调试时使用 LOCAL0。

#log-facility=&lt;facility&gt;

#log-facility=/var/log/dnsmasq/dnsmasq.log

# 异步log，缓解阻塞，提高性能。默认为5，最大100。

#log-async[=&lt;lines&gt;]

#log-async=50



##############################################################################

# 指定用户和组

#user=nobody

#group=nobody



##############################################################################

# 指定DNS的端口，默认53，设置 port=0 将完全禁用 DNS 功能，仅使用 DHCP/TFTP

#port=53

# 指定 EDNS.0 UDP 包的最大尺寸，默认为 RFC5625 推荐的 edns-packet-max=4096

#edns-packet-max=&lt;size&gt;

# 指定向上游查询的 UDP 端口，默认是随机端口，指定后降低安全性、加快速度、减少资源消耗。

# 设置为 &#39;0&#39; 由操作系统分配。

#query-port=53535

# 指定向上游查询的 UDP 端口范围，方便防火墙设置。

#min-port=&lt;port&gt;

#max-port=&lt;port&gt;

# 指定接口，指定后同时附加 lo 接口，可以使用&#39;*&#39;通配符。

# 不能使用接口别名（例如：&quot;eth1:0&quot;），请用 listen-address 选项替代。

#interface=wlp2s0

# 指定排除的接口，排除优先级高，可以使用&#39;*&#39;通配符

#except-interface=

# 仅接受同一子网的 DNS 请求。

# 仅在未指定 interface、except-interface、listen-address 或者 auth-server 时有效。

#local-service

# 指定不提供 DHCP 或 TFTP 服务的接口，仅提供 DNS 服务。

#no-dhcp-interface=enp3s0

# 指定IP地址，可以多次指定。

# interface 选项和 listen-address 选项可以同时使用。

# 下面两行与指定 interface 选项的作用类似。

listen-address=192.168.10.17

#listen-address=127.0.0.1

# 通常情况下即使设置了 interface 选项（例如：interface=wlp2s0 ）

# 将仍然绑定到通配符地址（例如：*:53 ）。

# 开启此项将仅监听指定的接口。

# 适用于在同一主机的不同接口或 IP 地址上运行多个 dns 服务器。

bind-interfaces

# 对于新添加的接口不进行绑定。仅 Linux 系统支持，其他系统等同于 bind-interfaces 选项。

#bind-dynamic



##############################################################################

# 如果 hosts 中的主机有多个 IP 地址，仅返回对应子网的 IP 地址。

localise-queries

# 如果反向查找的是私有地址例如192.168.X.X，仅从 hosts 文件查找，不再转发到上游服务器

#bogus-priv

# 对于任何被解析到此 IP 的域名，将响应 NXDOMAIN 使其解析失效，可以多次指定

# 通常用于对于访问不存在的域名，禁止其跳转到运营商的广告站点。

#bogus-nxdomain=64.94.110.11

# 忽略包含指定地址的 A 记录查询的回复。

# 例如上游有台 dns 服务器伪造 www.baidu.com 的 IP 为 1.1.1.1 并且响应速度非常快。

# 指定 ignore-address=1.1.1.1 可以忽略它的响应信息，

# 从而等待 www.baidu.com 正确的查询结果。

#ignore-address=&lt;ipaddr&gt;

filterwin2k



##############################################################################

# 指定 resolv-file 文件路径，默认/etc/resolv.conf

#resolv-file=/etc/resolv.conf

# 不读取 resolv-file 来确定上游服务器

#no-resolv

# 在编译时需要启用 DBus 支持。

#enable-dbus[=&lt;service-name&gt;]

# 严格按照resolv.conf中的顺序进行查找

#strict-order

# 向所有上游服务器发送查询，而不是一个。

all-servers

# 启用转发循环检测

#dns-loop-detect



##############################################################################

# 这项安全设置是拒绝解析包含私有 IP 地址的域名，

# 这些IP地址包括如下私有地址范围：10.0.0.0/8、172.16.0.0/12、192.168.0.0/16。

# 其初衷是要防止类似上游DNS服务器故意将某些域名解析成特定私有内网IP而劫持用户这样的安全***。

# 直接在配置文件中注销 stop-dns-rebind 配置项从而禁用该功能。

# 这个方法确实可以一劳永逸的解决解析内网 IP 地址的问题，

# 但是我们也失去了这项安全保护的特性，所以在这里我不推荐这个办法。

# 使用 rebind-domain-ok 进行特定配置，顾名思义该配置项可以有选择的忽略域名的 rebind 行为

stop-dns-rebind

rebind-localhost-ok

#rebind-domain-ok=[&lt;domain&gt;]|[[/&lt;domain&gt;/[&lt;domain&gt;/]

rebind-domain-ok=/.test.com/



##############################################################################

# 也不要检测 /etc/resolv.conf 的变化

#no-poll

# 重启后清空缓存

clear-on-reload

# 完整的域名才向上游服务器查找，如果仅仅是主机名仅查找hosts文件

domain-needed



##############################################################################

# IP地址转换

#alias=[&lt;old-ip&gt;]|[&lt;start-ip&gt;-&lt;end-ip&gt;],&lt;new-ip&gt;[,&lt;mask&gt;]

##############################################################################

#local=[/[&lt;domain&gt;]/[domain/]][&lt;ipaddr&gt;[#&lt;port&gt;][@&lt;source-ip&gt;|&lt;interface&gt;[#&lt;port&gt;]]

#server=[/[&lt;domain&gt;]/[domain/]][&lt;ipaddr&gt;[#&lt;port&gt;][@&lt;source-ip&gt;|&lt;interface&gt;[#&lt;port&gt;]]

server=/test.com/192.168.10.117

server=/10.168.192.in-addr.arpa/192.168.10.117

#rev-server=&lt;ip-address&gt;/&lt;prefix-len&gt;,&lt;ipaddr&gt;[#&lt;port&gt;][@&lt;source-ip&gt;|&lt;interface&gt;[#&lt;port&gt;]]



# 将任何属于 &lt;domain&gt; 域名解析成指定的 &lt;ipaddr&gt; 地址。

# 也就是将 &lt;domain&gt; 及其所有子域名解析成指定的 &lt;ipaddr&gt; IPv4 或者 IPv6 地址，通常用于屏蔽特定的域名。

# 一次只能指定一个 IPv4 或者 IPv6 地址，要同时返回 IPv4 和IPv6 地址，请多次指定 address= 选项。

# 注意： /etc/hosts 以及 DHCP 租约将覆盖此项设置。

#address=/&lt;domain&gt;/[domain/][&lt;ipaddr&gt;]



#ipset=/&lt;domain&gt;/[domain/]&lt;ipset&gt;[,&lt;ipset&gt;]

#mx-host=&lt;mx name&gt;[[,&lt;hostname&gt;],&lt;preference&gt;]

#mx-target=&lt;hostname&gt;



# SRV 记录

#srv-host=&lt;_service&gt;.&lt;_prot&gt;.[&lt;domain&gt;],[&lt;target&gt;[,&lt;port&gt;[,&lt;priority&gt;[,&lt;weight&gt;]]]]



# A, AAAA 和 PTR 记录 

#host-record=&lt;name&gt;[,&lt;name&gt;....],[&lt;IPv4-address&gt;],[&lt;IPv6-address&gt;][,&lt;TTL&gt;]



# TXT 记录

#txt-record=&lt;name&gt;[[,&lt;text&gt;],&lt;text&gt;]



# PTR 记录 

#ptr-record=&lt;name&gt;[,&lt;target&gt;]



#naptr-record=&lt;name&gt;,&lt;order&gt;,&lt;preference&gt;,&lt;flags&gt;,&lt;service&gt;,&lt;regexp&gt;[,&lt;replacement&gt;]



# CNAME 别名记录

#cname=&lt;cname&gt;,&lt;target&gt;[,&lt;TTL&gt;]





#dns-rr=&lt;name&gt;,&lt;RR-number&gt;,[&lt;hex data&gt;]

#interface-name=&lt;name&gt;,&lt;interface&gt;[/4|/6]

#synth-domain=&lt;domain&gt;,&lt;address range&gt;[,&lt;prefix&gt;]

#add-mac[=base64|text]

#add-cpe-id=&lt;string&gt;

#add-subnet[[=[&lt;IPv4 address&gt;/]&lt;IPv4 prefix length&gt;][,[&lt;IPv6 address&gt;/]&lt;IPv6 prefix length&gt;]]

##############################################################################



##############################################################################

# 缓存条数，默认为150条，cache-size=0 禁用缓存。

cache-size=1000

# 不缓存未知域名缓存，默认情况下dnsmasq缓存未知域名并直接返回为客户端。

no-negcache

# 指定DNS同属查询转发数量

dns-forward-max=1000



##############################################################################

#dnssec

#trust-anchor=[&lt;class&gt;],&lt;domain&gt;,&lt;key-tag&gt;,&lt;algorithm&gt;,&lt;digest-type&gt;,&lt;digest&gt;

#dnssec-check-unsigned

#dnssec-no-timecheck

#dnssec-timestamp=&lt;path&gt;

#proxy-dnssec

#dnssec-debug



##############################################################################

#auth-server=&lt;domain&gt;,&lt;interface&gt;|&lt;ip-address&gt;

#auth-zone=&lt;domain&gt;[,&lt;subnet&gt;[/&lt;prefix length&gt;][,&lt;subnet&gt;[/&lt;prefix length&gt;].....]]

#auth-zone=&lt;domain&gt;[,&lt;interface name&gt;[/6|/4][,&lt;interface name&gt;[/6|/4].....]]

#auth-soa=&lt;serial&gt;[,&lt;hostmaster&gt;[,&lt;refresh&gt;[,&lt;retry&gt;[,&lt;expiry&gt;]]]]

#auth-sec-servers=&lt;domain&gt;[,&lt;domain&gt;[,&lt;domain&gt;...]]

#auth-peer=&lt;ip-address&gt;[,&lt;ip-address&gt;[,&lt;ip-address&gt;...]]



# 启用连接跟踪，读取 Linux 入栈 DNS 查询请求的连接跟踪标记，

# 并且将上游返回的响应信息设置同样的标记。

# 用于带宽控制和防火墙部署。

# 此选项必须在编译时启用 conntrack 支持，并且内核正确配置并加载 conntrack。

# 此选项不能与 query-port 同时使用。

#conntrack





##############################################################################

#

#        DHCP 选项

#

##############################################################################

# 设置 DHCP 地址池，同时启用 DHCP 功能。

# IPv4 &lt;mode&gt; 可指定为 static|proxy ，当 &lt;mode&gt; 指定为 static 时，

# 需用 dhcp-host 手动分配地址池中的 IP 地址。

# 当 &lt;mode&gt; 指定为 proxy 时，为指定的地址池提供 DHCP 代理。

#dhcp-range=[tag:&lt;tag&gt;[,tag:&lt;tag&gt;],][set:&lt;tag&gt;,]&lt;start-addr&gt;[,&lt;end-addr&gt;][,&lt;mode&gt;][,&lt;netmask&gt;[,&lt;broadcast&gt;]][,&lt;lease time&gt;]

#dhcp-range=172.16.0.2,172.16.0.250,255.255.255.0,1h

#dhcp-range=192.168.10.150,192.168.10.180,static,255.255.255.0,1h



# 根据 MAC 地址或 id 固定分配客户端的 IP 地址、主机名、租期。

# IPv4 下指定 id:* 将忽略 DHCP 客户端的 ID ，仅根据 MAC 来进行 IP 地址分配。

# 在读取 /etc/hosts 的情况，也可以根据 /etc/hosts 中的主机名分配对应 IP 地址。

# 指定 ignore 将忽略指定客户端得 DHCP 请求。

#dhcp-host=[&lt;hwaddr&gt;][,id:&lt;client_id&gt;|*][,set:&lt;tag&gt;][,&lt;ipaddr&gt;][,&lt;hostname&gt;][,&lt;lease_time&gt;][,ignore]

#dhcp-hostsfile=&lt;path&gt;

#dhcp-hostsdir=&lt;path&gt;

# 读取 /etc/ethers 文件 与使用 dhcp-host 的作用相同。IPv6 无效。

#read-ethers



# 指定给 DHCP 客户端的选项信息，

# 默认情况下 dnsmasq 将发送：子网掩码、广播地址、DNS 服务器地址、网关地址、域等信息。

# 指定此选项也可覆盖这些默认值并且设置其他选项值。

# 重要：可以使用 option:&lt;option-name&gt;或者 option号 来指定。

# &lt;option-name&gt; 和 option号的对应关系可使用命令：

# dnsmasq --help dhcp 以及 dnsmasq --help dhcp6 查看，这点很重要。

# 例如设置网关参数，既可以使用 dhcp-option=3,192.168.4.4 也可以使用 dhcp-option = option:router,192.168.4.4。

# 0.0.0.0 意味着当前运行 dnsmasq 的主机地址。

# 如果指定了多个 tag:&lt;tag&gt; 必须同时匹配才行。

# [encap:&lt;opt&gt;,][vi-encap:&lt;enterprise&gt;,][vendor:[&lt;vendor-class&gt;],] 有待继续研究。

#dhcp-option=[tag:&lt;tag&gt;,[tag:&lt;tag&gt;,]][encap:&lt;opt&gt;,][vi-encap:&lt;enterprise&gt;,][vendor:[&lt;vendor-class&gt;],][&lt;opt&gt;|option:&lt;opt-name&gt;|option6:&lt;opt&gt;|option6:&lt;opt-name&gt;],[&lt;value&gt;[,&lt;value&gt;]]

#dhcp-option-force=[tag:&lt;tag&gt;,[tag:&lt;tag&gt;,]][encap:&lt;opt&gt;,][vi-encap:&lt;enterprise&gt;,][vendor:[&lt;vendor-class&gt;],]&lt;opt&gt;,[&lt;value&gt;[,&lt;value&gt;]]

#dhcp-optsfile=&lt;path&gt;

#dhcp-optsdir=&lt;path&gt;

#dhcp-option=3,1.2.3.4

#dhcp-option=option:router,1.2.3.4

#dhcp-option=option:router,192.168.10.254

#dhcp-option=option:dns-server,192.168.10.254,221.12.1.227,221.12.33.227



##############################################################################

# (IPv4 only) 禁用重用服务器名称和文件字段作为额外的 dhcp-option 选项。

# 一般情况下 dnsmasq 从 dhcp-boot 移出启动服务器和文件信息到 dhcp-option 选项中。

# 这使得在 dhcp-option 选项封包中有额外的选项空间可用，但是会使老的客户端混淆。

# 此选项将强制使用简单并安全的方式来避免此类情况。可以认为是一个兼容性选项。

#dhcp-no-override



##############################################################################

# 配置 DHCP 中继。

# &lt;local address&gt; 是运行 dnsmasq 的接口的 IP 地址。

# 所有在 &lt;local address&gt; 接口上接收到的 DHCP 请求将中继到 &lt;server address&gt; 指定的远程 DHCP 服务器。

# 可以多次配置此选项，使用同一个 &lt;local address&gt; 转发到多个不同的 &lt;server address&gt; 指定的远程 DHCP 服务器。

# &lt;server address&gt; 仅允许使用 IP 地址，不能使用域名等其他格式。

# 如果是 DHCPv6，&lt;server address&gt; 可以是 ALL_SERVERS 的多播地址 ff05::1:3 。

# 在这种情况下必须指定接口 &lt;interface&gt; ，不能使用通配符，用于直接多播到对应的 DHCP 服务器所在的接口。

# &lt;interface&gt; 指定了仅允许接收从 &lt;interface&gt; 接口的 DHCP 服务器相应信息。

#dhcp-relay=&lt;local address&gt;,&lt;server address&gt;[,&lt;interface&gt;]



##############################################################################

# 设置标签

#dhcp-vendorclass=set:&lt;tag&gt;,[enterprise:&lt;IANA-enterprise number&gt;,]&lt;vendor-class&gt;

#dhcp-userclass=set:&lt;tag&gt;,&lt;user-class&gt;

#dhcp-mac=set:&lt;tag&gt;,&lt;MAC address&gt;

#dhcp-circuitid=set:&lt;tag&gt;,&lt;circuit-id&gt;

#dhcp-remoteid=set:&lt;tag&gt;,&lt;remote-id&gt;

#dhcp-subscrid=set:&lt;tag&gt;,&lt;subscriber-id&gt;

#dhcp-match=set:&lt;tag&gt;,&lt;option number&gt;|option:&lt;option name&gt;|vi-encap:&lt;enterprise&gt;[,&lt;value&gt;]

#tag-if=set:&lt;tag&gt;[,set:&lt;tag&gt;[,tag:&lt;tag&gt;[,tag:&lt;tag&gt;]]]



#dhcp-proxy[=&lt;ip addr&gt;]......



##############################################################################

# 不分配匹配这些 tag:&lt;tag&gt; 的 DHCP 请求。

#dhcp-ignore=tag:&lt;tag&gt;[,tag:&lt;tag&gt;]

#dhcp-ignore-names[=tag:&lt;tag&gt;[,tag:&lt;tag&gt;]]

#dhcp-generate-names=tag:&lt;tag&gt;[,tag:&lt;tag&gt;]

# IPv4 only 使用广播与匹配 tag:&lt;tag&gt; 的客户端通信。一般用于兼容老的 BOOT 客户端。

#dhcp-broadcast[=tag:&lt;tag&gt;[,tag:&lt;tag&gt;]] 



##############################################################################

# IPv4 only 设置 DHCP 服务器返回的 BOOTP 选项，

# &lt;servername&gt; &lt;server address&gt; 可选，

# 如果未设置服务器名称将设为空，服务器地址设为 dnsmasq 的 IP 地址。

# 如果指定了多个 tag:&lt;tag&gt; 必须同时匹配才行。

# 如果指定 &lt;tftp_servername&gt; 将按照 /etc/hosts 中对应的 IP 地址进行轮询负载均衡。  

#dhcp-boot=[tag:&lt;tag&gt;,]&lt;filename&gt;,[&lt;servername&gt;[,&lt;server address&gt;|&lt;tftp_servername&gt;]]

# 根据不同的类型使用不同的选项。

# 使用示例：

#        dhcp-match=set:EFI_x86-64,option:client-arch,9

#        dhcp-boot=tag:EFI_x86-64,uefi/grubx64.efi

#        #dhcp-match=set:EFI_Xscale,option:client-arch,8

#        #dhcp-boot=tag:EFI_Xscale,uefi/grubx64.efi

#        #dhcp-match=set:EFI_BC,option:client-arch,7

#        #dhcp-boot=tag:EFI_BC,uefi/grubx64.efi

#        #dhcp-match=set:EFI_IA32,option:client-arch,6

#        #dhcp-boot=tag:EFI_IA32,uefi/grubx64.efi

#        #dhcp-match=set:Intel_Lean_Client,option:client-arch,5

#        #dhcp-boot=tag:Intel_Lean_Client,uefi/grubx64.efi

#        #dhcp-match=set:Arc_x86,option:client-arch,4

#        #dhcp-boot=tag:Arc_x86,uefi/grubx64.efi

#        #dhcp-match=set:DEC_Alpha,option:client-arch,3

#        #dhcp-boot=tag:DEC_Alpha,uefi/grubx64.efi

#        #dhcp-match=set:EFI_Itanium,option:client-arch,2

#        #dhcp-boot=tag:EFI_Itanium,uefi/grubx64.efi

#        #dhcp-match=set:NEC/PC98,option:client-arch,1

#        #dhcp-boot=tag:NEC/PC98,uefi/grubx64.efi

#        dhcp-match=set:Intel_x86PC,option:client-arch,0

#        dhcp-boot=tag:Intel_x86PC,pxelinux.0



##############################################################################

# DHCP 使用客户端的 MAC 地址的哈希值为客户端分配 IP 地址，

# 通常情况下即使客户端使自己的租约到期，客户端的 IP 地址仍将长期保持稳定。

# 在默认模式下，IP 地址是随机分配的。

# 启用 dhcp-sequential-ip 选项将按顺序分配 IP 地址。

# 在顺序分配模式下，客户端使租约到期更像是仅仅移动一下 IP 地址。

# 在通常情况下不建议使用这种方式。

#dhcp-sequential-ip



##############################################################################

# 多数情况下我们使用 PXE，只是简单的允许 PXE 客户端获取 IP 地址，

# 然后 PXE 客户端下载 dhcp-boot 选项指定的文件并执行，也就是 BOOTP 的方式。

# 然而在有适当配置的 DHCP 服务器支持的情况下，PXE 系统能够实现更复杂的功能。

# pxe-service 选项可指定 PXE 环境的启动菜单。

# 为不同的类型系统设定不同的启动菜单，并且覆盖 dhcp-boot 选项。

# &lt;CSA&gt; 为客户端系统类型：x86PC, PC98, IA64_EFI, Alpha, Arc_x86, Intel_Lean_Client, 

# IA32_EFI, X86-64_EFI, Xscale_EFI, BC_EFI, ARM32_EFI 和 ARM64_EFI，其他类型可能为一个整数。

# &lt;basename&gt; 引导 PXE 客户端使用 tftp 从 &lt;server address&gt; 或者 &lt;server_name&gt; 下载文件。

#     注意：&quot;layer&quot; 后缀 (通常是 &quot;.0&quot;) 由 PXE 提供，也就是 PXE 客户端默认在文件名附加 .0 后缀。

#     示例：pxe-service=x86PC, &quot;Install Linux&quot;, pxelinux         （读取 pxelinux.0 文件并执行）

#           pxe-service=x86PC, &quot;Install Linux&quot;, pxelinux, 1.2.3.4（不适用于老的PXE）

#     &lt;bootservicetype&gt; 整数，PXE 客户端将通过广播或者通过 &lt;server address&gt; 

#           或者 &lt;server_name&gt; 搜索对应类型的适合的启动服务。。

#     示例：pxe-service=x86PC, &quot;Install windows from RIS server&quot;, 1

#           pxe-service=x86PC, &quot;Install windows from RIS server&quot;, 1, 1.2.3.4

#     未指定 &lt;basename&gt;、&lt;bootservicetype&gt; 或者 &lt;bootservicetype&gt; 为 “0”，将从本地启动。

#     示例：pxe-service=x86PC, &quot;Boot from local disk&quot;

#           pxe-service=x86PC, &quot;Boot from local disk&quot;, 0

# 如果指定 &lt;server_name&gt; 将按照 /etc/hosts 中对应的 IP 地址进行轮询负载均衡。  

#pxe-service=[tag:&lt;tag&gt;,]&lt;CSA&gt;,&lt;menu text&gt;[,&lt;basename&gt;|&lt;bootservicetype&gt;][,&lt;server address&gt;|&lt;server_name&gt;]

# 在 PXE 启动后弹出提示，&lt;prompt&gt; 为提示内容，&lt;timeout&gt; 为超时时间，为 0 则立即执行。

# 如果未指定此选项，在有多个启动选项的情况下等待用户选择，不会超时。

#pxe-prompt=[tag:&lt;tag&gt;,]&lt;prompt&gt;[,&lt;timeout&gt;]

# 根据不同的类型使用不同的菜单，使用示例：

#        #pxe-prompt=&quot;What system shall I netboot?&quot;, 120

#        # or with timeout before first available action is taken:

#        pxe-prompt=&quot;Press F8 or Enter key for menu.&quot;, 60

#        pxe-service=x86PC, &quot;Now in x86PC (BIOS mode), boot from local&quot;, 0

#        pxe-service=x86PC, &quot;Now in x86PC (BIOS mode)&quot;, pxelinux

#        pxe-service=PC98, &quot;Now in PC98 mode&quot;, PC98

#        pxe-service=IA64_EFI, &quot;Now in IA64_EFI mode&quot;, IA64_EFI

#        pxe-service=Alpha, &quot;Now in Alpha mode&quot;, Alpha

#        pxe-service=Arc_x86, &quot;Now in Arc_x86 mode&quot;, Arc_x86

#        pxe-service=Intel_Lean_Client, &quot;Now in Intel_Lean_Client mode&quot;, Intel_Lean_Client

#        pxe-service=IA32_EFI, &quot;Now in IA32_EFI mode&quot;, IA32_EFI

#        pxe-service=X86-64_EFI, &quot;Now in X86-64_EFI (UEFI mode), boot from local&quot;, 0

#        pxe-service=X86-64_EFI, &quot;Now in X86-64_EFI (UEFI mode)&quot;, grub/grub-x86_64.efi

#        pxe-service=Xscale_EFI, &quot;Now in Xscale_EFI mode&quot;, Xscale_EFI

#        pxe-service=BC_EFI, &quot;Now in BC_EFI mode&quot;, BC_EFI

#        # CentOS7 系统不支持下列两个选项

#        #pxe-service=ARM32_EFI,&quot;Now in ARM32_EFI mode&quot;,ARM32_EFI

#        #pxe-service=ARM64_EFI,&quot;Now in ARM64_EFI mode&quot;,ARM64_EFI



##############################################################################

# 默认为150，即最多分配150个ip地址出去，最大1000个ip

#dhcp-lease-max=150

# (IPv4 only) 指定DHCP端口，默认为67和68。如果不指定则为1067和1068，单指定一个，第二个加1

#dhcp-alternate-port[=&lt;server port&gt;[,&lt;client port&gt;]]

# 谨慎使用此选项，避免 IP 地址浪费。(IPv4 only) 允许动态分配 IP 地址给 BOOTP 客户端。

# 注意：BOOTP 客户端获取的 IP 地址是永久的，将无法再次分配给其他客户端。

#bootp-dynamic[=&lt;network-id&gt;[,&lt;network-id&gt;]]

# 谨慎使用此选项。

# 默认情况下 DHCP 服务器使用 ping 的方式进行确保 IP 未被使用的情况下将 IP 地址分配出去。

# 启用此选项将不使用 ping 进行确认。

#no-ping



##############################################################################

# 记录额外的 dhcp 日志，记录所有发送给 DHCP 客户端的选项（option）以及标签（tag）信息

#log-dhcp

# 禁止记录日常操作日志，错误日志仍然记录。启用 log-dhcp 将覆盖下列选项。

#quiet-dhcp

#quiet-dhcp6

#quiet-ra



# 修改 DHCP 默认租约文件路径，默认情况下无需修改

#dhcp-leasefile=/var/lib/dnsmasq/dnsmasq.leases

# (IPv6 only)

#dhcp-duid=&lt;enterprise-id&gt;,&lt;uid&gt;



##############################################################################

#dhcp-script=&lt;path&gt;

#dhcp-luascript=&lt;path&gt;

#dhcp-scriptuser=root

#script-arp

#leasefile-ro



#bridge-interface=&lt;interface&gt;,&lt;alias&gt;[,&lt;alias&gt;]



##############################################################################

# 给 DHCP 服务器指定 domain 域名信息，也可以给对应的 IP 地址池指定域名。

#     直接指定域名

#     示例：domain=thekelleys.org.uk

#     子网对应的域名

#     示例：domain=wireless.thekelleys.org.uk,192.168.2.0/24

#     ip范围对应的域名

#     示例：domain=reserved.thekelleys.org.uk,192.68.3.100,192.168.3.200

#domain=&lt;domain&gt;[,&lt;address range&gt;[,local]]

# 在默认情况下 dnsmasq 插入普通的客户端主机名到 DNS 中。

# 在这种情况下主机名必须唯一，即使两个客户端具有不同的域名后缀。

# 如果第二个客户端使用了相同的主机名，DNS 查询将自动更新为第二个客户端的 IP 地址。

# 如果设置了 dhcp-fqdn 选项，普通的主机名将不再插入到 DNS 中去，

# 仅允许合格的具有域名后缀的主机名插入到 DNS 服务器中。

# 指定此选项需同时指定不含 &lt;address range&gt; 地址范围的 domain 选项。

#dhcp-fqdn

# 通常情况下分配 DHCP 租约后，dnsmasq 设置 FQDN 选项告诉客户端不要尝试 DDNS 更新主机名与 IP 地址。

# 这是因为  name-IP 已自动添加到 dnsmasq 的 DNS 视图中的。

# 设置此选项将允许客户端 DDNS 更新，

# 在 windows 下允许客户端更新 windows AD 服务器是非常有用的。

# 参看  RFC 4702 。

#dhcp-client-update



#enable-ra

#ra-param=&lt;interface&gt;,[high|low],[[&lt;ra-interval&gt;],&lt;router lifetime&gt;]





##############################################################################

#

#        TFTP 选项

#

##############################################################################

# 对于绝大多数的配置，仅需指定 enable-tftp 和 tftp-root 选项即可。

# 是否启用内置的 tftp 服务器，可以指定多个逗号分隔的网络接口

#enable-tftp[=&lt;interface&gt;[,&lt;interface&gt;]]

#enable-tftp

#enable-tftp=enp3s0,lo

# 指定 tftp 的根目录，也就是寻找传输文件时使用的相对路径，可以附加接口，

#tftp-root=&lt;directory&gt;[,&lt;interface&gt;]

#tftp-root=/var/lib/tftpboot/

# 如果取消注释，那么即使指定的 tftp-root 无法访问，仍然启动 tftp 服务。

#tftp-no-fail

# 附加客户端的 IP 地址作为文件路径。此选项仅在正确设置了 tftp-root 的情况下可用，

# 示例：如果 tftp-root=/tftp，客户端为 192.168.1.15 请求 myfile.txt 文件时，

# 将优先请求 /tftp/192.168.1.15/myfile.txt 文件， 其次是 /tftp/myfile.txt 文件。

# 感觉没什么用。

#tftp-unique-root

# 启用安全模式，启用此选项，仅允许 tftp 进程访问属主为自己的文件。

# 不启用此选项，允许访问所有 tftp 进程属主可读取的文件。

# 如果 dnsmasq 是以 root 用户运行，tftp-secure 选项将允许访问全局可读的文件。

# 一般情况下不推荐以 root 用户运行 dnsmasq。

# 在指定了 tftp-root 的情况下并不是很重要。

#tftp-secure

# 将所有文件请求转换为小写。对于 Windows 客户端来说非常有用，建议开启此项。

# 注意：dnsmasq 的 TFTP 服务器总是将文件路径中的“\”转换为“/”。

#tftp-lowercase

# 允许最大的连接数，默认为 50 。

# 如果将连接数设置的很大，需注意每个进程的最大文件描述符限制，详见文档手册。

#tftp-max=&lt;connections&gt;

#tftp-max=50

# 设置传输时的 MTU 值，建议不设置或按需设置。

# 如果设定的值大于网络接口的 MTU 值，将按照网络接口的 MTU 值自动分片传输（不推荐）。

#tftp-mtu=&lt;mtu size&gt;

# 停止 tftp 服务器与客户端协商 &quot;blocksize&quot; 选项。启用后，防止一些古怪的客户端出问题。

#tftp-no-blocksize

# 指定 tftp 的连接端口的范围，方便防火墙部署。

# tftp 侦听在 69/udp ，连接端口默认是由系统自动分配的，

# 非 root 用户运行时指定的连接端口号需大于 1025 最大 65535。

#tftp-port-range=&lt;start&gt;,&lt;end&gt;

###############################################################################

#conf-dir=&lt;directory&gt;[,&lt;file-extension&gt;......]

#conf-file=/etc/dnsmasq.more.conf

conf-dir=/etc/dnsmasq.d

#servers-file=&lt;file&gt;</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>跨平台共享鼠标Synergy</title>
    <url>/p/20b1f90d.html</url>
    <content><![CDATA[<p>前面用了<a href="/p/71be3b15.html">ShareMouse</a>，后面发现最新版5.0.49 free版只能使用半小时，半小时后需要重启软件才可以继续用半小时，后面发现Synergy free版本除了ssl加密外可以使用全部功能。</p>
<h2 id="Mac-客户端"><a href="#Mac-客户端" class="headerlink" title="Mac 客户端"></a>Mac 客户端</h2><h3 id="1-打开dmg镜像，将“Synergy-app”拖入应用程序中"><a href="#1-打开dmg镜像，将“Synergy-app”拖入应用程序中" class="headerlink" title="1. 打开dmg镜像，将“Synergy.app”拖入应用程序中"></a>1. 打开dmg镜像，将“Synergy.app”拖入应用程序中</h3><h3 id="2-在”安全性与隐私”的”辅助功能”中-允许”Synergy”控制电脑"><a href="#2-在”安全性与隐私”的”辅助功能”中-允许”Synergy”控制电脑" class="headerlink" title="2. 在”安全性与隐私”的”辅助功能”中,允许”Synergy”控制电脑"></a>2. 在”安全性与隐私”的”辅助功能”中,允许”Synergy”控制电脑</h3><p><img src="//gitee.com/guoke3915/zw/raw/master/p/20b1f90d/19826068-117d9c366641524f.png" alt></p>
<h3 id="3-选择Client，然后配置一下服务器的IP"><a href="#3-选择Client，然后配置一下服务器的IP" class="headerlink" title="3. 选择Client，然后配置一下服务器的IP"></a>3. 选择Client，然后配置一下服务器的IP</h3><p><img src="//gitee.com/guoke3915/zw/raw/master/p/20b1f90d/19826068-2eabd2a7794dce96.png" alt></p>
<h3 id="4-点运行等待连接服务器"><a href="#4-点运行等待连接服务器" class="headerlink" title="4. 点运行等待连接服务器"></a>4. 点运行等待连接服务器</h3><h2 id="Windows-服务端"><a href="#Windows-服务端" class="headerlink" title="Windows 服务端"></a>Windows 服务端</h2><h3 id="1-打开exe安装"><a href="#1-打开exe安装" class="headerlink" title="1. 打开exe安装"></a>1. 打开exe安装</h3><h3 id="2-选择Server"><a href="#2-选择Server" class="headerlink" title="2. 选择Server"></a>2. 选择Server</h3><h3 id="3-配置服务器"><a href="#3-配置服务器" class="headerlink" title="3. 配置服务器"></a>3. 配置服务器</h3><p><img src="//gitee.com/guoke3915/zw/raw/master/p/20b1f90d/19826068-98bb121c6086ccef.png" alt></p>
<h3 id="4-新加客户端屏幕，并设置好与主屏幕的位置"><a href="#4-新加客户端屏幕，并设置好与主屏幕的位置" class="headerlink" title="4. 新加客户端屏幕，并设置好与主屏幕的位置"></a>4. 新加客户端屏幕，并设置好与主屏幕的位置</h3><p><img src="//gitee.com/guoke3915/zw/raw/master/p/20b1f90d/19826068-98de4e2d661af514.png" alt></p>
<h3 id="5-运行，稍等一会客户端就会自动连接上来。这时个就可以控制客户端了。"><a href="#5-运行，稍等一会客户端就会自动连接上来。这时个就可以控制客户端了。" class="headerlink" title="5. 运行，稍等一会客户端就会自动连接上来。这时个就可以控制客户端了。"></a>5. 运行，稍等一会客户端就会自动连接上来。这时个就可以控制客户端了。</h3>]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>将samba共享目录映射为本地文件夹</title>
    <url>/p/f4f49873.html</url>
    <content><![CDATA[<p>在win的文件夹操作中可以装samba目录映射成一个新的磁盘，但是，如果在映射成一个磁盘中的目录，可以用mklink命令来实现。</p>
<h3 id="1-管理员权限运行cmd-exe"><a href="#1-管理员权限运行cmd-exe" class="headerlink" title="1.管理员权限运行cmd.exe"></a>1.管理员权限运行cmd.exe</h3><h3 id="2-运行mklink"><a href="#2-运行mklink" class="headerlink" title="2. 运行mklink"></a>2. 运行mklink</h3><pre><code class="line-numbers language-bat">E:
mklink /D Share \\192.168.0.55\share</code></pre>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul>
<li>E: 切换到E盘，在E盘根目录中映射一个Share目录</li>
<li>Share 为映射后的目录，可以是相对路径也可以是绝对路径。</li>
<li>\192.168.0.55\share为samba共享目录</li>
</ul>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>鼠标共享ShareMouse</title>
    <url>/p/71be3b15.html</url>
    <content><![CDATA[<p>微软推出了官方的鼠标键盘共享软件(Mouse without Borders)，但是，这个不能跨系统只能在局域中win系统中使用。</p>
<p>但是要跨win和mac，可以使用<a href="https://www.sharemouse.com/download/" target="_blank" rel="noopener">ShareMouse</a><br><img src="//gitee.com/guoke3915/zw/raw/master/p/71be3b15/19826068-49ff908b348d8075.png" alt></p>
<p>下载win和mac二个客户端，并分别在二个系统中安装对应的软件。</p>
<h2 id="windows设置"><a href="#windows设置" class="headerlink" title="windows设置"></a>windows设置</h2><p>windows中直接安装就可以了，如果考虑局域网中的安全，可以在设置中的“Network”设置密码和修改默认端口号<br><img src="//gitee.com/guoke3915/zw/raw/master/p/71be3b15/19826068-2211f8f09ffe228d.png" alt></p>
<h2 id="mac设置"><a href="#mac设置" class="headerlink" title="mac设置"></a>mac设置</h2><p>mac中安装需要在”安全性与隐私”的”辅助功能”中,允许”ShareMouse”控制电脑<br><img src="//gitee.com/guoke3915/zw/raw/master/p/71be3b15/19826068-1a04994b387765f3.png" alt></p>
<p>然后在ShareMouse的设置中,设置与win中相同的密码和端口就可以操作了</p>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>关闭QQ浏览器安全警告</title>
    <url>/p/8fc869f.html</url>
    <content><![CDATA[<p>感觉QQ浏览器安全警告有点过了，去阿里云盘下载自己上传的文件，结果QQ浏览器给我提示访问网站包含有害程序被拦截无法下载<br><img src="//gitee.com/guoke3915/zw/raw/master/p/8fc869f/19826068-6b3c5f8766305040.png" alt></p>
<p>1、 点击右上角的<code>三</code>,打开<code>设置</code>页面<br><img src="//gitee.com/guoke3915/zw/raw/master/p/8fc869f/19826068-071f71039e97b5e0.png" alt></p>
<p>2、进入<code>安全设置</code>,将下面的勾选框安需取消掉就行了.<br>如果是下载阿里云盘的东西，去掉勾选<code>网站安全云检测</code>和<code>下载云安全</code><br><img src="//gitee.com/guoke3915/zw/raw/master/p/8fc869f/19826068-0c9f6664addfe397.png" alt></p>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>linux-查看cpu温度</title>
    <url>/p/c775b077.html</url>
    <content><![CDATA[<p>装之后的老电脑改成了linux服务器，运行久了想看看cpu温度什么的。</p>
<h2 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h2><h3 id="1-1-先安装lm-sensors工具"><a href="#1-1-先安装lm-sensors工具" class="headerlink" title="1.1 先安装lm_sensors工具"></a>1.1 先安装lm_sensors工具</h3><pre><code class="line-numbers language-bash">yum -y install lm_sensors </code></pre>
<h3 id="1-2-查看是否安装kmod-coretemp"><a href="#1-2-查看是否安装kmod-coretemp" class="headerlink" title="1.2 查看是否安装kmod-coretemp"></a>1.2 查看是否安装kmod-coretemp</h3><pre><code class="line-numbers language-bash">rpm -qa|grep coretemp</code></pre>
<p>看是否有kmod-coretemp，没有的话需要安装这个</p>
<pre><code class="line-numbers language-bash">wget http://www.pperry.f2s.com/linux/coretemp/kmod-coretemp-1.1-2.el5.x86_64.rpm
rpm -ivh kmod-coretemp-1.1-2.el5.x86_64.rpm</code></pre>
<h2 id="2、配置"><a href="#2、配置" class="headerlink" title="2、配置"></a>2、配置</h2><p>执行 <code>sensors-detect</code> 命令，选择使用哪些模块，不使用哪些模块，可以一般回车默认选择到底，也可以一路yes到底即可。</p>
<h2 id="3、查看温度"><a href="#3、查看温度" class="headerlink" title="3、查看温度"></a>3、查看温度</h2><p>使用<code>sensors</code> 命令可以查看温度</p>
<pre><code class="line-numbers language-bash">[root@localhost ~]# sensors
acpitz-virtual-0
Adapter: Virtual device
temp1:        +27.8°C  (crit = +100.0°C)
temp2:        +29.8°C  (crit = +100.0°C)

coretemp-isa-0000
Adapter: ISA adapter
Package id 0:  +36.0°C  (high = +80.0°C, crit = +99.0°C)
Core 0:        +32.0°C  (high = +80.0°C, crit = +99.0°C)
Core 1:        +32.0°C  (high = +80.0°C, crit = +99.0°C)
Core 2:        +33.0°C  (high = +80.0°C, crit = +99.0°C)
Core 3:        +36.0°C  (high = +80.0°C, crit = +99.0°C)</code></pre>
<h2 id="4、参数说明"><a href="#4、参数说明" class="headerlink" title="4、参数说明"></a>4、参数说明</h2><p>:: Core 0:        +32.0°C  (high = +80.0°C, crit = +99.0°C)</p>
<ul>
<li>core0,1,2,3  表示cpu核心</li>
<li>第一个温度如+31.0°C 为当前核cpu温度</li>
<li>high=+80.0°C表示超过80度cpu温度过高</li>
<li>crit=+99.0°C表示超过99度cpu就有可能会烧坏。 </li>
</ul>
<h2 id="5、注意"><a href="#5、注意" class="headerlink" title="5、注意"></a>5、注意</h2><p>如果是云服务器或虚拟机中，是取不到sensors传感器参数的。</p>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7安装Zabbix 5</title>
    <url>/p/fb71ad00.html</url>
    <content><![CDATA[<h2 id="1-安装Zabbix服务"><a href="#1-安装Zabbix服务" class="headerlink" title="1. 安装Zabbix服务"></a>1. 安装Zabbix服务</h2><h3 id="1-1-下载"><a href="#1-1-下载" class="headerlink" title="1.1 下载"></a>1.1 下载</h3><p>去<a href="https://www.zabbix.com/cn/download?zabbix=5.0&os_distribution=centos&os_version=7&db=mysql&ws=nginx" target="_blank" rel="noopener">Zabbix官网</a>选择需要下载的系统和版本，然得到一个对应rpm包地址。<br>这里以 CentOS 7 安装5.0LTS版，MySQL数据库 + Nginx网页服务器为例</p>
<pre><code class="line-numbers language-bash"># rpm -Uvh https://repo.zabbix.com/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm
# yum clean all</code></pre>
<h3 id="1-2-安装Zabbix-服务器和客户端"><a href="#1-2-安装Zabbix-服务器和客户端" class="headerlink" title="1.2 安装Zabbix 服务器和客户端"></a>1.2 安装Zabbix 服务器和客户端</h3><pre><code class="line-numbers language-bash"># yum install zabbix-server-mysql zabbix-agent</code></pre>
<h3 id="1-3-安装前端"><a href="#1-3-安装前端" class="headerlink" title="1.3 安装前端"></a>1.3 安装前端</h3><ul>
<li>启用系统软件集</li>
</ul>
<pre><code class="line-numbers language-bash"># yum install centos-release-scl</code></pre>
<ul>
<li>编辑配置文件 <code>/etc/yum.repos.d/zabbix.repo</code> 启用 zabbix-frontend </li>
</ul>
<pre><code class="line-numbers language-conf">[zabbix-frontend]
...
enabled=1
...</code></pre>
<ul>
<li>安装zabbix前端库</li>
</ul>
<pre><code class="line-numbers language-bash"># yum install zabbix-web-mysql-scl zabbix-nginx-conf-scl</code></pre>
<ul>
<li>若本地有Nginx服务可以不安装<code>zabbix-nginx-conf-scl</code></li>
</ul>
<h3 id="1-4-创建初始数据库"><a href="#1-4-创建初始数据库" class="headerlink" title="1.4 创建初始数据库"></a>1.4 创建初始数据库</h3><p>在主机上<a href="/p/b604530d.html">安装并运行MySQL</a>数据库，然后创建zabbix相关数据库</p>
<pre><code class="line-numbers language-bash"># mysql -uroot -p
password
mysql&gt; create database zabbix character set utf8 collate utf8_bin;
mysql&gt; create user zabbix@localhost identified by &#39;password&#39;;
mysql&gt; grant all privileges on zabbix.* to zabbix@localhost;
mysql&gt; quit;</code></pre>
<p>导入初始架构和数据，系统将提示您输入新创建的密码。</p>
<pre><code class="line-numbers language-bash"># zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -p zabbix</code></pre>
<h3 id="1-5-为Zabbix-server配置数据库"><a href="#1-5-为Zabbix-server配置数据库" class="headerlink" title="1.5 为Zabbix server配置数据库"></a>1.5 为Zabbix server配置数据库</h3><p>编辑配置文件 <code>/etc/zabbix/zabbix_server.conf</code>，修改数据库密码</p>
<pre><code class="line-numbers language-bash">DBPassword=password</code></pre>
<h3 id="1-6-为Zabbix前端配置PHP"><a href="#1-6-为Zabbix前端配置PHP" class="headerlink" title="1.6 为Zabbix前端配置PHP"></a>1.6 为Zabbix前端配置PHP</h3><p>编辑nginx配置文件 <code>/etc/opt/rh/rh-nginx116/nginx/conf.d/zabbix.conf</code>，修改监听端口和服务器名。</p>
<pre><code class="line-numbers language-conf"># listen 80;
# server_name zabbx.zngw.icu;</code></pre>
<ul>
<li>如果本地有Nginx服务，在Nginx配置的conf.d目录下创建zabbix.conf文件</li>
</ul>
<pre><code class="line-numbers language-conf">server {
        listen          80;
        server_name zabbx.zngw.icu;

        root    /usr/share/zabbix;

        index   index.php;

        location = /favicon.ico {
                log_not_found   off;
        }

        location / {
                try_files       $uri $uri/ =404;
        }

        location /assets {
                access_log      off;
                expires         10d;
        }

        location ~ /\.ht {
                deny            all;
        }

        location ~ /(api\/|conf[^\.]|include|locale) {
                deny            all;
                return          404;
        }

        location ~ [^/]\.php(/|$) {
                fastcgi_pass    unix:/var/opt/rh/rh-php72/run/php-fpm/zabbix.sock;
#                fastcgi_pass    unix:/var/opt/rh/rh-php73/run/php-fpm/zabbix.sock;
                fastcgi_split_path_info ^(.+\.php)(/.+)$;
                fastcgi_index   index.php;

                fastcgi_param   DOCUMENT_ROOT   /usr/share/zabbix;
                fastcgi_param   SCRIPT_FILENAME /usr/share/zabbix$fastcgi_script_name;
                fastcgi_param   PATH_TRANSLATED /usr/share/zabbix$fastcgi_script_name;

                include fastcgi_params;
                fastcgi_param   QUERY_STRING    $query_string;
                fastcgi_param   REQUEST_METHOD  $request_method;
                fastcgi_param   CONTENT_TYPE    $content_type;
                fastcgi_param   CONTENT_LENGTH  $content_length;

                fastcgi_intercept_errors        on;
                fastcgi_ignore_client_abort     off;
                fastcgi_connect_timeout         60;
                fastcgi_send_timeout            180;
                fastcgi_read_timeout            180;
                fastcgi_buffer_size             128k;
                fastcgi_buffers                 4 256k;
                fastcgi_busy_buffers_size       256k;
                fastcgi_temp_file_write_size    256k;
        }
}</code></pre>
<ul>
<li>编辑PHP配置文件<code>/etc/opt/rh/rh-php72/php-fpm.d/zabbix.conf</code>添加Nginx</li>
</ul>
<pre><code class="line-numbers language-bash">listen.acl_users = apache,nginx</code></pre>
<p>修改时间区为上海</p>
<pre><code class="line-numbers language-bash">php_value[date.timezone] = Asia/Shanghai</code></pre>
<h3 id="1-7-启动Zabbix-server和agent进程"><a href="#1-7-启动Zabbix-server和agent进程" class="headerlink" title="1.7 启动Zabbix server和agent进程"></a>1.7 启动Zabbix server和agent进程</h3><pre><code class="line-numbers language-bash"># systemctl restart zabbix-server zabbix-agent rh-nginx116-nginx rh-php72-php-fpm
# systemctl enable zabbix-server zabbix-agent rh-nginx116-nginx rh-php72-php-fpm</code></pre>
<p>如果启动有问题，后面会将到防火墙及Selinux的设置</p>
<h3 id="1-8-配置Zabbix前端"><a href="#1-8-配置Zabbix前端" class="headerlink" title="1.8 配置Zabbix前端"></a>1.8 配置Zabbix前端</h3><p>连接到新安装的Zabbix前端： <a href="http://server_ip_or_name" target="_blank" rel="noopener">http://server_ip_or_name</a></p>
<p>页面上就简单了，除了要填写一下数据库的账号和密码外，基本就是一路next到完成。<br>默认登录账号为：Admin，密码为：zabbix</p>
<h3 id="1-9-单独安装Zabbix客户端"><a href="#1-9-单独安装Zabbix客户端" class="headerlink" title="1.9 单独安装Zabbix客户端"></a>1.9 单独安装Zabbix客户端</h3><h4 id="1-9-1-设置rpm"><a href="#1-9-1-设置rpm" class="headerlink" title="1.9.1 设置rpm"></a>1.9.1 设置rpm</h4><pre><code class="line-numbers language-bash"># rpm -Uvh https://repo.zabbix.com/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm
# yum clean all</code></pre>
<h4 id="1-9-2-安装Zabbix-客户端"><a href="#1-9-2-安装Zabbix-客户端" class="headerlink" title="1.9.2 安装Zabbix 客户端"></a>1.9.2 安装Zabbix 客户端</h4><pre><code class="line-numbers language-bash"># yum install zabbix-agent</code></pre>
<h4 id="1-9-3-配置客户端"><a href="#1-9-3-配置客户端" class="headerlink" title="1.9.3 配置客户端"></a>1.9.3 配置客户端</h4><p>编辑配置文件<code>/etc/zabbix/zabbix_agentd.conf</code></p>
<pre><code class="line-numbers language-bash">Server=zabbix服务端ip地址，多个可以用&#39;,&#39;号分割，如果不限定服务器ip用0.0.0.0/0
ServerActive=zabbix主动推送服务端ip地址，同Server一样配置
Hostname=zabbix在web界面配置的Host名称</code></pre>
<h4 id="1-9-4-启动Zabbix-agent进程"><a href="#1-9-4-启动Zabbix-agent进程" class="headerlink" title="1.9.4 启动Zabbix agent进程"></a>1.9.4 启动Zabbix agent进程</h4><pre><code class="line-numbers language-bash"># systemctl restart  zabbix-agent
# systemctl enable  zabbix-agent</code></pre>
<h2 id="2-防火墙设置"><a href="#2-防火墙设置" class="headerlink" title="2. 防火墙设置"></a>2. 防火墙设置</h2><ul>
<li>Nginx 默认端口 80/443</li>
<li>zabbix-agent 默认端口 10050</li>
<li>zabbix-server  默认端口10051</li>
</ul>
<pre><code class="line-numbers language-bash"># firewall-cmd --permanent --zone=public --add-port=80/tcp
# firewall-cmd --permanent --zone=public --add-port=443/tcp
# firewall-cmd --permanent --zone=public --add-port=10051/tcp
# firewall-cmd --permanent --zone=public --add-port=10050/tcp
# firewall-cmd --reload</code></pre>
<h2 id="3-Selinux设置"><a href="#3-Selinux设置" class="headerlink" title="3. Selinux设置"></a>3. Selinux设置</h2><h3 id="3-1-安装Selinux相关工具包"><a href="#3-1-安装Selinux相关工具包" class="headerlink" title="3.1 安装Selinux相关工具包"></a>3.1 安装Selinux相关工具包</h3><pre><code class="line-numbers language-bash"># yum install policycoreutils checkpolicy setroubleshoot-server -y</code></pre>
<h3 id="3-2-创建zabbix-selinux目录"><a href="#3-2-创建zabbix-selinux目录" class="headerlink" title="3.2 创建zabbix-selinux目录"></a>3.2 创建zabbix-selinux目录</h3><pre><code class="line-numbers language-bash"># mkdir -p ~ /zabbix-selinux
# cd ~ /zabbix-selinux /</code></pre>
<h3 id="3-3-创建zabbix-server-add-te文件"><a href="#3-3-创建zabbix-server-add-te文件" class="headerlink" title="3.3 创建zabbix_server_add.te文件"></a>3.3 创建zabbix_server_add.te文件</h3><pre><code class="line-numbers language-conf">module zabbix_server_add 1.1;

require {
        type zabbix_var_run_t;
        type tmp_t;
        type zabbix_t;
        class sock_file { create unlink write };
        class unix_stream_socket connectto;
        class process setrlimit;
        class capability dac_override;
}

#============= zabbix_t ==============

#!!!! This avc is allowed in the current policy
allow zabbix_t self:process setrlimit;

#!!!! This avc is allowed in the current policy
allow zabbix_t self:unix_stream_socket connectto;

#!!!! This avc is allowed in the current policy
allow zabbix_t tmp_t:sock_file { create unlink write };

#!!!! This avc is allowed in the current policy
allow zabbix_t zabbix_var_run_t:sock_file { create unlink write };

#!!!! This avc is allowed in the current policy
allow zabbix_t self:capability dac_override;</code></pre>
<h3 id="3-4-用checkmodule-转换为Selinux模块"><a href="#3-4-用checkmodule-转换为Selinux模块" class="headerlink" title="3.4 用checkmodule 转换为Selinux模块"></a>3.4 用checkmodule 转换为Selinux模块</h3><pre><code class="line-numbers language-bash"># checkmodule -M -m -o zabbix_server_add.mod zabbix_server_add.te</code></pre>
<h3 id="3-5-用semodule-package-编译zabbix-server-add-mod"><a href="#3-5-用semodule-package-编译zabbix-server-add-mod" class="headerlink" title="3.5 用semodule_package 编译zabbix_server_add.mod"></a>3.5 用semodule_package 编译zabbix_server_add.mod</h3><pre><code class="line-numbers language-bash"># semodule_package -m zabbix_server_add.mod -o zabbix_server_add.pp</code></pre>
<h3 id="3-6-应用zabbix-server-add模块"><a href="#3-6-应用zabbix-server-add模块" class="headerlink" title="3.6 应用zabbix_server_add模块"></a>3.6 应用zabbix_server_add模块</h3><pre><code class="line-numbers language-bash"># semodule -i zabbix_server_add.pp</code></pre>
<h3 id="3-7-设置一些变量"><a href="#3-7-设置一些变量" class="headerlink" title="3.7 设置一些变量"></a>3.7 设置一些变量</h3><pre><code class="line-numbers language-bash"># setsebool -P httpd_can_network_connect 1
# setsebool -P httpd_can_connect_zabbix 1
# setsebool zabbix_can_network on</code></pre>
<h2 id="4-页面出现中文乱码"><a href="#4-页面出现中文乱码" class="headerlink" title="4. 页面出现中文乱码"></a>4. 页面出现中文乱码</h2><p>语言设置为中文时，页面乱码如图，有小方块。这是应为zabbix使用的字体没有中文导致的，替换调就可以了。</p>
<h3 id="4-1-获取中文字体"><a href="#4-1-获取中文字体" class="headerlink" title="4.1 获取中文字体"></a>4.1 获取中文字体</h3><p>去下载或系统中找一个带中文的ttf字体。这里用 阿里巴巴普惠体 Alibaba-PuHuiTi-Medium.ttf</p>
<h3 id="4-2-复制到zabbix字体目录"><a href="#4-2-复制到zabbix字体目录" class="headerlink" title="4.2 复制到zabbix字体目录"></a>4.2 复制到zabbix字体目录</h3><p>将字体文件 <code>Alibaba-PuHuiTi-Medium.ttf</code> 复制到目录<code>/usr/share/zabbix/assets/fonts</code></p>
<h3 id="4-3-修改配置脚本"><a href="#4-3-修改配置脚本" class="headerlink" title="4.3 修改配置脚本"></a>4.3 修改配置脚本</h3><p>编辑修改PHP配置文件<code>/usr/share/zabbix/include/defines.inc.php</code>，找到字体修改</p>
<pre><code class="line-numbers language-php">...
define(&#39;ZBX_GRAPH_FONT_NAME&#39;,        &#39;Alibaba-PuHuiTi-Medium&#39;); // font file name
...
define(&#39;ZBX_FONT_NAME&#39;, &#39;Alibaba-PuHuiTi-Medium&#39;);
...</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7上安装和配置Samba</title>
    <url>/p/d4a96891.html</url>
    <content><![CDATA[<h1 id="一、前提"><a href="#一、前提" class="headerlink" title="一、前提"></a>一、前提</h1><p>在CentOS上装一个Samba服务，这样就可以很方便的与Windows文件共享了。</p>
<h1 id="二、安装Samba"><a href="#二、安装Samba" class="headerlink" title="二、安装Samba"></a>二、安装Samba</h1><ul>
<li>直接用yum安装</li>
</ul>
<pre><code class="line-numbers language-bash">yum install samba samba-client</code></pre>
<ul>
<li>设置开机启动</li>
</ul>
<pre><code class="line-numbers language-bash">systemctl start smb.service 
systemctl enable smb.service</code></pre>
<h1 id="三、设置防火墙"><a href="#三、设置防火墙" class="headerlink" title="三、设置防火墙"></a>三、设置防火墙</h1><p> 防火墙中默认有samba服务配置,直接添加服务就可以了。</p>
<pre><code class="line-numbers language-bash">firewall-cmd --permanent --zone=public --add-service=samba firewall-cmd --zone=public --add-service=samba</code></pre>
<h1 id="四、设置Selinux"><a href="#四、设置Selinux" class="headerlink" title="四、设置Selinux"></a>四、设置Selinux</h1><p>设置sebool属性,允许samba有文件读写权限</p>
<pre><code class="line-numbers language-bash">setsebool -P samba_export_all_rw=1</code></pre>
<h1 id="五、创建用户和目录"><a href="#五、创建用户和目录" class="headerlink" title="五、创建用户和目录"></a>五、创建用户和目录</h1><ul>
<li>首先创建/data/share目录</li>
</ul>
<pre><code class="line-numbers language-bash">mkdir /data/share</code></pre>
<ul>
<li>创建一个名为sambashare的用户组</li>
</ul>
<pre><code class="line-numbers language-bash">groupadd sambashare</code></pre>
<ul>
<li>将 /data/share目录组所有权设置为sambashare</li>
</ul>
<pre><code class="line-numbers language-bash">chgrp sambashare /data/share</code></pre>
<ul>
<li>创建用户</li>
</ul>
<p>创建一个samba访问的用户guoke</p>
<pre><code class="line-numbers language-bash">useradd -M -d /data/share -s /usr/sbin/nologin -G sambashare guoke</code></pre>
<ul>
<li><p>-M-不创建用户的主目录。</p>
</li>
<li><p>-d /data/share-将用户的主目录设置为/data/share。</p>
</li>
<li><p>-s /usr/sbin/nologin -禁止该用户访问shell。</p>
</li>
<li><p>-G sambashare -将用户添加到sambashare组。</p>
</li>
<li><p>设置目录权限</p>
</li>
</ul>
<pre><code class="line-numbers language-bash">chown guoke:sambashare /data/share
chmod 2770 /data/share</code></pre>
<h1 id="六、添加Samba用户"><a href="#六、添加Samba用户" class="headerlink" title="六、添加Samba用户"></a>六、添加Samba用户</h1><ul>
<li>将系统用户guoke添加到Samba数据库，这里候要输入samba访问的密码</li>
</ul>
<pre><code class="line-numbers language-bash">smbpasswd -a guoke</code></pre>
<h1 id="七、配置Samba共享"><a href="#七、配置Samba共享" class="headerlink" title="七、配置Samba共享"></a>七、配置Samba共享</h1><p>打开Samba配置文件添加共享目录</p>
<pre><code class="line-numbers language-bash">vim /etc/samba/smb.conf

[share]
    path = /data/share
    browseable = yes
    read only = no
    force create mode = 0660
    force directory mode = 2770
    valid users = @sambashare guoke</code></pre>
<ul>
<li>[share]-登录时将使用的共享名称。 此时可以用<code>\\ip\share</code>访问<code>/data/share</code>目录</li>
<li>path -分享的途径。</li>
<li>browseable -是否应在可用共享列表中列出该共享。设置为no，其他用户将看不到共享。</li>
<li>read only -valid users列表中指定的用户是否能够写入此共享。</li>
<li>force create mode -设置此共享中新创建文件的权限。</li>
<li>force directory mode -设置此共享中新创建目录的权限。</li>
<li>valid users -允许访问共享的用户和组的列表。组以@符号为前缀。</li>
</ul>
<p>配置完成后重启服务</p>
<pre><code class="line-numbers language-bash">systemctl restart smb.service
systemctl restart nmb.service</code></pre>
<h1 id="八、测试"><a href="#八、测试" class="headerlink" title="八、测试"></a>八、测试</h1><p>在windows中运行栏直接输入 <code>\\ip\share</code>就会弹出输入账号密码框，输入guoke和设定的密码就可以访问了。</p>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CocosCreator Android包使用wss</title>
    <url>/p/fae63216.html</url>
    <content><![CDATA[<p>在Web和iOS包中,可以直接使用wss连接<code>this.wss = new WebSocket(&quot;wss://xxx&quot;);</code>。但是,一到Android包里就连接失败了。这是因为android中需要一个证书。也不知道这是个啥子证书，用自己网站域名对应的ssl证书是不行，但从<a href="https://curl.se/docs/caextract.html" target="_blank" rel="noopener">curl官网</a>下的最新版证书就可以。</p>
<pre><code class="line-numbers language-ts">if (cc.sys.isNative &amp;&amp; cc.sys.os == cc.sys.OS_ANDROID) {
  // android平台需要加载证书
  // resources/Files/cacert.pem为从curl官网下载的最新的证书
  var cacert = cc.url.raw(&#39;resources/Files/cacert.pem&#39;);
  if (cc.loader.md5Pipe) {
      cacert = cc.loader.md5Pipe.transformURL(cacert)
  }
  this.wss = new WebSocket(url, null, cacert)
} else {
  //其他平台直接使用
  this.wss = new WebSocket(url);
}</code></pre>
<p>如果官网打不开可以下载这个 <a href="https://github.com/zngw/cdn/blob/master/cacert/cacert-2021-04-13.pem" target="_blank" rel="noopener">cacert-2021-04-13.pem</a></p>
]]></content>
      <categories>
        <category>Cocos2d-JS</category>
      </categories>
      <tags>
        <tag>Cocos2djs</tag>
      </tags>
  </entry>
  <entry>
    <title>在线 VS Code 阅读 GitHub 代码</title>
    <url>/p/70bb9146.html</url>
    <content><![CDATA[<p>在github上直接阅读代码有点不太方便,下过来又感觉有点麻烦.这时就可以用在线VS Code来阅读代码了,而且很方便.</p>
<p>比如我们github项目地址为<a href="https://github.com/zngw/auto-cocos" target="_blank" rel="noopener">https://github.com/zngw/auto-cocos</a><br>我们在输入项目域名的时候加一个1s就可以了,如:<a href="https://github1s.com/zngw/auto-cocos" target="_blank" rel="noopener">https://github1s.com/zngw/auto-cocos</a><br><img src="//gitee.com/guoke3915/zw/raw/master/p/70bb9146/19826068-332446ba7c34591f.png" alt></p>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7使用yum安装MySQL</title>
    <url>/p/b604530d.html</url>
    <content><![CDATA[<h2 id="1-删除已安装的MySQL"><a href="#1-删除已安装的MySQL" class="headerlink" title="1. 删除已安装的MySQL"></a>1. 删除已安装的MySQL</h2><h3 id="1-1-检查MariaDB"><a href="#1-1-检查MariaDB" class="headerlink" title="1.1 检查MariaDB"></a>1.1 检查MariaDB</h3><pre><code class="line-numbers language-bash">rpm -qa|grep mariadb</code></pre>
<h3 id="1-2-删除mariadb"><a href="#1-2-删除mariadb" class="headerlink" title="1.2 删除mariadb"></a>1.2 删除mariadb</h3><p>如果上面检查没有，直接跳过当前步骤</p>
<pre><code class="line-numbers language-bash">rpm -e --nodeps mariadb-server
rpm -e --nodeps mariadb
rpm -e --nodeps mariadb-libs</code></pre>
<h3 id="1-3-检查MySQL"><a href="#1-3-检查MySQL" class="headerlink" title="1.3 检查MySQL"></a>1.3 检查MySQL</h3><pre><code class="line-numbers language-bash">rpm -qa|grep mysql</code></pre>
<h3 id="1-4-删除MySQL"><a href="#1-4-删除MySQL" class="headerlink" title="1.4 删除MySQL"></a>1.4 删除MySQL</h3><pre><code class="line-numbers language-bash">rpm -e --nodeps mysql80-community
rpm -e --nodeps mysql-community-client
rpm -e --nodeps mysql-community-libs
rpm -e --nodeps mysql-community-server
rpm -e --nodeps mysql-community-common
rpm -e --nodeps mysql-community-libs-compat</code></pre>
<h2 id="2-添加MySQL-Yum-源"><a href="#2-添加MySQL-Yum-源" class="headerlink" title="2. 添加MySQL Yum 源"></a>2. 添加MySQL Yum 源</h2><h3 id="2-1-查看系统版本："><a href="#2-1-查看系统版本：" class="headerlink" title="2.1 查看系统版本："></a>2.1 查看系统版本：</h3><pre><code class="line-numbers language-bash"># cat /etc/redhat-release
CentOS Linux release 7.9.2009 (Core)</code></pre>
<h3 id="2-2-下载MySQL源"><a href="#2-2-下载MySQL源" class="headerlink" title="2.2 下载MySQL源"></a>2.2 下载MySQL源</h3><p>去<a href="https://dev.mysql.com/downloads/repo/yum/" target="_blank" rel="noopener">MySQL官网</a>下载与系统匹配的版本。CentOS 7下载mysql80-community-release-el7-3.noarch.rpm</p>
<pre><code class="line-numbers language-bash">wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</code></pre>
<h3 id="2-3-安装MySQL源"><a href="#2-3-安装MySQL源" class="headerlink" title="2.3 安装MySQL源"></a>2.3 安装MySQL源</h3><pre><code class="line-numbers language-bash">rpm -Uvh mysql80-community-release-el7-3.noarch.rpm</code></pre>
<h3 id="2-4-检查是否安装成功"><a href="#2-4-检查是否安装成功" class="headerlink" title="2.4 检查是否安装成功"></a>2.4 检查是否安装成功</h3><p>执行成功后会在<code>/etc/yum.repos.d/</code>目录下生成两个repo文件<code>mysql-community.repo</code>及 <code>mysql-community-source.repo</code></p>
<p>并且通过<code>yum repolist</code>可以看到mysql相关资源</p>
<pre><code class="line-numbers language-bash">yum repolist enabled | grep &quot;mysql.*-community.*&quot;
!mysql-connectors-community/x86_64 MySQL Connectors Community                203
!mysql-tools-community/x86_64      MySQL Tools Community                     129
!mysql57-community/x86_64          MySQL 5.7 Community Server                504</code></pre>
<h2 id="3-选择MySQL版本"><a href="#3-选择MySQL版本" class="headerlink" title="3. 选择MySQL版本"></a>3. 选择MySQL版本</h2><p>使用MySQL Yum Repository安装MySQL，默认会选择当前最新的稳定版本，例如通过上面的MySQL源进行安装的话，默安装会选择MySQL 8.0版本，如果就是想要安装该版本，可以直接跳过此步骤，如果不是，比如我这里希望安装MySQL5.7版本，就需要“切换一下版本”：</p>
<h3 id="3-1-查看当前MySQL-Yum-Repository中所有MySQL版本"><a href="#3-1-查看当前MySQL-Yum-Repository中所有MySQL版本" class="headerlink" title="3.1 查看当前MySQL Yum Repository中所有MySQL版本"></a>3.1 查看当前MySQL Yum Repository中所有MySQL版本</h3><pre><code class="line-numbers language-bash">yum repolist all | grep mysql</code></pre>
<h3 id="3-2-切换版本"><a href="#3-2-切换版本" class="headerlink" title="3.2 切换版本"></a>3.2 切换版本</h3><pre><code class="line-numbers language-bash">sudo yum-config-manager --disable mysql80-community
sudo yum-config-manager --enable mysql57-community

# 如果出现 yum-config-manager找不到命令，安装
yum -y install yum-utils</code></pre>
<h2 id="4-安装MySQL"><a href="#4-安装MySQL" class="headerlink" title="4. 安装MySQL"></a>4. 安装MySQL</h2><pre><code class="line-numbers language-bash">yum install mysql-community-server</code></pre>
<h2 id="5-启停MySQL"><a href="#5-启停MySQL" class="headerlink" title="5. 启停MySQL"></a>5. 启停MySQL</h2><pre><code class="line-numbers language-bash">systemctl start mysqld.service          #启动

systemctl stop mysqld.service          #停止

systemctl restart mysqld.service          #重启

systemctl status mysqld.service          #查看状态</code></pre>
<h2 id="6-修改密码"><a href="#6-修改密码" class="headerlink" title="6. 修改密码"></a>6. 修改密码</h2><h3 id="6-1-初始密码"><a href="#6-1-初始密码" class="headerlink" title="6.1 初始密码"></a>6.1 初始密码</h3><p>MySQL第一次启动后会创建超级管理员账号root@localhost，初始密码存储在日志文件中</p>
<pre><code class="line-numbers language-bash"># grep &#39;temporary password&#39; /var/log/mysqld.log</code></pre>
<h3 id="6-2-修改默认密码"><a href="#6-2-修改默认密码" class="headerlink" title="6.2 修改默认密码"></a>6.2 修改默认密码</h3><p>使用初始密码登录MySQL修改</p>
<pre><code class="line-numbers language-bash"># mysql -uroot -p
mysql&gt; ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;;
ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</code></pre>
<p>出现上面的提示是因为密码太简单了，解决方法如下：</p>
<ul>
<li>使用复杂密码，MySQL默认的密码策略是要包含数字、字母及特殊字符；</li>
<li>如果只是测试用，不想用那么复杂的密码，可以修改默认策略，即validate_password_policy（以及validate_password_length等相关参数），使其支持简单密码的设定，具体方法可以自行百度；</li>
<li>修改配置文件/etc/my.cnf，添加validate_password=OFF，保存并重启MySQL</li>
</ul>
<h2 id="7-允许root远程访问"><a href="#7-允许root远程访问" class="headerlink" title="7. 允许root远程访问"></a>7. 允许root远程访问</h2><pre><code class="line-numbers language-mysql">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39; WITH GRANT OPTION;
mysql&gt; FLUSH PRIVILEGES;</code></pre>
<h2 id="8-设置编码为utf8"><a href="#8-设置编码为utf8" class="headerlink" title="8. 设置编码为utf8"></a>8. 设置编码为utf8</h2><h3 id="8-1-查看编码"><a href="#8-1-查看编码" class="headerlink" title="8.1 查看编码"></a>8.1 查看编码</h3><pre><code class="line-numbers language-bash">mysql&gt; SHOW VARIABLES LIKE &#39;character%&#39;;</code></pre>
<h3 id="8-2-设置编码"><a href="#8-2-设置编码" class="headerlink" title="8.2 设置编码"></a>8.2 设置编码</h3><p>编辑/etc/my.cnf，[mysqld]节点增加以下代码：</p>
<pre><code class="line-numbers language-cnf">[mysqld]
character_set_server=utf8
init-connect=&#39;SET NAMES utf8&#39;</code></pre>
<h2 id="9-设置开机启动"><a href="#9-设置开机启动" class="headerlink" title="9. 设置开机启动"></a>9. 设置开机启动</h2><pre><code class="line-numbers language-bash">systemctl enable mysqld
systemctl daemon-reload</code></pre>
<p>本文参考：<a href="https://juejin.cn/post/6844903870053761037" target="_blank" rel="noopener">https://juejin.cn/post/6844903870053761037</a></p>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH密钥登录突然连不上了</title>
    <url>/p/e3a24a21.html</url>
    <content><![CDATA[<h1 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h1><p>在XShell中使用非root账号(z)密钥登录远程CentOS 7，使用在里面使用su获取root权限一顿软件安装瞎操作。结果导致ssh掉线后无法连接上了。<br>XShell中提示</p>
<pre><code class="line-numbers language-bash">Connecting to 47.114.83.*:22...
Connection established.
To escape to local shell, press &#39;Ctrl+Alt+]&#39;.
Connection closing...Socket close.

Connection closed by foreign host.

Disconnected from remote host(zngw) at 09:39:55.</code></pre>
<h1 id="2-追踪"><a href="#2-追踪" class="headerlink" title="2. 追踪"></a>2. 追踪</h1><p>用的是阿里云，还好可以从后台用VNC使用root账号登录（ssh配置了PermitRootLogin no，且非root账号没设置密码）。<br>登录后直接查看sshd的日志信息 <code>tail /var/log/secure</code></p>
<pre><code class="line-numbers language-bash">May 14 09:45:33 iZbp1h3ipsp19sgo774lxuZ sshd[28106]: Authentication refused: bad ownership or modes for directory /home/z
May 14 09:45:34 iZbp1h3ipsp19sgo774lxuZ sshd[28106]: error: Received disconnect from 122.235.251.68 port 2107:0:  [preauth]
May 14 09:45:34 iZbp1h3ipsp19sgo774lxuZ sshd[28106]: Disconnected from 122.235.*.* port 2107 [preauth]</code></pre>
<h1 id="3-原因"><a href="#3-原因" class="headerlink" title="3. 原因"></a>3. 原因</h1><p>按字面意思就是目录权限配置错误了，检查一下非root用户(z)所在的目录权限，<code>home/z</code>成了775，这就有问题了。</p>
<pre><code class="line-numbers language-bash">drwxrwxr-x 26 z      z      4096 May 14 00:00 z</code></pre>
<ul>
<li>用户目录权限为 755 或者 700，就是不能是77x。</li>
<li>.ssh目录权限一般为755或者700。</li>
<li>rsa_id.pub 及authorized_keys权限一般为644或600</li>
<li>rsa_id权限必须为600</li>
</ul>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>修改目录权限就可以了</p>
<pre><code class="line-numbers language-bash">chmod g-w /home/z
chmod 700 /home/z/.ssh
chmod 600 /home/z/.ssh/authorized_keys</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>U盘安装CentOS出现“could not insert &#39;floppy&#39;</title>
    <url>/p/eb8e5191.html</url>
    <content><![CDATA[<h1 id="一、错误"><a href="#一、错误" class="headerlink" title="一、错误"></a>一、错误</h1><p>用U盘在主机上安装CentOS7的时候,出现了could not insert ‘floppy’: No such deveice 的错误</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/eb8e5191/19826068-9d19b78e99255c86.png" alt></p>
<h1 id="二、-原因"><a href="#二、-原因" class="headerlink" title="二、 原因"></a>二、 原因</h1><p>U盘启动安装的时候,没有正确的找到U盘的镜像所在分区.</p>
<h1 id="三、-解决"><a href="#三、-解决" class="headerlink" title="三、 解决"></a>三、 解决</h1><ul>
<li>在进入安装页面时，根据提示按<code>Tab</code>键进入引导编辑操作。老一点的系统可能是需要按<code>e</code></li>
</ul>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/eb8e5191/19826068-4d175e497994ffad.png" alt></p>
<ul>
<li>将 initrd=initrd.img 到quiet之间的一大串修改为<code>initrd=initrd.img linux dd quiet</code>。回车进入引导系统</li>
</ul>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/eb8e5191/19826068-1a893d515f460e53.png" alt></p>
<ul>
<li><p>这时候依然会进不去，但是，最下面会多出几排信息。在这里可以看到U盘安装镜像所在的盘符，这里为 sdb4。记住这个盘符，重启<br><img src="//gitee.com/guoke3915/zw/raw/master/p/eb8e5191/19826068-ce9bae3a99368f46.png" alt></p>
</li>
<li><p>再次在安装引导页面按<code>Tab</code>进入编辑模式,修改 initrd=initrd.img 到guiet之间。这次修改为 initrd=initrd.img  inst.stage2=hd:/dev/sdb4_quiet。回车进入安装了。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>win下批量复制目录下所有文件夹中的指定文件</title>
    <url>/p/c1132a8e.html</url>
    <content><![CDATA[<h2 id="一、需求"><a href="#一、需求" class="headerlink" title="一、需求"></a>一、需求</h2><p>前面用到了Gradle多渠道打包，打包之后生成的apk文件目录结构如下，但我们需要把apk复制到指定的目录下。</p>
<pre><code class="line-numbers language-txt">outputs\apk
├─common
│  └─release
│          output-metadata.json
│          xrby-common-release.apk
│
├─xianwan
│  └─release
│          output-metadata.json
│          xrby-xianwan-release.apk
│
├─xiaozhuo
│  └─release
│          output-metadata.json
│          xrby-xiaozhuo-release.apk
│
└─zhuanke
    └─release
            output-metadata.json
            xrby-zhuanke-release.apk</code></pre>
<h2 id="二、实现"><a href="#二、实现" class="headerlink" title="二、实现"></a>二、实现</h2><p>写一个bat批处理文件，遍历扫描一遍outputs\apk目录，把对应后缀文件copy出来就可以了。</p>
<pre><code class="line-numbers language-bat">:: 设置apk所在目录
set apk=F:\game\Build\frameworks\runtime-src\proj.android-studio\app\build\outputs\apk
:: 输出目录
set out_path=F:\game\out
:: 需要复制的文件
set outfile=*.apk

cd %apk%
for /f &quot;delims=&quot; %%s in (&#39;dir /b/a-d/s &quot;%apk%&quot;\&quot;%outfile%&quot;&#39;) do (
    copy /y &quot;%%s&quot; %out_path%
)</code></pre>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle多渠道打包</title>
    <url>/p/201e84ac.html</url>
    <content><![CDATA[<h2 id="一、前提"><a href="#一、前提" class="headerlink" title="一、前提"></a>一、前提</h2><p>从程序员角度来说，一个程序一个包不香么，可是运营打包推一波CPL渠道。每个包里的内容都是一样的，只是一个渠道标识不同。</p>
<h2 id="二、分析"><a href="#二、分析" class="headerlink" title="二、分析"></a>二、分析</h2><p>gradle有多渠道打包的<code>productFlavors</code>配置，然后我们可以在<code>AndroidManifest.xml</code>添加一个<code>meta-data</code>变量存储渠道值，通过<code>productFlavors</code>配置打不同包时把不同的参数传过去就行了，最后在java中读取对应的渠道值。</p>
<h2 id="三、步骤"><a href="#三、步骤" class="headerlink" title="三、步骤"></a>三、步骤</h2><h3 id="1、修改AndroidManifest-xml配置"><a href="#1、修改AndroidManifest-xml配置" class="headerlink" title="1、修改AndroidManifest.xml配置"></a>1、修改<code>AndroidManifest.xml</code>配置</h3><p>打开工程目录的<code>AndroidManifest.xml</code>配置，在<code>&lt;application&gt;</code>标签内添加 CHANNEL属性。</p>
<pre><code class="line-numbers language-xml">
&lt;application
        android:allowBackup=&quot;true&quot;
        android:label=&quot;@string/app_name&quot;
        android:usesCleartextTraffic=&quot;true&quot;
        android:icon=&quot;@mipmap/ic_launcher&quot;
        android:networkSecurityConfig=&quot;@xml/network_security_config&quot;
        android:extractNativeLibs=&quot;true&quot;
        tools:targetApi=&quot;n&quot;&gt;

        &lt;meta-data android:name=&quot;android.app.lib_name&quot;
                   android:value=&quot;cocos2djs&quot; /&gt;

        &lt;meta-data android:name=&quot;CHANNEL&quot;
            android:value=&quot;${CHANNEL_VALUE}&quot; /&gt;

...
    &lt;/application&gt;</code></pre>
<h3 id="2-配置gradle"><a href="#2-配置gradle" class="headerlink" title="2. 配置gradle"></a>2. 配置gradle</h3><p>找开主工程中的<code>build.gradle</code>（cocos creator工程是app目录下的build.gradle）。在<code>android {}</code>添加<code>productFlavors</code>属性。最后将属性设置到<code>AndroidManifest.xml</code>中的<code>CHANNEL_VALUE</code>变量中。</p>
<pre><code class="line-numbers language-gradle">android {
    ...
    productFlavors{
        common{}  // 官包
        xianwan{}  // 闲玩
        xiaozhuo{}  // 小啄
        zhuanke{}  // 赚客
        ...
    }
    productFlavors.all { flavor -&gt;
        flavor.manifestPlaceholders = [CHANNEL_VALUE: name]
    }
    ...
}</code></pre>
<h3 id="3-java中读取meta-data值"><a href="#3-java中读取meta-data值" class="headerlink" title="3. java中读取meta-data值"></a>3. java中读取<code>meta-data</code>值</h3><p>加一个读取<code>application</code>中<code>meta-data</code>的方法</p>
<pre><code class="line-numbers language-java">     /**
     * 获取app当前的渠道号或application中指定的meta-data * *
     * @return 如果没有获取成功(没有对应值，或者异常)，则返回值为空
     */
    public static String getAppMetaData(Context context, String key) {
        if (context == null || TextUtils.isEmpty(key)) {
            return null;
        }
        String value= null;
        try {
            PackageManager packageManager = context.getPackageManager();
            if (packageManager != null) {
                ApplicationInfo applicationInfo = packageManager.getApplicationInfo(context.getPackageName(), PackageManager.GET_META_DATA);
                if (applicationInfo != null) {
                    if (applicationInfo.metaData != null) {
                        value= applicationInfo.metaData.getString(key);
                    }
                }
            }
        } catch (PackageManager.NameNotFoundException e) {
            e.printStackTrace();
        }
        return value;
    }</code></pre>
<p>在需要用到的时候。</p>
<pre><code class="line-numbers language-java">getAppMetaData(appActivity,&quot;CHANNEL&quot;)</code></pre>
<h3 id="4-打包"><a href="#4-打包" class="headerlink" title="4. 打包"></a>4. 打包</h3><p>可以直接用gradlew直接打包所有渠道的包</p>
<pre><code class="line-numbers language-bat">gradlew clean :assembleRelease</code></pre>
]]></content>
      <categories>
        <category>Cocos2d-JS</category>
      </categories>
      <tags>
        <tag>Cocos2djs</tag>
      </tags>
  </entry>
  <entry>
    <title>CososCreator升级gradle版本</title>
    <url>/p/af0b027f.html</url>
    <content><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>Cocos Creator 2.4.3</li>
<li>Android Studio 4.1.3</li>
<li>Gradle 6.5(插件4.1.3)</li>
</ul>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="1-原始版本"><a href="#1-原始版本" class="headerlink" title="1. 原始版本"></a>1. 原始版本</h3><p>Cocos Creator 2.4.3打包的Android工程中gradle版本是4.10.3(插件3.2.0)</p>
<h3 id="2-修改gradle版本号"><a href="#2-修改gradle版本号" class="headerlink" title="2. 修改gradle版本号"></a>2. 修改gradle版本号</h3><p>用Android Studio打开Cocos Creator生成的Android工程，点文件-&gt;Project Structure , 在Project Structure面板中选择Project。在右侧直接输入 Gradle和插件的版本号。确定后Android Studio会自为下载对应的版本。<br><img src="//gitee.com/guoke3915/zw/raw/master/p/af0b027f/19826068-cb878a57a182379a.png" alt></p>
<h3 id="3-修改setting-gradle配置"><a href="#3-修改setting-gradle配置" class="headerlink" title="3. 修改setting.gradle配置"></a>3. 修改setting.gradle配置</h3><p>文件路径：</p>
<pre><code>jsb-default/frameworks/runtime-src/proj.android-studio/setting.gradle</code></pre><p>修改前 ：</p>
<pre><code>include &#39;:libcocos2dx&#39;,&#39;:game&#39;, &#39;:instantapp&#39;</code></pre><p>修改后：</p>
<pre><code>include &#39;:libcocos2dx&#39;</code></pre><p>修改原因：不需要game，用不到 这个模块是给Google Instant使用的，也可以直接屏蔽对应模块。</p>
<h3 id="4-修改-CocosAndroid-mk"><a href="#4-修改-CocosAndroid-mk" class="headerlink" title="4. 修改 CocosAndroid.mk"></a>4. 修改 CocosAndroid.mk</h3><p>文件路径：</p>
<pre><code>jsb-default/frameworks/runtime-src/proj.android-studio/jni/CocosAndroid.mk</code></pre><p>修改前 ：</p>
<pre><code>LOCAL_MODULE := cocos2djs_shared</code></pre><p>修改后：</p>
<pre><code>LOCAL_MODULE := cocos2djs</code></pre><p>修改原因：Android Studio Build的时候报错，找不到target “cocos2djs”</p>
<h3 id="5-修改app-build-gradle"><a href="#5-修改app-build-gradle" class="headerlink" title="5. 修改app/build.gradle"></a>5. 修改app/build.gradle</h3><p>文件路径：</p>
<pre><code>jsb-default/frameworks/runtime-src/proj.android-studio/app/build.gradle</code></pre><p>修改前 ：</p>
<pre><code>android.applicationVariants.all { variant -&gt;
    // delete previous files first
    delete &quot;${buildDir}/intermediates/merged_assets/${variant.dirName}&quot;

    variant.mergeAssets.doLast {
        def sourceDir = &quot;${buildDir}/../../../../..&quot;

        copy {
            from &quot;${sourceDir}/assets&quot;
            into &quot;${outputDir}/assets&quot;
        }

        copy {
            from &quot;${sourceDir}/src&quot;
            into &quot;${outputDir}/src&quot;
        }

        copy {
            from &quot;${sourceDir}/jsb-adapter&quot;
            into &quot;${outputDir}/jsb-adapter&quot;
        }

        copy {
            from &quot;${sourceDir}/main.js&quot;
            from &quot;${sourceDir}/project.json&quot;
            into outputDir
        }
    }
}</code></pre><p>修改后：</p>
<pre><code>android.applicationVariants.all { variant -&gt;
    // delete previous files first
    delete &quot;${buildDir}/intermediates/merged_assets/${variant.dirName}&quot;
       //修改 报警错误 API &#39;variant.getMergeAssets()&#39; is obsolete and has been replaced with &#39;variant.getMergeAssetsProvider()&#39;.It will be removed at the end of 2019.                          
//  variant.mergeAssets.doLast {
    variant.mergeAssetsProvider.get().doLast{
        def sourceDir = &quot;${buildDir}/../../../../..&quot;

        copy {
            from &quot;${sourceDir}/assets&quot;
            into &quot;${outputDir}/assets&quot;
            into outputDir.dir(&quot;assets&quot;)
        }

        copy {
            from &quot;${sourceDir}/src&quot;
            into &quot;${outputDir}/src&quot;
            into outputDir.dir(&quot;src&quot;)
        }

        copy {
            from &quot;${sourceDir}/jsb-adapter&quot;
            into &quot;${outputDir}/jsb-adapter&quot;
            into outputDir.dir(&quot;jsb-adapter&quot;)
        }

        copy {
            from &quot;${sourceDir}/main.js&quot;
            from &quot;${sourceDir}/project.json&quot;
            into outputDir
        }
    }
}</code></pre><p>修改原因：资源复制丢失。基本上就是把 <code>into &quot;${outputDir}/x&quot;</code> 改成 <code>into outputDir.dir(&quot;x&quot;)</code></p>
<p>本文参考：<a href="https://forum.cocos.org/t/topic/103837" target="_blank" rel="noopener">https://forum.cocos.org/t/topic/103837</a></p>
]]></content>
      <categories>
        <category>Cocos2d-JS</category>
      </categories>
      <tags>
        <tag>Cocos2djs</tag>
      </tags>
  </entry>
  <entry>
    <title>APK瘦身属性——android:extractNativeLibs</title>
    <url>/p/9ae2e6f4.html</url>
    <content><![CDATA[<h2 id="一、前提"><a href="#一、前提" class="headerlink" title="一、前提"></a>一、前提</h2><p>因为Android 11微信登录的问题，将gradle升级到了3.6.0版本，结果原本一个60M左右的包打完之后成了90多M。</p>
<h2 id="二、分析"><a href="#二、分析" class="headerlink" title="二、分析"></a>二、分析</h2><p>用rar软件打开apk包，对比了老包后发现，新包中用到的lib下<code>libcocos2djs.so</code>压缩算法为Store(存储模式，无压缩)。后面在网上找了一些资料，发现在gradle版本比较高的时候，<code>android:extractNativeLibs</code>的默认值发生了改变。</p>
<ul>
<li><code>minSdkVersion &lt; 23 或 Android Gradle plugin &lt; 3.6.0</code>情况下，打包时 <code>android:extractNativeLibs=true</code>；</li>
<li><code>minSdkVersion &gt;= 23 并且 Android Gradle plugin &gt;= 3.6.0</code>情况下，打包时<code>android:extractNativeLibs=false</code>；</li>
</ul>
<h2 id="三、解决办法"><a href="#三、解决办法" class="headerlink" title="三、解决办法"></a>三、解决办法</h2><p>在主工程的AndroidManifest.xml配置中，找到<application>标签，添加<code>android:extractNativeLibs=true</code>属性即可。<br>如CocosCreator的工程中</application></p>
<pre><code class="line-numbers language-xml">&lt;application
        android:allowBackup=&quot;true&quot;
        android:label=&quot;@string/app_name&quot;
        android:usesCleartextTraffic=&quot;true&quot;
        android:icon=&quot;@mipmap/ic_launcher&quot;
        android:extractNativeLibs=&quot;true&quot;
        tools:targetApi=&quot;n&quot;&gt;</code></pre>
<p>本文参考：<a href="https://www.cnblogs.com/xiaxveliang/p/14583802.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaxveliang/p/14583802.html</a></p>
]]></content>
      <categories>
        <category>Cocos2d-JS</category>
      </categories>
      <tags>
        <tag>Cocos2djs</tag>
      </tags>
  </entry>
  <entry>
    <title>android 11 上配置微信授权</title>
    <url>/p/cc4d381f.html</url>
    <content><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>游戏SDK用了一段时间没更新过了， 结果在Android 11上是使用微信登录进拉不起来，点过去没有反应，后面查了一下<a href="https://developers.weixin.qq.com/doc/oplatform/Mobile_App/Access_Guide/Android.html#jump2" target="_blank" rel="noopener">微信文档</a>，需要在工程<code>AndroidManifest.xml</code>中配置授权。</p>
<h2 id="修改步骤"><a href="#修改步骤" class="headerlink" title="修改步骤"></a>修改步骤</h2><h3 id="1-在主工程的AndroidManifest-xml-中增加-标签"><a href="#1-在主工程的AndroidManifest-xml-中增加-标签" class="headerlink" title="1. 在主工程的AndroidManifest.xml 中增加  标签"></a>1. 在主工程的<code>AndroidManifest.xml</code> 中增加 <queries> 标签</queries></h3><pre><code class="line-numbers language-xml">&lt;manifest package=&quot;com.example.app&quot;&gt;
      ...
      // 在应用的AndroidManifest.xml添加如下&lt;queries&gt;标签
    &lt;queries&gt;
        &lt;package android:name=&quot;com.tencent.mm&quot; /&gt;   // 指定微信包名
    &lt;/queries&gt;
      ...
&lt;/manifest&gt;</code></pre>
<h2 id="2-环境要求"><a href="#2-环境要求" class="headerlink" title="2. 环境要求"></a>2. 环境要求</h2><p>添加<queries>标签后，一些开发环境也要更新。</queries></p>
<ul>
<li>Android Studio 需要<strong>升级至 3.3 及以上，建议升级至 4.0 及以上版本</strong></li>
<li>Android SDK Build-Tools 需要<strong>升级至 30 及以上版本</strong></li>
<li>gradle 需要<strong>升级至 3.6.0 版本，建议升级至最新的 3.6.4 版本</strong></li>
</ul>
<h2 id="附"><a href="#附" class="headerlink" title="附"></a>附</h2><p>随便说一下，如果有支付宝支付的，也需要添加对应的权限。</p>
<pre><code class="line-numbers language-xml">&lt;manifest package=&quot;com.example.app&quot;&gt;
    ...
    // 在应用的AndroidManifest.xml添加如下&lt;queries&gt;标签
    &lt;queries&gt;
        //微信包名
        &lt;package android:name=&quot;com.tencent.mm&quot; /&gt;
        //支付宝包名
        &lt;package android:name=&quot;com.eg.android.AlipayGphone&quot; 
    &lt;/queries&gt;
  ...
&lt;/manifest&gt;</code></pre>
]]></content>
      <categories>
        <category>Cocos2d-JS</category>
      </categories>
      <tags>
        <tag>Cocos2djs</tag>
      </tags>
  </entry>
  <entry>
    <title>宝马车钥匙无电开锁车</title>
    <url>/p/9ff7360c.html</url>
    <content><![CDATA[<p>新版的宝马可以用手机遥控开锁车了，但是对于老一丢丢的版本还是不行的。前几天车提示“电池电量不足，请更换电池的提示没太注意”。今天把车开出去后发现没电了，只能用钥匙机械锁车了和开车了。</p>
<h2 id="一、锁车"><a href="#一、锁车" class="headerlink" title="一、锁车"></a>一、锁车</h2><ol>
<li><p>把钥匙贴在方向盘下方的钥匙图标的位置。</p>
</li>
<li><p>看仪表盘提示，识别钥匙成功后，不踩刹车，按一键启动，启动行车电脑。</p>
</li>
<li><p>关闭所有的车门，按驾驶室车门上的落锁按钮，锁定所有车门和后背箱。</p>
</li>
<li><p>按一键启动熄火关闭行车电脑</p>
</li>
<li><p>开驾驶室门，走出车辆，关门。此时，除了驾驶室的门外，其他门都已经锁好了。</p>
</li>
<li><p>按住钥匙侧边的按钮，取出机械钥匙。</p>
</li>
<li><p>装机械钥匙插进驾驶室门把手下面的小孔，插到底，用边向上一撬，将门把手上的盖子拆下。</p>
</li>
<li><p>把机械钥匙插入钥匙孔，损顺针转到1/4圈左右就可以锁车了。</p>
</li>
<li><p>取出钥匙，装上门把手上的盖子。完成锁车。</p>
</li>
</ol>
<h2 id="二、开车"><a href="#二、开车" class="headerlink" title="二、开车"></a>二、开车</h2><ol>
<li><p>按住钥匙侧边的按钮，取出机械钥匙。</p>
</li>
<li><p>装机械钥匙插进驾驶室门把手下面的小孔，插到底，用边向上一撬，将门把手上的盖子拆下。</p>
</li>
<li><p>把机械钥匙插入钥匙孔，损逆针转到1/4圈左右就可以开锁。</p>
</li>
<li><p>打开驾驶室车门上车。</p>
</li>
<li><p>把钥匙贴在方向盘下方的钥匙图标的位置。</p>
</li>
<li><p>看仪表盘提示，识别钥匙成功后，踩刹车，按一键启动，启动车辆。</p>
</li>
<li><p>这里要注意一下，如果是遥控器锁车并开启了安全报警，直接用机械钥匙开锁后可能会触发报警，但启动后报警会消失。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Win中一键打包Cocos Creator安卓包</title>
    <url>/p/2fff9116.html</url>
    <content><![CDATA[<h1 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h1><p>　　在Cocos Creator的安卓的项目中，一般会在安卓层加入一些登录、支付、统计等第三方SDK，所以不能用Cocos Creator直接编译生成apk，一般的操作会先用Cocos Creator生成一个安卓工程，然后将安卓工程复制到另一个目录，然后安卓工程添加所需要的功能，再用Android Studio来打包apk。需要用到资源更新时，用Cocos Creator生成资源，再复制到新的安卓工程对应的资源中。  这一系列的操作每次打包都有些繁琐，但可以用脚本来完成。</p>
<ul>
<li><ol>
<li>使用CocosCreator参数构建资源</li>
</ol>
</li>
<li><ol start="2">
<li>生成热更文件</li>
</ol>
</li>
<li><ol start="3">
<li>使用js脚本用熊猫在线压缩图片</li>
</ol>
</li>
<li><ol start="4">
<li>gradlew命令行打包apk</li>
</ol>
</li>
</ul>
<h1 id="二、环境"><a href="#二、环境" class="headerlink" title="二、环境"></a>二、环境</h1><ul>
<li>Cocos Creator 2.4.3： 安装目录为 <code>D:\CocosDashboard\resources\.editors\Creator\2.4.3\CocosCreator.exe</code></li>
<li>SVN：安装了命令行模式，并添加到环境变量中</li>
<li>node</li>
</ul>
<h1 id="三、步骤"><a href="#三、步骤" class="headerlink" title="三、步骤"></a>三、步骤</h1><h2 id="1-整个项目的目录布局"><a href="#1-整个项目的目录布局" class="headerlink" title="1. 整个项目的目录布局"></a>1. 整个项目的目录布局</h2><pre><code class="line-numbers language-bat">项目根目录
├─AutoCosos                    # cocos项目
│  │  
│  ├─assets                        # cocos资源
│  │  │  Scene.meta
│  │  │  Script.meta
│  │  │  Texture.meta
│  │  ├─resources                     # 所有资源文件目录
│  │  │  │  project.manifest        # 更热比对文件
│  │  │  │  project.manifest.meta
│  │  │  │  version.manifest        # 更热版本文件
│  │  │  │  version.manifest.meta
│  │  │  └─Texture                  # 资源图片文目录
│  │  │
│  │  ├─Scene                     # 场景资源
│  │  └─Script                    # 脚本文件
│  │          
│  ├─build                        # cocos 打包资源目录
│  │  └─jsb-link
│
├─Build                            # 复制出来的安卓工程(从cocos项目-&gt;build-&gt;jsb-link复制)
│  │  .cocos-project.json
│  │  cocos-project-template.json
│  │  main.js
│  │  project.json
│  │  
│  ├─assets
│  ├─frameworks
│  ├─jsb-adapter
│  └─src
│          
└─Distribute                    # 一键打包脚本目录
        config.ini                # 打包配置文件
        tinypng.js                # 压缩图片js脚本
        version_generator.js     # 热更文件生成js脚本
        一键打包.bat</code></pre>
<h2 id="2-配置文件说明"><a href="#2-配置文件说明" class="headerlink" title="2. 配置文件说明"></a>2. 配置文件说明</h2><p>在发布目录下有一个config.ini的打包配置文件</p>
<pre><code class="line-numbers language-ini">; 注意，&#39;=&#39;号二边不要加空格
[Common]

; 版本号说明，版本号格式为x.y.z。 
; x:大版本号，一般大改动时加一
; y:次版本号，一般改动后无法热更解决时加一
; z:修订版本号。自动获取，游戏版本为打包日期，资源版本为git/svn版本号，如无版本管理则用0

;游戏版本号
version=1.0

;资源版本号
res=1.0

;版本管理 none-无版本管理，git，svn
vc=git

;热更地址
update=https://dev.zengwu.com.cn/hello_world</code></pre>
<h2 id="3-调整gradlew工程版本号"><a href="#3-调整gradlew工程版本号" class="headerlink" title="3. 调整gradlew工程版本号"></a>3. 调整gradlew工程版本号</h2><p>修改 安卓工程下的<code>proj.android-studio\app</code>目录中的<code>build.gradle</code>文件，使用安卓的版本号可以通过命令行传入。</p>
<pre><code class="line-numbers language-gradle">import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: &#39;com.android.application&#39;

// 新增代码
def vc = 1          // 从android studio进入时调试版本
def vn = &quot;1.0&quot;  // 从android studio进入时调试版本
if (project.hasProperty(&#39;VersionName&#39;)) {
    vn = &quot;${VersionName}&quot;
}

if (project.hasProperty(&#39;VersionCode&#39;)) {
    vc = &quot;${VersionCode}&quot;.toInteger()
}
// 新增代码结束

android {
    compileSdkVersion PROP_COMPILE_SDK_VERSION.toInteger()
    buildToolsVersion PROP_BUILD_TOOLS_VERSION

    defaultConfig {
        applicationId &quot;com.zngw.autococos&quot;
        minSdkVersion PROP_MIN_SDK_VERSION
        targetSdkVersion PROP_TARGET_SDK_VERSION
        versionCode vc    // 修改为前面的vc变量
        versionName vn // 修改为前面的vn变量
...
其余代码未调整</code></pre>
<h2 id="4-完整打包脚本"><a href="#4-完整打包脚本" class="headerlink" title="4. 完整打包脚本"></a>4. 完整打包脚本</h2><pre><code class="line-numbers language-bat">@echo off

::============= 打包时调整配置 ======================
:: 版本号说明，版本号格式为x.y.z。 
:: x:大版本号，一般大改动时加一
:: y:次版本号，一般改动后无法热更解决时加一
:: z:修订版本号。自动获取，游戏版本为打包日期，资源版本为svn版本号

:: 游戏版本号
set version=
:: 资源版本号
set res=
:: 热更地址
set update=
:: 版本管理
set vc=

call:readini Common version version
call:readini Common res res
call:readini Common update update
call:readini Common vc vc

set buildType=%1

::============= 环境及目录配置 ======================
:: 脚本所在目录
set root_path=%~dp0
:: 工程目录
set project_path=%root_path%..\Build\frameworks\runtime-src\proj.android-studio\
:: 资源目录
set assets_path=%root_path%..\AutoCosos

:: 工程名
set project_name=hello_world
:: 进入资源目录，找到进入文件对应的meta文件，找到里面的uuid填入startScene
set startScene=2d2f792f-a40c-49bb-a189-ed176a246e49
:: 项目中更热比对文件路径
set projectFile=%assets_path%\build\jsb-link\assets\resources\native\6c\6c72e2ae-37ff-4587-801b-6aa4aff1b0a4.manifest
:: 项目中更热版本文件路径
set versionFile=%assets_path%\build\jsb-link\assets\resources\native\06\066c7e06-dfd7-4527-ba79-a795e3b282c1.manifest 

:: cocos creator 程序所在。增加系统环境变理CcPATH:D:\CocosDashboard\resources\.editors\Creator
set cc=D:\CocosDashboard\resources\.editors\Creator\2.4.3\CocosCreator.exe
:: 生成文件
set apk=%project_path%\app\build\outputs\apk\release\%project_name%-release.apk
:: 输出目录
set out_path=%root_path%out
if not exist %out_path% md %out_path%


::============= 获取本地svn版本号为VersionCode版本 ======================
set code=0
if &quot;%vc%&quot; == &quot;svn&quot; (
    :: SVN Version
    for /f &quot;delims=&quot; %%i in (&#39;svn info ../ ^| findstr &quot;Rev:&quot;&#39;) do set rev=%%i
    set code=%rev:~18%
) else if &quot;%vc%&quot; == &quot;git&quot; (
    for /f %%i in (&#39;git rev-list HEAD --count&#39;) do set code=%%i
)
echo %code%

::============= 输出打包配置信息 ======================
:: 完成详细的版本号
set date=%date:~0,4%%date:~5,2%%date:~8,2%
set version=%version%.%date%
set res=%res%.%code%

:: 输出打包信息
echo 当前打包版本号为：%version% svn版本号： %code%

::============= 打包流程 ======================
:: 打包流程
:main

:: 1. 构建资源
call:ccBuild

:: 2. 生成热更文件
call:hotUpdate

:: 3. 复制资源文件
:: 脚本这里这复制assets、jsb-adapter、src这个目录的资源，main.js热更时会修改，调整后需要手动复制，脚本不自动复制
xcopy /q /s /y %assets_path%\build\jsb-link\assets %root_path%..\Build\assets
xcopy /q /s /y %assets_path%\build\jsb-link\src %root_path%..\Build\src
xcopy /q /s /y %assets_path%\build\jsb-link\jsb-adapter %root_path%..\Build\jsb-adapter

:: 4. 压缩图片
call:tinypng

:: 5. 遍历打包
call:buildApk

:: 6. 复制资源到打包目录，用于热更等
xcopy /q /s /y %root_path%..\Build\assets %out_path%\%res%\assets\
xcopy /q /s /y %root_path%..\Build\src %out_path%\%res%\src\

goto finish

::============= 以下是步骤函数 ======================
:: 读取ini配置. %~1:域，%~2:key %~3:返回的value值
:readini 
@setlocal enableextensions enabledelayedexpansion
@echo off
set file=config.ini
set area=[%~1]
set key=%~2
set currarea=
for /f &quot;usebackq delims=&quot; %%a in (&quot;!file!&quot;) do (
    set ln=%%a
    if &quot;x!ln:~0,1!&quot;==&quot;x[&quot; (
        set currarea=!ln!
    ) else (
        for /f &quot;tokens=1,2 delims==&quot; %%b in (&quot;!ln!&quot;) do (
            set currkey=%%b
            set currval=%%c
            if &quot;x!area!&quot;==&quot;x!currarea!&quot; (
                if &quot;x!key!&quot;==&quot;x!currkey!&quot; (
                    set var=!currval!
                )
            )
        )
    )
)
(endlocal
    set &quot;%~3=%var%&quot;
)
goto:eof

::============= Cocos Creator构建资源======================
:ccBuild
echo 开始打包资源:%assets_path%
%cc% --path %assets_path% --build &quot;title=%project_name%;platform=android;buildPath=./build;startScene=%startScene%;encryptJs=true;inlineSpriteFrames=true;template=link;md5Cache=false&quot;
echo 打包资源完成
goto:eof

::============= 生成热更文件 ======================
:hotUpdate
echo 开始生成热更文件
if exist %out_path%\%res% (
    rd /s /q %out_path%\%res%
    md %out_path%\%res%
)

node version_generator.js -v %res% -u %update% -s %assets_path%/build/jsb-link/ -d %out_path%\%res%
echo copy /y %out_path%\%res%\project.manifest %projectFile%  
copy /y %out_path%\%res%\project.manifest %projectFile%  
copy /y %out_path%\%res%\version.manifest %versionFile%
echo 热更文件成生完成
goto:eof

::============= 压缩图片 ======================
:tinypng
echo 压缩图片
node ./tinypng.js -f %root_path%../Build/assets/resources/native -deep
goto:eof
::=============   gradle打包   ======================
:: 单渠道打包函数
:buildApk
echo 正在打包...
cd %project_path%

::call gradlew clean :%project_name%:assembleRelease -PVersionName=%version% -PVersionCode=%code%
call gradlew :%project_name%:assembleRelease -PVersionName=%version% -PVersionCode=%code%
if %errorlevel% == 1 (
    call:fail
)

set out=%out_path%\%project_name%.v%version%.apk
copy /y %apk% %out%
cd %root_path%

echo 打包完成

goto:eof

:: 失败
:fail
echo 打包失败
pause
exit 1

:: 完成
:finish
echo 完成打包
pause
::exit</code></pre>
<h2 id="4-脚本中环境配置"><a href="#4-脚本中环境配置" class="headerlink" title="4. 脚本中环境配置"></a>4. 脚本中环境配置</h2><p>在脚本中需要配置一些环境遍变。</p>
<h3 id="资源目录"><a href="#资源目录" class="headerlink" title="资源目录"></a>资源目录</h3><p>这里可以使用相对路径，先获取脚本所在的目录，然后设置cocos项目的相对路径，如：</p>
<pre><code class="line-numbers language-bat">set assets_path=%root_path%..\AutoCosos</code></pre>
<h3 id="工程名"><a href="#工程名" class="headerlink" title="工程名"></a>工程名</h3><p>项目名为Cocos Creator构建发布时的<code>游戏名称</code>，如：</p>
<pre><code class="line-numbers language-bat">set project_name=hello_world</code></pre>
<h3 id="startScene场景名"><a href="#startScene场景名" class="headerlink" title="startScene场景名"></a>startScene场景名</h3><p>找到Cocos Creator构建发布时的<code>初始场景</code>中的.fire文件，并前往所在目录，找到同名.fire.meta的文件，用文本编辑器打开，找到uuid。如：helloworld.fire.meta文件中的<code>uuid为2d2f792f-a40c-49bb-a189-ed176a246e49</code></p>
<pre><code class="line-numbers language-bat">set startScene=2d2f792f-a40c-49bb-a189-ed176a246e49</code></pre>
<h3 id="热更版本文件发布后路径"><a href="#热更版本文件发布后路径" class="headerlink" title="热更版本文件发布后路径"></a>热更版本文件发布后路径</h3><p>在Cocos Creator项目中，装版本更热更文件project.manifest、 version.manifest放在了assets/resources目录下，找到对应的.meta文件，打开取出对应的uuid值。然后设置版本文件的路径，这个目录前面为 build\jsb-link\assets\resources\native，后面为uuid前二位的目录，再接uuid.manifest的文件名。如：</p>
<pre><code class="line-numbers language-bat">:: 项目中更热比对文件路径
set projectFile=%assets_path%\build\jsb-link\assets\resources\native\6c\6c72e2ae-37ff-4587-801b-6aa4aff1b0a4.manifest
:: 项目中更热版本文件路径
set versionFile=%assets_path%\build\jsb-link\assets\resources\native\06\066c7e06-dfd7-4527-ba79-a795e3b282c1.manifest </code></pre>
<h1 id="四、打包测试"><a href="#四、打包测试" class="headerlink" title="四、打包测试"></a>四、打包测试</h1><p>直接双击运行<code>一键打包.bat</code>就可以了。  等待生成完成，生成的文件会在脚本所在目录的out目录中</p>
<pre><code class="line-numbers language-bat"> out
    │  hello_world.v1.0.20210314.apk  # 生成apk
    │  
    └─1.0.1                           # 生成资源目录
        │  project.manifest
        │  version.manifest
        │  
        ├─assets
        └─src</code></pre>
<h1 id="附："><a href="#附：" class="headerlink" title="附："></a>附：</h1><p>完整的测试项目下载 <a href="https://github.com/zngw/auto-cocos" target="_blank" rel="noopener">https://github.com/zngw/auto-cocos</a></p>
]]></content>
      <categories>
        <category>Cocos2d-JS</category>
      </categories>
      <tags>
        <tag>Cocos2djs</tag>
      </tags>
  </entry>
  <entry>
    <title>KPL 2021 春季赛</title>
    <url>/p/kpl2021c.html</url>
    <content><![CDATA[<h1 id="赛制"><a href="#赛制" class="headerlink" title="赛制"></a>赛制</h1><p>王者荣耀职业联赛（KPL）2021年将采用新赛制，赛制如下：</p>
<h3 id="季前赛（仅2021春季赛设立）"><a href="#季前赛（仅2021春季赛设立）" class="headerlink" title="季前赛（仅2021春季赛设立）"></a><strong>季前赛</strong>（仅2021春季赛设立）</h3><ul>
<li>季前赛于3月中旬开始，届时将根据季前赛成绩把16支战队分入S组、A组、B组（MTG直接进入B组）。</li>
<li>季前赛赛制为X、Y组分别各自进行组内单循环BO3（全局BP制）积分赛，每组前3进春季赛S组、4至6名进A组、7至8名和MTG进B组。</li>
<li>如果出现队伍胜场相同，则根据队伍净胜局数的多少来决定排名。</li>
<li>如果队伍出现积分、净胜局相同则根据涉及队伍间的胜负关系情况决定排名。</li>
<li>如果存在多个队伍出现同排名则按以下方法进行加赛：<ol>
<li>三队同排名：进行BO1（一局定胜负）单循环赛，直至在单循环中决出三支队伍名次，若未决出则重新进行一轮单循环。</li>
<li>四队同排名：进行抽签并进行BO1单败淘汰，第一轮对阵中两位胜方及两位败方分别进下一轮BO1淘汰，第二轮中，胜者组决定第一二名，败者组决定第三四名。</li>
<li>五队同排名：进入BO1单循环，若出现同排名的情况则同分队伍相应同排名规则进行加赛。</li>
<li>六队同排名：进行抽签并进行BO1单败淘汰，第一轮胜者为前三，第一轮败者为后三名。第二轮分别按三队同排名规则进行BO1单循环，直至在单循环中决出三个队伍名次，若未决出排名则重新进出一轮循环。</li>
</ol>
</li>
</ul>
<h3 id="常规赛"><a href="#常规赛" class="headerlink" title="常规赛"></a><strong>常规赛</strong></h3><ul>
<li>常规赛将进行三轮分组组内单循环赛：<ol>
<li>第一轮结束后按组内排名直接升降换位；</li>
<li>第二轮组内单循环结束后，按组内排名进行卡位赛，卡位赛结束后，位列B组的战队淘汰</li>
<li>第三轮进行S组与A组的组内单循环，结束后按组内排名确定季后赛席位，S组全组及A组前四将晋级季后赛</li>
</ol>
</li>
</ul>
<h3 id="季后赛"><a href="#季后赛" class="headerlink" title="季后赛"></a><strong>季后赛</strong></h3><ul>
<li>季后赛赛程从2周扩至3周，赛制暂不变</li>
</ul>
<h1 id="季前赛"><a href="#季前赛" class="headerlink" title="季前赛"></a>季前赛</h1><ul>
<li>季前赛于3月中旬开始，以2020秋季赛成绩把16支队伍分成S档（6支），A档（6支），B档（4支）</li>
<li>将三档的队伍平均分配进入X组和Y组（每组各有3支S档队伍，3支A档队伍和2支B档队伍），两组分别进行组内单循环，BO3(全局BP赛制）</li>
<li>每组前3名晋级常规赛S组，第4名-第6名晋级常规赛A组，第7名-第8名晋级常规赛B组（MTG直接进入B组）</li>
</ul>
<table>
<thead>
<tr>
<th align="center">队伍</th>
<th align="center">全名</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">深圳DYG</td>
<td align="center">DouYu Gaming</td>
<td align="center">2020秋季赛冠军</td>
</tr>
<tr>
<td align="center">成都AG超玩会</td>
<td align="center">All Gamers</td>
<td align="center">2020秋季赛亚军</td>
</tr>
<tr>
<td align="center">杭州LGD大鹅</td>
<td align="center">Legend Gaming</td>
<td align="center">2020秋季赛季军</td>
</tr>
<tr>
<td align="center">北京WB</td>
<td align="center">WeiBo</td>
<td align="center">2020秋季赛殿军</td>
</tr>
<tr>
<td align="center">南京Hero久竞</td>
<td align="center">Hero Jiu Jing</td>
<td align="center">2020秋季赛第五名</td>
</tr>
<tr>
<td align="center">广州TTG</td>
<td align="center">Talent Gaming</td>
<td align="center">2020秋季赛第五名</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">队伍</th>
<th align="center">全名</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">重庆QG.Happy</td>
<td align="center">Quantum Gaming</td>
<td align="center">2020秋季赛第七名</td>
</tr>
<tr>
<td align="center">RNG.M</td>
<td align="center">Royal Never Give Up</td>
<td align="center">2020秋季赛第七名</td>
</tr>
<tr>
<td align="center">佛山GK</td>
<td align="center">Gank Gaming</td>
<td align="center">2020秋季赛第九名</td>
</tr>
<tr>
<td align="center">武汉eStarPro</td>
<td align="center">eStarPro</td>
<td align="center">2020秋季赛第九名</td>
</tr>
<tr>
<td align="center">西安WE</td>
<td align="center">Team WE</td>
<td align="center">2020秋季赛常规赛第十一名</td>
</tr>
<tr>
<td align="center">VG</td>
<td align="center">Vici Gaming</td>
<td align="center">2020秋季赛常规赛第十二名</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">队伍</th>
<th align="center">全名</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">TES</td>
<td align="center">Top ESports</td>
<td align="center">2020秋季赛常规赛第十三名</td>
</tr>
<tr>
<td align="center">RW侠</td>
<td align="center">Rogue Warriors</td>
<td align="center">2020秋季赛常规赛第十四名</td>
</tr>
<tr>
<td align="center">上海EDG.M</td>
<td align="center">Edward Gaming</td>
<td align="center">2020秋季赛常规赛第十五名</td>
</tr>
<tr>
<td align="center">KSG</td>
<td align="center">KuaiShow Gaming</td>
<td align="center">2020秋季赛常规赛第十六名</td>
</tr>
</tbody></table>
<h2 id="季前赛积分表"><a href="#季前赛积分表" class="headerlink" title="季前赛积分表"></a>季前赛积分表</h2><table>
<thead>
<tr>
<th align="center">排名</th>
<th align="center">X组战队</th>
<th align="center">胜/负</th>
<th align="center">积分</th>
<th align="center">胜/负/净</th>
<th align="center"></th>
<th align="center">Y组战队</th>
<th align="center">胜/负</th>
<th align="center">积分</th>
<th align="center">胜/负/净</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center"><strong>武汉eStarPro</strong></td>
<td align="center">6/1</td>
<td align="center">6</td>
<td align="center">12/5/7</td>
<td align="center"></td>
<td align="center"><strong>成都AG超玩会</strong></td>
<td align="center">6/1</td>
<td align="center">6</td>
<td align="center">12/4/8</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center"><strong>杭州LGD大鹅</strong></td>
<td align="center">5/2</td>
<td align="center">5</td>
<td align="center">11/4/7</td>
<td align="center"></td>
<td align="center"><strong>深圳DYG</strong></td>
<td align="center">6/1</td>
<td align="center">5</td>
<td align="center">12/6/6</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center"><strong>TES</strong></td>
<td align="center">5/2</td>
<td align="center">5</td>
<td align="center">11/5/6</td>
<td align="center"></td>
<td align="center"><strong>南京Hero久竞</strong></td>
<td align="center">4/3</td>
<td align="center">3</td>
<td align="center">10/7/3</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">重庆QGHappy</td>
<td align="center">4/3</td>
<td align="center">4</td>
<td align="center">8/7/1</td>
<td align="center"></td>
<td align="center">佛山GK</td>
<td align="center">4/3</td>
<td align="center">3</td>
<td align="center">9/8/1</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">广州TTG</td>
<td align="center">3/4</td>
<td align="center">3</td>
<td align="center">9/10/-1</td>
<td align="center"></td>
<td align="center">KSG</td>
<td align="center">3/4</td>
<td align="center">3</td>
<td align="center">9/8/1</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">北京WB</td>
<td align="center">2/5</td>
<td align="center">2</td>
<td align="center">7/12/-5</td>
<td align="center"></td>
<td align="center">西安WE</td>
<td align="center">2/5</td>
<td align="center">2</td>
<td align="center">6/11/-5</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center"><del>RNG.M</del></td>
<td align="center">2/5</td>
<td align="center">2</td>
<td align="center">6/12/-6</td>
<td align="center"></td>
<td align="center"><em>RW侠</em></td>
<td align="center">2/5</td>
<td align="center">2</td>
<td align="center">4/11/-7</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center"><del>上海EDG.M</del></td>
<td align="center">1/6</td>
<td align="center">1</td>
<td align="center">4/13/-9</td>
<td align="center"></td>
<td align="center"><em>VG</em></td>
<td align="center">1/6</td>
<td align="center">1</td>
<td align="center">5/12/-7</td>
</tr>
</tbody></table>
<h2 id="季前赛赛程"><a href="#季前赛赛程" class="headerlink" title="季前赛赛程"></a>季前赛赛程</h2><h4 id="3月11日"><a href="#3月11日" class="headerlink" title="3月11日"></a>3月11日</h4><table>
<thead>
<tr>
<th align="center">队伍</th>
<th align="center">比分</th>
<th align="center">比分</th>
<th align="center">队伍</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><del>RNG.M</del></td>
<td align="center">1</td>
<td align="center"><strong>2</strong></td>
<td align="center"><strong>武汉eStarPro</strong></td>
</tr>
<tr>
<td align="center"><strong>重庆QGhappy</strong></td>
<td align="center"><strong>2</strong></td>
<td align="center">1</td>
<td align="center"><del>北京WB</del></td>
</tr>
<tr>
<td align="center"><del>深圳DYG</del></td>
<td align="center">0</td>
<td align="center"><strong>2</strong></td>
<td align="center"><strong>成都AG超玩会</strong></td>
</tr>
<tr>
<td align="center"><del>西安WE</del></td>
<td align="center">0</td>
<td align="center"><strong>2</strong></td>
<td align="center"><strong>VG</strong></td>
</tr>
<tr>
<td align="center"><del>广州TTG</del></td>
<td align="center">0</td>
<td align="center"><strong>2</strong></td>
<td align="center"><strong>杭州LGD大鹅</strong></td>
</tr>
<tr>
<td align="center"><strong>TES</strong></td>
<td align="center"><strong>2</strong></td>
<td align="center">0</td>
<td align="center"><del>上海EDG.M</del></td>
</tr>
<tr>
<td align="center"><strong>南京Hero久竞</strong></td>
<td align="center"><strong>2</strong></td>
<td align="center">0</td>
<td align="center"><del>佛山GK</del></td>
</tr>
<tr>
<td align="center"><strong>RW侠</strong></td>
<td align="center"><strong>2</strong></td>
<td align="center">0</td>
<td align="center"><del>KSG</del></td>
</tr>
</tbody></table>
<h4 id="3月12日"><a href="#3月12日" class="headerlink" title="3月12日"></a>3月12日</h4><table>
<thead>
<tr>
<th align="center">队伍</th>
<th align="center">比分</th>
<th align="center">比分</th>
<th align="center">队伍</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>西安WE</strong></td>
<td align="center"><strong>2</strong></td>
<td align="center">0</td>
<td align="center"><del>RW侠</del></td>
</tr>
<tr>
<td align="center"><del>RNG.M</del></td>
<td align="center">0</td>
<td align="center"><strong>2</strong></td>
<td align="center"><strong>TES</strong></td>
</tr>
<tr>
<td align="center"><strong>深圳DYG</strong></td>
<td align="center"><strong>2</strong></td>
<td align="center">1</td>
<td align="center"><del>南京Hero久竞</del></td>
</tr>
<tr>
<td align="center"><del>重庆QGhappy</del></td>
<td align="center">0</td>
<td align="center"><strong>2</strong></td>
<td align="center"><strong>广州TTG</strong></td>
</tr>
<tr>
<td align="center"><del>北京WB</del></td>
<td align="center">0</td>
<td align="center"><strong>2</strong></td>
<td align="center"><strong>杭州LGD大鹅</strong></td>
</tr>
<tr>
<td align="center"><strong>武汉eStarPro</strong></td>
<td align="center"><strong>2</strong></td>
<td align="center">0</td>
<td align="center"><del>上海EDG.M</del></td>
</tr>
<tr>
<td align="center"><del>VG</del></td>
<td align="center">0</td>
<td align="center"><strong>2</strong></td>
<td align="center"><strong>KSG</strong></td>
</tr>
<tr>
<td align="center"><strong>成都AG超玩会</strong></td>
<td align="center"><strong>2</strong></td>
<td align="center">1</td>
<td align="center"><del>佛山GK</del></td>
</tr>
</tbody></table>
<h4 id="3月13日"><a href="#3月13日" class="headerlink" title="3月13日"></a>3月13日</h4><table>
<thead>
<tr>
<th align="center">队伍</th>
<th align="center">比分</th>
<th align="center">比分</th>
<th align="center">队伍</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>武汉eStarPro</strong></td>
<td align="center"><strong>2</strong></td>
<td align="center">0</td>
<td align="center"><del>TES</del></td>
</tr>
<tr>
<td align="center"><del>西安WE</del></td>
<td align="center">0</td>
<td align="center"><strong>2</strong></td>
<td align="center"><strong>KSG</strong></td>
</tr>
<tr>
<td align="center"><del>北京WB</del></td>
<td align="center">1</td>
<td align="center"><strong>2</strong></td>
<td align="center"><strong>广州TTG</strong></td>
</tr>
<tr>
<td align="center"><strong>成都AG超玩会</strong></td>
<td align="center"><strong>2</strong></td>
<td align="center">0</td>
<td align="center"><del>南京Hero久竞</del></td>
</tr>
<tr>
<td align="center"><del>重庆QGhappy</del></td>
<td align="center">0</td>
<td align="center"><strong>2</strong></td>
<td align="center"><strong>杭州LGD大鹅</strong></td>
</tr>
<tr>
<td align="center"><del>VG</del></td>
<td align="center">1</td>
<td align="center"><strong>2</strong></td>
<td align="center"><strong>RW侠</strong></td>
</tr>
<tr>
<td align="center"><strong>RNG.M</strong></td>
<td align="center"><strong>2</strong></td>
<td align="center">1</td>
<td align="center"><del>上海EDG.M</del></td>
</tr>
<tr>
<td align="center"><strong>深圳DYG</strong></td>
<td align="center"><strong>2</strong></td>
<td align="center">0</td>
<td align="center"><del>佛山GK</del></td>
</tr>
</tbody></table>
<h4 id="3月14日"><a href="#3月14日" class="headerlink" title="3月14日"></a>3月14日</h4><table>
<thead>
<tr>
<th align="center">队伍</th>
<th align="center">比分</th>
<th align="center">比分</th>
<th align="center">队伍</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>佛山GK</strong></td>
<td align="center"><strong>2</strong></td>
<td align="center">1</td>
<td align="center"><del>KSG</del></td>
</tr>
<tr>
<td align="center"><strong>广州TTG</strong></td>
<td align="center"><strong>2</strong></td>
<td align="center">1</td>
<td align="center"><del>TES</del></td>
</tr>
<tr>
<td align="center"><strong>重庆QGhappy</strong></td>
<td align="center"><strong>2</strong></td>
<td align="center">0</td>
<td align="center"><del>RNG.M</del></td>
</tr>
<tr>
<td align="center"><strong>杭州LGD大鹅</strong></td>
<td align="center"><strong>2</strong></td>
<td align="center">0</td>
<td align="center"><del>上海EDG.M</del></td>
</tr>
<tr>
<td align="center"><strong>成都AG超玩会</strong></td>
<td align="center"><strong>2</strong></td>
<td align="center">0</td>
<td align="center"><del>VG</del></td>
</tr>
<tr>
<td align="center"><del>北京WB</del></td>
<td align="center">0</td>
<td align="center"><strong>2</strong></td>
<td align="center"><strong>武汉eStarPro</strong></td>
</tr>
<tr>
<td align="center"><strong>南京Hero久竞</strong></td>
<td align="center"><strong>2</strong></td>
<td align="center">0</td>
<td align="center"><del>RW侠</del></td>
</tr>
<tr>
<td align="center"><strong>深圳DYG</strong></td>
<td align="center"><strong>2</strong></td>
<td align="center">1</td>
<td align="center"><del>西安WE</del></td>
</tr>
</tbody></table>
<h4 id="3月18日"><a href="#3月18日" class="headerlink" title="3月18日"></a>3月18日</h4><table>
<thead>
<tr>
<th align="center">队伍</th>
<th align="center">比分</th>
<th align="center">比分</th>
<th align="center">队伍</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>重庆QGhappy</strong></td>
<td align="center">2</td>
<td align="center">0</td>
<td align="center"><del>武汉eStarPro</del></td>
</tr>
<tr>
<td align="center"><strong>北京WB</strong></td>
<td align="center">2</td>
<td align="center">1</td>
<td align="center"><del>RNG.M</del></td>
</tr>
<tr>
<td align="center"><strong>深圳DYG</strong></td>
<td align="center">2</td>
<td align="center">1</td>
<td align="center"><del>VG</del></td>
</tr>
<tr>
<td align="center"><strong>南京Hero久竞</strong></td>
<td align="center">2</td>
<td align="center">1</td>
<td align="center"><del>KSG</del></td>
</tr>
<tr>
<td align="center"><del>广州TTG</del></td>
<td align="center">1</td>
<td align="center">2</td>
<td align="center"><strong>上海EDG.M</strong></td>
</tr>
<tr>
<td align="center"><del>杭州LGD大鹅</del></td>
<td align="center">0</td>
<td align="center">2</td>
<td align="center"><strong>TES</strong></td>
</tr>
<tr>
<td align="center"><strong>成都AG超玩会</strong></td>
<td align="center">2</td>
<td align="center">1</td>
<td align="center"><del>西安WE</del></td>
</tr>
<tr>
<td align="center"><strong>佛山GK</strong></td>
<td align="center">2</td>
<td align="center">0</td>
<td align="center"><del>RW侠</del></td>
</tr>
</tbody></table>
<h4 id="3月19日"><a href="#3月19日" class="headerlink" title="3月19日"></a>3月19日</h4><table>
<thead>
<tr>
<th align="center">队伍</th>
<th align="center">比分</th>
<th align="center">比分</th>
<th align="center">队伍</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><del>重庆QGhappy</del></td>
<td align="center">0</td>
<td align="center">2</td>
<td align="center"><strong>TES</strong></td>
</tr>
<tr>
<td align="center"><del>广州TTG</del></td>
<td align="center">1</td>
<td align="center">2</td>
<td align="center"><strong>RNG.M</strong></td>
</tr>
<tr>
<td align="center"><strong>深圳DYG</strong></td>
<td align="center">2</td>
<td align="center">0</td>
<td align="center"><del>RW侠</del></td>
</tr>
<tr>
<td align="center"><del>南京Hero久竞</del></td>
<td align="center">1</td>
<td align="center">2</td>
<td align="center"><strong>西安WE</strong></td>
</tr>
<tr>
<td align="center"><strong>北京WB</strong></td>
<td align="center">2</td>
<td align="center">1</td>
<td align="center"><del>上海EDG.M</del></td>
</tr>
<tr>
<td align="center"><del>杭州LGD大鹅</del></td>
<td align="center">1</td>
<td align="center">2</td>
<td align="center"><strong>武汉eStarPro</strong></td>
</tr>
<tr>
<td align="center"><strong>成都AG超玩会</strong></td>
<td align="center">2</td>
<td align="center">0</td>
<td align="center"><del>KSG</del></td>
</tr>
<tr>
<td align="center"><strong>佛山GK</strong></td>
<td align="center">2</td>
<td align="center">1</td>
<td align="center"><del>VG</del></td>
</tr>
</tbody></table>
<h4 id="3月20日"><a href="#3月20日" class="headerlink" title="3月20日"></a>3月20日</h4><table>
<thead>
<tr>
<th align="center">队伍</th>
<th align="center">比分</th>
<th align="center">比分</th>
<th align="center">队伍</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>佛山GK</strong></td>
<td align="center">2</td>
<td align="center">0</td>
<td align="center"><del>西安WE</del></td>
</tr>
<tr>
<td align="center"><strong>重庆QGhappy</strong></td>
<td align="center">2</td>
<td align="center">0</td>
<td align="center"><del>上海EDG.M</del></td>
</tr>
<tr>
<td align="center"><del>广州TTG</del></td>
<td align="center">1</td>
<td align="center">2</td>
<td align="center"><strong>武汉eStarPro</strong></td>
</tr>
<tr>
<td align="center"><del>成都AG超玩会</del></td>
<td align="center">0</td>
<td align="center">2</td>
<td align="center"><strong>RW侠</strong></td>
</tr>
<tr>
<td align="center"><del>北京WB</del></td>
<td align="center">1</td>
<td align="center">2</td>
<td align="center"><strong>TES</strong></td>
</tr>
<tr>
<td align="center"><strong>深圳DYG</strong></td>
<td align="center">2</td>
<td align="center">1</td>
<td align="center"><del>KSG</del></td>
</tr>
<tr>
<td align="center"><strong>杭州LGD大鹅</strong></td>
<td align="center">2</td>
<td align="center">0</td>
<td align="center"><del>RNG.M</del></td>
</tr>
<tr>
<td align="center"><strong>南京Hero久竞</strong></td>
<td align="center">2</td>
<td align="center">0</td>
<td align="center"><del>VG</del></td>
</tr>
</tbody></table>
<h1 id="常规赛-1"><a href="#常规赛-1" class="headerlink" title="常规赛"></a>常规赛</h1><p>常规赛将进行三轮分组组内单循环赛：</p>
<ol>
<li>第一轮结束后按组内排名直接升降换位；</li>
<li>第二轮组内单循环结束后，按组内排名进行卡位赛，卡位赛结束后，位列S组的战队直接确认晋级季后赛，位列B组的战队直接确认无缘季后赛</li>
<li>第三轮进行S组与A组的组内单循环，结束后按组内排名确定季后赛席位，S组全组及A组前四将晋级季后赛</li>
</ol>
<h2 id="常规赛第一轮"><a href="#常规赛第一轮" class="headerlink" title="常规赛第一轮"></a>常规赛第一轮</h2><table>
<thead>
<tr>
<th align="center">S组战队</th>
<th align="center">胜/负</th>
<th align="center">积分</th>
<th align="center">胜/负/净</th>
</tr>
</thead>
<tbody><tr>
<td align="center">成都AG超玩会</td>
<td align="center">3/1</td>
<td align="center">3</td>
<td align="center">13/7/6</td>
</tr>
<tr>
<td align="center">武汉eStarPro</td>
<td align="center">3/2</td>
<td align="center">3</td>
<td align="center">11/8/3</td>
</tr>
<tr>
<td align="center">TES</td>
<td align="center">3/2</td>
<td align="center">3</td>
<td align="center">11/11/0</td>
</tr>
<tr>
<td align="center">深圳DYG</td>
<td align="center">2/3</td>
<td align="center">2</td>
<td align="center">11/10/1</td>
</tr>
<tr>
<td align="center">南京Hero久竞</td>
<td align="center">2/3</td>
<td align="center">2</td>
<td align="center">9/11/-2</td>
</tr>
<tr>
<td align="center">杭州LGD大鹅</td>
<td align="center">1/4</td>
<td align="center">1</td>
<td align="center">5/13/-8</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">A组战队</th>
<th align="center">胜/负</th>
<th align="center">积分</th>
<th align="center">胜/负/净</th>
</tr>
</thead>
<tbody><tr>
<td align="center">佛山GK</td>
<td align="center">5/0</td>
<td align="center">5</td>
<td align="center">15/7/8</td>
</tr>
<tr>
<td align="center">广州TTG</td>
<td align="center">4/1</td>
<td align="center">4</td>
<td align="center">13/5/8</td>
</tr>
<tr>
<td align="center">KSG</td>
<td align="center">2/3</td>
<td align="center">2</td>
<td align="center">10/12/-2</td>
</tr>
<tr>
<td align="center">北京WB</td>
<td align="center">2/3</td>
<td align="center">2</td>
<td align="center">8/12/-4</td>
</tr>
<tr>
<td align="center">西安WE</td>
<td align="center">1/4</td>
<td align="center">1</td>
<td align="center">8/12/-4</td>
</tr>
<tr>
<td align="center">重庆QGhappy</td>
<td align="center">1/4</td>
<td align="center">1</td>
<td align="center">7/13/-6</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">B组战队</th>
<th align="center">胜/负</th>
<th align="center">积分</th>
<th align="center">胜/负/净</th>
</tr>
</thead>
<tbody><tr>
<td align="center">MTG</td>
<td align="center">4/0</td>
<td align="center">4</td>
<td align="center">12/4/8</td>
</tr>
<tr>
<td align="center">RW侠</td>
<td align="center">3/1</td>
<td align="center">3</td>
<td align="center">11/6/5</td>
</tr>
<tr>
<td align="center">VG</td>
<td align="center">2/2</td>
<td align="center">2</td>
<td align="center">8/7/1</td>
</tr>
<tr>
<td align="center">上海EDGM</td>
<td align="center">1/3</td>
<td align="center">1</td>
<td align="center">5/9/-4</td>
</tr>
<tr>
<td align="center">RNG.M</td>
<td align="center">0/4</td>
<td align="center">0</td>
<td align="center">2/12/-10</td>
</tr>
</tbody></table>
<h3 id="常规赛第一轮赛程"><a href="#常规赛第一轮赛程" class="headerlink" title="常规赛第一轮赛程"></a>常规赛第一轮赛程</h3><table>
<thead>
<tr>
<th align="center">比赛日期</th>
<th align="center">组别</th>
<th align="center">队伍</th>
<th align="center">比分</th>
<th align="center">比分</th>
<th align="center">队伍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">2021-03-27</td>
<td align="center">S组</td>
<td align="center"><del>深圳DYG</del></td>
<td align="center">2</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>成都AG超玩会</strong></td>
</tr>
<tr>
<td align="center">2021-03-27</td>
<td align="center">A组</td>
<td align="center"><strong>广州TTG</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">1</td>
<td align="center"><del>北京WB</del></td>
</tr>
<tr>
<td align="center">2021-03-28</td>
<td align="center">S组</td>
<td align="center"><del>南京Hero久竞</del></td>
<td align="center">1</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>杭州LGD大鹅</strong></td>
</tr>
<tr>
<td align="center">2021-03-28</td>
<td align="center">B组</td>
<td align="center"><strong>上海EDG.M</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">0</td>
<td align="center"><del>RNG.M</del></td>
</tr>
<tr>
<td align="center">2021-03-28</td>
<td align="center">A组</td>
<td align="center"><strong>佛山GK</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">2</td>
<td align="center"><del>重庆QGhappy</del></td>
</tr>
<tr>
<td align="center">2021-03-31</td>
<td align="center">B组</td>
<td align="center"><del>上海EDG.M</del></td>
<td align="center">2</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>RW侠</strong></td>
</tr>
<tr>
<td align="center">2021-03-31</td>
<td align="center">B组</td>
<td align="center"><del>VG</del></td>
<td align="center">2</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>MTG</strong></td>
</tr>
<tr>
<td align="center">2021-04-01</td>
<td align="center">A组</td>
<td align="center"><del>北京WB</del></td>
<td align="center">1</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>佛山GK</strong></td>
</tr>
<tr>
<td align="center">2021-04-01</td>
<td align="center">A组</td>
<td align="center"><del>KSG</del></td>
<td align="center">1</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>广州TTG</strong></td>
</tr>
<tr>
<td align="center">2021-04-02</td>
<td align="center">S组</td>
<td align="center"><del>深圳DYG</del></td>
<td align="center">1</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>南京Hero久竞</strong></td>
</tr>
<tr>
<td align="center">2021-04-02</td>
<td align="center">S组</td>
<td align="center"><strong>成都AG超玩会</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">2</td>
<td align="center"><del>TES</del></td>
</tr>
<tr>
<td align="center">2021-04-03</td>
<td align="center">A组</td>
<td align="center"><del>西安WE</del></td>
<td align="center">1</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>重庆QGhappy</strong></td>
</tr>
<tr>
<td align="center">2021-04-03</td>
<td align="center">A组</td>
<td align="center"><strong>佛山GK</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">1</td>
<td align="center"><del>广州TTG</del></td>
</tr>
<tr>
<td align="center">2021-04-03</td>
<td align="center">A组</td>
<td align="center"><del>KSG</del></td>
<td align="center">2</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>北京WB</strong></td>
</tr>
<tr>
<td align="center">2021-04-04</td>
<td align="center">S组</td>
<td align="center"><strong>TES</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">2</td>
<td align="center"><del>南京Hero久竞</del></td>
</tr>
<tr>
<td align="center">2021-04-04</td>
<td align="center">S组</td>
<td align="center"><strong>深圳DYG</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">1</td>
<td align="center"><del>武汉eStarPro</del></td>
</tr>
<tr>
<td align="center">2021-04-04</td>
<td align="center">S组</td>
<td align="center"><del>杭州LGD大鹅</del></td>
<td align="center">0</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>成都AG超玩会</strong></td>
</tr>
<tr>
<td align="center">2021-04-07</td>
<td align="center">B组</td>
<td align="center"><strong>VG</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">0</td>
<td align="center"><del>上海EDG.M</del></td>
</tr>
<tr>
<td align="center">2021-04-07</td>
<td align="center">S组</td>
<td align="center"><strong>TES</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">1</td>
<td align="center"><del>杭州LGD大鹅</del></td>
</tr>
<tr>
<td align="center">2021-04-08</td>
<td align="center">B组</td>
<td align="center"><del>RW侠</del></td>
<td align="center">2</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>MTG</strong></td>
</tr>
<tr>
<td align="center">2021-04-08</td>
<td align="center">A组</td>
<td align="center"><strong>佛山GK</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">2</td>
<td align="center"><del>西安WE</del></td>
</tr>
<tr>
<td align="center">2021-04-09</td>
<td align="center">B组</td>
<td align="center"><del>RNG.M</del></td>
<td align="center">1</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>VG</strong></td>
</tr>
<tr>
<td align="center">2021-04-09</td>
<td align="center">S组</td>
<td align="center"><del>成都AG超玩会</del></td>
<td align="center">1</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>武汉eStarPro</strong></td>
</tr>
<tr>
<td align="center">2021-04-10</td>
<td align="center">A组</td>
<td align="center"><del>重庆QGhappy</del></td>
<td align="center">0</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>广州TTG</strong></td>
</tr>
<tr>
<td align="center">2021-04-10</td>
<td align="center">A组</td>
<td align="center"><del>KSG</del></td>
<td align="center">1</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>佛山GK</strong></td>
</tr>
<tr>
<td align="center">2021-04-10</td>
<td align="center">A组</td>
<td align="center"><strong>西安WE</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">1</td>
<td align="center"><del>北京WB</del></td>
</tr>
<tr>
<td align="center">2021-04-11</td>
<td align="center">S组</td>
<td align="center"><del>TES</del></td>
<td align="center">0</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>武汉eStarPro</strong></td>
</tr>
<tr>
<td align="center">2021-04-11</td>
<td align="center">B组</td>
<td align="center"><del>RNG.M</del></td>
<td align="center">0</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>MTG</strong></td>
</tr>
<tr>
<td align="center">2021-04-11</td>
<td align="center">S组</td>
<td align="center"><del>杭州LGD大鹅</del></td>
<td align="center">0</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>深圳DYG</strong></td>
</tr>
<tr>
<td align="center">2021-04-14</td>
<td align="center">A组</td>
<td align="center"><del>西安WE</del></td>
<td align="center">2</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>KSG</strong></td>
</tr>
<tr>
<td align="center">2021-04-14</td>
<td align="center">B组</td>
<td align="center"><strong>RW侠</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">1</td>
<td align="center"><del>RNG.M</del></td>
</tr>
<tr>
<td align="center">2021-04-15</td>
<td align="center">B组</td>
<td align="center"><strong>MTG</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">0</td>
<td align="center"><del>上海EDG.M</del></td>
</tr>
<tr>
<td align="center">2021-04-15</td>
<td align="center">S组</td>
<td align="center"><strong>南京Hero久竞</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">1</td>
<td align="center"><del>武汉eStarPro</del></td>
</tr>
<tr>
<td align="center">2021-04-16</td>
<td align="center">B组</td>
<td align="center"><strong>RW侠</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">0</td>
<td align="center"><del>VG</del></td>
</tr>
<tr>
<td align="center">2021-04-16</td>
<td align="center">A组</td>
<td align="center"><strong>KSG</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">1</td>
<td align="center"><del>重庆QGhappy</del></td>
</tr>
<tr>
<td align="center">2021-04-17</td>
<td align="center">A组</td>
<td align="center"><del>西安WE</del></td>
<td align="center">0</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>广州TTG</strong></td>
</tr>
<tr>
<td align="center">2021-04-17</td>
<td align="center">S组</td>
<td align="center"><del>杭州LGD大鹅</del></td>
<td align="center">1</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>武汉eStarPro</strong></td>
</tr>
<tr>
<td align="center">2021-04-17</td>
<td align="center">S组</td>
<td align="center"><strong>TES</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">2</td>
<td align="center"><del>深圳DYG</del></td>
</tr>
<tr>
<td align="center">2021-04-18</td>
<td align="center">S组</td>
<td align="center"><strong>成都AG超玩会</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">0</td>
<td align="center"><del>南京Hero久竞</del></td>
</tr>
<tr>
<td align="center">2021-04-18</td>
<td align="center">A组</td>
<td align="center"><strong>北京WB</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">1</td>
<td align="center"><del>重庆QGhappy</del></td>
</tr>
</tbody></table>
<h2 id="常规赛第二轮"><a href="#常规赛第二轮" class="headerlink" title="常规赛第二轮"></a>常规赛第二轮</h2><table>
<thead>
<tr>
<th align="center">S组战队</th>
<th align="center">胜/负</th>
<th align="center">积 分</th>
<th align="center">胜/负/净</th>
</tr>
</thead>
<tbody><tr>
<td align="center">成都AG超玩会</td>
<td align="center">4/1</td>
<td align="center">4</td>
<td align="center">13/5/8</td>
</tr>
<tr>
<td align="center">广州TTG</td>
<td align="center">3/2</td>
<td align="center">3</td>
<td align="center">12/8/4</td>
</tr>
<tr>
<td align="center">佛山GK</td>
<td align="center">3/2</td>
<td align="center">3</td>
<td align="center">9/10/-1</td>
</tr>
<tr>
<td align="center">武汉eStarPro</td>
<td align="center">2/3</td>
<td align="center">2</td>
<td align="center">8/10/-2</td>
</tr>
<tr>
<td align="center"><del>深圳DYG</del></td>
<td align="center">2/3</td>
<td align="center">2</td>
<td align="center">7/11/-4</td>
</tr>
<tr>
<td align="center"><del>TES</del></td>
<td align="center">1/4</td>
<td align="center">1</td>
<td align="center">7/13/-6</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">A组战队</th>
<th align="center">胜/负</th>
<th align="center">积 分</th>
<th align="center">胜/负/净</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>南京Hero久竞</strong></td>
<td align="center">3/2</td>
<td align="center">3</td>
<td align="center">11/9/2</td>
</tr>
<tr>
<td align="center"><strong>MTG</strong></td>
<td align="center">3/2</td>
<td align="center">3</td>
<td align="center">11/9/2</td>
</tr>
<tr>
<td align="center">KSG</td>
<td align="center">2/3</td>
<td align="center">2</td>
<td align="center">12/12/0</td>
</tr>
<tr>
<td align="center">RW侠</td>
<td align="center">3/2</td>
<td align="center">3</td>
<td align="center">12/11/1</td>
</tr>
<tr>
<td align="center"><del>杭州LGD大鹅</del></td>
<td align="center">2/3</td>
<td align="center">2</td>
<td align="center">10/12/-2</td>
</tr>
<tr>
<td align="center"><del>北京WB</del></td>
<td align="center">2/3</td>
<td align="center">2</td>
<td align="center">9/12/-3</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">B组战队</th>
<th align="center">胜/负</th>
<th align="center">积分</th>
<th align="center">胜/负/净</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>重庆QGhappy</strong></td>
<td align="center">4/0</td>
<td align="center">4</td>
<td align="center">12/5/7</td>
</tr>
<tr>
<td align="center"><strong>RNG.M</strong></td>
<td align="center">2/2</td>
<td align="center">2</td>
<td align="center">10/9/1</td>
</tr>
<tr>
<td align="center"><del>VG</del></td>
<td align="center">2/2</td>
<td align="center">2</td>
<td align="center">10/10/0</td>
</tr>
<tr>
<td align="center"><del>西安WE</del></td>
<td align="center">1/3</td>
<td align="center">1</td>
<td align="center">7/9/-2</td>
</tr>
<tr>
<td align="center"><del>上海EDGM</del></td>
<td align="center">1/3</td>
<td align="center">1</td>
<td align="center">5/11/-6</td>
</tr>
</tbody></table>
<h3 id="常规赛第二轮赛程"><a href="#常规赛第二轮赛程" class="headerlink" title="常规赛第二轮赛程"></a>常规赛第二轮赛程</h3><table>
<thead>
<tr>
<th align="center">比赛日期</th>
<th align="center">组别</th>
<th align="center">队伍</th>
<th align="center">比分</th>
<th align="center">比分</th>
<th align="center">队伍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">2021-04-21</td>
<td align="center">B组</td>
<td align="center"><del>上海EDG.M</del></td>
<td align="center">1</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>RNG.M</strong></td>
</tr>
<tr>
<td align="center">2021-04-21</td>
<td align="center">S组</td>
<td align="center"><strong>深圳DYG</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">2</td>
<td align="center"><del>广州TTG</del></td>
</tr>
<tr>
<td align="center">2021-04-22</td>
<td align="center">A组</td>
<td align="center"><strong>MTG</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">2</td>
<td align="center"><del>KSG</del></td>
</tr>
<tr>
<td align="center">2021-04-22</td>
<td align="center">S组</td>
<td align="center"><strong>佛山GK</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">1</td>
<td align="center"><del>TES</del></td>
</tr>
<tr>
<td align="center">2021-04-23</td>
<td align="center">A组</td>
<td align="center"><del>南京Hero久竞</del></td>
<td align="center">1</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>北京WB</strong></td>
</tr>
<tr>
<td align="center">2021-04-23</td>
<td align="center">B组</td>
<td align="center"><strong>上海EDG.M</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">1</td>
<td align="center"><del>VG</del></td>
</tr>
<tr>
<td align="center">2021-04-24</td>
<td align="center">S组</td>
<td align="center"><strong>佛山GK</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">1</td>
<td align="center"><del>深圳DYG</del></td>
</tr>
<tr>
<td align="center">2021-04-24</td>
<td align="center">S组</td>
<td align="center"><strong>广州TTG</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">1</td>
<td align="center"><del>武汉eStarPro</del></td>
</tr>
<tr>
<td align="center">2021-04-24</td>
<td align="center">B组</td>
<td align="center"><strong>RNG.M</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">2</td>
<td align="center"><del>西安WE</del></td>
</tr>
<tr>
<td align="center">2021-04-25</td>
<td align="center">A组</td>
<td align="center"><strong>杭州LGD大鹅</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">1</td>
<td align="center"><del>南京Hero久竞</del></td>
</tr>
<tr>
<td align="center">2021-04-25</td>
<td align="center">A组</td>
<td align="center"><strong>RW侠</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">2</td>
<td align="center"><del>北京WB</del></td>
</tr>
<tr>
<td align="center">2021-04-25</td>
<td align="center">S组</td>
<td align="center"><del>TES</del></td>
<td align="center">2</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>成都AG超玩会</strong></td>
</tr>
<tr>
<td align="center">2021-04-28</td>
<td align="center">B组</td>
<td align="center">~ <del>上海EDG.M</del></td>
<td align="center">1</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>重庆QGhappy</strong></td>
</tr>
<tr>
<td align="center">2021-04-28</td>
<td align="center">A组</td>
<td align="center"><strong>MTG</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">1</td>
<td align="center"><del>杭州LGD大鹅</del></td>
</tr>
<tr>
<td align="center">2021-04-29</td>
<td align="center">S组</td>
<td align="center"><del>TES</del></td>
<td align="center">1</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>武汉eStarPro</strong></td>
</tr>
<tr>
<td align="center">2021-04-29</td>
<td align="center">S组</td>
<td align="center"><del>成都AG超玩会</del></td>
<td align="center">1</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>广州TTG</strong></td>
</tr>
<tr>
<td align="center">2021-04-30</td>
<td align="center">B组</td>
<td align="center"><del>西安WE</del></td>
<td align="center">0</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>重庆QGhappy</strong></td>
</tr>
<tr>
<td align="center">2021-04-30</td>
<td align="center">B组</td>
<td align="center"><strong>VG</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">2</td>
<td align="center"><del>RNG.M</del></td>
</tr>
<tr>
<td align="center">2021-05-01</td>
<td align="center">A组</td>
<td align="center"><strong>KSG</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">1</td>
<td align="center"><del>北京WB</del></td>
</tr>
<tr>
<td align="center">2021-05-01</td>
<td align="center">S组</td>
<td align="center"><del>佛山GK</del></td>
<td align="center">0</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>成都AG超玩会</strong></td>
</tr>
<tr>
<td align="center">2021-05-01</td>
<td align="center">A组</td>
<td align="center"><strong>RW侠</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">1</td>
<td align="center"><del>杭州LGD大鹅</del></td>
</tr>
<tr>
<td align="center">2021-05-02</td>
<td align="center">A组</td>
<td align="center"><del>MTG</del></td>
<td align="center">0</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>南京Hero久竞</strong></td>
</tr>
<tr>
<td align="center">2021-05-02</td>
<td align="center">S组</td>
<td align="center"><strong>TES</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">1</td>
<td align="center"><del>广州TTG</del></td>
</tr>
<tr>
<td align="center">2021-05-02</td>
<td align="center">S组</td>
<td align="center"><strong>武汉eStarPro</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">0</td>
<td align="center"><del>深圳DYG</del></td>
</tr>
<tr>
<td align="center">2021-05-03</td>
<td align="center">B组</td>
<td align="center"><del>VG</del></td>
<td align="center">2</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>重庆QGhappy</strong></td>
</tr>
<tr>
<td align="center">2021-05-03</td>
<td align="center">B组</td>
<td align="center"><del>上海EDG.M</del></td>
<td align="center">0</td>
<td align="center"><strong>3</strong></td>
<td align="center"><del>西安WE</del></td>
</tr>
<tr>
<td align="center">2021-05-03</td>
<td align="center">A组</td>
<td align="center"><del>KSG</del></td>
<td align="center">2</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>杭州LGD大鹅</strong></td>
</tr>
<tr>
<td align="center">2021-05-04</td>
<td align="center">A组</td>
<td align="center"><del>RW侠</del></td>
<td align="center">1</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>南京Hero久竞</strong></td>
</tr>
<tr>
<td align="center">2021-05-04</td>
<td align="center">S组</td>
<td align="center"><del>佛山GK</del></td>
<td align="center">0</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>广州TTG</strong></td>
</tr>
<tr>
<td align="center">2021-05-04</td>
<td align="center">A组</td>
<td align="center"><strong>MTG</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">0</td>
<td align="center"><del>北京WB</del></td>
</tr>
<tr>
<td align="center">2021-05-05</td>
<td align="center">S组</td>
<td align="center"><strong>成都AG超玩会</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">0</td>
<td align="center"><del>武汉eStarPro</del></td>
</tr>
<tr>
<td align="center">2021-05-05</td>
<td align="center">S组</td>
<td align="center"><del>TES</del></td>
<td align="center">0</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>深圳DYG</strong></td>
</tr>
<tr>
<td align="center">2021-05-07</td>
<td align="center">B组</td>
<td align="center"><strong>VG</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">2</td>
<td align="center"><del>西安WE</del></td>
</tr>
<tr>
<td align="center">2021-05-07</td>
<td align="center">A组</td>
<td align="center"><del>RW侠</del></td>
<td align="center">2</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>KSG</strong></td>
</tr>
<tr>
<td align="center">2021-05-08</td>
<td align="center">S组</td>
<td align="center"><strong>佛山GK</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">1</td>
<td align="center"><del>武汉eStarPro</del></td>
</tr>
<tr>
<td align="center">2021-05-08</td>
<td align="center">B组</td>
<td align="center"><del>RNG.M</del></td>
<td align="center">2</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>重庆QGhappy</strong></td>
</tr>
<tr>
<td align="center">2021-05-08</td>
<td align="center">A组</td>
<td align="center"><strong>北京WB</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">2</td>
<td align="center"><del>杭州LGD大鹅</del></td>
</tr>
<tr>
<td align="center">2021-05-09</td>
<td align="center">A组</td>
<td align="center"><del>KSG</del></td>
<td align="center">2</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>南京Hero久竞</strong></td>
</tr>
<tr>
<td align="center">2021-05-09</td>
<td align="center">A组</td>
<td align="center"><del>MTG</del></td>
<td align="center">2</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>RW侠</strong></td>
</tr>
<tr>
<td align="center">2021-05-09</td>
<td align="center">S组</td>
<td align="center"><strong>成都AG超玩会</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">0</td>
<td align="center"><del>深圳DYG</del></td>
</tr>
</tbody></table>
<h3 id="卡位赛"><a href="#卡位赛" class="headerlink" title="卡位赛"></a>卡位赛</h3><p>S组抢位赛的胜者将直接确定晋级季后赛</p>
<table>
<thead>
<tr>
<th align="center">S组抢位赛</th>
<th align="center">队伍</th>
<th align="center">比分</th>
<th align="center">比分</th>
<th align="center">队伍</th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">S5</td>
<td align="center"><strong>深圳DYG</strong></td>
<td align="center"><strong>4</strong></td>
<td align="center">0</td>
<td align="center"><del>MTG</del></td>
<td align="center">A2</td>
</tr>
<tr>
<td align="center">S6</td>
<td align="center"><del>TES</del></td>
<td align="center">3</td>
<td align="center"><strong>4</strong></td>
<td align="center"><strong>南京Hero久竞</strong></td>
<td align="center">A1</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">A组抢位赛</th>
<th align="center">队伍</th>
<th align="center">比分</th>
<th align="center">比分</th>
<th align="center">队伍</th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">A5</td>
<td align="center"><strong>杭州LGD大鹅</strong></td>
<td align="center"><strong>4</strong></td>
<td align="center">1</td>
<td align="center">RNG.M</td>
<td align="center">B2</td>
</tr>
<tr>
<td align="center">A6</td>
<td align="center"><del>北京WB</del></td>
<td align="center">1</td>
<td align="center"><strong>4</strong></td>
<td align="center"><strong>重庆QGhappy</strong></td>
<td align="center">B1</td>
</tr>
</tbody></table>
<h2 id="常规赛第三轮"><a href="#常规赛第三轮" class="headerlink" title="常规赛第三轮"></a>常规赛第三轮</h2><table>
<thead>
<tr>
<th align="center">S组战队</th>
<th align="center">胜/负</th>
<th align="center">积分</th>
<th align="center">胜/负/净</th>
</tr>
</thead>
<tbody><tr>
<td align="center">武汉eStarPro</td>
<td align="center">5/0</td>
<td align="center">4</td>
<td align="center">15/9/6</td>
</tr>
<tr>
<td align="center">成都AG超玩会</td>
<td align="center">3/2</td>
<td align="center">3</td>
<td align="center">12/9/3</td>
</tr>
<tr>
<td align="center">广州TTG</td>
<td align="center">3/2</td>
<td align="center">3</td>
<td align="center">12/9/3</td>
</tr>
<tr>
<td align="center">南京Hero久竞</td>
<td align="center">2/3</td>
<td align="center">2</td>
<td align="center">11/12/-1</td>
</tr>
<tr>
<td align="center">佛山GK</td>
<td align="center">1/4</td>
<td align="center">1</td>
<td align="center">8/12/-4</td>
</tr>
<tr>
<td align="center">深圳DYG</td>
<td align="center">1/4</td>
<td align="center">1</td>
<td align="center">7/14/-7</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">A组战队</th>
<th align="center">胜/负</th>
<th align="center">积分</th>
<th align="center">胜/负/净</th>
</tr>
</thead>
<tbody><tr>
<td align="center">重庆QGhappy</td>
<td align="center">4/1</td>
<td align="center">4</td>
<td align="center">14/8/6</td>
</tr>
<tr>
<td align="center">RW侠</td>
<td align="center">4/1</td>
<td align="center">4</td>
<td align="center">12/6/6</td>
</tr>
<tr>
<td align="center">TES</td>
<td align="center">3/2</td>
<td align="center">3</td>
<td align="center">12/10/2</td>
</tr>
<tr>
<td align="center">杭州LGD大鹅</td>
<td align="center">2/3</td>
<td align="center">2</td>
<td align="center">9/11/-2</td>
</tr>
<tr>
<td align="center">KSG</td>
<td align="center">1/4</td>
<td align="center">1</td>
<td align="center">7/12/-5</td>
</tr>
<tr>
<td align="center">MTG</td>
<td align="center">1/4</td>
<td align="center">1</td>
<td align="center">6/13/-7</td>
</tr>
</tbody></table>
<h3 id="常规赛第三轮赛程"><a href="#常规赛第三轮赛程" class="headerlink" title="常规赛第三轮赛程"></a>常规赛第三轮赛程</h3><table>
<thead>
<tr>
<th align="center">比赛日期</th>
<th align="center">组别</th>
<th align="center">队伍</th>
<th align="center">比分</th>
<th align="center">比分</th>
<th align="center">队伍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">2021-05-15</td>
<td align="center">S组</td>
<td align="center"><strong>广州TTG</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">0</td>
<td align="center"><del>深圳DYG</del></td>
</tr>
<tr>
<td align="center">2021-05-15</td>
<td align="center">A组</td>
<td align="center"><strong>MTG</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">1</td>
<td align="center"><del>杭州LGD大鹅</del></td>
</tr>
<tr>
<td align="center">2021-05-15</td>
<td align="center">A组</td>
<td align="center"><strong>RW侠</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">1</td>
<td align="center"><del>TES</del></td>
</tr>
<tr>
<td align="center">2021-05-16</td>
<td align="center">S组</td>
<td align="center"><del>南京Hero久竞</del></td>
<td align="center">2</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>武汉eStarPro</strong></td>
</tr>
<tr>
<td align="center">2021-05-16</td>
<td align="center">A组</td>
<td align="center"><strong>重庆QGhappy</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">2</td>
<td align="center"><del>KSG</del></td>
</tr>
<tr>
<td align="center">2021-05-16</td>
<td align="center">S组</td>
<td align="center"><del>佛山GK</del></td>
<td align="center">1</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>成都Ag超玩会</strong></td>
</tr>
<tr>
<td align="center">2021-05-19</td>
<td align="center">S组</td>
<td align="center"><strong>武汉eStarPro</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">1</td>
<td align="center"><del>成都AG超玩会</del></td>
</tr>
<tr>
<td align="center">2021-05-19</td>
<td align="center">S组</td>
<td align="center"><strong>广州TTG</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">1</td>
<td align="center"><del>佛山GK</del></td>
</tr>
<tr>
<td align="center">2021-05-20</td>
<td align="center">S组</td>
<td align="center"><del>深圳DYG</del></td>
<td align="center">2</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>南京Hero久竞</strong></td>
</tr>
<tr>
<td align="center">2021-05-20</td>
<td align="center">A组</td>
<td align="center"><del>KSG</del></td>
<td align="center">2</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>TES</strong></td>
</tr>
<tr>
<td align="center">2021-05-21</td>
<td align="center">A组</td>
<td align="center"><strong>重庆QGhappy</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">2</td>
<td align="center"><del>杭州LGD大鹅</del></td>
</tr>
<tr>
<td align="center">2021-05-21</td>
<td align="center">A组</td>
<td align="center"><strong>RW侠</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">2</td>
<td align="center"><del>MTG</del></td>
</tr>
<tr>
<td align="center">2021-05-22</td>
<td align="center">S组</td>
<td align="center"><del>深圳DYG</del></td>
<td align="center">0</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>佛山GK</strong></td>
</tr>
<tr>
<td align="center">2021-05-22</td>
<td align="center">S组</td>
<td align="center">南京Hero久竞</td>
<td align="center">1</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>成都AG超玩会</strong></td>
</tr>
<tr>
<td align="center">2021-05-22</td>
<td align="center">S组</td>
<td align="center"><strong>武汉eStarPro</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">2</td>
<td align="center"><del>广州TTG</del></td>
</tr>
<tr>
<td align="center">2021-05-23</td>
<td align="center">A组</td>
<td align="center"><strong>重庆QGhappy</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">1</td>
<td align="center"><del>MTG</del></td>
</tr>
<tr>
<td align="center">2021-05-23</td>
<td align="center">A组</td>
<td align="center"><del>TES</del></td>
<td align="center">2</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>杭州LGD大鹅</strong></td>
</tr>
<tr>
<td align="center">2021-05-23</td>
<td align="center">A组</td>
<td align="center"><strong>RW侠</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">0</td>
<td align="center"><del>KSG</del></td>
</tr>
<tr>
<td align="center">2021-05-25</td>
<td align="center">S组</td>
<td align="center"><strong>广州TTG</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">2</td>
<td align="center"><del>南京Hero久竞</del></td>
</tr>
<tr>
<td align="center">2021-05-25</td>
<td align="center">A组</td>
<td align="center"><strong>杭州LGD大鹅</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">0</td>
<td align="center"><del>KSG</del></td>
</tr>
<tr>
<td align="center">2021-05-26</td>
<td align="center">A组</td>
<td align="center"><strong>重庆QGhappy</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">0</td>
<td align="center"><del>RW侠</del></td>
</tr>
<tr>
<td align="center">2021-05-26</td>
<td align="center">A组</td>
<td align="center"><strong>TES</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">0</td>
<td align="center"><del>MTG</del></td>
</tr>
<tr>
<td align="center">2021-05-27</td>
<td align="center">S组</td>
<td align="center"><strong>深圳DYG</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">0</td>
<td align="center"><del>成都AG超玩会</del></td>
</tr>
<tr>
<td align="center">2021-05-27</td>
<td align="center">S组</td>
<td align="center"><strong>武汉eStarPro</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">0</td>
<td align="center"><del>佛山GK</del></td>
</tr>
<tr>
<td align="center">2021-05-28</td>
<td align="center">A组</td>
<td align="center"><del>重庆QGhappy</del></td>
<td align="center">2</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>TES</strong></td>
</tr>
<tr>
<td align="center">2021-05-28</td>
<td align="center">A组</td>
<td align="center"><strong>KSG</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">0</td>
<td align="center"><del>MTG</del></td>
</tr>
<tr>
<td align="center">2021-05-28</td>
<td align="center">A组</td>
<td align="center"><strong>RW侠</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">0</td>
<td align="center"><del>杭州LGD大鹅</del></td>
</tr>
<tr>
<td align="center">2021-05-30</td>
<td align="center">S组</td>
<td align="center"><strong>南京Hero久竞</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">1</td>
<td align="center"><del>佛山GK</del></td>
</tr>
<tr>
<td align="center">2021-05-30</td>
<td align="center">S组</td>
<td align="center"><del>广州TTG</del></td>
<td align="center">1</td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>成都AG超玩会</strong></td>
</tr>
<tr>
<td align="center">2021-05-30</td>
<td align="center">S组</td>
<td align="center"><strong>武汉eStarPro</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center">2</td>
<td align="center"><del>深圳DYG</del></td>
</tr>
</tbody></table>
<h1 id="季后赛-1"><a href="#季后赛-1" class="headerlink" title="季后赛"></a>季后赛</h1><p>季后赛依旧保持BO7(全局BP+巅峰对决），双败淘汰赛制。</p>
<h2 id="胜者组"><a href="#胜者组" class="headerlink" title="胜者组"></a>胜者组</h2><table>
<thead>
<tr>
<th align="right"><strong>胜者组第一轮</strong></th>
<th align="left">积分</th>
<th></th>
<th align="right"><strong>胜者组决赛</strong></th>
<th align="left">积分</th>
</tr>
</thead>
<tbody><tr>
<td align="right"></td>
<td align="left"></td>
<td></td>
<td align="right"></td>
<td align="left"></td>
</tr>
<tr>
<td align="right"><kbd>  武汉eStarPro   </kbd></td>
<td align="left">1</td>
<td></td>
<td align="right"></td>
<td align="left"></td>
</tr>
<tr>
<td align="right"><kbd>  南京Hero久竞    </kbd></td>
<td align="left">4</td>
<td></td>
<td align="right"></td>
<td align="left"></td>
</tr>
<tr>
<td align="right"></td>
<td align="left"></td>
<td></td>
<td align="right"><kbd>  南京Hero久竞</kbd></td>
<td align="left">4</td>
</tr>
<tr>
<td align="right"></td>
<td align="left"></td>
<td></td>
<td align="right"><kbd>   广州TTG    </kbd></td>
<td align="left">1</td>
</tr>
<tr>
<td align="right"><kbd>  成都AG超玩会    </kbd></td>
<td align="left">2</td>
<td></td>
<td align="right"></td>
<td align="left"></td>
</tr>
<tr>
<td align="right"><kbd>   广州TTG       </kbd></td>
<td align="left">4</td>
<td></td>
<td align="right"></td>
<td align="left"></td>
</tr>
</tbody></table>
<h2 id="败者组"><a href="#败者组" class="headerlink" title="败者组"></a>败者组</h2><table>
<thead>
<tr>
<th align="right"><strong>败者组第一轮</strong></th>
<th>积分</th>
<th align="right"><strong>败者组第二轮</strong></th>
<th>积分</th>
<th align="right"><strong>败者组第三轮</strong></th>
<th>积分</th>
<th align="right"><strong>败者组半决赛</strong></th>
<th>积分</th>
</tr>
</thead>
<tbody><tr>
<td align="right"></td>
<td></td>
<td align="right"></td>
<td></td>
<td align="right"><kbd>  重庆QGhappy </kbd></td>
<td>2</td>
<td align="right"></td>
<td></td>
</tr>
<tr>
<td align="right"><kbd>重庆QGhappy</kbd></td>
<td>4</td>
<td align="right"></td>
<td></td>
<td align="right"><kbd> 武汉eStarPro </kbd></td>
<td>4</td>
<td align="right"></td>
<td></td>
</tr>
<tr>
<td align="right"><kbd>杭州LGD大鹅</kbd></td>
<td>1</td>
<td align="right"><kbd>   佛山GK  </kbd></td>
<td>3</td>
<td align="right"></td>
<td></td>
<td align="right"></td>
<td></td>
</tr>
<tr>
<td align="right"></td>
<td></td>
<td align="right"><kbd>重庆QGhappy</kbd></td>
<td>4</td>
<td align="right"></td>
<td></td>
<td align="right"><kbd>武汉eStarPro</kbd></td>
<td>0</td>
</tr>
<tr>
<td align="right"></td>
<td></td>
<td align="right"></td>
<td></td>
<td align="right"></td>
<td></td>
<td align="right"><kbd> 成都AG超玩会</kbd></td>
<td>4</td>
</tr>
<tr>
<td align="right"></td>
<td></td>
<td align="right"></td>
<td></td>
<td align="right"></td>
<td></td>
<td align="right"></td>
<td></td>
</tr>
<tr>
<td align="right"></td>
<td></td>
<td align="right"></td>
<td></td>
<td align="right"><kbd>     TES     </kbd></td>
<td>2</td>
<td align="right"></td>
<td></td>
</tr>
<tr>
<td align="right"><kbd>   RW侠   </kbd></td>
<td>2</td>
<td align="right"></td>
<td></td>
<td align="right"><kbd> 成都AG超玩会  </kbd></td>
<td>4</td>
<td align="right"><strong>败者组决赛</strong></td>
<td><strong>积分</strong></td>
</tr>
<tr>
<td align="right"><kbd>   TES    </kbd></td>
<td>4</td>
<td align="right"><kbd>  深圳DYG </kbd></td>
<td>3</td>
<td align="right"></td>
<td></td>
<td align="right"><kbd>  广州TTG  </kbd></td>
<td>4</td>
</tr>
<tr>
<td align="right"></td>
<td></td>
<td align="right"><kbd>    TES  </kbd></td>
<td>4</td>
<td align="right"></td>
<td></td>
<td align="right"><kbd>成都AG超玩会</kbd></td>
<td>3</td>
</tr>
</tbody></table>
<h2 id="总决赛"><a href="#总决赛" class="headerlink" title="总决赛"></a>总决赛</h2><table>
<thead>
<tr>
<th align="center">战队</th>
<th>积分</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><kbd>南京Hero久竞</kbd></td>
<td>4</td>
</tr>
<tr>
<td align="center"><kbd> 广州TTG    </kbd></td>
<td>3</td>
</tr>
</tbody></table>
<h2 id="附：2021年世冠实时积分榜"><a href="#附：2021年世冠实时积分榜" class="headerlink" title="附：2021年世冠实时积分榜"></a>附：2021年世冠实时积分榜</h2><table>
<thead>
<tr>
<th align="center">排名</th>
<th align="center">战队</th>
<th align="center">2020年秋季赛</th>
<th align="center">2021年春季赛</th>
<th align="center">积分年积分</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">南京Hero久竞</td>
<td align="center">4</td>
<td align="center">冠军</td>
<td align="center">直接晋级</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">成都AG超玩会</td>
<td align="center">8</td>
<td align="center">8</td>
<td align="center">16</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">深圳DYG</td>
<td align="center">12</td>
<td align="center">4</td>
<td align="center">16</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">广州TTG</td>
<td align="center">4</td>
<td align="center">10</td>
<td align="center">14</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">武汉eStarPro</td>
<td align="center">1</td>
<td align="center">8</td>
<td align="center">9</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">重庆QGhappy</td>
<td align="center">2</td>
<td align="center">6</td>
<td align="center">8</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">杭州LGD大鹅</td>
<td align="center">6</td>
<td align="center">2</td>
<td align="center">8</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center">TES</td>
<td align="center">0</td>
<td align="center">6</td>
<td align="center">6</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center">北京WB</td>
<td align="center">6</td>
<td align="center">0</td>
<td align="center">6</td>
</tr>
<tr>
<td align="center">10</td>
<td align="center">佛山GK</td>
<td align="center">1</td>
<td align="center">4</td>
<td align="center">5</td>
</tr>
<tr>
<td align="center">11</td>
<td align="center">GOG</td>
<td align="center">0</td>
<td align="center">4</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">12</td>
<td align="center">MTG</td>
<td align="center">3</td>
<td align="center">4</td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">13</td>
<td align="center">XYG</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">14</td>
<td align="center">东莞Wz</td>
<td align="center">2</td>
<td align="center">3</td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">15</td>
<td align="center">RW侠</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">16</td>
<td align="center">RNG.M</td>
<td align="center">2</td>
<td align="center">2</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">17</td>
<td align="center">昆山SC</td>
<td align="center">1</td>
<td align="center">1</td>
<td align="center">2</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome 一键下载网页资源</title>
    <url>/p/c47ce95f.html</url>
    <content><![CDATA[<p>有时遇到好看的H5网站，相要下载上面的资源。按F12可以查看Sources（源代码），一个一个的下载资源比较麻烦，但是Chrome中有个<code>Save All Resources</code>插件可以一键下载网页资源.</p>
<h2 id="在线安装"><a href="#在线安装" class="headerlink" title="在线安装"></a>在线安装</h2><p>先在Google Chrome网上应用店中搜<a href="https://chrome.google.com/webstore/detail/save-all-resources/abpdnfjocnmdomablahdcfnoggeeiedb/related" target="_blank" rel="noopener">Save All Resources</a>,直接<code>添加至Chrome</code></p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/c47ce95f/19826068-298b56f41cf0791f.png" alt></p>
<h2 id="离线安装"><a href="#离线安装" class="headerlink" title="离线安装"></a>离线安装</h2><p>如果打不开应用商店，可以下载<a href="https://raw.githubusercontent.com/zngw/cdn/master/SaveAllResources-0.1.8_0.crx" target="_blank" rel="noopener">离线Save All Resources</a>, 导入方式可以参考<a href="/p/3366a179.html">Chrome 扩展导入导出</a></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>打开要下载的网站，按F12查看源码。选择右侧的<code>ResourcesSaver</code>，然后点<code>Save All Resources</code>就可以直接保存</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/c47ce95f/19826068-75c5f02198f94367.png" alt></p>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome 扩展导入导出</title>
    <url>/p/3366a179.html</url>
    <content><![CDATA[<h2 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h2><h3 id="1-进入扩展程序"><a href="#1-进入扩展程序" class="headerlink" title="1. 进入扩展程序"></a>1. 进入扩展程序</h3><p>在浏览器地址栏输入<code>chrome://extensions/</code>打开扩展程序页面<br><img src="//gitee.com/guoke3915/zw/raw/master/p/3366a179/19826068-3574c7650fdc70a1.png" alt></p>
<h3 id="2-查看详情，找到ID"><a href="#2-查看详情，找到ID" class="headerlink" title="2. 查看详情，找到ID"></a>2. 查看详情，找到ID</h3><p><img src="//gitee.com/guoke3915/zw/raw/master/p/3366a179/19826068-7368f24d14cc27e8.png" alt></p>
<h3 id="3-找到扩展所在目录"><a href="#3-找到扩展所在目录" class="headerlink" title="3. 找到扩展所在目录"></a>3. 找到扩展所在目录</h3><ul>
<li>Win10中Chrome扩展目录为：<code>C:\Users\Administrator\AppData\Local\Google\Chrome\User Data\Default\Extensions</code></li>
<li>Win10中QQ浏览器扩展目录为：<code>C:\Users\Administrator\AppData\Local\Tencent\QQBrowser\User Data\Default\Extensions</code></li>
</ul>
<p>在目录中找到ID名相同的目录<br><img src="//gitee.com/guoke3915/zw/raw/master/p/3366a179/19826068-0bbe0811eed38687.png" alt></p>
<h3 id="4-打包扩展程序"><a href="#4-打包扩展程序" class="headerlink" title="4. 打包扩展程序"></a>4. 打包扩展程序</h3><p>选择扩展所在目录中ID同名目录下的版本号的目录，打包扩展</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/3366a179/19826068-ba51ea511b86cba2.png" alt></p>
<h3 id="5-完成导出"><a href="#5-完成导出" class="headerlink" title="5. 完成导出"></a>5. 完成导出</h3><p>导出的扩展在相对应的目录下，后缀为.crx的</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/3366a179/19826068-da765a632304ad86.png" alt></p>
<h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><h3 id="1-进入扩展程序-1"><a href="#1-进入扩展程序-1" class="headerlink" title="1. 进入扩展程序"></a>1. 进入扩展程序</h3><p>在浏览器地址栏输入<code>chrome://extensions/</code>打开扩展程序页面</p>
<h3 id="2-直接装crx文件拖入空白处，完成导入。"><a href="#2-直接装crx文件拖入空白处，完成导入。" class="headerlink" title="2. 直接装crx文件拖入空白处，完成导入。"></a>2. 直接装crx文件拖入空白处，完成导入。</h3><p><img src="//gitee.com/guoke3915/zw/raw/master/p/3366a179/19826068-c49d9a8c7db96638.png" alt></p>
<h3 id="3-如果导入后出现此扩展程序可能已损坏时。"><a href="#3-如果导入后出现此扩展程序可能已损坏时。" class="headerlink" title="3. 如果导入后出现此扩展程序可能已损坏时。"></a>3. 如果导入后出现此<code>扩展程序可能已损坏</code>时。</h3><p>可以装crx文件改名为zip，然后用压缩软件解压扩展为一个目录。再<code>加载已解压的扩展程序</code>导入</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/3366a179/19826068-eec78f093cd2e2bc.png" alt></p>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Win下VMware 虚拟机 开机自启动</title>
    <url>/p/9e0d941e.html</url>
    <content><![CDATA[<p>vm虚拟机可以用命令行启动，然后将命令行写入bat文件，设置成开机启动就行了。</p>
<ul>
<li>主机系统：Windows 10</li>
<li>虚拟机：VMware 15</li>
<li>VM安装路径：C:\Program Files (x86)\VMware\VMware Workstation\</li>
<li>VM系统目录：D:\VM\CentOS 7 64 位\CentOS 7 64 位.vmx</li>
</ul>
<h4 id="1-设置后台启动命令-vm-start-bat"><a href="#1-设置后台启动命令-vm-start-bat" class="headerlink" title="1. 设置后台启动命令 vm_start.bat"></a>1. 设置后台启动命令 vm_start.bat</h4><pre><code class="line-numbers language-bat">&quot;C:\Program Files (x86)\VMware\VMware Workstation\vmrun.exe&quot; start &quot;D:\VM\CentOS 7 64 位\CentOS 7 64 位.vmx&quot; nogui</code></pre>
<h4 id="2-设置后台关闭命令-vm-stop-bat"><a href="#2-设置后台关闭命令-vm-stop-bat" class="headerlink" title="2. 设置后台关闭命令 vm_stop.bat"></a>2. 设置后台关闭命令 vm_stop.bat</h4><pre><code class="line-numbers language-bat">&quot;C:\Program Files (x86)\VMware\VMware Workstation\vmrun.exe&quot; stop &quot;D:\VM\CentOS 7 64 位\CentOS 7 64 位.vmx&quot; soft</code></pre>
<h4 id="3-设置开机启动或关闭"><a href="#3-设置开机启动或关闭" class="headerlink" title="3. 设置开机启动或关闭"></a>3. 设置开机启动或关闭</h4><ul>
<li>运行 gpedit.msc</li>
</ul>
<p>将 vm_start.bat添加到用户登录脚本中，<br>将 vm_stop.bat添加到用户注销脚本中。</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/9e0d941e/19826068-076f51c6dfef0c8f-1615180680987.png" alt></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Bat获取svn版本号</title>
    <url>/p/97260c7c.html</url>
    <content><![CDATA[<p>有时在一些自动打包脚本中会使用到svn的版本号。这里可以使用到svn命令行来获取</p>
<p>在Windows系统中，以TortoiseSVN为例</p>
<h3 id="1-首先要确认安装了命令行模式。"><a href="#1-首先要确认安装了命令行模式。" class="headerlink" title="1. 首先要确认安装了命令行模式。"></a>1. 首先要确认安装了命令行模式。</h3><p>如果未安装可以通过<strong>Modify</strong>添加上去</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/97260c7c/19826068-0cadea4d5064d0c9.png" alt></p>
<h3 id="2-添加环境变量"><a href="#2-添加环境变量" class="headerlink" title="2. 添加环境变量"></a>2. 添加环境变量</h3><p>将<code>TortoiseSVN</code>所在的<code>bin</code>目录到Path环境变量中。使命令行中可以直接使用<code>svn</code>命令操作</p>
<h3 id="3-获取版本号"><a href="#3-获取版本号" class="headerlink" title="3.  获取版本号"></a>3.  获取版本号</h3><pre><code class="line-numbers language-bat">for /f &quot;delims=&quot; %%i in (&#39;svn info ./ ^| findstr &quot;Rev:&quot;&#39;) do set rev=%%i
set code=%rev:~18%
echo %code%</code></pre>
<p>svn info后面接要获取的svn版本号所在的目录，缺省或<code>./</code>都是当前目录。可以是相对路径也可以是绝对路径或svn远程地址</p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>go 编译出现gcc internal compiler error: Killed</title>
    <url>/p/706ce5cc.html</url>
    <content><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>阿里云1核512M CentOS 7</li>
</ul>
<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><ul>
<li>编译包含<code>gopkg.in/mgo.v2</code>库时出现了<code>gcc internal compiler error: Killed</code>报错</li>
</ul>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><ul>
<li>这是内存不足，且没有交换区，go中用到gcc编译过程中内存耗尽, 导致了编译中断。</li>
</ul>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="一、硬件解决"><a href="#一、硬件解决" class="headerlink" title="一、硬件解决"></a>一、硬件解决</h3><p>提升配置，增加内存。</p>
<h3 id="二、释放内存"><a href="#二、释放内存" class="headerlink" title="二、释放内存"></a>二、释放内存</h3><p>结束没用的进程，释放cache缓存</p>
<pre><code class="line-numbers language-bash">#!/bin/bash
echo  &quot;Clean  Cache Begin...&quot;

#写入硬盘，防止数据丢失
sync;sync;sync

#延迟10秒,等待磁盘写入
sleep 10

# 开始清理
echo 1 &gt; /proc/sys/vm/drop_caches

echo &quot;Clean Finish !&quot;</code></pre>
<h2 id="三、设置虚拟内存"><a href="#三、设置虚拟内存" class="headerlink" title="三、设置虚拟内存"></a>三、设置虚拟内存</h2><h3 id="1-创建分区文件"><a href="#1-创建分区文件" class="headerlink" title="1. 创建分区文件"></a>1. 创建分区文件</h3><pre><code class="line-numbers language-bash">dd if=/dev/zero of=/swapfile bs=1k count=2048000 #2G</code></pre>
<h3 id="2-生成swap文件系统"><a href="#2-生成swap文件系统" class="headerlink" title="2. 生成swap文件系统"></a>2. 生成swap文件系统</h3><pre><code class="line-numbers language-bash">mkswap /swapfile</code></pre>
<h3 id="3-激活-swap-文件"><a href="#3-激活-swap-文件" class="headerlink" title="3. 激活 swap 文件"></a>3. 激活 swap 文件</h3><pre><code class="line-numbers language-bash">swapon /swapfile</code></pre>
<h3 id="4-修改配置"><a href="#4-修改配置" class="headerlink" title="4. 修改配置"></a>4. 修改配置</h3><p>编辑<code>/etc/fstab</code>文件，在后面添加以下内容。不然系统重启后swap文件不会被激活</p>
<pre><code class="line-numbers language-bash">/swapfile  swap  swap    defaults 0 0</code></pre>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>SVN服务器跨平台迁移</title>
    <url>/p/187e3f43.html</url>
    <content><![CDATA[<p>不管是win还是linux中的svn，都可以通过用dump来导入导出达到备份或迁移的目的。</p>
<h1 id="Windows中VisualSVN-Server"><a href="#Windows中VisualSVN-Server" class="headerlink" title="Windows中VisualSVN Server"></a>Windows中VisualSVN Server</h1><h2 id="导出SVN仓库"><a href="#导出SVN仓库" class="headerlink" title="导出SVN仓库"></a>导出SVN仓库</h2><p><img src="//gitee.com/guoke3915/zw/raw/master/p/187e3f43/19826068-cb120098c22dc376.png" alt></p>
<p>打开VisualSVN Server面板中的命令行图标，输入命令导出dump</p>
<pre><code class="line-numbers language-bat">svnadmin dump test &gt; F:\test.dump
* Dumped revision 0.
* Dumped revision 1.
* Dumped revision 2.
* Dumped revision 3.
* Dumped revision 4.
* Dumped revision 5.
* Dumped revision 6.
* Dumped revision 7.
* Dumped revision 8.
* Dumped revision 9.
* Dumped revision 10.</code></pre>
<p>如果直接cmd运行的命令行，注意一下”svnadmin”是否配置环境变量，如果没有就去VisualSVN Server安装目录中找，还有test是仓库目录，也可以用完成的路径</p>
<h2 id="导入SVN仓库"><a href="#导入SVN仓库" class="headerlink" title="导入SVN仓库"></a>导入SVN仓库</h2><p>打开VisualSVN Server面板，右键Repositories -&gt; Import Existing Repository</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/187e3f43/19826068-cac72818fd0f3cf7.png" alt></p>
<p>选择 dump 文件导入模式</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/187e3f43/19826068-421c8ae2bc23cf65.png" alt></p>
<p>选择dump文件</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/187e3f43/19826068-c4649214c1e38517.png" alt></p>
<p>设置仓库名</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/187e3f43/19826068-60699949643dcad2.png" alt></p>
<p>选择权限<br><img src="//gitee.com/guoke3915/zw/raw/master/p/187e3f43/19826068-fe31296ac555e874.png" alt></p>
<p>等待导入完成</p>
<h1 id="Linux中subversion"><a href="#Linux中subversion" class="headerlink" title="Linux中subversion"></a>Linux中subversion</h1><h2 id="导出SVN仓库-1"><a href="#导出SVN仓库-1" class="headerlink" title="导出SVN仓库"></a>导出SVN仓库</h2><pre><code class="line-numbers language-bash">svnadmin dump /home/svn/test &gt; /home/test.dump</code></pre>
<h2 id="导入SVN仓库-1"><a href="#导入SVN仓库-1" class="headerlink" title="导入SVN仓库"></a>导入SVN仓库</h2><pre><code class="line-numbers language-bash"># 先创建相同名称的仓库
svnadmin create /home/svn/test

cd  /home/svn

# load 导出的dump仓库数据
svnadmin load test &lt; /home/test.dump</code></pre>
<p>修改用户及权限信息</p>
<h1 id="附：分版本号增量导入导出"><a href="#附：分版本号增量导入导出" class="headerlink" title="附：分版本号增量导入导出"></a>附：分版本号增量导入导出</h1><p>按版本号导出</p>
<pre><code class="line-numbers language-bash">svnadmin dump /home/svn/test -r 0:50 --incremental &gt; /home/test1.dump
svnadmin dump /home/svn/test -r 51:100 --incremental &gt; /home/test2.dump</code></pre>
<p>按导出版本号依次导入</p>
<pre><code class="line-numbers language-bash">svnadmin load test &lt; /home/test1.dump
svnadmin load test &lt; /home/test2.dump</code></pre>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS中svn服务器安装与使用</title>
    <url>/p/24020ba2.html</url>
    <content><![CDATA[<h1 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h1><pre><code class="line-numbers language-sh">sudo yum install subversion</code></pre>
<h2 id="1-1-检测安装是否成功"><a href="#1-1-检测安装是否成功" class="headerlink" title="1.1 检测安装是否成功"></a>1.1 检测安装是否成功</h2><pre><code class="line-numbers language-sh">svnserve --version</code></pre>
<h2 id="1-2-设置防火墙"><a href="#1-2-设置防火墙" class="headerlink" title="1.2 设置防火墙"></a>1.2 设置防火墙</h2><p>直接开放svnserve的端口就可以了，默认端口是3690</p>
<pre><code class="line-numbers language-sh">firewall-cmd --zone=public --add-port=3690/tcp --permanent
firewall-cmd --reload</code></pre>
<h2 id="1-3-设置selinux"><a href="#1-3-设置selinux" class="headerlink" title="1.3 设置selinux"></a>1.3 设置selinux</h2><p>如果selinux开启了，它会阻止文件的写入，从仓库中拉去正常，但上传的时候会出现<code>不能打开文件&quot;***/db/txn-current-lock&quot;权限不够</code></p>
<pre><code class="line-numbers language-sh">semanage permissive -a svnserve_t</code></pre>
<p>如果出现semanage未定义，可以参考<a href="/p/cb8e2633.html">CentOS7 中安装semanage来设置selinux</a></p>
<h1 id="2、-建立单个本版仓库"><a href="#2、-建立单个本版仓库" class="headerlink" title="2、 建立单个本版仓库"></a>2、 建立单个本版仓库</h1><h2 id="2-1-创建"><a href="#2-1-创建" class="headerlink" title="2.1 创建"></a>2.1 创建</h2><pre><code class="line-numbers language-sh">svnadmin create /home/svn/test</code></pre>
<p>仓库目录为<code>/home/svn/test</code>，如果要删除版本仓库直接删除目录就可以了<code>rm -rf /home/svn/test</code></p>
<h2 id="2-2-配置"><a href="#2-2-配置" class="headerlink" title="2.2 配置"></a>2.2 配置</h2><p>在仓库目录<code>/home/svn/test</code>的<code>conf</code>目录中会有三个文件</p>
<ul>
<li>svnserve.conf 主要配置文件</li>
<li>authz 权限管理配置</li>
<li>passwd 账号密码配置</li>
</ul>
<h2 id="svnserve-conf"><a href="#svnserve-conf" class="headerlink" title="svnserve.conf"></a>svnserve.conf</h2><p>修改配置</p>
<pre><code class="line-numbers language-conf">[general]
anon-access = none                #控制非鉴权用户访问版本库的权限
auth-access = write                 #控制鉴权用户访问版本库的权限
password-db = passwd           #指定用户名口令文件名
authz-db = authz                     #指定权限配置文件名
realm = /home/svn/test        #指定版本库的认证域，即在登录时提示的认证域名称</code></pre>
<h2 id="passwd-账号密码配置"><a href="#passwd-账号密码配置" class="headerlink" title="passwd 账号密码配置"></a>passwd 账号密码配置</h2><p>修改配置添加账号密码，以<code>账号=密码</code>的格式配置，<code>=</code>号二边尽量不要存在空格</p>
<pre><code class="line-numbers language-ini">[users]
admin=admin
guoke=123455
test=test
zw=123455</code></pre>
<h2 id="authz-权限管理配置"><a href="#authz-权限管理配置" class="headerlink" title="authz 权限管理配置"></a>authz 权限管理配置</h2><p>权限管理分为组管理和目录权限管理</p>
<ul>
<li><p>用户组配置：<code>组名=账号,账号...</code> 多账号之间以<code>,</code>号分割</p>
</li>
<li><p>目录：<br>[/相对仓库目录]<br>@组名=权限（rw:读写，r只读）<br>用户名=权限</p>
</li>
</ul>
<pre><code class="line-numbers language-ini">[groups]
admin=admin      #admin 用户组只有一个admin账号
test=test,guoke  #test用户组有test和guoke二个账号

[/]              #仓库根目录
@admin=rw        #admin用户组有读写权限
@test=r          #test用户组有只读权限
zw=rw            #zw用户有读写权限
*=               #其他用户无权限

[/test]
@admin=rw
@test=rw</code></pre>
<h1 id="3、-建立多个本版仓库"><a href="#3、-建立多个本版仓库" class="headerlink" title="3、 建立多个本版仓库"></a>3、 建立多个本版仓库</h1><h2 id="3-1-创建"><a href="#3-1-创建" class="headerlink" title="3.1 创建"></a>3.1 创建</h2><pre><code class="line-numbers language-sh">svnadmin create /home/svn/test1
svnadmin create /home/svn/test2</code></pre>
<h2 id="2-2-配置-1"><a href="#2-2-配置-1" class="headerlink" title="2.2 配置"></a>2.2 配置</h2><p>多个创建可以共用一套账号和密码权限管理。也可以用不同的账号密码管理，如果用不同的配置少单仓库类似，修改每个仓库conf下的账号和权限文件就可以了。下面说一下共用账号权限文件的情况。</p>
<p>在仓库目录<code>/home/svn</code>目录中创建authz文件和passwd文件。  </p>
<ul>
<li>authz 权限管理配置</li>
<li>passwd 账号密码配置</li>
</ul>
<h2 id="svnserve-conf-1"><a href="#svnserve-conf-1" class="headerlink" title="svnserve.conf"></a>svnserve.conf</h2><p>修改配置各仓库下conf/svnserve.conf。将password-db和authz-db指向/home/svn/目录下的文件</p>
<pre><code class="line-numbers language-conf">[general]
anon-access = none                #控制非鉴权用户访问版本库的权限
auth-access = write                 #控制鉴权用户访问版本库的权限
password-db = ../../passwd           #指定用户名口令文件名
authz-db = ../../authz           # 指定权限配置文件名
# realm = /home/svn/test        #指定版本库的认证域，即在登录时提示的认证域名称</code></pre>
<h2 id="passwd-账号密码配置-1"><a href="#passwd-账号密码配置-1" class="headerlink" title="passwd 账号密码配置"></a>passwd 账号密码配置</h2><p>修改/home/svn/passwd配置添加账号密码，以<code>账号=密码</code>的格式配置，<code>=</code>号二边尽量不要存在空格</p>
<pre><code class="line-numbers language-ini">[users]
admin=admin
guoke=123455
test=test
zw=123455</code></pre>
<h2 id="authz-权限管理配置-1"><a href="#authz-权限管理配置-1" class="headerlink" title="authz 权限管理配置"></a>authz 权限管理配置</h2><p>修改/home/svn/authz权限管理分为组管理和目录权限管理</p>
<ul>
<li><p>用户组配置：<code>组名=账号,账号...</code> 多账号之间以<code>,</code>号分割</p>
</li>
<li><p>目录：<br>[/相对仓库目录]<br>@组名=权限（rw:读写，r只读）<br>用户名=权限</p>
</li>
</ul>
<pre><code class="line-numbers language-ini">[groups]
admin=admin      #admin 用户组只有一个admin账号
test=test,guoke  #test用户组有test和guoke二个账号

# 设置所有仓库的权限
[/]              #仓库根目录
@admin=rw        #admin用户组有读写权限
@test=r          #test用户组有只读权限
zw=rw            #zw用户有读写权限
*=               #其他用户无权限

# 设置test1仓库的权限
[test1:/]
@admin=rw
@test=rw

# 设置test2仓库的权限
[test2:/]
@admin=rw
@test=rw</code></pre>
<h1 id="4、启动、停止"><a href="#4、启动、停止" class="headerlink" title="4、启动、停止"></a>4、启动、停止</h1><h2 id="4-1-启动SVN服务"><a href="#4-1-启动SVN服务" class="headerlink" title="4.1 启动SVN服务"></a>4.1 启动SVN服务</h2><h3 id="4-1-1-单仓库可以直接以仓库目录启动"><a href="#4-1-1-单仓库可以直接以仓库目录启动" class="headerlink" title="4.1.1 单仓库可以直接以仓库目录启动"></a>4.1.1 单仓库可以直接以仓库目录启动</h3><pre><code class="line-numbers language-sh">svnserve -dr /home/svn/test    # -d : 守护进程  -r : svn数据根目录 </code></pre>
<p>如果单仓库以/home/svn启动，此时访问的地址会有仓库名。<code>svn://ip/test</code></p>
<h3 id="4-1-2-多仓库启动上层svn目录"><a href="#4-1-2-多仓库启动上层svn目录" class="headerlink" title="4.1.2 多仓库启动上层svn目录"></a>4.1.2 多仓库启动上层svn目录</h3><pre><code class="line-numbers language-sh">svnserve -dr /home/svn    # -d : 守护进程  -r : svn数据根目录 </code></pre>
<p>访问地址分别为:</p>
<ul>
<li>svn://ip/test1  </li>
<li>svn://ip/test2  </li>
</ul>
<h2 id="4-2-查看SVN服务"><a href="#4-2-查看SVN服务" class="headerlink" title="4.2 查看SVN服务"></a>4.2 查看SVN服务</h2><pre><code class="line-numbers language-sh">ps -aux|grep svnserve  #默认端口为：3690</code></pre>
<h2 id="4-3-停止SVN服务"><a href="#4-3-停止SVN服务" class="headerlink" title="4.3 停止SVN服务"></a>4.3 停止SVN服务</h2><pre><code class="line-numbers language-sh"># ps 查出svnserve进程id，再kill掉，或只启动一个svn仓库时可用pkill
pkill svnserve </code></pre>
<h1 id="4-4-设置开机启动"><a href="#4-4-设置开机启动" class="headerlink" title="4.4 设置开机启动"></a>4.4 设置开机启动</h1><p>编辑<code>/etc/sysconfig/svnserve</code>文件，修改<code>OPTIONS=&quot;-r /var/svn&quot;</code>参数改为svn仓库目录<code>OPTIONS=&quot;-r /home/svn&quot;</code></p>
<p>设置开机启动</p>
<pre><code class="line-numbers language-sh">systemctl enable svnserve.service</code></pre>
<p>修改后也可以用systemctl来启动、停止、重启</p>
<pre><code class="line-numbers language-sh">systemctl start svnserve    # 启动
systemctl stop svnserve     # 停止
systemctl restart svnserve  # 重启</code></pre>
<p>svnserve启动后，修改authz和passwd文件是时实生效的，并不需要重启服务</p>
<h1 id="5、-查看svn服务器日志"><a href="#5、-查看svn服务器日志" class="headerlink" title="5、 查看svn服务器日志"></a>5、 查看svn服务器日志</h1><p>有时随着仓库越来越多，权限配置也越来越多时，会出现一些配置错误，导致访问时出现无法加载权限验证之前的错误，这个时候我们可以将svn服务器的日志打印出来，看些配置出错了。</p>
<p>停止svn服务器，重新附加log-file参数输入日志到指定文件</p>
<pre><code class="line-numbers language-sh">svnserve -d -r /home/svn --log-file=/var/log/svnserve.log</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Bat中读取ini文件</title>
    <url>/p/c27bbda2.html</url>
    <content><![CDATA[<p>很多时候配置文件会用到ini文件，在bat中可以写一个readini函数来读取ini</p>
<pre><code class="line-numbers language-bat">:: 读取ini配置. %~1:文件名，%~2:域，%~3:key %~4:返回的value值
:readini 
@setlocal enableextensions enabledelayedexpansion
@echo off
set file=%~1
set area=[%~2]
set key=%~3
set currarea=
for /f &quot;usebackq delims=&quot; %%a in (&quot;!file!&quot;) do (
    set ln=%%a
    if &quot;x!ln:~0,1!&quot;==&quot;x[&quot; (
        set currarea=!ln!
    ) else (
        for /f &quot;tokens=1,2 delims==&quot; %%b in (&quot;!ln!&quot;) do (
            set currkey=%%b
            set currval=%%c
            if &quot;x!area!&quot;==&quot;x!currarea!&quot; (
                if &quot;x!key!&quot;==&quot;x!currkey!&quot; (
                    set var=!currval!
                )
            )
        )
    )
)
(endlocal
    set &quot;%~4=%var%&quot;
)
goto:eof</code></pre>
<p>例如ini文件</p>
<pre><code class="line-numbers language-txt">[test1]
user=admin
pwd=123456
[test2]
user=guoke
pwd=123455</code></pre>
<p>读取测试</p>
<pre><code class="line-numbers language-bat">@echo off
set file=test.ini

set user1=
set pwd1=
set user2=
set pwd2=

call:readini %file% test1 user user1
call:readini %file% test1 pwd pwd1
call:readini %file% test2 user user2
call:readini %file% test2 pwd pwd2

echo %user1%:%pwd1%
echo %user2%:%pwd2%

pause
exit

:: 读取ini配置. %~1:文件名，%~2:域，%~3:key %~4:返回的value值
:readini 
@setlocal enableextensions enabledelayedexpansion
@echo off
set file=%~1
set area=[%~2]
set key=%~3
set currarea=
for /f &quot;usebackq delims=&quot; %%a in (&quot;!file!&quot;) do (
    set ln=%%a
    if &quot;x!ln:~0,1!&quot;==&quot;x[&quot; (
        set currarea=!ln!
    ) else (
        for /f &quot;tokens=1,2 delims==&quot; %%b in (&quot;!ln!&quot;) do (
            set currkey=%%b
            set currval=%%c
            if &quot;x!area!&quot;==&quot;x!currarea!&quot; (
                if &quot;x!key!&quot;==&quot;x!currkey!&quot; (
                    set var=!currval!
                )
            )
        )
    )
)
(endlocal
    set &quot;%~4=%var%&quot;
)
goto:eof</code></pre>
<p>测试结果</p>
<pre><code class="line-numbers language-bat">admin:123456
guoke:123455
请按任意键继续. . .</code></pre>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7 中 yum 安装 Redis</title>
    <url>/p/437b60d5.html</url>
    <content><![CDATA[<h1 id="一、添加EPEL仓库，然后更新yum源"><a href="#一、添加EPEL仓库，然后更新yum源" class="headerlink" title="一、添加EPEL仓库，然后更新yum源"></a>一、添加EPEL仓库，然后更新yum源</h1><pre><code class="line-numbers language-bash">yum -y install epel-release
yum -y update</code></pre>
<h1 id="二、然后安装Redis数据库"><a href="#二、然后安装Redis数据库" class="headerlink" title="二、然后安装Redis数据库"></a>二、然后安装Redis数据库</h1><pre><code class="line-numbers language-bash">yum -y install redis</code></pre>
<h1 id="三、安装好后启动Redis服务"><a href="#三、安装好后启动Redis服务" class="headerlink" title="三、安装好后启动Redis服务"></a>三、安装好后启动Redis服务</h1><pre><code class="line-numbers language-bash">systemctl start redis #启动redis服务器

systemctl stop redis #停止redis服务器

systemctl restart redis #重新启动redis服务器

systemctl status redis #获取redis服务器的运行状态

systemctl enable redis #开机启动redis服务器

systemctl disable redis #开机禁用redis服务器</code></pre>
<h1 id="四、配置文件"><a href="#四、配置文件" class="headerlink" title="四、配置文件"></a>四、配置文件</h1><p>文件配置路径为<code>/etc/redis.conf</code></p>
<h2 id="1-注释-bind这一行"><a href="#1-注释-bind这一行" class="headerlink" title="1. 注释 bind这一行"></a>1. 注释 bind这一行</h2><pre><code class="line-numbers language-conf">#bind 127.0.0.1</code></pre>
<h2 id="2-修改密码"><a href="#2-修改密码" class="headerlink" title="2. 修改密码"></a>2. 修改密码</h2><pre><code class="line-numbers language-conf">requirepass 密码</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7 中 yum 安装 MongoDB</title>
    <url>/p/73bd51fc.html</url>
    <content><![CDATA[<h1 id="1-创建文件"><a href="#1-创建文件" class="headerlink" title="1. 创建文件"></a>1. 创建文件</h1><pre><code class="line-numbers language-bash">vim /etc/yum.repos.d/mongodb-org-4.4.repo</code></pre>
<pre><code class="line-numbers language-repo">[mongodb-org-4.4]
name=MongoDB Repository
baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/4.4/x86_64/
gpgcheck=1
enabled=1
gpgkey=https://www.mongodb.org/static/pgp/server-4.4.asc</code></pre>
<h1 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h1><pre><code class="line-numbers language-bash">yum install -y mongodb-org</code></pre>
<p>默认数据位置</p>
<pre><code class="line-numbers language-bash">/var/lib/mongo </code></pre>
<p>默认日志位置</p>
<pre><code class="line-numbers language-bash">/var/log/mongodb</code></pre>
<p>配置文件位置</p>
<pre><code class="line-numbers language-bash">vim /etc/mongod.conf</code></pre>
<p>修改监听ip和端口</p>
<pre><code class="line-numbers language-bash">net:
  port: 3717
  bindIp: 0.0.0.0</code></pre>
<h1 id="3-开放3717端口"><a href="#3-开放3717端口" class="headerlink" title="3. 开放3717端口"></a>3. 开放3717端口</h1><h2 id="3-1-SElinux"><a href="#3-1-SElinux" class="headerlink" title="3.1 SElinux"></a>3.1 SElinux</h2><pre><code class="line-numbers language-bash">semanage port -a -t mongod_port_t -p tcp 3717</code></pre>
<h2 id="3-2-防火墙"><a href="#3-2-防火墙" class="headerlink" title="3.2 防火墙"></a>3.2 防火墙</h2><pre><code class="line-numbers language-bash">firewall-cmd --zone=public --add-port=3717/tcp --permanent
firewall-cmd --reload</code></pre>
<h1 id="4-开启服务-mongod"><a href="#4-开启服务-mongod" class="headerlink" title="4. 开启服务 mongod"></a>4. 开启服务 mongod</h1><pre><code class="line-numbers language-bash">systemctl start mongod # 开启
systemctl stop mongod # 关闭
systemctl enable mongod # 开机启动</code></pre>
<p>若启动失败</p>
<pre><code class="line-numbers language-bash">● mongod.service - MongoDB Database Server
   Loaded: loaded (/usr/lib/systemd/system/mongod.service; enabled; vendor preset: disabled)
   Active: failed (Result: exit-code) since 二 2021-08-17 15:13:45 CST; 10s ago
     Docs: https://docs.mongodb.org/manual
  Process: 7562 ExecStart=/usr/bin/mongod $OPTIONS (code=exited, status=1/FAILURE)
  Process: 7559 ExecStartPre=/usr/bin/chmod 0755 /var/run/mongodb (code=exited, status=0/SUCCESS)
  Process: 7555 ExecStartPre=/usr/bin/chown mongod:mongod /var/run/mongodb (code=exited, status=0/SUCCESS)
  Process: 7553 ExecStartPre=/usr/bin/mkdir -p /var/run/mongodb (code=exited, status=0/SUCCESS)
8月 17 15:13:45 zngw systemd[1]: Starting MongoDB Database Server...
8月 17 15:13:45 zngw mongod[7562]: about to fork child process, waiting until server is ready for connections.
8月 17 15:13:45 zngw mongod[7562]: forked process: 7565
8月 17 15:13:45 zngw mongod[7562]: ERROR: child process failed, exited with 1
8月 17 15:13:45 zngw mongod[7562]: To see additional information in this output, start without the &quot;--fork&quot; option.
8月 17 15:13:45 zngw systemd[1]: mongod.service: control process exited, code=exited status=1
8月 17 15:13:45 zngw systemd[1]: Failed to start MongoDB Database Server.
8月 17 15:13:45 zngw systemd[1]: Unit mongod.service entered failed state.
8月 17 15:13:45 zngw systemd[1]: mongod.service failed.</code></pre>
<p>很大的可能是权限问题，因为在<code>/usr/lib/systemd/system/mongod.service</code>默认配置中，我们看到是以mongod用户组和用户来启动的。mongod对数据文件和日志文件没有访问权限。添加一下再重试就可以了</p>
<pre><code class="line-numbers language-bash">chown -Rc mongod. /var/log/mongodb
chown -Rc mongod. /var/lib/mongo</code></pre>
<h1 id="5-启动客户端-mongo"><a href="#5-启动客户端-mongo" class="headerlink" title="5. 启动客户端 mongo"></a>5. 启动客户端 mongo</h1><pre><code class="line-numbers language-bash">mongo --host 127.0.0.1:3717</code></pre>
<p>创建root用户</p>
<pre><code class="line-numbers language-bash">mongo --host 127.0.0.1:3717 admin --eval &quot;db.createUser({ user: &#39;root&#39;, pwd: &#39;123456&#39;, roles: [ { role: &#39;root&#39;, db: &#39;admin&#39; } , &#39;readWriteAnyDatabase&#39;] })&quot;</code></pre>
<h1 id="6-卸载"><a href="#6-卸载" class="headerlink" title="6. 卸载"></a>6. 卸载</h1><h2 id="6-1-删除安装包"><a href="#6-1-删除安装包" class="headerlink" title="6.1 删除安装包"></a>6.1 删除安装包</h2><pre><code class="line-numbers language-bash">sudo yum erase $(rpm -qa | grep mongodb-org)</code></pre>
<h2 id="6-2-删除数据文件"><a href="#6-2-删除数据文件" class="headerlink" title="6.2 删除数据文件"></a>6.2 删除数据文件</h2><pre><code class="line-numbers language-bash">rm -r /var/log/mongodb
rm -r /var/lib/mongo</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>go中使用mod</title>
    <url>/p/50ec48f7.html</url>
    <content><![CDATA[<p>go从1.11版本后就开始支持Modules了，但在1.13版本后加入了GOPROXY后才把go mod在国内带上了巅峰。</p>
<h1 id="GO111MODULE-开关"><a href="#GO111MODULE-开关" class="headerlink" title="GO111MODULE 开关"></a>GO111MODULE 开关</h1><p>GO111MODULE 有三个值：off, on和auto（默认值）。</p>
<ul>
<li>GO111MODULE=off，go命令行将不会支持module功能，寻找依赖包的方式将会沿用旧版本那种通过vendor目录或者GOPATH模式来查找。</li>
<li>GO111MODULE=on，go命令行会使用modules，而一点也不会去GOPATH目录下查找。</li>
<li>GO111MODULE=auto，默认值，go命令行将会根据当前目录来决定是否启用module功能。这种情况下可以分为两种情形：<br>1) 当前目录在GOPATH/src之外且该目录包含go.mod文件<br>2) 当前文件在包含go.mod文件的目录下面。</li>
</ul>
<h1 id="go-mod-命令"><a href="#go-mod-命令" class="headerlink" title="go mod 命令"></a>go mod 命令</h1><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>down</td>
<td>loaddownload modules to local cache(下载依赖包)</td>
</tr>
<tr>
<td>edit</td>
<td>edit go.mod from tools or scripts（编辑go.mod）</td>
</tr>
<tr>
<td>graph</td>
<td>print module requirement graph (打印模块依赖图)</td>
</tr>
<tr>
<td>init</td>
<td>initialize new module in current directory（在当前目录初始化mod）</td>
</tr>
<tr>
<td>tidy</td>
<td>add missing and remove unused modules(拉取缺少的模块，移除不用的模块)</td>
</tr>
<tr>
<td>vendor</td>
<td>make vendored copy of dependencies(将依赖复制到vendor下)</td>
</tr>
<tr>
<td>verify</td>
<td>verify dependencies have expected content (验证依赖是否正确）</td>
</tr>
<tr>
<td>why</td>
<td>explain why packages or modules are needed(解释为什么需要依赖)</td>
</tr>
</tbody></table>
<h1 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h1><p>在终端输入下面语句就可以了</p>
<pre><code class="line-numbers language-bash">$ go env -w GO111MODULE=on
$ go env -w GOPROXY=https://goproxy.io</code></pre>
<p>也可以把GOPROXY配置成环境变量。<br>除了goproxy.io之外，还有几个比较快的：</p>
<ul>
<li>阿里云：<a href="https://mirrors.aliyun.com/goproxy/" target="_blank" rel="noopener">https://mirrors.aliyun.com/goproxy/</a></li>
<li>七牛云：<a href="https://goproxy.cn" target="_blank" rel="noopener">https://goproxy.cn</a></li>
</ul>
<h1 id="项目中使用"><a href="#项目中使用" class="headerlink" title="项目中使用"></a>项目中使用</h1><p>进入项目目录中，使用<code>go  mod init</code>就可以创建一个新的go.mod了</p>
<p>执行 <code>go run</code>、<code>go build</code>时，如果项目中有go.mod或GO111MODULE=on，则会自动查找依赖自动下载。</p>
<p>使用<code>go mod tidy</code>来拉取缺少的模块，移除不用的模块</p>
<h1 id="go-get-升级"><a href="#go-get-升级" class="headerlink" title="go get 升级"></a>go get 升级</h1><ul>
<li>运行 go get -u 将会升级到最新的次要版本或者修订版本(x.y.z, z是修订版本号， y是次要版本号)</li>
<li>运行 go get -u=patch 将会升级到最新的修订版本</li>
<li>运行 go get package@version 将会升级到指定的版本号version</li>
<li>运行go get如果有版本的更改，那么go.mod文件也会更改</li>
</ul>
<p>本文参考:<a href="https://juejin.cn/post/6844903798658301960" target="_blank" rel="noopener">https://juejin.cn/post/6844903798658301960</a></p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>go mod tidy 报错：verifying ...: checksum mismatch</title>
    <url>/p/401b1ff2.html</url>
    <content><![CDATA[<h1 id="在执行go-mod-tiny的时候报错"><a href="#在执行go-mod-tiny的时候报错" class="headerlink" title="在执行go mod tiny的时候报错"></a>在执行go mod tiny的时候报错</h1><pre><code class="line-numbers language-bash">verifying github.com/cihub/seelog@v0.0.0-20170130134532-f561c5e57575/go.mod: checksum mismatch
        downloaded: h1:vScKZAbbGEqcaDUm34qJI4cnTNW/l9di38kVNqd0e58=
        go.sum:     h1:9d6lWj8KzO/fd/NrVaLscBKmPigpZpn5YawRPw+e3Yo=
</code></pre>
<h1 id="解决办法是清理一下mod缓存重新下载"><a href="#解决办法是清理一下mod缓存重新下载" class="headerlink" title="解决办法是清理一下mod缓存重新下载"></a>解决办法是清理一下mod缓存重新下载</h1><pre><code class="line-numbers language-bat">go clean -modcache

:: 删了go.sum文件
del go.sum

go mod tidy</code></pre>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>游戏配置转换工具</title>
    <url>/p/80d45126.html</url>
    <content><![CDATA[<h1 id="游戏配置转换工具"><a href="#游戏配置转换工具" class="headerlink" title="游戏配置转换工具"></a>游戏配置转换工具</h1><p>　　在游戏开发过程中，肯定会需要用到一些配置，如果联网游戏还会涉及到服务器和客户端。相同的功能不同的属性可能会在服务器和客户端共用，有的可能只有服务器使用，有的只有客户端来使用。在配置表的时候如果服务器和客户端分开来配容易出错。可以把数据配在一个表里，然后用工具拆分是服务器的还是客户端的数据。  </p>
<a id="more"></a>

<p>　　此工具是使用Go语言开发的可以实现配置一表xlsx表，按标志分别输入为客户端或服务器的表，输出格式有 <strong>json</strong>、<strong>ts</strong>、<strong>js</strong>、<strong>mongodb</strong>、<strong>csv</strong>的小工具。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h3 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h3><p>安装好go开发环境，直接编译</p>
<pre><code class="line-numbers language-bash">git clone https://github.com/zngw/cfg.git</code></pre>
<h3 id="直接下载编译好的可执行文件"><a href="#直接下载编译好的可执行文件" class="headerlink" title="直接下载编译好的可执行文件"></a>直接下载编译好的可执行文件</h3><p>下载地址：<a href="https://github.com/zngw/cfg/releases" target="_blank" rel="noopener">cfg</a></p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h3 id="直接运行"><a href="#直接运行" class="headerlink" title="直接运行"></a>直接运行</h3><p>运行后会装<strong>./excel</strong>目录下的xlsx文件，服务器转成 <strong>mongodb</strong>,客户端转成 <strong>json</strong></p>
<h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><h4 id="文件配置"><a href="#文件配置" class="headerlink" title="文件配置"></a>文件配置</h4><p>配置文件为json格式。可以用命令行参数 -c 加载配置文件，默认为同目录下的 <strong>./conf.json</strong></p>
<pre><code class="line-numbers language-json">{
    &quot;path&quot;:&quot;./excel&quot;,
    &quot;pre&quot;:&quot;Table&quot;,
    &quot;type&quot;: &quot;all&quot;,
    &quot;client&quot;:[&quot;json&quot;,&quot;js&quot;,&quot;ts&quot;],
    &quot;server&quot;:[&quot;mdb&quot;,&quot;csv&quot;]
}</code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>path</td>
<td>Excel所在目录</td>
</tr>
<tr>
<td>pre</td>
<td>转换表前缀</td>
</tr>
<tr>
<td>type</td>
<td>输出类型</td>
</tr>
<tr>
<td>client</td>
<td>客户端输出文件类型</td>
</tr>
<tr>
<td>server</td>
<td>服务器输出文件类型</td>
</tr>
</tbody></table>
<h4 id="命令行配置"><a href="#命令行配置" class="headerlink" title="命令行配置"></a>命令行配置</h4><pre><code class="line-numbers language-bash">cfg -c ./cfg.json -pre Table -p ./excel -t all -cli json|ts -ser mdb</code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>c</td>
<td>配置文件</td>
</tr>
<tr>
<td>path</td>
<td>Excel所在目录</td>
</tr>
<tr>
<td>pre</td>
<td>转换表前缀</td>
</tr>
<tr>
<td>type</td>
<td>输出类型</td>
</tr>
<tr>
<td>client</td>
<td>客户端输出文件类型</td>
</tr>
<tr>
<td>server</td>
<td>服务器输出文件类型</td>
</tr>
</tbody></table>
<p>如果同时配置了文件和命令行参数，则命令行参数覆盖配置文件中的</p>
<h1 id="表格配置"><a href="#表格配置" class="headerlink" title="表格配置"></a>表格配置</h1><p>一般的配置可分为二种，一种是属性值，就是一个key对应一个值的；另一种就是数组性质的表格。</p>
<h2 id="配置说明-1"><a href="#配置说明-1" class="headerlink" title="配置说明"></a>配置说明</h2><h4 id="配置表中表明该配置是属性哪端"><a href="#配置表中表明该配置是属性哪端" class="headerlink" title="配置表中表明该配置是属性哪端"></a>配置表中表明该配置是属性哪端</h4><ul>
<li>Null  : 不加入配置</li>
<li>Common: 共同配置</li>
<li>Client: 客户端配置</li>
<li>Server: 服务器配置</li>
</ul>
<h4 id="编译输入类型"><a href="#编译输入类型" class="headerlink" title="编译输入类型"></a>编译输入类型</h4><ul>
<li>all: 编译服务和客户端</li>
<li>cli: 编译客户端</li>
<li>ser: 编译服务器</li>
</ul>
<h4 id="输入文件类型"><a href="#输入文件类型" class="headerlink" title="输入文件类型"></a>输入文件类型</h4><ul>
<li>json:输出Json格式</li>
<li>js:输出js格式</li>
<li>ts:输出ts格式</li>
<li>mdb:输出Mongodb的js格式</li>
<li>csv:输出csv</li>
</ul>
<h4 id="数据类型说明"><a href="#数据类型说明" class="headerlink" title="数据类型说明"></a>数据类型说明</h4><ul>
<li>BOOL: bool类型</li>
<li>INT: int类型</li>
<li>LONG: long类型</li>
<li>FLOAT: 浮点类型</li>
<li>STRING: 字符串</li>
<li>OBJ: json数据</li>
<li>ARRAY: json数组</li>
</ul>
<h2 id="解析数组表"><a href="#解析数组表" class="headerlink" title="解析数组表"></a>解析数组表</h2><p>表格前四行为固定格式。<br>第一行标识为变量为服务器、客户端使用<br>第二行为变量名<br>第三行为变量数据类型<br>第四行为变量描述，不记录转后的数据中  </p>
<table>
<thead>
<tr>
<th>Common</th>
<th>Common</th>
<th>Common</th>
<th>Server</th>
<th>Server</th>
<th>Client</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>type</td>
<td>name</td>
<td>attr</td>
<td>rand</td>
<td>desc</td>
</tr>
<tr>
<td>INT</td>
<td>INT</td>
<td>STRING</td>
<td>OBJ</td>
<td>ARRAY</td>
<td>STRING</td>
</tr>
<tr>
<td>道具ID</td>
<td>类型</td>
<td>名字</td>
<td>固定属性</td>
<td>随机属性</td>
<td>描述</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>刀</td>
<td>{“atk”:100}</td>
<td>[{“weight”:80,”attr”:”atk”,”min”:10,”max”:100},{“weight”:20,”attr”:”atk”,”min”:100,”max”:500}]</td>
<td>这是一把好刀</td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td>剑</td>
<td>{“atk”:100}</td>
<td>[{“weight”:80,”attr”:”atk”,”min”:10,”max”:100},{“weight”:20,”attr”:”atk”,”min”:100,”max”:500}]</td>
<td>这是一把好剑</td>
</tr>
<tr>
<td>3</td>
<td>2</td>
<td>衣服</td>
<td>{“def”:100,”hp”:55}</td>
<td>[{“weight”:50,”attr”:”def”,”min”:10,”max”:100},{“weight”:50,”attr”:”hp”,”min”:10,”max”:100}]</td>
<td>这是衣服</td>
</tr>
</tbody></table>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><h4 id="客户端js"><a href="#客户端js" class="headerlink" title="客户端js"></a>客户端js</h4><pre><code class="line-numbers language-js">var TableItem = [{&quot;desc&quot;:&quot;这是一把好刀&quot;,&quot;id&quot;:1,&quot;name&quot;:&quot;刀&quot;,&quot;type&quot;:1},{&quot;desc&quot;:&quot;这是一把好剑&quot;,&quot;id&quot;:2,&quot;name&quot;:&quot;剑&quot;,&quot;type&quot;:1},{&quot;desc&quot;:&quot;这是衣服&quot;,&quot;id&quot;:3,&quot;name&quot;:&quot;衣服&quot;,&quot;type&quot;:2}]
modules.export = TableItem</code></pre>
<h4 id="客户端ts"><a href="#客户端ts" class="headerlink" title="客户端ts"></a>客户端ts</h4><pre><code class="line-numbers language-ts">export let TableItem = [{&quot;desc&quot;:&quot;这是一把好刀&quot;,&quot;id&quot;:1,&quot;name&quot;:&quot;刀&quot;,&quot;type&quot;:1},{&quot;desc&quot;:&quot;这是一把好剑&quot;,&quot;id&quot;:2,&quot;name&quot;:&quot;剑&quot;,&quot;type&quot;:1},{&quot;desc&quot;:&quot;这是衣服&quot;,&quot;id&quot;:3,&quot;name&quot;:&quot;衣服&quot;,&quot;type&quot;:2}]</code></pre>
<h4 id="客户端json"><a href="#客户端json" class="headerlink" title="客户端json"></a>客户端json</h4><pre><code class="line-numbers language-json">[{&quot;desc&quot;:&quot;这是一把好刀&quot;,&quot;id&quot;:1,&quot;name&quot;:&quot;刀&quot;,&quot;type&quot;:1},{&quot;desc&quot;:&quot;这是一把好剑&quot;,&quot;id&quot;:2,&quot;name&quot;:&quot;剑&quot;,&quot;type&quot;:1},{&quot;desc&quot;:&quot;这是衣服&quot;,&quot;id&quot;:3,&quot;name&quot;:&quot;衣服&quot;,&quot;type&quot;:2}]</code></pre>
<h4 id="服务器csv"><a href="#服务器csv" class="headerlink" title="服务器csv"></a>服务器csv</h4><pre><code class="line-numbers language-csv">id,type,name,attr,rand
1,1,刀,100,atk=100=10=80|atk=500=100=20
2,1,剑,100,atk=100=10=80|atk=500=100=20
3,2,衣服,100=55,def=100=10=50|hp=100=10=50</code></pre>
<h4 id="服务器mdb"><a href="#服务器mdb" class="headerlink" title="服务器mdb"></a>服务器mdb</h4><pre><code class="line-numbers language-mdb">db.getCollection(&quot;TableItem&quot;).drop();db.createCollection(&quot;TableItem&quot;);db.getCollection(&quot;TableItem&quot;).insert({id:NumberInt(&quot;1&quot;),type:NumberInt(&quot;1&quot;),name:&quot;刀&quot;,attr:{atk:100},rand:[{attr:&quot;atk&quot;,min:10,max:100,weight:80},{attr:&quot;atk&quot;,min:100,max:500,weight:20}],_id:&quot;1&quot;});db.getCollection(&quot;TableItem&quot;).insert({id:NumberInt(&quot;2&quot;),type:NumberInt(&quot;1&quot;),name:&quot;剑&quot;,attr:{atk:100},rand:[{weight:80,attr:&quot;atk&quot;,min:10,max:100},{weight:20,attr:&quot;atk&quot;,min:100,max:500}],_id:&quot;2&quot;});db.getCollection(&quot;TableItem&quot;).insert({type:NumberInt(&quot;2&quot;),name:&quot;衣服&quot;,attr:{def:100,hp:55},rand:[{weight:50,attr:&quot;def&quot;,min:10,max:100},{min:10,max:100,weight:50,attr:&quot;hp&quot;}],_id:&quot;3&quot;,id:NumberInt(&quot;3&quot;)});</code></pre>
<h2 id="解析属性表"><a href="#解析属性表" class="headerlink" title="解析属性表"></a>解析属性表</h2><p>第一行第一列为空，用来区分表格类型。<br>第一行为描述，为配置固定格式，不会记录转换后的数据中。<br>第二行开始为正式配置  </p>
<table>
<thead>
<tr>
<th></th>
<th>变量名</th>
<th>数据类型</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Common</td>
<td>down_url</td>
<td>STRING</td>
<td><a href="https://zengwu.com.cn">https://zengwu.com.cn</a></td>
<td>下载地址</td>
</tr>
<tr>
<td>Server</td>
<td>init_coin</td>
<td>INT</td>
<td>10000</td>
<td>初始金币</td>
</tr>
<tr>
<td>Client</td>
<td>default_head</td>
<td>STRING</td>
<td>icon_0</td>
<td>默认头像</td>
</tr>
</tbody></table>
<h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h3><h4 id="客户端js-1"><a href="#客户端js-1" class="headerlink" title="客户端js"></a>客户端js</h4><pre><code class="line-numbers language-js">var TableConst = {&quot;default_head&quot;:&quot;icon_0&quot;,&quot;down_url&quot;:&quot;https://zengwu.com.cn&quot;}
modules.export = TableConst</code></pre>
<h4 id="客户端ts-1"><a href="#客户端ts-1" class="headerlink" title="客户端ts"></a>客户端ts</h4><pre><code class="line-numbers language-ts">export let TableConst = {&quot;default_head&quot;:&quot;icon_0&quot;,&quot;down_url&quot;:&quot;https://zengwu.com.cn&quot;}</code></pre>
<h4 id="客户端json-1"><a href="#客户端json-1" class="headerlink" title="客户端json"></a>客户端json</h4><pre><code class="line-numbers language-json">{&quot;default_head&quot;:&quot;icon_0&quot;,&quot;down_url&quot;:&quot;https://zengwu.com.cn&quot;}</code></pre>
<h4 id="服务器csv-1"><a href="#服务器csv-1" class="headerlink" title="服务器csv"></a>服务器csv</h4><pre><code class="line-numbers language-csv">down_url,init_coin
https://zengwu.com.cn,10000</code></pre>
<h4 id="服务器mdb-1"><a href="#服务器mdb-1" class="headerlink" title="服务器mdb"></a>服务器mdb</h4><pre><code class="line-numbers language-mdb">db.getCollection(&quot;TableConst&quot;).drop();db.createCollection(&quot;TableConst&quot;);db.getCollection(&quot;TableConst&quot;).insert({down_url:&quot;https://zengwu.com.cn&quot;,init_coin:NumberInt(&quot;10000&quot;)});</code></pre>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>中华人民共和国民法典</title>
    <url>/p/mfd.html</url>
    <content><![CDATA[<h1 id="中华人民共和国主席令"><a href="#中华人民共和国主席令" class="headerlink" title="中华人民共和国主席令"></a>中华人民共和国主席令</h1><p>第四十五号  </p>
<p>　　《中华人民共和国民法典》已由中华人民共和国第十三届全国人民代表大会第三次会议于2020年5月28日通过,现予公布,自2021年1月1日起施行。</p>
<p>　　中华人民共和国主席　习近平<br>　　2020年5月28日</p>
<p>中华人民共和国民法典(2020年5月28日第十三届全国人民代表大会第三次会议通过)</p>
<h1 id="第一编-总-则"><a href="#第一编-总-则" class="headerlink" title="第一编　总　　则"></a>第一编　总　　则</h1><h3 id="第一章-基-本-规-定"><a href="#第一章-基-本-规-定" class="headerlink" title="第一章　基 本 规 定"></a>第一章　基 本 规 定</h3><p>　　第一条　【立法目的】 为了保护民事主体的合法权益,调整民事关系,维护社会和经济秩序,适应中国特色社会主义发展要求,弘扬社会主义核心价值观,根据宪法,制定本法。</p>
<p>　　第二条　【调整范围】民法调整平等主体的自然人、法人和非法人组织之间的人身关系和财产关系。</p>
<p>　　第三条　【民事权益受法律保护】民事主体的人身权利、财产权利以及其他合法权益受法律保护,任何组织或者个人不得侵犯。</p>
<p>　　第四条　【平等原则】民事主体在民事活动中的法律地位一律平等。</p>
<p>　　第五条　【自愿原则】民事主体从事民事活动,应当遵循自愿原则,按照自己的意思设立、变更、终止民事法律关系。</p>
<p>　　第六条　【公平原则】民事主体从事民事活动,应当遵循公平原则,合理确定各方的权利和义务。</p>
<p>　　第七条　【诚信原则】民事主体从事民事活动,应当遵循诚信原则,秉持诚实,恪守承诺。</p>
<p>　　第八条　【守法与公序良俗原则】民事主体从事民事活动,不得违反法律,不得违背公序良俗。</p>
<p>　　第九条　【绿色原则】民事主体从事民事活动,应当有利于节约资源、保护生态环境。</p>
<p>　　第十条　【法律适用】处理民事纠纷,应当依照法律;法律没有规定的,可以适用习惯,但是不得违背公序良俗。</p>
<p>　　第十一条　【优先适用特别法】其他法律对民事关系有特别规定的,依照其规定。</p>
<p>　　第十二条　【效力范围】中华人民共和国领域内的民事活动,适用中华人民共和国法律。法律另有规定的,依照其规定。</p>
<h3 id="第二章-自-然-人"><a href="#第二章-自-然-人" class="headerlink" title="第二章　自　然　人"></a>第二章　自　然　人</h3><h4 id="第一节-民事权利能力和民事行为能力"><a href="#第一节-民事权利能力和民事行为能力" class="headerlink" title="第一节　民事权利能力和民事行为能力"></a>第一节　民事权利能力和民事行为能力</h4><p>　　第十三条　【自然人民事权利能力的起止】自然人从出生时起到死亡时止,具有民事权利能力,依法享有民事权利,承担民事义务。</p>
<p>　　第十四条　【自然人民事权利能力平等】自然人的民事权利能力一律平等。</p>
<p>　　第十五条　【自然人出生和死亡时间的判断标准】自然人的出生时间和死亡时间,以出生证明、死亡证明记载的时间为准;没有出生证明、死亡证明的,以户籍登记或者其他有效身份登记记载的时间为准。有其他证据足以推翻以上记载时间的,以该证据证明的时间为准。</p>
<p>　　第十六条　【胎儿利益的特殊保护】涉及遗产继承、接受赠与等胎儿利益保护的,胎儿视为具有民事权利能力。但是,胎儿娩出时为死体的,其民事权利能力自始不存在。</p>
<p>　　第十七条　【成年人与未成年人的年龄标准】十八周岁以上的自然人为成年人。不满十八周岁的自然人为未成年人。</p>
<p>　　第十八条　【完全民事行为能力人】成年人为完全民事行为能力人,可以独立实施民事法律行为。</p>
<p>　　十六周岁以上的未成年人,以自己的劳动收入为主要生活来源的,视为完全民事行为能力人。</p>
<p>　　第十九条　【限制民事行为能力的未成年人】八周岁以上的未成年人为限制民事行为能力人,实施民事法律行为由其法定代理人代理或者经其法定代理人同意、追认;但是,可以独立实施纯获利益的民事法律行为或者与其年龄、智力相适应的民事法律行为。</p>
<p>　　第二十条　【无民事行为能力的未成年人】不满八周岁的未成年人为无民事行为能力人,由其法定代理人代理实施民事法律行为。</p>
<p>　　第二十一条　【无民事行为能力的成年人】不能辨认自己行为的成年人为无民事行为能力人,由其法定代理人代理实施民事法律行为。</p>
<p>　　八周岁以上的未成年人不能辨认自己行为的,适用前款规定。</p>
<p>　　第二十二条　【限制民事行为能力的成年人】不能完全辨认自己行为的成年人为限制民事行为能力人,实施民事法律行为由其法定代理人代理或者经其法定代理人同意、追认;但是,可以独立实施纯获利益的民事法律行为或者与其智力、精神健康状况相适应的民事法律行为。</p>
<p>　　第二十三条　【法定代理人】无民事行为能力人、限制民事行为能力人的监护人是其法定代理人。</p>
<p>　　第二十四条　【无民事行为能力人或限制民事行为能力人的认定与恢复】不能辨认或者不能完全辨认自己行为的成年人,其利害关系人或者有关组织,可以向人民法院申请认定该成年人为无民事行为能力人或者限制民事行为能力人。</p>
<p>　　被人民法院认定为无民事行为能力人或者限制民事行为能力人的,经本人、利害关系人或者有关组织申请,人民法院可以根据其智力、精神健康恢复的状况,认定该成年人恢复为限制民事行为能力人或者完全民事行为能力人。</p>
<p>　　本条规定的有关组织包括:居民委员会、村民委员会、学校、医疗机构、妇女联合会、残疾人联合会、依法设立的老年人组织、民政部门等。</p>
<p>　　第二十五条　【自然人的住所】自然人以户籍登记或者其他有效身份登记记载的居所为住所;经常居所与住所不一致的,经常居所视为住所。</p>
<h4 id="第二节-监-护"><a href="#第二节-监-护" class="headerlink" title="第二节　监　　护"></a>第二节　监　　护</h4><p>　　第二十六条　【父母子女之间的法律义务】父母对未成年子女负有抚养、教育和保护的义务。</p>
<p>　　成年子女对父母负有赡养、扶助和保护的义务。</p>
<p>　　第二十七条　【未成年人的监护人】父母是未成年子女的监护人。</p>
<p>　　未成年人的父母已经死亡或者没有监护能力的,由下列有监护能力的人按顺序担任监护人:</p>
<p>　　(一)祖父母、外祖父母;</p>
<p>　　(二)兄、姐;</p>
<p>　　(三)其他愿意担任监护人的个人或者组织,但是须经未成年人住所地的居民委员会、村民委员会或者民政部门同意。</p>
<p>　　第二十八条　【无、限制民事行为能力的成年人的监护人】无民事行为能力或者限制民事行为能力的成年人,由下列有监护能力的人按顺序担任监护人:</p>
<p>　　(一)配偶;</p>
<p>　　(二)父母、子女;</p>
<p>　　(三)其他近亲属;</p>
<p>　　(四)其他愿意担任监护人的个人或者组织,但是须经被监护人住所地的居民委员会、村民委员会或者民政部门同意。</p>
<p>　　第二十九条　【遗嘱指定监护人】被监护人的父母担任监护人的,可以通过遗嘱指定监护人。</p>
<p>　　第三十条　【协议确定监护人】依法具有监护资格的人之间可以协议确定监护人。协议确定监护人应当尊重被监护人的真实意愿。</p>
<p>　　第三十一条　【监护争议解决程序】对监护人的确定有争议的,由被监护人住所地的居民委员会、村民委员会或者民政部门指定监护人,有关当事人对指定不服的,可以向人民法院申请指定监护人;有关当事人也可以直接向人民法院申请指定监护人。</p>
<p>　　居民委员会、村民委员会、民政部门或者人民法院应当尊重被监护人的真实意愿,按照最有利于被监护人的原则在依法具有监护资格的人中指定监护人。</p>
<p>　　依据本条第一款规定指定监护人前,被监护人的人身权利、财产权利以及其他合法权益处于无人保护状态的,由被监护人住所地的居民委员会、村民委员会、法律规定的有关组织或者民政部门担任临时监护人。</p>
<p>　　监护人被指定后,不得擅自变更;擅自变更的,不免除被指定的监护人的责任。</p>
<p>　　第三十二条　【公职监护人】没有依法具有监护资格的人的,监护人由民政部门担任,也可以由具备履行监护职责条件的被监护人住所地的居民委员会、村民委员会担任。</p>
<p>　　第三十三条　【意定监护】具有完全民事行为能力的成年人,可以与其近亲属、其他愿意担任监护人的个人或者组织事先协商,以书面形式确定自己的监护人,在自己丧失或者部分丧失民事行为能力时,由该监护人履行监护职责。</p>
<p>　　第三十四条　【监护人的职责与权利及临时生活照料措施】监护人的职责是代理被监护人实施民事法律行为,保护被监护人的人身权利、财产权利以及其他合法权益等。</p>
<p>　　监护人依法履行监护职责产生的权利,受法律保护。</p>
<p>　　监护人不履行监护职责或者侵害被监护人合法权益的,应当承担法律责任。</p>
<p>　　因发生突发事件等紧急情况,监护人暂时无法履行监护职责,被监护人的生活处于无人照料状态的,被监护人住所地的居民委员会、村民委员会或者民政部门应当为被监护人安排必要的临时生活照料措施。</p>
<p>　　第三十五条　【监护人履行职责的原则与要求】监护人应当按照最有利于被监护人的原则履行监护职责。监护人除为维护被监护人利益外,不得处分被监护人的财产。</p>
<p>　　未成年人的监护人履行监护职责,在作出与被监护人利益有关的决定时,应当根据被监护人的年龄和智力状况,尊重被监护人的真实意愿。</p>
<p>　　成年人的监护人履行监护职责,应当最大程度地尊重被监护人的真实意愿,保障并协助被监护人实施与其智力、精神健康状况相适应的民事法律行为。对被监护人有能力独立处理的事务,监护人不得干涉。</p>
<p>　　第三十六条　【撤销监护人资格】监护人有下列情形之一的,人民法院根据有关个人或者组织的申请,撤销其监护人资格,安排必要的临时监护措施,并按照最有利于被监护人的原则依法指定监护人:</p>
<p>　　(一)实施严重损害被监护人身心健康的行为;</p>
<p>　　(二)怠于履行监护职责,或者无法履行监护职责且拒绝将监护职责部分或者全部委托给他人,导致被监护人处于危困状态;</p>
<p>　　(三)实施严重侵害被监护人合法权益的其他行为。</p>
<p>　　本条规定的有关个人、组织包括:其他依法具有监护资格的人,居民委员会、村民委员会、学校、医疗机构、妇女联合会、残疾人联合会、未成年人保护组织、依法设立的老年人组织、民政部门等。</p>
<p>　　前款规定的个人和民政部门以外的组织未及时向人民法院申请撤销监护人资格的,民政部门应当向人民法院申请。</p>
<p>　　第三十七条　【监护人资格被撤销后负担义务不免除】依法负担被监护人抚养费、赡养费、扶养费的父母、子女、配偶等,被人民法院撤销监护人资格后,应当继续履行负担的义务。</p>
<p>　　第三十八条　【恢复监护人资格】被监护人的父母或者子女被人民法院撤销监护人资格后,除对被监护人实施故意犯罪的外,确有悔改表现的,经其申请,人民法院可以在尊重被监护人真实意愿的前提下,视情况恢复其监护人资格,人民法院指定的监护人与被监护人的监护关系同时终止。</p>
<p>　　第三十九条　【监护关系终止的情形】有下列情形之一的,监护关系终止:</p>
<p>　　(一)被监护人取得或者恢复完全民事行为能力;</p>
<p>　　(二)监护人丧失监护能力;</p>
<p>　　(三)被监护人或者监护人死亡;</p>
<p>　　(四)人民法院认定监护关系终止的其他情形。</p>
<p>　　监护关系终止后,被监护人仍然需要监护的,应当依法另行确定监护人。</p>
<h4 id="第三节-宣告失踪和宣告死亡"><a href="#第三节-宣告失踪和宣告死亡" class="headerlink" title="第三节　宣告失踪和宣告死亡"></a>第三节　宣告失踪和宣告死亡</h4><p>　　第四十条　【宣告失踪的条件】自然人下落不明满二年的,利害关系人可以向人民法院申请宣告该自然人为失踪人。</p>
<p>　　第四十一条　【下落不明的时间计算】自然人下落不明的时间自其失去音讯之日起计算。战争期间下落不明的,下落不明的时间自战争结束之日或者有关机关确定的下落不明之日起计算。</p>
<p>　　第四十二条　【失踪人的财产代管人】失踪人的财产由其配偶、成年子女、父母或者其他愿意担任财产代管人的人代管。</p>
<p>　　代管有争议,没有前款规定的人,或者前款规定的人无代管能力的,由人民法院指定的人代管。</p>
<p>　　第四十三条　【财产代管人的职责】财产代管人应当妥善管理失踪人的财产,维护其财产权益。</p>
<p>　　失踪人所欠税款、债务和应付的其他费用,由财产代管人从失踪人的财产中支付。</p>
<p>　　财产代管人因故意或者重大过失造成失踪人财产损失的,应当承担赔偿责任。</p>
<p>　　第四十四条　【财产代管人的变更】财产代管人不履行代管职责、侵害失踪人财产权益或者丧失代管能力的,失踪人的利害关系人可以向人民法院申请变更财产代管人。</p>
<p>　　财产代管人有正当理由的,可以向人民法院申请变更财产代管人。</p>
<p>　　人民法院变更财产代管人的,变更后的财产代管人有权请求原财产代管人及时移交有关财产并报告财产代管情况。</p>
<p>　　第四十五条　【失踪宣告的撤销】失踪人重新出现,经本人或者利害关系人申请,人民法院应当撤销失踪宣告。</p>
<p>　　失踪人重新出现,有权请求财产代管人及时移交有关财产并报告财产代管情况。</p>
<p>　　第四十六条　【宣告死亡的条件】自然人有下列情形之一的,利害关系人可以向人民法院申请宣告该自然人死亡:</p>
<p>　　(一)下落不明满四年;</p>
<p>　　(二)因意外事件,下落不明满二年。</p>
<p>　　因意外事件下落不明,经有关机关证明该自然人不可能生存的,申请宣告死亡不受二年时间的限制。</p>
<p>　　第四十七条　【宣告死亡的优先适用】对同一自然人,有的利害关系人申请宣告死亡,有的利害关系人申请宣告失踪,符合本法规定的宣告死亡条件的,人民法院应当宣告死亡。</p>
<p>　　第四十八条　【被宣告死亡的人死亡日期的确定】被宣告死亡的人,人民法院宣告死亡的判决作出之日视为其死亡的日期;因意外事件下落不明宣告死亡的,意外事件发生之日视为其死亡的日期。</p>
<p>　　第四十九条　【被宣告死亡期间的民事法律行为效力】自然人被宣告死亡但是并未死亡的,不影响该自然人在被宣告死亡期间实施的民事法律行为的效力。</p>
<p>　　第五十条　【死亡宣告的撤销】被宣告死亡的人重新出现,经本人或者利害关系人申请,人民法院应当撤销死亡宣告。</p>
<p>　　第五十一条　【宣告死亡、撤销死亡宣告对婚姻关系的影响】被宣告死亡的人的婚姻关系,自死亡宣告之日起消除。死亡宣告被撤销的,婚姻关系自撤销死亡宣告之日起自行恢复。但是,其配偶再婚或者向婚姻登记机关书面声明不愿意恢复的除外。</p>
<p>　　第五十二条　【撤销死亡宣告对收养关系的影响】被宣告死亡的人在被宣告死亡期间,其子女被他人依法收养的,在死亡宣告被撤销后,不得以未经本人同意为由主张收养行为无效。</p>
<p>　　第五十三条　【死亡宣告撤销后的财产返还】被撤销死亡宣告的人有权请求依照本法第六编取得其财产的民事主体返还财产;无法返还的,应当给予适当补偿。</p>
<p>　　利害关系人隐瞒真实情况,致使他人被宣告死亡而取得其财产的,除应当返还财产外,还应当对由此造成的损失承担赔偿责任。</p>
<h4 id="第四节-个体工商户和农村承包经营户"><a href="#第四节-个体工商户和农村承包经营户" class="headerlink" title="第四节　个体工商户和农村承包经营户"></a>第四节　个体工商户和农村承包经营户</h4><p>　　第五十四条　【个体工商户的定义】自然人从事工商业经营,经依法登记,为个体工商户。个体工商户可以起字号。</p>
<p>　　第五十五条　【农村承包经营户的定义】农村集体经济组织的成员,依法取得农村土地承包经营权,从事家庭承包经营的,为农村承包经营户。</p>
<p>　　第五十六条　【债务承担规则】个体工商户的债务,个人经营的,以个人财产承担;家庭经营的,以家庭财产承担;无法区分的,以家庭财产承担。</p>
<p>　　农村承包经营户的债务,以从事农村土地承包经营的农户财产承担;事实上由农户部分成员经营的,以该部分成员的财产承担。</p>
<h3 id="第三章-法-人"><a href="#第三章-法-人" class="headerlink" title="第三章　法　　人"></a>第三章　法　　人</h3><h4 id="第一节-一-般-规-定"><a href="#第一节-一-般-规-定" class="headerlink" title="第一节　一 般 规 定"></a>第一节　一 般 规 定</h4><p>　　第五十七条　【法人的定义】法人是具有民事权利能力和民事行为能力,依法独立享有民事权利和承担民事义务的组织。</p>
<p>　　第五十八条　【法人成立的条件】法人应当依法成立。</p>
<p>　　法人应当有自己的名称、组织机构、住所、财产或者经费。法人成立的具体条件和程序,依照法律、行政法规的规定。</p>
<p>　　设立法人,法律、行政法规规定须经有关机关批准的,依照其规定。</p>
<p>　　第五十九条　【法人民事权利能力和民事行为能力的起止】法人的民事权利能力和民事行为能力,从法人成立时产生,到法人终止时消灭。</p>
<p>　　第六十条　【法人民事责任承担】法人以其全部财产独立承担民事责任。</p>
<p>　　第六十一条　【法定代表人的定义及行为的法律后果】依照法律或者法人章程的规定,代表法人从事民事活动的负责人,为法人的法定代表人。</p>
<p>　　法定代表人以法人名义从事的民事活动,其法律后果由法人承受。</p>
<p>　　法人章程或者法人权力机构对法定代表人代表权的限制,不得对抗善意相对人。</p>
<p>　　第六十二条　【法定代表人职务侵权行为的责任承担】法定代表人因执行职务造成他人损害的,由法人承担民事责任。</p>
<p>　　法人承担民事责任后,依照法律或者法人章程的规定,可以向有过错的法定代表人追偿。</p>
<p>　　第六十三条　【法人的住所】法人以其主要办事机构所在地为住所。依法需要办理法人登记的,应当将主要办事机构所在地登记为住所。</p>
<p>　　第六十四条　【法人变更登记】法人存续期间登记事项发生变化的,应当依法向登记机关申请变更登记。</p>
<p>　　第六十五条　【法人实际情况与登记事项不一致的法律后果】法人的实际情况与登记的事项不一致的,不得对抗善意相对人。</p>
<p>　　第六十六条　【公示登记信息】登记机关应当依法及时公示法人登记的有关信息。</p>
<p>　　第六十七条　【法人合并、分立后权利义务的享有和承担】法人合并的,其权利和义务由合并后的法人享有和承担。</p>
<p>　　法人分立的,其权利和义务由分立后的法人享有连带债权,承担连带债务,但是债权人和债务人另有约定的除外。</p>
<p>　　第六十八条　【法人终止的原因】有下列原因之一并依法完成清算、注销登记的,法人终止:</p>
<p>　　(一)法人解散;</p>
<p>　　(二)法人被宣告破产;</p>
<p>　　(三)法律规定的其他原因。</p>
<p>　　法人终止,法律、行政法规规定须经有关机关批准的,依照其规定。</p>
<p>　　第六十九条　【法人解散的情形】有下列情形之一的,法人解散:</p>
<p>　　(一)法人章程规定的存续期间届满或者法人章程规定的其他解散事由出现;</p>
<p>　　(二)法人的权力机构决议解散;</p>
<p>　　(三)因法人合并或者分立需要解散;</p>
<p>　　(四)法人依法被吊销营业执照、登记证书,被责令关闭或者被撤销;</p>
<p>　　(五)法律规定的其他情形。</p>
<p>　　第七十条　【法人解散后的清算】法人解散的,除合并或者分立的情形外,清算义务人应当及时组成清算组进行清算。</p>
<p>　　法人的董事、理事等执行机构或者决策机构的成员为清算义务人。法律、行政法规另有规定的,依照其规定。</p>
<p>　　清算义务人未及时履行清算义务,造成损害的,应当承担民事责任;主管机关或者利害关系人可以申请人民法院指定有关人员组成清算组进行清算。</p>
<p>　　第七十一条　【清算适用的法律依据】法人的清算程序和清算组职权,依照有关法律的规定;没有规定的,参照适用公司法律的有关规定。</p>
<p>　　第七十二条　【清算中法人地位、清算后剩余财产的处理和法人终止】清算期间法人存续,但是不得从事与清算无关的活动。</p>
<p>　　法人清算后的剩余财产,按照法人章程的规定或者法人权力机构的决议处理。法律另有规定的,依照其规定。</p>
<p>　　清算结束并完成法人注销登记时,法人终止;依法不需要办理法人登记的,清算结束时,法人终止。</p>
<p>　　第七十三条　【法人破产】法人被宣告破产的,依法进行破产清算并完成法人注销登记时,法人终止。</p>
<p>　　第七十四条　【法人分支机构及其责任承担】法人可以依法设立分支机构。法律、行政法规规定分支机构应当登记的,依照其规定。</p>
<p>　　分支机构以自己的名义从事民事活动,产生的民事责任由法人承担;也可以先以该分支机构管理的财产承担,不足以承担的,由法人承担。</p>
<p>　　第七十五条　【法人设立行为的法律后果】设立人为设立法人从事的民事活动,其法律后果由法人承受;法人未成立的,其法律后果由设立人承受,设立人为二人以上的,享有连带债权,承担连带债务。</p>
<p>　　设立人为设立法人以自己的名义从事民事活动产生的民事责任,第三人有权选择请求法人或者设立人承担。</p>
<h4 id="第二节-营-利-法-人"><a href="#第二节-营-利-法-人" class="headerlink" title="第二节　营 利 法 人"></a>第二节　营 利 法 人</h4><p>　　第七十六条　【营利法人的定义及类型】以取得利润并分配给股东等出资人为目的成立的法人,为营利法人。</p>
<p>　　营利法人包括有限责任公司、股份有限公司和其他企业法人等。</p>
<p>　　第七十七条　【营利法人的成立】营利法人经依法登记成立。</p>
<p>　　第七十八条　【营利法人的营业执照】依法设立的营利法人,由登记机关发给营利法人营业执照。营业执照签发日期为营利法人的成立日期。</p>
<p>　　第七十九条　【营利法人的章程】设立营利法人应当依法制定法人章程。</p>
<p>　　第八十条　【营利法人的权力机构】营利法人应当设权力机构。</p>
<p>　　权力机构行使修改法人章程,选举或者更换执行机构、监督机构成员,以及法人章程规定的其他职权。</p>
<p>　　第八十一条　【营利法人的执行机构】营利法人应当设执行机构。</p>
<p>　　执行机构行使召集权力机构会议,决定法人的经营计划和投资方案,决定法人内部管理机构的设置,以及法人章程规定的其他职权。</p>
<p>　　执行机构为董事会或者执行董事的,董事长、执行董事或者经理按照法人章程的规定担任法定代表人;未设董事会或者执行董事的,法人章程规定的主要负责人为其执行机构和法定代表人。</p>
<p>　　第八十二条　【营利法人的监督机构】营利法人设监事会或者监事等监督机构的,监督机构依法行使检查法人财务,监督执行机构成员、高级管理人员执行法人职务的行为,以及法人章程规定的其他职权。</p>
<p>　　第八十三条　【出资人滥用权利的责任承担】营利法人的出资人不得滥用出资人权利损害法人或者其他出资人的利益;滥用出资人权利造成法人或者其他出资人损失的,应当依法承担民事责任。</p>
<p>　　营利法人的出资人不得滥用法人独立地位和出资人有限责任损害法人债权人的利益;滥用法人独立地位和出资人有限责任,逃避债务,严重损害法人债权人的利益的,应当对法人债务承担连带责任。</p>
<p>　　第八十四条　【限制不当利用关联关系】营利法人的控股出资人、实际控制人、董事、监事、高级管理人员不得利用其关联关系损害法人的利益;利用关联关系造成法人损失的,应当承担赔偿责任。</p>
<p>　　第八十五条　【决议的撤销】营利法人的权力机构、执行机构作出决议的会议召集程序、表决方式违反法律、行政法规、法人章程,或者决议内容违反法人章程的,营利法人的出资人可以请求人民法院撤销该决议。但是,营利法人依据该决议与善意相对人形成的民事法律关系不受影响。</p>
<p>　　第八十六条　【营利法人应履行的义务】营利法人从事经营活动,应当遵守商业道德,维护交易安全,接受政府和社会的监督,承担社会责任。</p>
<h4 id="第三节-非营利法人"><a href="#第三节-非营利法人" class="headerlink" title="第三节　非营利法人"></a>第三节　非营利法人</h4><p>　　第八十七条　【非营利法人的定义及类型】为公益目的或者其他非营利目的成立,不向出资人、设立人或者会员分配所取得利润的法人,为非营利法人。</p>
<p>　　非营利法人包括事业单位、社会团体、基金会、社会服务机构等。</p>
<p>　　第八十八条　【事业单位法人资格的取得】具备法人条件,为适应经济社会发展需要,提供公益服务设立的事业单位,经依法登记成立,取得事业单位法人资格;依法不需要办理法人登记的,从成立之日起,具有事业单位法人资格。</p>
<p>　　第八十九条　【事业单位法人的组织机构及法定代表人】事业单位法人设理事会的,除法律另有规定外,理事会为其决策机构。事业单位法人的法定代表人依照法律、行政法规或者法人章程的规定产生。</p>
<p>　　第九十条　【社会团体法人资格的取得】具备法人条件,基于会员共同意愿,为公益目的或者会员共同利益等非营利目的设立的社会团体,经依法登记成立,取得社会团体法人资格;依法不需要办理法人登记的,从成立之日起,具有社会团体法人资格。</p>
<p>　　第九十一条　【社会团体法人的章程及组织机构】设立社会团体法人应当依法制定法人章程。</p>
<p>　　社会团体法人应当设会员大会或者会员代表大会等权力机构。</p>
<p>　　社会团体法人应当设理事会等执行机构。理事长或者会长等负责人按照法人章程的规定担任法定代表人。</p>
<p>　　第九十二条　【捐助法人资格的取得】具备法人条件,为公益目的以捐助财产设立的基金会、社会服务机构等,经依法登记成立,取得捐助法人资格。</p>
<p>　　依法设立的宗教活动场所,具备法人条件的,可以申请法人登记,取得捐助法人资格。法律、行政法规对宗教活动场所有规定的,依照其规定。</p>
<p>　　第九十三条　【捐助法人的章程及组织机构】设立捐助法人应当依法制定法人章程。</p>
<p>　　捐助法人应当设理事会、民主管理组织等决策机构,并设执行机构。理事长等负责人按照法人章程的规定担任法定代表人。</p>
<p>　　捐助法人应当设监事会等监督机构。</p>
<p>　　第九十四条　【捐助人的权利】捐助人有权向捐助法人查询捐助财产的使用、管理情况,并提出意见和建议,捐助法人应当及时、如实答复。</p>
<p>　　捐助法人的决策机构、执行机构或者法定代表人作出决定的程序违反法律、行政法规、法人章程,或者决定内容违反法人章程的,捐助人等利害关系人或者主管机关可以请求人民法院撤销该决定。但是,捐助法人依据该决定与善意相对人形成的民事法律关系不受影响。</p>
<p>　　第九十五条　【非营利法人终止时剩余财产的处置】为公益目的成立的非营利法人终止时,不得向出资人、设立人或者会员分配剩余财产。剩余财产应当按照法人章程的规定或者权力机构的决议用于公益目的;无法按照法人章程的规定或者权力机构的决议处理的,由主管机关主持转给宗旨相同或者相近的法人,并向社会公告。</p>
<h4 id="第四节-特-别-法-人"><a href="#第四节-特-别-法-人" class="headerlink" title="第四节　特 别 法 人"></a>第四节　特 别 法 人</h4><p>　　第九十六条　【特别法人的类型】本节规定的机关法人、农村集体经济组织法人、城镇农村的合作经济组织法人、基层群众性自治组织法人,为特别法人。</p>
<p>　　第九十七条　【机关法人资格的取得】有独立经费的机关和承担行政职能的法定机构从成立之日起,具有机关法人资格,可以从事为履行职能所需要的民事活动。</p>
<p>　　第九十八条　【机关法人终止后权利义务的享有和承担】机关法人被撤销的,法人终止,其民事权利和义务由继任的机关法人享有和承担;没有继任的机关法人的,由作出撤销决定的机关法人享有和承担。</p>
<p>　　第九十九条　【农村集体经济组织法人】农村集体经济组织依法取得法人资格。</p>
<p>　　法律、行政法规对农村集体经济组织有规定的,依照其规定。</p>
<p>　　第一百条　【城镇农村的合作经济组织法人】城镇农村的合作经济组织依法取得法人资格。</p>
<p>　　法律、行政法规对城镇农村的合作经济组织有规定的,依照其规定。</p>
<p>　　第一百零一条　【基层群众性自治组织法人】居民委员会、村民委员会具有基层群众性自治组织法人资格,可以从事为履行职能所需要的民事活动。</p>
<p>　　未设立村集体经济组织的,村民委员会可以依法代行村集体经济组织的职能。</p>
<h3 id="第四章-非法人组织"><a href="#第四章-非法人组织" class="headerlink" title="第四章　非法人组织"></a>第四章　非法人组织</h3><p>　　第一百零二条　【非法人组织的定义及类型】非法人组织是不具有法人资格,但是能够依法以自己的名义从事民事活动的组织。</p>
<p>　　非法人组织包括个人独资企业、合伙企业、不具有法人资格的专业服务机构等。</p>
<p>　　第一百零三条　【非法人组织的设立程序】非法人组织应当依照法律的规定登记。</p>
<p>　　设立非法人组织,法律、行政法规规定须经有关机关批准的,依照其规定。</p>
<p>　　第一百零四条　【非法人组织的债务承担】非法人组织的财产不足以清偿债务的,其出资人或者设立人承担无限责任。法律另有规定的,依照其规定。</p>
<p>　　第一百零五条　【非法人组织的代表人】非法人组织可以确定一人或者数人代表该组织从事民事活动。</p>
<p>　　第一百零六条　【非法人组织解散的情形】有下列情形之一的,非法人组织解散:</p>
<p>　　(一)章程规定的存续期间届满或者章程规定的其他解散事由出现;</p>
<p>　　(二)出资人或者设立人决定解散;</p>
<p>　　(三)法律规定的其他情形。</p>
<p>　　第一百零七条　【非法人组织的清算】非法人组织解散的,应当依法进行清算。</p>
<p>　　第一百零八条　【参照适用】非法人组织除适用本章规定外,参照适用本编第三章第一节的有关规定。</p>
<h3 id="第五章-民-事-权-利"><a href="#第五章-民-事-权-利" class="headerlink" title="第五章　民 事 权 利"></a>第五章　民 事 权 利</h3><p>　　第一百零九条　【人身自由、人格尊严受法律保护】自然人的人身自由、人格尊严受法律保护。</p>
<p>　　第一百一十条　【民事主体的人格权】自然人享有生命权、身体权、健康权、姓名权、肖像权、名誉权、荣誉权、隐私权、婚姻自主权等权利。</p>
<p>　　法人、非法人组织享有名称权、名誉权和荣誉权。</p>
<p>　　第一百一十一条　【个人信息受法律保护】自然人的个人信息受法律保护。任何组织或者个人需要获取他人个人信息的,应当依法取得并确保信息安全,不得非法收集、使用、加工、传输他人个人信息,不得非法买卖、提供或者公开他人个人信息。</p>
<p>　　第一百一十二条　【因婚姻、家庭关系等产生的人身权利受保护】自然人因婚姻家庭关系等产生的人身权利受法律保护。</p>
<p>　　第一百一十三条　【财产权利平等保护】民事主体的财产权利受法律平等保护。</p>
<p>　　第一百一十四条　【物权的定义及类型】民事主体依法享有物权。</p>
<p>　　物权是权利人依法对特定的物享有直接支配和排他的权利,包括所有权、用益物权和担保物权。</p>
<p>　　第一百一十五条　【物权客体】物包括不动产和动产。法律规定权利作为物权客体的,依照其规定。</p>
<p>　　第一百一十六条　【物权法定原则】物权的种类和内容,由法律规定。</p>
<p>　　第一百一十七条　【征收、征用】为了公共利益的需要,依照法律规定的权限和程序征收、征用不动产或者动产的,应当给予公平、合理的补偿。</p>
<p>　　第一百一十八条　【债权的定义】民事主体依法享有债权。</p>
<p>　　债权是因合同、侵权行为、无因管理、不当得利以及法律的其他规定,权利人请求特定义务人为或者不为一定行为的权利。</p>
<p>　　第一百一十九条　【合同的约束力】依法成立的合同,对当事人具有法律约束力。</p>
<p>　　第一百二十条　【侵权责任的承担】民事权益受到侵害的,被侵权人有权请求侵权人承担侵权责任。</p>
<p>　　第一百二十一条　【无因管理】没有法定的或者约定的义务,为避免他人利益受损失而进行管理的人,有权请求受益人偿还由此支出的必要费用。</p>
<p>　　第一百二十二条　【不当得利】因他人没有法律根据,取得不当利益,受损失的人有权请求其返还不当利益。</p>
<p>　　第一百二十三条　【知识产权的定义】民事主体依法享有知识产权。</p>
<p>　　知识产权是权利人依法就下列客体享有的专有的权利:</p>
<p>　　(一)作品;</p>
<p>　　(二)发明、实用新型、外观设计;</p>
<p>　　(三)商标;</p>
<p>　　(四)地理标志;</p>
<p>　　(五)商业秘密;</p>
<p>　　(六)集成电路布图设计;</p>
<p>　　(七)植物新品种;</p>
<p>　　(八)法律规定的其他客体。</p>
<p>　　第一百二十四条　【继承权】自然人依法享有继承权。</p>
<p>　　自然人合法的私有财产,可以依法继承。</p>
<p>　　第一百二十五条　【投资性权利】民事主体依法享有股权和其他投资性权利。</p>
<p>　　第一百二十六条　【其他民事权益】民事主体享有法律规定的其他民事权利和利益。</p>
<p>　　第一百二十七条　【数据、网络虚拟财产的保护】法律对数据、网络虚拟财产的保护有规定的,依照其规定。</p>
<p>　　第一百二十八条　【民事权利的特别保护】法律对未成年人、老年人、残疾人、妇女、消费者等的民事权利保护有特别规定的,依照其规定。</p>
<p>　　第一百二十九条　【民事权利的取得方式】民事权利可以依据民事法律行为、事实行为、法律规定的事件或者法律规定的其他方式取得。</p>
<p>　　第一百三十条　【按照自己的意愿依法行使民事权利】民事主体按照自己的意愿依法行使民事权利,不受干涉。</p>
<p>　　第一百三十一条　【权利义务一致】民事主体行使权利时,应当履行法律规定的和当事人约定的义务。</p>
<p>　　第一百三十二条　【不得滥用民事权利】民事主体不得滥用民事权利损害国家利益、社会公共利益或者他人合法权益。</p>
<h3 id="第六章-民事法律行为"><a href="#第六章-民事法律行为" class="headerlink" title="第六章　民事法律行为"></a>第六章　民事法律行为</h3><h4 id="第一节-一-般-规-定-1"><a href="#第一节-一-般-规-定-1" class="headerlink" title="第一节　一 般 规 定"></a>第一节　一 般 规 定</h4><p>　　第一百三十三条　【民事法律行为的定义】民事法律行为是民事主体通过意思表示设立、变更、终止民事法律关系的行为。</p>
<p>　　第一百三十四条　【民事法律行为的成立】民事法律行为可以基于双方或者多方的意思表示一致成立,也可以基于单方的意思表示成立。</p>
<p>　　法人、非法人组织依照法律或者章程规定的议事方式和表决程序作出决议的,该决议行为成立。</p>
<p>　　第一百三十五条　【民事法律行为的形式】民事法律行为可以采用书面形式、口头形式或者其他形式;法律、行政法规规定或者当事人约定采用特定形式的,应当采用特定形式。</p>
<p>　　第一百三十六条　【民事法律行为的生效时间】民事法律行为自成立时生效,但是法律另有规定或者当事人另有约定的除外。</p>
<p>　　行为人非依法律规定或者未经对方同意,不得擅自变更或者解除民事法律行为。</p>
<h4 id="第二节-意-思-表-示"><a href="#第二节-意-思-表-示" class="headerlink" title="第二节　意 思 表 示"></a>第二节　意 思 表 示</h4><p>　　第一百三十七条　【有相对人的意思表示生效时间】以对话方式作出的意思表示,相对人知道其内容时生效。</p>
<p>　　以非对话方式作出的意思表示,到达相对人时生效。以非对话方式作出的采用数据电文形式的意思表示,相对人指定特定系统接收数据电文的,该数据电文进入该特定系统时生效;未指定特定系统的,相对人知道或者应当知道该数据电文进入其系统时生效。当事人对采用数据电文形式的意思表示的生效时间另有约定的,按照其约定。</p>
<p>　　第一百三十八条　【无相对人的意思表示生效时间】无相对人的意思表示,表示完成时生效。法律另有规定的,依照其规定。</p>
<p>　　第一百三十九条　【以公告方式作出的意思表示生效时间】以公告方式作出的意思表示,公告发布时生效。</p>
<p>　　第一百四十条　【意思表示的作出方式】行为人可以明示或者默示作出意思表示。</p>
<p>　　沉默只有在有法律规定、当事人约定或者符合当事人之间的交易习惯时,才可以视为意思表示。</p>
<p>　　第一百四十一条　【意思表示的撤回】行为人可以撤回意思表示。撤回意思表示的通知应当在意思表示到达相对人前或者与意思表示同时到达相对人。</p>
<p>　　第一百四十二条　【意思表示的解释】有相对人的意思表示的解释,应当按照所使用的词句,结合相关条款、行为的性质和目的、习惯以及诚信原则,确定意思表示的含义。</p>
<p>　　无相对人的意思表示的解释,不能完全拘泥于所使用的词句,而应当结合相关条款、行为的性质和目的、习惯以及诚信原则,确定行为人的真实意思。</p>
<h4 id="第三节-民事法律行为的效力"><a href="#第三节-民事法律行为的效力" class="headerlink" title="第三节　民事法律行为的效力"></a>第三节　民事法律行为的效力</h4><p>　　第一百四十三条　【民事法律行为有效的条件】具备下列条件的民事法律行为有效:</p>
<p>　　(一)行为人具有相应的民事行为能力;</p>
<p>　　(二)意思表示真实;</p>
<p>　　(三)不违反法律、行政法规的强制性规定,不违背公序良俗。</p>
<p>　　第一百四十四条　【无民事行为能力人实施的民事法律行为的效力】无民事行为能力人实施的民事法律行为无效。</p>
<p>　　第一百四十五条　【限制民事行为能力人实施的民事法律行为的效力】限制民事行为能力人实施的纯获利益的民事法律行为或者与其年龄、智力、精神健康状况相适应的民事法律行为有效;实施的其他民事法律行为经法定代理人同意或者追认后有效。</p>
<p>　　相对人可以催告法定代理人自收到通知之日起三十日内予以追认。法定代理人未作表示的,视为拒绝追认。民事法律行为被追认前,善意相对人有撤销的权利。撤销应当以通知的方式作出。</p>
<p>　　第一百四十六条　【虚假表示与隐藏行为的效力】行为人与相对人以虚假的意思表示实施的民事法律行为无效。</p>
<p>　　以虚假的意思表示隐藏的民事法律行为的效力,依照有关法律规定处理。</p>
<p>　　第一百四十七条　【基于重大误解实施的民事法律行为的效力】基于重大误解实施的民事法律行为,行为人有权请求人民法院或者仲裁机构予以撤销。</p>
<p>　　第一百四十八条　【以欺诈手段实施的民事法律行为的效力】一方以欺诈手段,使对方在违背真实意思的情况下实施的民事法律行为,受欺诈方有权请求人民法院或者仲裁机构予以撤销。</p>
<p>　　第一百四十九条　【受第三人欺诈的民事法律行为的效力】第三人实施欺诈行为,使一方在违背真实意思的情况下实施的民事法律行为,对方知道或者应当知道该欺诈行为的,受欺诈方有权请求人民法院或者仲裁机构予以撤销。</p>
<p>　　第一百五十条　【以胁迫手段实施的民事法律行为的效力】一方或者第三人以胁迫手段,使对方在违背真实意思的情况下实施的民事法律行为,受胁迫方有权请求人民法院或者仲裁机构予以撤销。</p>
<p>　　第一百五十一条　【显失公平的民事法律行为的效力】一方利用对方处于危困状态、缺乏判断能力等情形,致使民事法律行为成立时显失公平的,受损害方有权请求人民法院或者仲裁机构予以撤销。</p>
<p>　　第一百五十二条　【撤销权的消灭】有下列情形之一的,撤销权消灭:</p>
<p>　　(一)当事人自知道或者应当知道撤销事由之日起一年内、重大误解的当事人自知道或者应当知道撤销事由之日起九十日内没有行使撤销权;</p>
<p>　　(二)当事人受胁迫,自胁迫行为终止之日起一年内没有行使撤销权;</p>
<p>　　(三)当事人知道撤销事由后明确表示或者以自己的行为表明放弃撤销权。</p>
<p>　　当事人自民事法律行为发生之日起五年内没有行使撤销权的,撤销权消灭。</p>
<p>　　第一百五十三条　【违反强制性规定及违背公序良俗的民事法律行为的效力】违反法律、行政法规的强制性规定的民事法律行为无效。但是,该强制性规定不导致该民事法律行为无效的除外。</p>
<p>　　违背公序良俗的民事法律行为无效。</p>
<p>　　第一百五十四条　【恶意串通的民事法律行为的效力】行为人与相对人恶意串通,损害他人合法权益的民事法律行为无效。</p>
<p>　　第一百五十五条　【无效、被撤销的民事法律行为自始无效】无效的或者被撤销的民事法律行为自始没有法律约束力。</p>
<p>　　第一百五十六条　【民事法律行为部分无效】民事法律行为部分无效,不影响其他部分效力的,其他部分仍然有效。</p>
<p>　　第一百五十七条　【民事法律行为无效、被撤销或确定不发生效力的法律后果】民事法律行为无效、被撤销或者确定不发生效力后,行为人因该行为取得的财产,应当予以返还;不能返还或者没有必要返还的,应当折价补偿。有过错的一方应当赔偿对方由此所受到的损失;各方都有过错的,应当各自承担相应的责任。法律另有规定的,依照其规定。</p>
<h4 id="第四节-民事法律行为的附条件和附期限"><a href="#第四节-民事法律行为的附条件和附期限" class="headerlink" title="第四节　民事法律行为的附条件和附期限"></a>第四节　民事法律行为的附条件和附期限</h4><p>　　第一百五十八条　【附条件的民事法律行为】民事法律行为可以附条件,但是根据其性质不得附条件的除外。附生效条件的民事法律行为,自条件成就时生效。附解除条件的民事法律行为,自条件成就时失效。</p>
<p>　　第一百五十九条　【条件成就和不成就的拟制】附条件的民事法律行为,当事人为自己的利益不正当地阻止条件成就的,视为条件已经成就;不正当地促成条件成就的,视为条件不成就。</p>
<p>　　第一百六十条　【附期限的民事法律行为】民事法律行为可以附期限,但是根据其性质不得附期限的除外。附生效期限的民事法律行为,自期限届至时生效。附终止期限的民事法律行为,自期限届满时失效。</p>
<h3 id="第七章-代-理"><a href="#第七章-代-理" class="headerlink" title="第七章　代　　理"></a>第七章　代　　理</h3><h4 id="第一节-一-般-规-定-2"><a href="#第一节-一-般-规-定-2" class="headerlink" title="第一节　一 般 规 定"></a>第一节　一 般 规 定</h4><p>　　第一百六十一条　【代理适用范围】民事主体可以通过代理人实施民事法律行为。</p>
<p>　　依照法律规定、当事人约定或者民事法律行为的性质,应当由本人亲自实施的民事法律行为,不得代理。</p>
<p>　　第一百六十二条　【代理的效力】代理人在代理权限内,以被代理人名义实施的民事法律行为,对被代理人发生效力。</p>
<p>　　第一百六十三条　【代理的类型】代理包括委托代理和法定代理。</p>
<p>　　委托代理人按照被代理人的委托行使代理权。法定代理人依照法律的规定行使代理权。</p>
<p>　　第一百六十四条　【代理人不当行为的法律后果】代理人不履行或者不完全履行职责,造成被代理人损害的,应当承担民事责任。</p>
<p>　　代理人和相对人恶意串通,损害被代理人合法权益的,代理人和相对人应当承担连带责任。</p>
<h4 id="第二节-委-托-代-理"><a href="#第二节-委-托-代-理" class="headerlink" title="第二节　委 托 代 理"></a>第二节　委 托 代 理</h4><p>　　第一百六十五条　【授权委托书】委托代理授权采用书面形式的,授权委托书应当载明代理人的姓名或者名称、代理事项、权限和期限,并由被代理人签名或者盖章。</p>
<p>　　第一百六十六条　【共同代理】数人为同一代理事项的代理人的,应当共同行使代理权,但是当事人另有约定的除外。</p>
<p>　　第一百六十七条　【违法代理及其法律后果】代理人知道或者应当知道代理事项违法仍然实施代理行为,或者被代理人知道或者应当知道代理人的代理行为违法未作反对表示的,被代理人和代理人应当承担连带责任。</p>
<p>　　第一百六十八条　【禁止自我代理和双方代理及例外】代理人不得以被代理人的名义与自己实施民事法律行为,但是被代理人同意或者追认的除外。</p>
<p>　　代理人不得以被代理人的名义与自己同时代理的其他人实施民事法律行为,但是被代理的双方同意或者追认的除外。</p>
<p>　　第一百六十九条　【复代理】代理人需要转委托第三人代理的,应当取得被代理人的同意或者追认。</p>
<p>　　转委托代理经被代理人同意或者追认的,被代理人可以就代理事务直接指示转委托的第三人,代理人仅就第三人的选任以及对第三人的指示承担责任。</p>
<p>　　转委托代理未经被代理人同意或者追认的,代理人应当对转委托的第三人的行为承担责任;但是,在紧急情况下代理人为了维护被代理人的利益需要转委托第三人代理的除外。</p>
<p>　　第一百七十条　【职务代理】执行法人或者非法人组织工作任务的人员,就其职权范围内的事项,以法人或者非法人组织的名义实施的民事法律行为,对法人或者非法人组织发生效力。</p>
<p>　　法人或者非法人组织对执行其工作任务的人员职权范围的限制,不得对抗善意相对人。</p>
<p>　　第一百七十一条　【无权代理】行为人没有代理权、超越代理权或者代理权终止后,仍然实施代理行为,未经被代理人追认的,对被代理人不发生效力。</p>
<p>　　相对人可以催告被代理人自收到通知之日起三十日内予以追认。被代理人未作表示的,视为拒绝追认。行为人实施的行为被追认前,善意相对人有撤销的权利。撤销应当以通知的方式作出。</p>
<p>　　行为人实施的行为未被追认的,善意相对人有权请求行为人履行债务或者就其受到的损害请求行为人赔偿。但是,赔偿的范围不得超过被代理人追认时相对人所能获得的利益。</p>
<p>　　相对人知道或者应当知道行为人无权代理的,相对人和行为人按照各自的过错承担责任。</p>
<p>　　第一百七十二条　【表见代理】行为人没有代理权、超越代理权或者代理权终止后,仍然实施代理行为,相对人有理由相信行为人有代理权的,代理行为有效。</p>
<h4 id="第三节-代-理-终-止"><a href="#第三节-代-理-终-止" class="headerlink" title="第三节　代 理 终 止"></a>第三节　代 理 终 止</h4><p>　　第一百七十三条　【委托代理终止的情形】有下列情形之一的,委托代理终止:</p>
<p>　　(一)代理期限届满或者代理事务完成;</p>
<p>　　(二)被代理人取消委托或者代理人辞去委托;</p>
<p>　　(三)代理人丧失民事行为能力;</p>
<p>　　(四)代理人或者被代理人死亡;</p>
<p>　　(五)作为代理人或者被代理人的法人、非法人组织终止。</p>
<p>　　第一百七十四条　【委托代理终止的例外】被代理人死亡后,有下列情形之一的,委托代理人实施的代理行为有效:</p>
<p>　　(一)代理人不知道且不应当知道被代理人死亡;</p>
<p>　　(二)被代理人的继承人予以承认;</p>
<p>　　(三)授权中明确代理权在代理事务完成时终止;</p>
<p>　　(四)被代理人死亡前已经实施,为了被代理人的继承人的利益继续代理。</p>
<p>　　作为被代理人的法人、非法人组织终止的,参照适用前款规定。</p>
<p>　　第一百七十五条　【法定代理终止的情形】有下列情形之一的,法定代理终止:</p>
<p>　　(一)被代理人取得或者恢复完全民事行为能力;</p>
<p>　　(二)代理人丧失民事行为能力;</p>
<p>　　(三)代理人或者被代理人死亡;</p>
<p>　　(四)法律规定的其他情形。</p>
<h3 id="第八章-民-事-责-任"><a href="#第八章-民-事-责-任" class="headerlink" title="第八章　民 事 责 任"></a>第八章　民 事 责 任</h3><p>　　第一百七十六条　【民事义务与责任】民事主体依照法律规定或者按照当事人约定,履行民事义务,承担民事责任。</p>
<p>　　第一百七十七条　【按份责任】二人以上依法承担按份责任,能够确定责任大小的,各自承担相应的责任;难以确定责任大小的,平均承担责任。</p>
<p>　　第一百七十八条　【连带责任】二人以上依法承担连带责任的,权利人有权请求部分或者全部连带责任人承担责任。</p>
<p>　　连带责任人的责任份额根据各自责任大小确定;难以确定责任大小的,平均承担责任。实际承担责任超过自己责任份额的连带责任人,有权向其他连带责任人追偿。</p>
<p>　　连带责任,由法律规定或者当事人约定。</p>
<p>　　第一百七十九条　【承担民事责任的方式】承担民事责任的方式主要有:</p>
<p>　　(一)停止侵害;</p>
<p>　　(二)排除妨碍;</p>
<p>　　(三)消除危险;</p>
<p>　　(四)返还财产;</p>
<p>　　(五)恢复原状;</p>
<p>　　(六)修理、重作、更换;</p>
<p>　　(七)继续履行;</p>
<p>　　(八)赔偿损失;</p>
<p>　　(九)支付违约金;</p>
<p>　　(十)消除影响、恢复名誉;</p>
<p>　　(十一)赔礼道歉。</p>
<p>　　法律规定惩罚性赔偿的,依照其规定。</p>
<p>　　本条规定的承担民事责任的方式,可以单独适用,也可以合并适用。</p>
<p>　　第一百八十条　【不可抗力】因不可抗力不能履行民事义务的,不承担民事责任。法律另有规定的,依照其规定。</p>
<p>　　不可抗力是不能预见、不能避免且不能克服的客观情况。</p>
<p>　　第一百八十一条　【正当防卫】因正当防卫造成损害的,不承担民事责任。</p>
<p>　　正当防卫超过必要的限度,造成不应有的损害的,正当防卫人应当承担适当的民事责任。</p>
<p>　　第一百八十二条　【紧急避险】因紧急避险造成损害的,由引起险情发生的人承担民事责任。</p>
<p>　　危险由自然原因引起的,紧急避险人不承担民事责任,可以给予适当补偿。</p>
<p>　　紧急避险采取措施不当或者超过必要的限度,造成不应有的损害的,紧急避险人应当承担适当的民事责任。</p>
<p>　　第一百八十三条　【因保护他人民事权益受损时的责任承担与补偿办法】因保护他人民事权益使自己受到损害的,由侵权人承担民事责任,受益人可以给予适当补偿。没有侵权人、侵权人逃逸或者无力承担民事责任,受害人请求补偿的,受益人应当给予适当补偿。</p>
<p>　　第一百八十四条　【紧急救助人不承担民事责任】因自愿实施紧急救助行为造成受助人损害的,救助人不承担民事责任。</p>
<p>　　第一百八十五条　【侵害英烈等的姓名、肖像、名誉、荣誉的民事责任】侵害英雄烈士等的姓名、肖像、名誉、荣誉,损害社会公共利益的,应当承担民事责任。</p>
<p>　　第一百八十六条　【责任竞合】因当事人一方的违约行为,损害对方人身权益、财产权益的,受损害方有权选择请求其承担违约责任或者侵权责任。</p>
<p>　　第一百八十七条　【民事责任优先承担】民事主体因同一行为应当承担民事责任、行政责任和刑事责任的,承担行政责任或者刑事责任不影响承担民事责任;民事主体的财产不足以支付的,优先用于承担民事责任。</p>
<h3 id="第九章-诉-讼-时-效"><a href="#第九章-诉-讼-时-效" class="headerlink" title="第九章　诉 讼 时 效"></a>第九章　诉 讼 时 效</h3><p>　　第一百八十八条　【普通诉讼时效、最长权利保护期间】向人民法院请求保护民事权利的诉讼时效期间为三年。法律另有规定的,依照其规定。</p>
<p>　　诉讼时效期间自权利人知道或者应当知道权利受到损害以及义务人之日起计算。法律另有规定的,依照其规定。但是,自权利受到损害之日起超过二十年的,人民法院不予保护,有特殊情况的,人民法院可以根据权利人的申请决定延长。</p>
<p>　　第一百八十九条　【分期履行债务的诉讼时效】当事人约定同一债务分期履行的,诉讼时效期间自最后一期履行期限届满之日起计算。</p>
<p>　　第一百九十条　【对法定代理人请求权的诉讼时效】无民事行为能力人或者限制民事行为能力人对其法定代理人的请求权的诉讼时效期间,自该法定代理终止之日起计算。</p>
<p>　　第一百九十一条　【受性侵未成年人赔偿请求权的诉讼时效】未成年人遭受性侵害的损害赔偿请求权的诉讼时效期间,自受害人年满十八周岁之日起计算。</p>
<p>　　第一百九十二条　【诉讼时效期间届满的法律效果】诉讼时效期间届满的,义务人可以提出不履行义务的抗辩。</p>
<p>　　诉讼时效期间届满后,义务人同意履行的,不得以诉讼时效期间届满为由抗辩;义务人已经自愿履行的,不得请求返还。</p>
<p>　　第一百九十三条　【诉讼时效援引】人民法院不得主动适用诉讼时效的规定。</p>
<p>　　第一百九十四条　【诉讼时效中止的情形】在诉讼时效期间的最后六个月内,因下列障碍,不能行使请求权的,诉讼时效中止:</p>
<p>　　(一)不可抗力;</p>
<p>　　(二)无民事行为能力人或者限制民事行为能力人没有法定代理人,或者法定代理人死亡、丧失民事行为能力、丧失代理权;</p>
<p>　　(三)继承开始后未确定继承人或者遗产管理人;</p>
<p>　　(四)权利人被义务人或者其他人控制;</p>
<p>　　(五)其他导致权利人不能行使请求权的障碍。</p>
<p>　　自中止时效的原因消除之日起满六个月,诉讼时效期间届满。</p>
<p>　　第一百九十五条　【诉讼时效中断的情形】有下列情形之一的,诉讼时效中断,从中断、有关程序终结时起,诉讼时效期间重新计算:</p>
<p>　　(一)权利人向义务人提出履行请求;</p>
<p>　　(二)义务人同意履行义务;</p>
<p>　　(三)权利人提起诉讼或者申请仲裁;</p>
<p>　　(四)与提起诉讼或者申请仲裁具有同等效力的其他情形。</p>
<p>　　第一百九十六条　【不适用诉讼时效的情形】下列请求权不适用诉讼时效的规定:</p>
<p>　　(一)请求停止侵害、排除妨碍、消除危险;</p>
<p>　　(二)不动产物权和登记的动产物权的权利人请求返还财产;</p>
<p>　　(三)请求支付抚养费、赡养费或者扶养费;</p>
<p>　　(四)依法不适用诉讼时效的其他请求权。</p>
<p>　　第一百九十七条　【诉讼时效法定、时效利益预先放弃无效】诉讼时效的期间、计算方法以及中止、中断的事由由法律规定,当事人约定无效。</p>
<p>　　当事人对诉讼时效利益的预先放弃无效。</p>
<p>　　第一百九十八条　【仲裁时效】法律对仲裁时效有规定的,依照其规定;没有规定的,适用诉讼时效的规定。</p>
<p>　　第一百九十九条　【除斥期间】法律规定或者当事人约定的撤销权、解除权等权利的存续期间,除法律另有规定外,自权利人知道或者应当知道权利产生之日起计算,不适用有关诉讼时效中止、中断和延长的规定。存续期间届满,撤销权、解除权等权利消灭。</p>
<h3 id="第十章-期-间-计-算"><a href="#第十章-期-间-计-算" class="headerlink" title="第十章　期 间 计 算"></a>第十章　期 间 计 算</h3><p>　　第二百条　【期间计算单位】民法所称的期间按照公历年、月、日、小时计算。</p>
<p>　　第二百零一条　【期间起算】按照年、月、日计算期间的,开始的当日不计入,自下一日开始计算。</p>
<p>　　按照小时计算期间的,自法律规定或者当事人约定的时间开始计算。</p>
<p>　　第二百零二条　【期间结束】按照年、月计算期间的,到期月的对应日为期间的最后一日;没有对应日的,月末日为期间的最后一日。</p>
<p>　　第二百零三条　【期间结束日顺延和末日结束点】期间的最后一日是法定休假日的,以法定休假日结束的次日为期间的最后一日。</p>
<p>　　期间的最后一日的截止时间为二十四时;有业务时间的,停止业务活动的时间为截止时间。</p>
<p>　　第二百零四条　【期间的法定或约定】期间的计算方法依照本法的规定,但是法律另有规定或者当事人另有约定的除外。</p>
<p>　　 </p>
<h1 id="第二编-物-权"><a href="#第二编-物-权" class="headerlink" title="第二编　物　　权"></a>第二编　物　　权</h1><h2 id="第一分编-通-则"><a href="#第一分编-通-则" class="headerlink" title="第一分编　通　　则"></a>第一分编　通　　则</h2><h3 id="第一章-一-般-规-定"><a href="#第一章-一-般-规-定" class="headerlink" title="第一章　一 般 规 定"></a>第一章　一 般 规 定</h3><p>　　第二百零五条　【物权编的调整范围】本编调整因物的归属和利用产生的民事关系。</p>
<p>　　第二百零六条　【社会主义基本经济制度与社会主义市场经济】国家坚持和完善公有制为主体、多种所有制经济共同发展,按劳分配为主体、多种分配方式并存,社会主义市场经济体制等社会主义基本经济制度。</p>
<p>　　国家巩固和发展公有制经济,鼓励、支持和引导非公有制经济的发展。</p>
<p>　　国家实行社会主义市场经济,保障一切市场主体的平等法律地位和发展权利。</p>
<p>　　第二百零七条　【物权平等保护原则】国家、集体、私人的物权和其他权利人的物权受法律平等保护,任何组织或者个人不得侵犯。</p>
<p>　　第二百零八条　【物权公示原则】不动产物权的设立、变更、转让和消灭,应当依照法律规定登记。动产物权的设立和转让,应当依照法律规定交付。</p>
<p>　　第二章　物权的设立、变更、转让和消灭</p>
<h4 id="第一节-不动产登记"><a href="#第一节-不动产登记" class="headerlink" title="第一节　不动产登记"></a>第一节　不动产登记</h4><p>　　第二百零九条　【不动产物权登记的效力】不动产物权的设立、变更、转让和消灭,经依法登记,发生效力;未经登记,不发生效力,但是法律另有规定的除外。</p>
<p>　　依法属于国家所有的自然资源,所有权可以不登记。</p>
<p>　　第二百一十条　【不动产登记机构和不动产统一登记】不动产登记,由不动产所在地的登记机构办理。</p>
<p>　　国家对不动产实行统一登记制度。统一登记的范围、登记机构和登记办法,由法律、行政法规规定。</p>
<p>　　第二百一十一条　【不动产登记申请资料】当事人申请登记,应当根据不同登记事项提供权属证明和不动产界址、面积等必要材料。</p>
<p>　　第二百一十二条　【登记机构的职责】登记机构应当履行下列职责:</p>
<p>　　(一)查验申请人提供的权属证明和其他必要材料;</p>
<p>　　(二)就有关登记事项询问申请人;</p>
<p>　　(三)如实、及时登记有关事项;</p>
<p>　　(四)法律、行政法规规定的其他职责。</p>
<p>　　申请登记的不动产的有关情况需要进一步证明的,登记机构可以要求申请人补充材料,必要时可以实地查看。</p>
<p>　　第二百一十三条　【登记机构不得从事的行为】登记机构不得有下列行为:</p>
<p>　　(一)要求对不动产进行评估;</p>
<p>　　(二)以年检等名义进行重复登记;</p>
<p>　　(三)超出登记职责范围的其他行为。</p>
<p>　　第二百一十四条　【不动产物权变动的生效时间】不动产物权的设立、变更、转让和消灭,依照法律规定应当登记的,自记载于不动产登记簿时发生效力。</p>
<p>　　第二百一十五条　【合同效力与物权变动区分】当事人之间订立有关设立、变更、转让和消灭不动产物权的合同,除法律另有规定或者当事人另有约定外,自合同成立时生效;未办理物权登记的,不影响合同效力。</p>
<p>　　第二百一十六条　【不动产登记簿的效力和管理】不动产登记簿是物权归属和内容的根据。</p>
<p>　　不动产登记簿由登记机构管理。</p>
<p>　　第二百一十七条　【不动产登记簿与不动产权属证书的关系】不动产权属证书是权利人享有该不动产物权的证明。不动产权属证书记载的事项,应当与不动产登记簿一致;记载不一致的,除有证据证明不动产登记簿确有错误外,以不动产登记簿为准。</p>
<p>　　第二百一十八条　【不动产登记资料的查询、复制】权利人、利害关系人可以申请查询、复制不动产登记资料,登记机构应当提供。</p>
<p>　　第二百一十九条　【不动产登记资料的合理使用】利害关系人不得公开、非法使用权利人的不动产登记资料。</p>
<p>　　第二百二十条　【更正登记与异议登记】权利人、利害关系人认为不动产登记簿记载的事项错误的,可以申请更正登记。不动产登记簿记载的权利人书面同意更正或者有证据证明登记确有错误的,登记机构应当予以更正。</p>
<p>　　不动产登记簿记载的权利人不同意更正的,利害关系人可以申请异议登记。登记机构予以异议登记,申请人自异议登记之日起十五日内不提起诉讼的,异议登记失效。异议登记不当,造成权利人损害的,权利人可以向申请人请求损害赔偿。</p>
<p>　　第二百二十一条　【预告登记】当事人签订买卖房屋的协议或者签订其他不动产物权的协议,为保障将来实现物权,按照约定可以向登记机构申请预告登记。预告登记后,未经预告登记的权利人同意,处分该不动产的,不发生物权效力。</p>
<p>　　预告登记后,债权消灭或者自能够进行不动产登记之日起九十日内未申请登记的,预告登记失效。</p>
<p>　　第二百二十二条　【不动产登记错误的赔偿】当事人提供虚假材料申请登记,造成他人损害的,应当承担赔偿责任。</p>
<p>　　因登记错误,造成他人损害的,登记机构应当承担赔偿责任。登记机构赔偿后,可以向造成登记错误的人追偿。</p>
<p>　　第二百二十三条　【不动产登记的费用】不动产登记费按件收取,不得按照不动产的面积、体积或者价款的比例收取。</p>
<h4 id="第二节-动-产-交-付"><a href="#第二节-动-产-交-付" class="headerlink" title="第二节　动 产 交 付"></a>第二节　动 产 交 付</h4><p>　　第二百二十四条　【动产交付的效力】动产物权的设立和转让,自交付时发生效力,但是法律另有规定的除外。</p>
<p>　　第二百二十五条　【特殊动产登记的效力】船舶、航空器和机动车等的物权的设立、变更、转让和消灭,未经登记,不得对抗善意第三人。</p>
<p>　　第二百二十六条　【简易交付】动产物权设立和转让前,权利人已经占有该动产的,物权自民事法律行为生效时发生效力。</p>
<p>　　第二百二十七条　【指示交付】动产物权设立和转让前,第三人占有该动产的,负有交付义务的人可以通过转让请求第三人返还原物的权利代替交付。</p>
<p>　　第二百二十八条　【占有改定】动产物权转让时,当事人又约定由出让人继续占有该动产的,物权自该约定生效时发生效力。</p>
<p>　　第三节　其 他 规 定</p>
<p>　　第二百二十九条　【法律文书或征收决定导致的物权变动】因人民法院、仲裁机构的法律文书或者人民政府的征收决定等,导致物权设立、变更、转让或者消灭的,自法律文书或者征收决定等生效时发生效力。</p>
<p>　　第二百三十条　【因继承取得物权】因继承取得物权的,自继承开始时发生效力。</p>
<p>　　第二百三十一条　【因事实行为发生物权变动】因合法建造、拆除房屋等事实行为设立或者消灭物权的,自事实行为成就时发生效力。</p>
<p>　　第二百三十二条　【处分非因民事法律行为享有的不动产物权】处分依照本节规定享有的不动产物权,依照法律规定需要办理登记的,未经登记,不发生物权效力。</p>
<h3 id="第三章-物权的保护"><a href="#第三章-物权的保护" class="headerlink" title="第三章　物权的保护"></a>第三章　物权的保护</h3><p>　　第二百三十三条　【物权纠纷解决方式】物权受到侵害的,权利人可以通过和解、调解、仲裁、诉讼等途径解决。</p>
<p>　　第二百三十四条　【物权确认请求权】因物权的归属、内容发生争议的,利害关系人可以请求确认权利。</p>
<p>　　第二百三十五条　【返还原物请求权】无权占有不动产或者动产的,权利人可以请求返还原物。</p>
<p>　　第二百三十六条　【排除妨害请求权】妨害物权或者可能妨害物权的,权利人可以请求排除妨害或者消除危险。</p>
<p>　　第二百三十七条　【物权复原请求权】造成不动产或者动产毁损的,权利人可以依法请求修理、重作、更换或者恢复原状。</p>
<p>　　第二百三十八条　【物权损害赔偿请求权】侵害物权,造成权利人损害的,权利人可以依法请求损害赔偿,也可以依法请求承担其他民事责任。</p>
<p>　　第二百三十九条　【物权保护方式的单用与并用】本章规定的物权保护方式,可以单独适用,也可以根据权利被侵害的情形合并适用。</p>
<h2 id="第二分编-所-有-权"><a href="#第二分编-所-有-权" class="headerlink" title="第二分编　所　有　权"></a>第二分编　所　有　权</h2><h3 id="第四章-一-般-规-定"><a href="#第四章-一-般-规-定" class="headerlink" title="第四章　一 般 规 定"></a>第四章　一 般 规 定</h3><p>　　第二百四十条　【所有权的定义】所有权人对自己的不动产或者动产,依法享有占有、使用、收益和处分的权利。</p>
<p>　　第二百四十一条　【所有权人设立他物权】所有权人有权在自己的不动产或者动产上设立用益物权和担保物权。用益物权人、担保物权人行使权利,不得损害所有权人的权益。</p>
<p>　　第二百四十二条　【国家专属所有权】法律规定专属于国家所有的不动产和动产,任何组织或者个人不能取得所有权。</p>
<p>　　第二百四十三条　【征收】为了公共利益的需要,依照法律规定的权限和程序可以征收集体所有的土地和组织、个人的房屋以及其他不动产。</p>
<p>　　征收集体所有的土地,应当依法及时足额支付土地补偿费、安置补助费以及农村村民住宅、其他地上附着物和青苗等的补偿费用,并安排被征地农民的社会保障费用,保障被征地农民的生活,维护被征地农民的合法权益。</p>
<p>　　征收组织、个人的房屋以及其他不动产,应当依法给予征收补偿,维护被征收人的合法权益;征收个人住宅的,还应当保障被征收人的居住条件。</p>
<p>　　任何组织或者个人不得贪污、挪用、私分、截留、拖欠征收补偿费等费用。</p>
<p>　　第二百四十四条　【耕地保护】国家对耕地实行特殊保护,严格限制农用地转为建设用地,控制建设用地总量。不得违反法律规定的权限和程序征收集体所有的土地。</p>
<p>　　第二百四十五条　【征用】因抢险救灾、疫情防控等紧急需要,依照法律规定的权限和程序可以征用组织、个人的不动产或者动产。被征用的不动产或者动产使用后,应当返还被征用人。组织、个人的不动产或者动产被征用或者征用后毁损、灭失的,应当给予补偿。</p>
<h3 id="第五章-国家所有权和集体"><a href="#第五章-国家所有权和集体" class="headerlink" title="第五章　国家所有权和集体"></a>第五章　国家所有权和集体</h3><p>　　第二百四十六条　【国有财产的范围、国家所有的性质和国家所有权的行使】法律规定属于国家所有的财产,属于国家所有即全民所有。</p>
<p>　　国有财产由国务院代表国家行使所有权。法律另有规定的,依照其规定。</p>
<p>　　第二百四十七条　【矿藏、水流、海域的国家所有权】矿藏、水流、海域属于国家所有。</p>
<p>　　第二百四十八条　【无居民海岛的国家所有权】无居民海岛属于国家所有,国务院代表国家行使无居民海岛所有权。</p>
<p>　　第二百四十九条　【国家所有土地的范围】城市的土地,属于国家所有。法律规定属于国家所有的农村和城市郊区的土地,属于国家所有。</p>
<p>　　第二百五十条　【自然资源的国家所有权】森林、山岭、草原、荒地、滩涂等自然资源,属于国家所有,但是法律规定属于集体所有的除外。</p>
<p>　　第二百五十一条　【野生动植物资源的国家所有权】法律规定属于国家所有的野生动植物资源,属于国家所有。</p>
<p>　　第二百五十二条　【无线电频谱资源的国家所有权】无线电频谱资源属于国家所有。</p>
<p>　　第二百五十三条　【文物的国家所有权】法律规定属于国家所有的文物,属于国家所有。</p>
<p>　　第二百五十四条　【国防资产和基础设施的国家所有权】国防资产属于国家所有。</p>
<p>　　铁路、公路、电力设施、电信设施和油气管道等基础设施,依照法律规定为国家所有的,属于国家所有。</p>
<p>　　第二百五十五条　【国家机关的物权】国家机关对其直接支配的不动产和动产,享有占有、使用以及依照法律和国务院的有关规定处分的权利。</p>
<p>　　第二百五十六条　【国家举办的事业单位的物权】国家举办的事业单位对其直接支配的不动产和动产,享有占有、使用以及依照法律和国务院的有关规定收益、处分的权利。</p>
<p>　　第二百五十七条　【国家出资的企业出资人制度】国家出资的企业,由国务院、地方人民政府依照法律、行政法规规定分别代表国家履行出资人职责,享有出资人权益。</p>
<p>　　第二百五十八条　【国有财产的保护】国家所有的财产受法律保护,禁止任何组织或者个人侵占、哄抢、私分、截留、破坏。</p>
<p>　　第二百五十九条　【国有财产管理的法律责任】履行国有财产管理、监督职责的机构及其工作人员,应当依法加强对国有财产的管理、监督,促进国有财产保值增值,防止国有财产损失;滥用职权,玩忽职守,造成国有财产损失的,应当依法承担法律责任。</p>
<p>　　违反国有财产管理规定,在企业改制、合并分立、关联交易等过程中,低价转让、合谋私分、擅自担保或者以其他方式造成国有财产损失的,应当依法承担法律责任。</p>
<p>　　第二百六十条　【集体财产的范围】集体所有的不动产和动产包括:</p>
<p>　　(一)法律规定属于集体所有的土地和森林、山岭、草原、荒地、滩涂;</p>
<p>　　(二)集体所有的建筑物、生产设施、农田水利设施;</p>
<p>　　(三)集体所有的教育、科学、文化、卫生、体育等设施;</p>
<p>　　(四)集体所有的其他不动产和动产。</p>
<p>　　第二百六十一条　【农民集体所有财产归属及重大事项集体决定】农民集体所有的不动产和动产,属于本集体成员集体所有。</p>
<p>　　下列事项应当依照法定程序经本集体成员决定:</p>
<p>　　(一)土地承包方案以及将土地发包给本集体以外的组织或者个人承包;</p>
<p>　　(二)个别土地承包经营权人之间承包地的调整;</p>
<p>　　(三)土地补偿费等费用的使用、分配办法;</p>
<p>　　(四)集体出资的企业的所有权变动等事项;</p>
<p>　　(五)法律规定的其他事项。</p>
<p>　　第二百六十二条　【集体所有的不动产所有权行使】对于集体所有的土地和森林、山岭、草原、荒地、滩涂等,依照下列规定行使所有权:</p>
<p>　　(一)属于村农民集体所有的,由村集体经济组织或者村民委员会依法代表集体行使所有权;</p>
<p>　　(二)分别属于村内两个以上农民集体所有的,由村内各该集体经济组织或者村民小组依法代表集体行使所有权;</p>
<p>　　(三)属于乡镇农民集体所有的,由乡镇集体经济组织代表集体行使所有权。</p>
<p>　　第二百六十三条　【城镇集体所有的财产权利行使】城镇集体所有的不动产和动产,依照法律、行政法规的规定由本集体享有占有、使用、收益和处分的权利。</p>
<p>　　第二百六十四条　【集体成员对集体财产的知情权】农村集体经济组织或者村民委员会、村民小组应当依照法律、行政法规以及章程、村规民约向本集体成员公布集体财产的状况。集体成员有权查阅、复制相关资料。</p>
<p>　　第二百六十五条　【集体所有财产保护及农村集体成员合法权益保护】集体所有的财产受法律保护,禁止任何组织或者个人侵占、哄抢、私分、破坏。</p>
<p>　　农村集体经济组织、村民委员会或者其负责人作出的决定侵害集体成员合法权益的,受侵害的集体成员可以请求人民法院予以撤销。</p>
<p>　　第二百六十六条　【私有财产的范围】私人对其合法的收入、房屋、生活用品、生产工具、原材料等不动产和动产享有所有权。</p>
<p>　　第二百六十七条　【私人合法财产的保护】私人的合法财产受法律保护,禁止任何组织或者个人侵占、哄抢、破坏。</p>
<p>　　第二百六十八条　【国家、集体和私人依法出资设立公司或其他企业】国家、集体和私人依法可以出资设立有限责任公司、股份有限公司或者其他企业。国家、集体和私人所有的不动产或者动产投到企业的,由出资人按照约定或者出资比例享有资产收益、重大决策以及选择经营管理者等权利并履行义务。</p>
<p>　　第二百六十九条　【法人财产权】营利法人对其不动产和动产依照法律、行政法规以及章程享有占有、使用、收益和处分的权利。</p>
<p>　　营利法人以外的法人,对其不动产和动产的权利,适用有关法律、行政法规以及章程的规定。</p>
<p>　　第二百七十条　【社会团体法人、捐助法人合法财产的保护】社会团体法人、捐助法人依法所有的不动产和动产,受法律保护。</p>
<h3 id="第六章-业主的建筑物区分所有权"><a href="#第六章-业主的建筑物区分所有权" class="headerlink" title="第六章　业主的建筑物区分所有权"></a>第六章　业主的建筑物区分所有权</h3><p>　　第二百七十一条　【建筑物区分所有权】业主对建筑物内的住宅、经营性用房等专有部分享有所有权,对专有部分以外的共有部分享有共有和共同管理的权利。</p>
<p>　　第二百七十二条　【业主对专有部分的权利和义务】业主对其建筑物专有部分享有占有、使用、收益和处分的权利。业主行使权利不得危及建筑物的安全,不得损害其他业主的合法权益。</p>
<p>　　第二百七十三条　【业主对共有部分的权利和义务】业主对建筑物专有部分以外的共有部分,享有权利,承担义务;不得以放弃权利为由不履行义务。</p>
<p>　　业主转让建筑物内的住宅、经营性用房,其对共有部分享有的共有和共同管理的权利一并转让。</p>
<p>　　第二百七十四条　【建筑区划内道路、绿地等的权利归属】建筑区划内的道路,属于业主共有,但是属于城镇公共道路的除外。建筑区划内的绿地,属于业主共有,但是属于城镇公共绿地或者明示属于个人的除外。建筑区划内的其他公共场所、公用设施和物业服务用房,属于业主共有。</p>
<p>　　第二百七十五条　【车位、车库的归属】建筑区划内,规划用于停放汽车的车位、车库的归属,由当事人通过出售、附赠或者出租等方式约定。</p>
<p>　　占用业主共有的道路或者其他场地用于停放汽车的车位,属于业主共有。</p>
<p>　　第二百七十六条　【车位、车库的首要用途】建筑区划内,规划用于停放汽车的车位、车库应当首先满足业主的需要。</p>
<p>　　第二百七十七条　【业主自治管理组织的设立及指导和协助】业主可以设立业主大会,选举业主委员会。业主大会、业主委员会成立的具体条件和程序,依照法律、法规的规定。</p>
<p>　　地方人民政府有关部门、居民委员会应当对设立业主大会和选举业主委员会给予指导和协助。</p>
<p>　　第二百七十八条　【业主共同决定事项及表决】下列事项由业主共同决定:</p>
<p>　　(一)制定和修改业主大会议事规则;</p>
<p>　　(二)制定和修改管理规约;</p>
<p>　　(三)选举业主委员会或者更换业主委员会成员;</p>
<p>　　(四)选聘和解聘物业服务企业或者其他管理人;</p>
<p>　　(五)使用建筑物及其附属设施的维修资金;</p>
<p>　　(六)筹集建筑物及其附属设施的维修资金;</p>
<p>　　(七)改建、重建建筑物及其附属设施;</p>
<p>　　(八)改变共有部分的用途或者利用共有部分从事经营活动;</p>
<p>　　(九)有关共有和共同管理权利的其他重大事项。</p>
<p>　　业主共同决定事项,应当由专有部分面积占比三分之二以上的业主且人数占比三分之二以上的业主参与表决。决定前款第六项至第八项规定的事项,应当经参与表决专有部分面积四分之三以上的业主且参与表决人数四分之三以上的业主同意。决定前款其他事项,应当经参与表决专有部分面积过半数的业主且参与表决人数过半数的业主同意。</p>
<p>　　第二百七十九条　【业主改变住宅用途的限制条件】业主不得违反法律、法规以及管理规约,将住宅改变为经营性用房。业主将住宅改变为经营性用房的,除遵守法律、法规以及管理规约外,应当经有利害关系的业主一致同意。</p>
<p>　　第二百八十条　【业主大会、业主委员会决定的效力】业主大会或者业主委员会的决定,对业主具有法律约束力。</p>
<p>　　业主大会或者业主委员会作出的决定侵害业主合法权益的,受侵害的业主可以请求人民法院予以撤销。</p>
<p>　　第二百八十一条　【建筑物及其附属设施维修资金的归属和处分】建筑物及其附属设施的维修资金,属于业主共有。经业主共同决定,可以用于电梯、屋顶、外墙、无障碍设施等共有部分的维修、更新和改造。建筑物及其附属设施的维修资金的筹集、使用情况应当定期公布。</p>
<p>　　紧急情况下需要维修建筑物及其附属设施的,业主大会或者业主委员会可以依法申请使用建筑物及其附属设施的维修资金。</p>
<p>　　第二百八十二条　【共有部分的收入分配】建设单位、物业服务企业或者其他管理人等利用业主的共有部分产生的收入,在扣除合理成本之后,属于业主共有。</p>
<p>　　第二百八十三条　【建筑物及其附属设施的费用分担和收益分配】建筑物及其附属设施的费用分摊、收益分配等事项,有约定的,按照约定;没有约定或者约定不明确的,按照业主专有部分面积所占比例确定。</p>
<p>　　第二百八十四条　【建筑物及其附属设施的管理主体】业主可以自行管理建筑物及其附属设施,也可以委托物业服务企业或者其他管理人管理。</p>
<p>　　对建设单位聘请的物业服务企业或者其他管理人,业主有权依法更换。</p>
<p>　　第二百八十五条　【业主和物业服务企业或其他管理人的关系】物业服务企业或者其他管理人根据业主的委托,依照本法第三编有关物业服务合同的规定管理建筑区划内的建筑物及其附属设施,接受业主的监督,并及时答复业主对物业服务情况提出的询问。</p>
<p>　　物业服务企业或者其他管理人应当执行政府依法实施的应急处置措施和其他管理措施,积极配合开展相关工作。</p>
<p>　　第二百八十六条　【业主的相关义务及责任】业主应当遵守法律、法规以及管理规约,相关行为应当符合节约资源、保护生态环境的要求。对于物业服务企业或者其他管理人执行政府依法实施的应急处置措施和其他管理措施,业主应当依法予以配合。</p>
<p>　　业主大会或者业主委员会,对任意弃置垃圾、排放污染物或者噪声、违反规定饲养动物、违章搭建、侵占通道、拒付物业费等损害他人合法权益的行为,有权依照法律、法规以及管理规约,请求行为人停止侵害、排除妨碍、消除危险、恢复原状、赔偿损失。</p>
<p>　　业主或者其他行为人拒不履行相关义务的,有关当事人可以向有关行政主管部门报告或者投诉,有关行政主管部门应当依法处理。</p>
<p>　　第二百八十七条　【业主合法权益的保护】业主对建设单位、物业服务企业或者其他管理人以及其他业主侵害自己合法权益的行为,有权请求其承担民事责任。</p>
<h3 id="第七章-相-邻-关-系"><a href="#第七章-相-邻-关-系" class="headerlink" title="第七章　相 邻 关 系"></a>第七章　相 邻 关 系</h3><p>　　第二百八十八条　【处理相邻关系的原则】不动产的相邻权利人应当按照有利生产、方便生活、团结互助、公平合理的原则,正确处理相邻关系。</p>
<p>　　第二百八十九条　【处理相邻关系的法律依据】法律、法规对处理相邻关系有规定的,依照其规定;法律、法规没有规定的,可以按照当地习惯。</p>
<p>　　第二百九十条　【用水、排水相邻关系】不动产权利人应当为相邻权利人用水、排水提供必要的便利。</p>
<p>　　对自然流水的利用,应当在不动产的相邻权利人之间合理分配。对自然流水的排放,应当尊重自然流向。</p>
<p>　　第二百九十一条　【通行相邻关系】不动产权利人对相邻权利人因通行等必须利用其土地的,应当提供必要的便利。</p>
<p>　　第二百九十二条　【相邻土地的利用】不动产权利人因建造、修缮建筑物以及铺设电线、电缆、水管、暖气和燃气管线等必须利用相邻土地、建筑物的,该土地、建筑物的权利人应当提供必要的便利。</p>
<p>　　第二百九十三条　【相邻通风、采光和日照】建造建筑物,不得违反国家有关工程建设标准,不得妨碍相邻建筑物的通风、采光和日照。</p>
<p>　　第二百九十四条　【相邻不动产之间不可量物侵害】不动产权利人不得违反国家规定弃置固体废物,排放大气污染物、水污染物、土壤污染物、噪声、光辐射、电磁辐射等有害物质。</p>
<p>　　第二百九十五条　【维护相邻不动产安全】不动产权利人挖掘土地、建造建筑物、铺设管线以及安装设备等,不得危及相邻不动产的安全。</p>
<p>　　第二百九十六条　【使用相邻不动产避免造成损害】不动产权利人因用水、排水、通行、铺设管线等利用相邻不动产的,应当尽量避免对相邻的不动产权利人造成损害。</p>
<h3 id="第八章-共-有"><a href="#第八章-共-有" class="headerlink" title="第八章　共　　有"></a>第八章　共　　有</h3><p>　　第二百九十七条　【共有及其类型】不动产或者动产可以由两个以上组织、个人共有。共有包括按份共有和共同共有。</p>
<p>　　第二百九十八条　【按份共有】按份共有人对共有的不动产或者动产按照其份额享有所有权。</p>
<p>　　第二百九十九条　【共同共有】共同共有人对共有的不动产或者动产共同享有所有权。</p>
<p>　　第三百条　【共有人对共有物的管理权】共有人按照约定管理共有的不动产或者动产;没有约定或者约定不明确的,各共有人都有管理的权利和义务。</p>
<p>　　第三百零一条　【共有物的处分、重大修缮和性质、用途变更】处分共有的不动产或者动产以及对共有的不动产或者动产作重大修缮、变更性质或者用途的,应当经占份额三分之二以上的按份共有人或者全体共同共有人同意,但是共有人之间另有约定的除外。</p>
<p>　　第三百零二条　【共有物管理费用的分担】共有人对共有物的管理费用以及其他负担,有约定的,按照其约定;没有约定或者约定不明确的,按份共有人按照其份额负担,共同共有人共同负担。</p>
<p>　　第三百零三条　【共有物的分割】共有人约定不得分割共有的不动产或者动产,以维持共有关系的,应当按照约定,但是共有人有重大理由需要分割的,可以请求分割;没有约定或者约定不明确的,按份共有人可以随时请求分割,共同共有人在共有的基础丧失或者有重大理由需要分割时可以请求分割。因分割造成其他共有人损害的,应当给予赔偿。</p>
<p>　　第三百零四条　【共有物的分割方式】共有人可以协商确定分割方式。达不成协议,共有的不动产或者动产可以分割且不会因分割减损价值的,应当对实物予以分割;难以分割或者因分割会减损价值的,应当对折价或者拍卖、变卖取得的价款予以分割。</p>
<p>　　共有人分割所得的不动产或者动产有瑕疵的,其他共有人应当分担损失。</p>
<p>　　第三百零五条　【按份共有人的份额处分权和其他共有人的优先购买权】按份共有人可以转让其享有的共有的不动产或者动产份额。其他共有人在同等条件下享有优先购买的权利。</p>
<p>　　第三百零六条　【优先购买权的实现方式】按份共有人转让其享有的共有的不动产或者动产份额的,应当将转让条件及时通知其他共有人。其他共有人应当在合理期限内行使优先购买权。</p>
<p>　　两个以上其他共有人主张行使优先购买权的,协商确定各自的购买比例;协商不成的,按照转让时各自的共有份额比例行使优先购买权。</p>
<p>　　第三百零七条　【因共同财产产生的债权债务关系的对外、对内效力】因共有的不动产或者动产产生的债权债务,在对外关系上,共有人享有连带债权、承担连带债务,但是法律另有规定或者第三人知道共有人不具有连带债权债务关系的除外;在共有人内部关系上,除共有人另有约定外,按份共有人按照份额享有债权、承担债务,共同共有人共同享有债权、承担债务。偿还债务超过自己应当承担份额的按份共有人,有权向其他共有人追偿。</p>
<p>　　第三百零八条　【按份共有的推定】共有人对共有的不动产或者动产没有约定为按份共有或者共同共有,或者约定不明确的,除共有人具有家庭关系等外,视为按份共有。</p>
<p>　　第三百零九条　【按份共有人份额的确定】按份共有人对共有的不动产或者动产享有的份额,没有约定或者约定不明确的,按照出资额确定;不能确定出资额的,视为等额享有。</p>
<p>　　第三百一十条　【用益物权、担保物权共有的参照适用】两个以上组织、个人共同享有用益物权、担保物权的,参照适用本章的有关规定。</p>
<h3 id="第九章-所有权取得的特别规定"><a href="#第九章-所有权取得的特别规定" class="headerlink" title="第九章　所有权取得的特别规定"></a>第九章　所有权取得的特别规定</h3><p>　　第三百一十一条　【善意取得】无处分权人将不动产或者动产转让给受让人的,所有权人有权追回;除法律另有规定外,符合下列情形的,受让人取得该不动产或者动产的所有权:</p>
<p>　　(一)受让人受让该不动产或者动产时是善意;</p>
<p>　　(二)以合理的价格转让;</p>
<p>　　(三)转让的不动产或者动产依照法律规定应当登记的已经登记,不需要登记的已经交付给受让人。</p>
<p>　　受让人依据前款规定取得不动产或者动产的所有权的,原所有权人有权向无处分权人请求损害赔偿。</p>
<p>　　当事人善意取得其他物权的,参照适用前两款规定。</p>
<p>　　第三百一十二条　【遗失物的善意取得】所有权人或者其他权利人有权追回遗失物。该遗失物通过转让被他人占有的,权利人有权向无处分权人请求损害赔偿,或者自知道或者应当知道受让人之日起二年内向受让人请求返还原物;但是,受让人通过拍卖或者向具有经营资格的经营者购得该遗失物的,权利人请求返还原物时应当支付受让人所付的费用。权利人向受让人支付所付费用后,有权向无处分权人追偿。</p>
<p>　　第三百一十三条　【善意取得的动产上原有权利的消灭】善意受让人取得动产后,该动产上的原有权利消灭。但是,善意受让人在受让时知道或者应当知道该权利的除外。</p>
<p>　　第三百一十四条　【拾得遗失物的返还】拾得遗失物,应当返还权利人。拾得人应当及时通知权利人领取,或者送交公安等有关部门。</p>
<p>　　第三百一十五条　【有关部门收到遗失物的处理】有关部门收到遗失物,知道权利人的,应当及时通知其领取;不知道的,应当及时发布招领公告。</p>
<p>　　第三百一十六条　【拾得人及有关部门妥善保管遗失物义务】拾得人在遗失物送交有关部门前,有关部门在遗失物被领取前,应当妥善保管遗失物。因故意或者重大过失致使遗失物毁损、灭失的,应当承担民事责任。</p>
<p>　　第三百一十七条　【权利人在领取遗失物时应尽义务】权利人领取遗失物时,应当向拾得人或者有关部门支付保管遗失物等支出的必要费用。</p>
<p>　　权利人悬赏寻找遗失物的,领取遗失物时应当按照承诺履行义务。</p>
<p>　　拾得人侵占遗失物的,无权请求保管遗失物等支出的费用,也无权请求权利人按照承诺履行义务。</p>
<p>　　第三百一十八条　【公告期满无人认领的遗失物归属】遗失物自发布招领公告之日起一年内无人认领的,归国家所有。</p>
<p>　　第三百一十九条　【拾得漂流物、发现埋藏物或隐藏物】拾得漂流物、发现埋藏物或者隐藏物的,参照适用拾得遗失物的有关规定。法律另有规定的,依照其规定。</p>
<p>　　第三百二十条　【从物所有权的转移】主物转让的,从物随主物转让,但是当事人另有约定的除外。</p>
<p>　　第三百二十一条　【天然孳息和法定孳息的归属】天然孳息,由所有权人取得;既有所有权人又有用益物权人的,由用益物权人取得。当事人另有约定的,按照其约定。</p>
<p>　　法定孳息,当事人有约定的,按照约定取得;没有约定或者约定不明确的,按照交易习惯取得。</p>
<p>　　第三百二十二条　【添附取得物的归属】因加工、附合、混合而产生的物的归属,有约定的,按照约定;没有约定或者约定不明确的,依照法律规定;法律没有规定的,按照充分发挥物的效用以及保护无过错当事人的原则确定。因一方当事人的过错或者确定物的归属造成另一方当事人损害的,应当给予赔偿或者补偿。</p>
<h2 id="第三分编-用-益-物-权"><a href="#第三分编-用-益-物-权" class="headerlink" title="第三分编　用 益 物 权"></a>第三分编　用 益 物 权</h2><h3 id="第十章-一-般-规-定"><a href="#第十章-一-般-规-定" class="headerlink" title="第十章　一 般 规 定"></a>第十章　一 般 规 定</h3><p>　　第三百二十三条　【用益物权的定义】用益物权人对他人所有的不动产或者动产,依法享有占有、使用和收益的权利。</p>
<p>　　第三百二十四条　【国有和集体所有自然资源的用益物权】国家所有或者国家所有由集体使用以及法律规定属于集体所有的自然资源,组织、个人依法可以占有、使用和收益。</p>
<p>　　第三百二十五条　【自然资源使用制度】国家实行自然资源有偿使用制度,但是法律另有规定的除外。</p>
<p>　　第三百二十六条　【用益物权人权利的行使】用益物权人行使权利,应当遵守法律有关保护和合理开发利用资源、保护生态环境的规定。所有权人不得干涉用益物权人行使权利。</p>
<p>　　第三百二十七条　【用益物权人因征收、征用有权获得补偿】因不动产或者动产被征收、征用致使用益物权消灭或者影响用益物权行使的,用益物权人有权依据本法第二百四十三条、第二百四十五条的规定获得相应补偿。</p>
<p>　　第三百二十八条　【海域使用权的法律保护】依法取得的海域使用权受法律保护。</p>
<p>　　第三百二十九条　【合法探矿权等权利的法律保护】依法取得的探矿权、采矿权、取水权和使用水域、滩涂从事养殖、捕捞的权利受法律保护。</p>
<h3 id="第十一章-土地承包经营权"><a href="#第十一章-土地承包经营权" class="headerlink" title="第十一章　土地承包经营权"></a>第十一章　土地承包经营权</h3><p>　　第三百三十条　【双层经营体制与土地承包经营制度】农村集体经济组织实行家庭承包经营为基础、统分结合的双层经营体制。</p>
<p>　　农民集体所有和国家所有由农民集体使用的耕地、林地、草地以及其他用于农业的土地,依法实行土地承包经营制度。</p>
<p>　　第三百三十一条　【土地承包经营权的定义】土地承包经营权人依法对其承包经营的耕地、林地、草地等享有占有、使用和收益的权利,有权从事种植业、林业、畜牧业等农业生产。</p>
<p>　　第三百三十二条　【土地承包期】耕地的承包期为三十年。草地的承包期为三十年至五十年。林地的承包期为三十年至七十年。</p>
<p>　　前款规定的承包期限届满,由土地承包经营权人依照农村土地承包的法律规定继续承包。</p>
<p>　　第三百三十三条　【土地承包经营权的设立和登记】土地承包经营权自土地承包经营权合同生效时设立。</p>
<p>　　登记机构应当向土地承包经营权人发放土地承包经营权证、林权证等证书,并登记造册,确认土地承包经营权。</p>
<p>　　第三百三十四条　【土地承包经营权的互换、转让】土地承包经营权人依照法律规定,有权将土地承包经营权互换、转让。未经依法批准,不得将承包地用于非农建设。</p>
<p>　　第三百三十五条　【土地承包经营权互换、转让的登记】土地承包经营权互换、转让的,当事人可以向登记机构申请登记;未经登记,不得对抗善意第三人。</p>
<p>　　第三百三十六条　【承包地的调整】承包期内发包人不得调整承包地。</p>
<p>　　因自然灾害严重毁损承包地等特殊情形,需要适当调整承包的耕地和草地的,应当依照农村土地承包的法律规定办理。</p>
<p>　　第三百三十七条　【承包地的收回】承包期内发包人不得收回承包地。法律另有规定的,依照其规定。</p>
<p>　　第三百三十八条　【承包地的征收补偿】承包地被征收的,土地承包经营权人有权依据本法第二百四十三条的规定获得相应补偿。</p>
<p>　　第三百三十九条　【土地经营权的流转】土地承包经营权人可以自主决定依法采取出租、入股或者其他方式向他人流转土地经营权。</p>
<p>　　第三百四十条　【土地经营权的定义】土地经营权人有权在合同约定的期限内占有农村土地,自主开展农业生产经营并取得收益。</p>
<p>　　第三百四十一条　【土地经营权的设立及登记】流转期限为五年以上的土地经营权,自流转合同生效时设立。当事人可以向登记机构申请土地经营权登记;未经登记,不得对抗善意第三人。</p>
<p>　　第三百四十二条　【其他方式承包的土地经营权流转】通过招标、拍卖、公开协商等方式承包农村土地,经依法登记取得权属证书的,可以依法采取出租、入股、抵押或者其他方式流转土地经营权。</p>
<p>　　第三百四十三条　【国有农用地实行承包经营的参照适用】国家所有的农用地实行承包经营的,参照适用本编的有关规定。</p>
<h3 id="第十二章-建设用地使用权"><a href="#第十二章-建设用地使用权" class="headerlink" title="第十二章　建设用地使用权"></a>第十二章　建设用地使用权</h3><p>　　第三百四十四条　【建设用地使用权的定义】建设用地使用权人依法对国家所有的土地享有占有、使用和收益的权利,有权利用该土地建造建筑物、构筑物及其附属设施。</p>
<p>　　第三百四十五条　【建设用地使用权的分层设立】建设用地使用权可以在土地的地表、地上或者地下分别设立。</p>
<p>　　第三百四十六条　【建设用地使用权的设立原则】设立建设用地使用权,应当符合节约资源、保护生态环境的要求,遵守法律、行政法规关于土地用途的规定,不得损害已经设立的用益物权。</p>
<p>　　第三百四十七条　【建设用地使用权的设立方式】设立建设用地使用权,可以采取出让或者划拨等方式。</p>
<p>　　工业、商业、旅游、娱乐和商品住宅等经营性用地以及同一土地有两个以上意向用地者的,应当采取招标、拍卖等公开竞价的方式出让。</p>
<p>　　严格限制以划拨方式设立建设用地使用权。</p>
<p>　　第三百四十八条　【建设用地使用权出让合同】通过招标、拍卖、协议等出让方式设立建设用地使用权的,当事人应当采用书面形式订立建设用地使用权出让合同。</p>
<p>　　建设用地使用权出让合同一般包括下列条款:</p>
<p>　　(一)当事人的名称和住所;</p>
<p>　　(二)土地界址、面积等;</p>
<p>　　(三)建筑物、构筑物及其附属设施占用的空间;</p>
<p>　　(四)土地用途、规划条件;</p>
<p>　　(五)建设用地使用权期限;</p>
<p>　　(六)出让金等费用及其支付方式;</p>
<p>　　(七)解决争议的方法。</p>
<p>　　第三百四十九条　【建设用地使用权的登记】设立建设用地使用权的,应当向登记机构申请建设用地使用权登记。建设用地使用权自登记时设立。登记机构应当向建设用地使用权人发放权属证书。</p>
<p>　　第三百五十条　【土地用途管制制度】建设用地使用权人应当合理利用土地,不得改变土地用途;需要改变土地用途的,应当依法经有关行政主管部门批准。</p>
<p>　　第三百五十一条　【建设用地使用权人支付出让金等费用的义务】建设用地使用权人应当依照法律规定以及合同约定支付出让金等费用。</p>
<p>　　第三百五十二条　【建设用地使用权人建造的建筑物等设施的权属】建设用地使用权人建造的建筑物、构筑物及其附属设施的所有权属于建设用地使用权人,但是有相反证据证明的除外。</p>
<p>　　第三百五十三条　【建设用地使用权的流转方式】建设用地使用权人有权将建设用地使用权转让、互换、出资、赠与或者抵押,但是法律另有规定的除外。</p>
<p>　　第三百五十四条　【处分建设用地使用权的合同形式和期限】建设用地使用权转让、互换、出资、赠与或者抵押的,当事人应当采用书面形式订立相应的合同。使用期限由当事人约定,但是不得超过建设用地使用权的剩余期限。</p>
<p>　　第三百五十五条　【建设用地使用权流转后变更登记】建设用地使用权转让、互换、出资或者赠与的,应当向登记机构申请变更登记。</p>
<p>　　第三百五十六条　【建筑物等设施随建设用地使用权的流转而一并处分】建设用地使用权转让、互换、出资或者赠与的,附着于该土地上的建筑物、构筑物及其附属设施一并处分。</p>
<p>　　第三百五十七条　【建设用地使用权随建筑物等设施的流转而一并处分】建筑物、构筑物及其附属设施转让、互换、出资或者赠与的,该建筑物、构筑物及其附属设施占用范围内的建设用地使用权一并处分。</p>
<p>　　第三百五十八条　【建设用地使用权提前收回及其补偿】建设用地使用权期限届满前,因公共利益需要提前收回该土地的,应当依据本法第二百四十三条的规定对该土地上的房屋以及其他不动产给予补偿,并退还相应的出让金。</p>
<p>　　第三百五十九条　【建设用地使用权的续期】住宅建设用地使用权期限届满的,自动续期。续期费用的缴纳或者减免,依照法律、行政法规的规定办理。</p>
<p>　　非住宅建设用地使用权期限届满后的续期,依照法律规定办理。该土地上的房屋以及其他不动产的归属,有约定的,按照约定;没有约定或者约定不明确的,依照法律、行政法规的规定办理。</p>
<p>　　第三百六十条　【建设用地使用权注销登记】建设用地使用权消灭的,出让人应当及时办理注销登记。登记机构应当收回权属证书。</p>
<p>　　第三百六十一条　【集体所有土地作为建设用地的法律适用】集体所有的土地作为建设用地的,应当依照土地管理的法律规定办理。</p>
<h3 id="第十三章-宅基地使用权"><a href="#第十三章-宅基地使用权" class="headerlink" title="第十三章　宅基地使用权"></a>第十三章　宅基地使用权</h3><p>　　第三百六十二条　【宅基地使用权的定义】宅基地使用权人依法对集体所有的土地享有占有和使用的权利,有权依法利用该土地建造住宅及其附属设施。</p>
<p>　　第三百六十三条　【宅基地使用权取得、行使和转让的法律适用】宅基地使用权的取得、行使和转让,适用土地管理的法律和国家有关规定。</p>
<p>　　第三百六十四条　【宅基地的灭失和重新分配】宅基地因自然灾害等原因灭失的,宅基地使用权消灭。对失去宅基地的村民,应当依法重新分配宅基地。</p>
<p>　　第三百六十五条　【宅基地使用权变更和注销登记】已经登记的宅基地使用权转让或者消灭的,应当及时办理变更登记或者注销登记。</p>
<h3 id="第十四章-居-住-权"><a href="#第十四章-居-住-权" class="headerlink" title="第十四章　居　住　权"></a>第十四章　居　住　权</h3><p>　　第三百六十六条　【居住权的定义】居住权人有权按照合同约定,对他人的住宅享有占有、使用的用益物权,以满足生活居住的需要。</p>
<p>　　第三百六十七条　【居住权合同】设立居住权,当事人应当采用书面形式订立居住权合同。</p>
<p>　　居住权合同一般包括下列条款:</p>
<p>　　(一)当事人的姓名或者名称和住所;</p>
<p>　　(二)住宅的位置;</p>
<p>　　(三)居住的条件和要求;</p>
<p>　　(四)居住权期限;</p>
<p>　　(五)解决争议的方法。</p>
<p>　　第三百六十八条　【居住权的设立】居住权无偿设立,但是当事人另有约定的除外。设立居住权的,应当向登记机构申请居住权登记。居住权自登记时设立。</p>
<p>　　第三百六十九条　【居住权的转让、继承和设立居住权的住宅出租】居住权不得转让、继承。设立居住权的住宅不得出租,但是当事人另有约定的除外。</p>
<p>　　第三百七十条　【居住权的消灭】居住权期限届满或者居住权人死亡的,居住权消灭。居住权消灭的,应当及时办理注销登记。</p>
<p>　　第三百七十一条　【以遗嘱方式设立居住权的参照适用】以遗嘱方式设立居住权的,参照适用本章的有关规定。</p>
<h3 id="第十五章-地-役-权"><a href="#第十五章-地-役-权" class="headerlink" title="第十五章　地　役　权"></a>第十五章　地　役　权</h3><p>　　第三百七十二条　【地役权的定义】地役权人有权按照合同约定,利用他人的不动产,以提高自己的不动产的效益。</p>
<p>　　前款所称他人的不动产为供役地,自己的不动产为需役地。</p>
<p>　　第三百七十三条　【地役权合同】设立地役权,当事人应当采用书面形式订立地役权合同。</p>
<p>　　地役权合同一般包括下列条款:</p>
<p>　　(一)当事人的姓名或者名称和住所;</p>
<p>　　(二)供役地和需役地的位置;</p>
<p>　　(三)利用目的和方法;</p>
<p>　　(四)地役权期限;</p>
<p>　　(五)费用及其支付方式;</p>
<p>　　(六)解决争议的方法。</p>
<p>　　第三百七十四条　【地役权的设立与登记】地役权自地役权合同生效时设立。当事人要求登记的,可以向登记机构申请地役权登记;未经登记,不得对抗善意第三人。</p>
<p>　　第三百七十五条　【供役地权利人的义务】供役地权利人应当按照合同约定,允许地役权人利用其不动产,不得妨害地役权人行使权利。</p>
<p>　　第三百七十六条　【地役权人的义务】地役权人应当按照合同约定的利用目的和方法利用供役地,尽量减少对供役地权利人物权的限制。</p>
<p>　　第三百七十七条　【地役权期限】地役权期限由当事人约定;但是,不得超过土地承包经营权、建设用地使用权等用益物权的剩余期限。</p>
<p>　　第三百七十八条　【地役权的承继】土地所有权人享有地役权或者负担地役权的,设立土地承包经营权、宅基地使用权等用益物权时,该用益物权人继续享有或者负担已经设立的地役权。</p>
<p>　　第三百七十九条　【在先用益物权对地役权的限制】土地上已经设立土地承包经营权、建设用地使用权、宅基地使用权等用益物权的,未经用益物权人同意,土地所有权人不得设立地役权。</p>
<p>　　第三百八十条　【地役权的转让】地役权不得单独转让。土地承包经营权、建设用地使用权等转让的,地役权一并转让,但是合同另有约定的除外。</p>
<p>　　第三百八十一条　【地役权的抵押】地役权不得单独抵押。土地经营权、建设用地使用权等抵押的,在实现抵押权时,地役权一并转让。</p>
<p>　　第三百八十二条　【地役权对需役地及其上权利的不可分性】需役地以及需役地上的土地承包经营权、建设用地使用权等部分转让时,转让部分涉及地役权的,受让人同时享有地役权。</p>
<p>　　第三百八十三条　【地役权对供役地及其上权利的不可分性】供役地以及供役地上的土地承包经营权、建设用地使用权等部分转让时,转让部分涉及地役权的,地役权对受让人具有法律约束力。</p>
<p>　　第三百八十四条　【供役地权利人单方解除地役权合同的法定事由】地役权人有下列情形之一的,供役地权利人有权解除地役权合同,地役权消灭:</p>
<p>　　(一)违反法律规定或者合同约定,滥用地役权;</p>
<p>　　(二)有偿利用供役地,约定的付款期限届满后在合理期限内经两次催告未支付费用。</p>
<p>　　第三百八十五条　【已登记地役权的变更、转让或消灭手续】已经登记的地役权变更、转让或者消灭的,应当及时办理变更登记或者注销登记。</p>
<p>　　 </p>
<h2 id="第四分编-担-保-物-权"><a href="#第四分编-担-保-物-权" class="headerlink" title="第四分编　担 保 物 权"></a>第四分编　担 保 物 权</h2><h3 id="第十六章-一-般-规-定"><a href="#第十六章-一-般-规-定" class="headerlink" title="第十六章　一 般 规 定"></a>第十六章　一 般 规 定</h3><p>　　第三百八十六条　【担保物权的定义】担保物权人在债务人不履行到期债务或者发生当事人约定的实现担保物权的情形,依法享有就担保财产优先受偿的权利,但是法律另有规定的除外。</p>
<p>　　第三百八十七条　【担保物权的适用范围和反担保】债权人在借贷、买卖等民事活动中,为保障实现其债权,需要担保的,可以依照本法和其他法律的规定设立担保物权。</p>
<p>　　第三人为债务人向债权人提供担保的,可以要求债务人提供反担保。反担保适用本法和其他法律的规定。</p>
<p>　　第三百八十八条　【担保合同】设立担保物权,应当依照本法和其他法律的规定订立担保合同。担保合同包括抵押合同、质押合同和其他具有担保功能的合同。担保合同是主债权债务合同的从合同。主债权债务合同无效的,担保合同无效,但是法律另有规定的除外。</p>
<p>　　担保合同被确认无效后,债务人、担保人、债权人有过错的,应当根据其过错各自承担相应的民事责任。</p>
<p>　　第三百八十九条　【担保物权的担保范围】担保物权的担保范围包括主债权及其利息、违约金、损害赔偿金、保管担保财产和实现担保物权的费用。当事人另有约定的,按照其约定。</p>
<p>　　第三百九十条　【担保物权的物上代位性及代位物的提存】担保期间,担保财产毁损、灭失或者被征收等,担保物权人可以就获得的保险金、赔偿金或者补偿金等优先受偿。被担保债权的履行期限未届满的,也可以提存该保险金、赔偿金或者补偿金等。</p>
<p>　　第三百九十一条　【未经担保人同意转移债务的法律后果】第三人提供担保,未经其书面同意,债权人允许债务人转移全部或者部分债务的,担保人不再承担相应的担保责任。</p>
<p>　　第三百九十二条　【人保和物保并存时担保权的实行规则】被担保的债权既有物的担保又有人的担保的,债务人不履行到期债务或者发生当事人约定的实现担保物权的情形,债权人应当按照约定实现债权;没有约定或者约定不明确,债务人自己提供物的担保的,债权人应当先就该物的担保实现债权;第三人提供物的担保的,债权人可以就物的担保实现债权,也可以请求保证人承担保证责任。提供担保的第三人承担担保责任后,有权向债务人追偿。</p>
<p>　　第三百九十三条　【担保物权消灭事由】有下列情形之一的,担保物权消灭:</p>
<p>　　(一)主债权消灭;</p>
<p>　　(二)担保物权实现;</p>
<p>　　(三)债权人放弃担保物权;</p>
<p>　　(四)法律规定担保物权消灭的其他情形。</p>
<h3 id="第十七章-抵-押-权"><a href="#第十七章-抵-押-权" class="headerlink" title="第十七章　抵　押　权"></a>第十七章　抵　押　权</h3><h4 id="第一节-一般抵押权"><a href="#第一节-一般抵押权" class="headerlink" title="第一节　一般抵押权"></a>第一节　一般抵押权</h4><p>　　第三百九十四条　【抵押权的定义】为担保债务的履行,债务人或者第三人不转移财产的占有,将该财产抵押给债权人的,债务人不履行到期债务或者发生当事人约定的实现抵押权的情形,债权人有权就该财产优先受偿。</p>
<p>　　前款规定的债务人或者第三人为抵押人,债权人为抵押权人,提供担保的财产为抵押财产。</p>
<p>　　第三百九十五条　【抵押财产的范围】债务人或者第三人有权处分的下列财产可以抵押:</p>
<p>　　(一)建筑物和其他土地附着物;</p>
<p>　　(二)建设用地使用权;</p>
<p>　　(三)海域使用权;</p>
<p>　　(四)生产设备、原材料、半成品、产品;</p>
<p>　　(五)正在建造的建筑物、船舶、航空器;</p>
<p>　　(六)交通运输工具;</p>
<p>　　(七)法律、行政法规未禁止抵押的其他财产。</p>
<p>　　抵押人可以将前款所列财产一并抵押。</p>
<p>　　第三百九十六条　【浮动抵押】企业、个体工商户、农业生产经营者可以将现有的以及将有的生产设备、原材料、半成品、产品抵押,债务人不履行到期债务或者发生当事人约定的实现抵押权的情形,债权人有权就抵押财产确定时的动产优先受偿。</p>
<p>　　第三百九十七条　【建筑物与建设用地使用权同时抵押规则】以建筑物抵押的,该建筑物占用范围内的建设用地使用权一并抵押。以建设用地使用权抵押的,该土地上的建筑物一并抵押。</p>
<p>　　抵押人未依据前款规定一并抵押的,未抵押的财产视为一并抵押。</p>
<p>　　第三百九十八条　【乡镇、村企业的建设用地使用权抵押限制】乡镇、村企业的建设用地使用权不得单独抵押。以乡镇、村企业的厂房等建筑物抵押的,其占用范围内的建设用地使用权一并抵押。</p>
<p>　　第三百九十九条　【禁止抵押的财产范围】下列财产不得抵押:</p>
<p>　　(一)土地所有权;</p>
<p>　　(二)宅基地、自留地、自留山等集体所有土地的使用权,但是法律规定可以抵押的除外;</p>
<p>　　(三)学校、幼儿园、医疗机构等为公益目的成立的非营利法人的教育设施、医疗卫生设施和其他公益设施;</p>
<p>　　(四)所有权、使用权不明或者有争议的财产;</p>
<p>　　(五)依法被查封、扣押、监管的财产;</p>
<p>　　(六)法律、行政法规规定不得抵押的其他财产。</p>
<p>　　第四百条　【抵押合同】设立抵押权,当事人应当采用书面形式订立抵押合同。</p>
<p>　　抵押合同一般包括下列条款:</p>
<p>　　(一)被担保债权的种类和数额;</p>
<p>　　(二)债务人履行债务的期限;</p>
<p>　　(三)抵押财产的名称、数量等情况;</p>
<p>　　(四)担保的范围。</p>
<p>　　第四百零一条　【流押】抵押权人在债务履行期限届满前,与抵押人约定债务人不履行到期债务时抵押财产归债权人所有的,只能依法就抵押财产优先受偿。</p>
<p>　　第四百零二条　【不动产抵押登记】以本法第三百九十五条第一款第一项至第三项规定的财产或者第五项规定的正在建造的建筑物抵押的,应当办理抵押登记。抵押权自登记时设立。</p>
<p>　　第四百零三条　【动产抵押的效力】以动产抵押的,抵押权自抵押合同生效时设立;未经登记,不得对抗善意第三人。</p>
<p>　　第四百零四条　【动产抵押权无追及效力】以动产抵押的,不得对抗正常经营活动中已经支付合理价款并取得抵押财产的买受人。</p>
<p>　　第四百零五条　【抵押权与租赁权的关系】抵押权设立前,抵押财产已经出租并转移占有的,原租赁关系不受该抵押权的影响。</p>
<p>　　第四百零六条　【抵押财产的处分】抵押期间,抵押人可以转让抵押财产。当事人另有约定的,按照其约定。抵押财产转让的,抵押权不受影响。</p>
<p>　　抵押人转让抵押财产的,应当及时通知抵押权人。抵押权人能够证明抵押财产转让可能损害抵押权的,可以请求抵押人将转让所得的价款向抵押权人提前清偿债务或者提存。转让的价款超过债权数额的部分归抵押人所有,不足部分由债务人清偿。</p>
<p>　　第四百零七条　【抵押权处分的从属性】抵押权不得与债权分离而单独转让或者作为其他债权的担保。债权转让的,担保该债权的抵押权一并转让,但是法律另有规定或者当事人另有约定的除外。</p>
<p>　　第四百零八条　【抵押权的保护】抵押人的行为足以使抵押财产价值减少的,抵押权人有权请求抵押人停止其行为;抵押财产价值减少的,抵押权人有权请求恢复抵押财产的价值,或者提供与减少的价值相应的担保。抵押人不恢复抵押财产的价值,也不提供担保的,抵押权人有权请求债务人提前清偿债务。</p>
<p>　　第四百零九条　【抵押权及其顺位的处分】抵押权人可以放弃抵押权或者抵押权的顺位。抵押权人与抵押人可以协议变更抵押权顺位以及被担保的债权数额等内容。但是,抵押权的变更未经其他抵押权人书面同意的,不得对其他抵押权人产生不利影响。</p>
<p>　　债务人以自己的财产设定抵押,抵押权人放弃该抵押权、抵押权顺位或者变更抵押权的,其他担保人在抵押权人丧失优先受偿权益的范围内免除担保责任,但是其他担保人承诺仍然提供担保的除外。</p>
<p>　　第四百一十条　【抵押权的实现】债务人不履行到期债务或者发生当事人约定的实现抵押权的情形,抵押权人可以与抵押人协议以抵押财产折价或者以拍卖、变卖该抵押财产所得的价款优先受偿。协议损害其他债权人利益的,其他债权人可以请求人民法院撤销该协议。</p>
<p>　　抵押权人与抵押人未就抵押权实现方式达成协议的,抵押权人可以请求人民法院拍卖、变卖抵押财产。</p>
<p>　　抵押财产折价或者变卖的,应当参照市场价格。</p>
<p>　　第四百一十一条　【浮动抵押财产的确定】依据本法第三百九十六条规定设定抵押的,抵押财产自下列情形之一发生时确定:</p>
<p>　　(一)债务履行期限届满,债权未实现;</p>
<p>　　(二)抵押人被宣告破产或者解散;</p>
<p>　　(三)当事人约定的实现抵押权的情形;</p>
<p>　　(四)严重影响债权实现的其他情形。</p>
<p>　　第四百一十二条　【抵押权对抵押财产孳息的效力】债务人不履行到期债务或者发生当事人约定的实现抵押权的情形,致使抵押财产被人民法院依法扣押的,自扣押之日起,抵押权人有权收取该抵押财产的天然孳息或者法定孳息,但是抵押权人未通知应当清偿法定孳息义务人的除外。</p>
<p>　　前款规定的孳息应当先充抵收取孳息的费用。</p>
<p>　　第四百一十三条　【抵押财产变价后的处理】抵押财产折价或者拍卖、变卖后,其价款超过债权数额的部分归抵押人所有,不足部分由债务人清偿。</p>
<p>　　第四百一十四条　【数个抵押权的清偿顺序】同一财产向两个以上债权人抵押的,拍卖、变卖抵押财产所得的价款依照下列规定清偿:</p>
<p>　　(一)抵押权已经登记的,按照登记的时间先后确定清偿顺序;</p>
<p>　　(二)抵押权已经登记的先于未登记的受偿;</p>
<p>　　(三)抵押权未登记的,按照债权比例清偿。</p>
<p>　　其他可以登记的担保物权,清偿顺序参照适用前款规定。</p>
<p>　　第四百一十五条　【抵押权与质权的清偿顺序】同一财产既设立抵押权又设立质权的,拍卖、变卖该财产所得的价款按照登记、交付的时间先后确定清偿顺序。</p>
<p>　　第四百一十六条　【动产购买价款抵押担保的优先权】动产抵押担保的主债权是抵押物的价款,标的物交付后十日内办理抵押登记的,该抵押权人优先于抵押物买受人的其他担保物权人受偿,但是留置权人除外。</p>
<p>　　第四百一十七条　【抵押权对新增建筑物的效力】建设用地使用权抵押后,该土地上新增的建筑物不属于抵押财产。该建设用地使用权实现抵押权时,应当将该土地上新增的建筑物与建设用地使用权一并处分。但是,新增建筑物所得的价款,抵押权人无权优先受偿。</p>
<p>　　第四百一十八条　【集体所有土地使用权抵押权的实行效果】以集体所有土地的使用权依法抵押的,实现抵押权后,未经法定程序,不得改变土地所有权的性质和土地用途。</p>
<p>　　第四百一十九条　【抵押权存续期间】抵押权人应当在主债权诉讼时效期间行使抵押权;未行使的,人民法院不予保护。</p>
<h4 id="第二节-最高额抵押权"><a href="#第二节-最高额抵押权" class="headerlink" title="第二节　最高额抵押权"></a>第二节　最高额抵押权</h4><p>　　第四百二十条　【最高额抵押权的定义】为担保债务的履行,债务人或者第三人对一定期间内将要连续发生的债权提供担保财产的,债务人不履行到期债务或者发生当事人约定的实现抵押权的情形,抵押权人有权在最高债权额限度内就该担保财产优先受偿。</p>
<p>　　最高额抵押权设立前已经存在的债权,经当事人同意,可以转入最高额抵押担保的债权范围。</p>
<p>　　第四百二十一条　【最高额抵押权担保的债权转让】最高额抵押担保的债权确定前,部分债权转让的,最高额抵押权不得转让,但是当事人另有约定的除外。</p>
<p>　　第四百二十二条　【最高额抵押合同条款变更】最高额抵押担保的债权确定前,抵押权人与抵押人可以通过协议变更债权确定的期间、债权范围以及最高债权额。但是,变更的内容不得对其他抵押权人产生不利影响。</p>
<p>　　第四百二十三条　【最高额抵押权所担保的债权确定】有下列情形之一的,抵押权人的债权确定:</p>
<p>　　(一)约定的债权确定期间届满;</p>
<p>　　(二)没有约定债权确定期间或者约定不明确,抵押权人或者抵押人自最高额抵押权设立之日起满二年后请求确定债权;</p>
<p>　　(三)新的债权不可能发生;</p>
<p>　　(四)抵押权人知道或者应当知道抵押财产被查封、扣押;</p>
<p>　　(五)债务人、抵押人被宣告破产或者解散;</p>
<p>　　(六)法律规定债权确定的其他情形。</p>
<p>　　第四百二十四条　【最高额抵押权的法律适用】最高额抵押权除适用本节规定外,适用本章第一节的有关规定。</p>
<h3 id="第十八章-质-权"><a href="#第十八章-质-权" class="headerlink" title="第十八章　质　　权"></a>第十八章　质　　权</h3><h4 id="第一节-动-产-质-权"><a href="#第一节-动-产-质-权" class="headerlink" title="第一节　动 产 质 权"></a>第一节　动 产 质 权</h4><p>　　第四百二十五条　【动产质权的定义】为担保债务的履行,债务人或者第三人将其动产出质给债权人占有的,债务人不履行到期债务或者发生当事人约定的实现质权的情形,债权人有权就该动产优先受偿。</p>
<p>　　前款规定的债务人或者第三人为出质人,债权人为质权人,交付的动产为质押财产。</p>
<p>　　第四百二十六条　【禁止质押的动产范围】法律、行政法规禁止转让的动产不得出质。</p>
<p>　　第四百二十七条　【质押合同】设立质权,当事人应当采用书面形式订立质押合同。</p>
<p>　　质押合同一般包括下列条款:</p>
<p>　　(一)被担保债权的种类和数额;</p>
<p>　　(二)债务人履行债务的期限;</p>
<p>　　(三)质押财产的名称、数量等情况;</p>
<p>　　(四)担保的范围;</p>
<p>　　(五)质押财产交付的时间、方式。</p>
<p>　　第四百二十八条　【流质】质权人在债务履行期限届满前,与出质人约定债务人不履行到期债务时质押财产归债权人所有的,只能依法就质押财产优先受偿。</p>
<p>　　第四百二十九条　【质权生效时间】质权自出质人交付质押财产时设立。</p>
<p>　　第四百三十条　【质权人孳息收取权及孳息首要清偿用途】质权人有权收取质押财产的孳息,但是合同另有约定的除外。</p>
<p>　　前款规定的孳息应当先充抵收取孳息的费用。</p>
<p>　　第四百三十一条　【质权人擅自使用、处分质押财产的责任】质权人在质权存续期间,未经出质人同意,擅自使用、处分质押财产,造成出质人损害的,应当承担赔偿责任。</p>
<p>　　第四百三十二条　【质权人的保管义务和赔偿责任】质权人负有妥善保管质押财产的义务;因保管不善致使质押财产毁损、灭失的,应当承担赔偿责任。</p>
<p>　　质权人的行为可能使质押财产毁损、灭失的,出质人可以请求质权人将质押财产提存,或者请求提前清偿债务并返还质押财产。</p>
<p>　　第四百三十三条　【质权的保护】因不可归责于质权人的事由可能使质押财产毁损或者价值明显减少,足以危害质权人权利的,质权人有权请求出质人提供相应的担保;出质人不提供的,质权人可以拍卖、变卖质押财产,并与出质人协议将拍卖、变卖所得的价款提前清偿债务或者提存。</p>
<p>　　第四百三十四条　【责任转质】质权人在质权存续期间,未经出质人同意转质,造成质押财产毁损、灭失的,应当承担赔偿责任。</p>
<p>　　第四百三十五条　【质权的放弃】质权人可以放弃质权。债务人以自己的财产出质,质权人放弃该质权的,其他担保人在质权人丧失优先受偿权益的范围内免除担保责任,但是其他担保人承诺仍然提供担保的除外。</p>
<p>　　第四百三十六条　【质物返还及质权实现】债务人履行债务或者出质人提前清偿所担保的债权的,质权人应当返还质押财产。</p>
<p>　　债务人不履行到期债务或者发生当事人约定的实现质权的情形,质权人可以与出质人协议以质押财产折价,也可以就拍卖、变卖质押财产所得的价款优先受偿。</p>
<p>　　质押财产折价或者变卖的,应当参照市场价格。</p>
<p>　　第四百三十七条　【质权的及时行使】出质人可以请求质权人在债务履行期限届满后及时行使质权;质权人不行使的,出质人可以请求人民法院拍卖、变卖质押财产。</p>
<p>　　出质人请求质权人及时行使质权,因质权人怠于行使权利造成出质人损害的,由质权人承担赔偿责任。</p>
<p>　　第四百三十八条　【质押财产变价后的处理】质押财产折价或者拍卖、变卖后,其价款超过债权数额的部分归出质人所有,不足部分由债务人清偿。</p>
<p>　　第四百三十九条　【最高额质权】出质人与质权人可以协议设立最高额质权。</p>
<p>　　最高额质权除适用本节有关规定外,参照适用本编第十七章第二节的有关规定。</p>
<h4 id="第二节-权-利-质-权"><a href="#第二节-权-利-质-权" class="headerlink" title="第二节　权 利 质 权"></a>第二节　权 利 质 权</h4><p>　　第四百四十条　【权利质权的范围】债务人或者第三人有权处分的下列权利可以出质:</p>
<p>　　(一)汇票、本票、支票;</p>
<p>　　(二)债券、存款单;</p>
<p>　　(三)仓单、提单;</p>
<p>　　(四)可以转让的基金份额、股权;</p>
<p>　　(五)可以转让的注册商标专用权、专利权、著作权等知识产权中的财产权;</p>
<p>　　(六)现有的以及将有的应收账款;</p>
<p>　　(七)法律、行政法规规定可以出质的其他财产权利。</p>
<p>　　第四百四十一条　【有价证券出质的质权的设立】以汇票、本票、支票、债券、存款单、仓单、提单出质的,质权自权利凭证交付质权人时设立;没有权利凭证的,质权自办理出质登记时设立。法律另有规定的,依照其规定。</p>
<p>　　第四百四十二条　【有价证券出质的质权的特别实现方式】汇票、本票、支票、债券、存款单、仓单、提单的兑现日期或者提货日期先于主债权到期的,质权人可以兑现或者提货,并与出质人协议将兑现的价款或者提取的货物提前清偿债务或者提存。</p>
<p>　　第四百四十三条　【以基金份额、股权出质的质权设立及转让限制】以基金份额、股权出质的,质权自办理出质登记时设立。</p>
<p>　　基金份额、股权出质后,不得转让,但是出质人与质权人协商同意的除外。出质人转让基金份额、股权所得的价款,应当向质权人提前清偿债务或者提存。</p>
<p>　　第四百四十四条　【以知识产权中的财产权出质的质权的设立及转让限制】以注册商标专用权、专利权、著作权等知识产权中的财产权出质的,质权自办理出质登记时设立。</p>
<p>　　知识产权中的财产权出质后,出质人不得转让或者许可他人使用,但是出质人与质权人协商同意的除外。出质人转让或者许可他人使用出质的知识产权中的财产权所得的价款,应当向质权人提前清偿债务或者提存。</p>
<p>　　第四百四十五条　【以应收账款出质的质权的设立及转让限制】以应收账款出质的,质权自办理出质登记时设立。</p>
<p>　　应收账款出质后,不得转让,但是出质人与质权人协商同意的除外。出质人转让应收账款所得的价款,应当向质权人提前清偿债务或者提存。</p>
<p>　　第四百四十六条　【权利质权的法律适用】权利质权除适用本节规定外,适用本章第一节的有关规定。</p>
<h3 id="第十九章-留-置-权"><a href="#第十九章-留-置-权" class="headerlink" title="第十九章　留　置　权"></a>第十九章　留　置　权</h3><p>　　第四百四十七条　【留置权的定义】债务人不履行到期债务,债权人可以留置已经合法占有的债务人的动产,并有权就该动产优先受偿。</p>
<p>　　前款规定的债权人为留置权人,占有的动产为留置财产。</p>
<p>　　第四百四十八条　【留置财产与债权的关系】债权人留置的动产,应当与债权属于同一法律关系,但是企业之间留置的除外。</p>
<p>　　第四百四十九条　【留置权适用范围限制】法律规定或者当事人约定不得留置的动产,不得留置。</p>
<p>　　第四百五十条　【留置财产为可分物的特殊规定】留置财产为可分物的,留置财产的价值应当相当于债务的金额。</p>
<p>　　第四百五十一条　【留置权人的保管义务】留置权人负有妥善保管留置财产的义务;因保管不善致使留置财产毁损、灭失的,应当承担赔偿责任。</p>
<p>　　第四百五十二条　【留置权人收取孳息的权利】留置权人有权收取留置财产的孳息。</p>
<p>　　前款规定的孳息应当先充抵收取孳息的费用。</p>
<p>　　第四百五十三条　【留置权债务人的债务履行期】留置权人与债务人应当约定留置财产后的债务履行期限;没有约定或者约定不明确的,留置权人应当给债务人六十日以上履行债务的期限,但是鲜活易腐等不易保管的动产除外。债务人逾期未履行的,留置权人可以与债务人协议以留置财产折价,也可以就拍卖、变卖留置财产所得的价款优先受偿。</p>
<p>　　留置财产折价或者变卖的,应当参照市场价格。</p>
<p>　　第四百五十四条　【留置权债务人的请求权】债务人可以请求留置权人在债务履行期限届满后行使留置权;留置权人不行使的,债务人可以请求人民法院拍卖、变卖留置财产。</p>
<p>　　第四百五十五条　【留置权的实现】留置财产折价或者拍卖、变卖后,其价款超过债权数额的部分归债务人所有,不足部分由债务人清偿。</p>
<p>　　第四百五十六条　【留置权、抵押权与质权竞合时的顺位原则】同一动产上已经设立抵押权或者质权,该动产又被留置的,留置权人优先受偿。</p>
<p>　　第四百五十七条　【留置权消灭的特殊情形】留置权人对留置财产丧失占有或者留置权人接受债务人另行提供担保的,留置权消灭。</p>
<h2 id="第五分编-占-有"><a href="#第五分编-占-有" class="headerlink" title="第五分编　占　　有"></a>第五分编　占　　有</h2><h3 id="第二十章-占-有"><a href="#第二十章-占-有" class="headerlink" title="第二十章　占　　有"></a>第二十章　占　　有</h3><p>　　第四百五十八条　【有权占有的法律适用】基于合同关系等产生的占有,有关不动产或者动产的使用、收益、违约责任等,按照合同约定;合同没有约定或者约定不明确的,依照有关法律规定。</p>
<p>　　第四百五十九条　【无权占有造成占有物损害的赔偿责任】占有人因使用占有的不动产或者动产,致使该不动产或者动产受到损害的,恶意占有人应当承担赔偿责任。</p>
<p>　　第四百六十条　【权利人的返还请求权和占有人的费用求偿权】不动产或者动产被占有人占有的,权利人可以请求返还原物及其孳息;但是,应当支付善意占有人因维护该不动产或者动产支出的必要费用。</p>
<p>　　第四百六十一条　【权利人的损害赔偿请求权】占有的不动产或者动产毁损、灭失,该不动产或者动产的权利人请求赔偿的,占有人应当将因毁损、灭失取得的保险金、赔偿金或者补偿金等返还给权利人;权利人的损害未得到足够弥补的,恶意占有人还应当赔偿损失。</p>
<p>　　第四百六十二条　【占有保护请求权】占有的不动产或者动产被侵占的,占有人有权请求返还原物;对妨害占有的行为,占有人有权请求排除妨害或者消除危险;因侵占或者妨害造成损害的,占有人有权依法请求损害赔偿。</p>
<p>　　占有人返还原物的请求权,自侵占发生之日起一年内未行使的,该请求权消灭。</p>
<p>　　 </p>
<h1 id="第三编-合-同"><a href="#第三编-合-同" class="headerlink" title="第三编　合　　同"></a>第三编　合　　同</h1><h2 id="第一分编-通-则-1"><a href="#第一分编-通-则-1" class="headerlink" title="第一分编　通　　则"></a>第一分编　通　　则</h2><h3 id="第一章-一-般-规-定-1"><a href="#第一章-一-般-规-定-1" class="headerlink" title="第一章　一 般 规 定"></a>第一章　一 般 规 定</h3><p>　　第四百六十三条　【合同编的调整范围】本编调整因合同产生的民事关系。</p>
<p>　　第四百六十四条　【合同的定义和身份关系协议的法律适用】合同是民事主体之间设立、变更、终止民事法律关系的协议。</p>
<p>　　婚姻、收养、监护等有关身份关系的协议,适用有关该身份关系的法律规定;没有规定的,可以根据其性质参照适用本编规定。</p>
<p>　　第四百六十五条　【依法成立的合同效力】依法成立的合同,受法律保护。</p>
<p>　　依法成立的合同,仅对当事人具有法律约束力,但是法律另有规定的除外。</p>
<p>　　第四百六十六条　【合同条款的解释】当事人对合同条款的理解有争议的,应当依据本法第一百四十二条第一款的规定,确定争议条款的含义。</p>
<p>　　合同文本采用两种以上文字订立并约定具有同等效力的,对各文本使用的词句推定具有相同含义。各文本使用的词句不一致的,应当根据合同的相关条款、性质、目的以及诚信原则等予以解释。</p>
<p>　　第四百六十七条　【无名合同及涉外合同的法律适用】本法或者其他法律没有明文规定的合同,适用本编通则的规定,并可以参照适用本编或者其他法律最相类似合同的规定。</p>
<p>　　在中华人民共和国境内履行的中外合资经营企业合同、中外合作经营企业合同、中外合作勘探开发自然资源合同,适用中华人民共和国法律。</p>
<p>　　第四百六十八条　【非因合同产生的债权债务关系的法律适用】非因合同产生的债权债务关系,适用有关该债权债务关系的法律规定;没有规定的,适用本编通则的有关规定,但是根据其性质不能适用的除外。</p>
<h3 id="第二章-合同的订立"><a href="#第二章-合同的订立" class="headerlink" title="第二章　合同的订立"></a>第二章　合同的订立</h3><p>　　第四百六十九条　【合同订立形式】当事人订立合同,可以采用书面形式、口头形式或者其他形式。</p>
<p>　　书面形式是合同书、信件、电报、电传、传真等可以有形地表现所载内容的形式。</p>
<p>　　以电子数据交换、电子邮件等方式能够有形地表现所载内容,并可以随时调取查用的数据电文,视为书面形式。</p>
<p>　　第四百七十条　【合同主要条款与示范文本】合同的内容由当事人约定,一般包括下列条款:</p>
<p>　　(一)当事人的姓名或者名称和住所;</p>
<p>　　(二)标的;</p>
<p>　　(三)数量;</p>
<p>　　(四)质量;</p>
<p>　　(五)价款或者报酬;</p>
<p>　　(六)履行期限、地点和方式;</p>
<p>　　(七)违约责任;</p>
<p>　　(八)解决争议的方法。</p>
<p>　　当事人可以参照各类合同的示范文本订立合同。</p>
<p>　　第四百七十一条　【合同订立方式】当事人订立合同,可以采取要约、承诺方式或者其他方式。</p>
<p>　　第四百七十二条　【要约的定义及构成要件】要约是希望与他人订立合同的意思表示,该意思表示应当符合下列条件:</p>
<p>　　(一)内容具体确定;</p>
<p>　　(二)表明经受要约人承诺,要约人即受该意思表示约束。</p>
<p>　　第四百七十三条　【要约邀请】要约邀请是希望他人向自己发出要约的表示。拍卖公告、招标公告、招股说明书、债券募集办法、基金招募说明书、商业广告和宣传、寄送的价目表等为要约邀请。</p>
<p>　　商业广告和宣传的内容符合要约条件的,构成要约。</p>
<p>　　第四百七十四条　【要约生效时间】要约生效的时间适用本法第一百三十七条的规定。</p>
<p>　　第四百七十五条　【要约撤回】要约可以撤回。要约的撤回适用本法第一百四十一条的规定。</p>
<p>　　第四百七十六条　【要约不得撤销情形】要约可以撤销,但是有下列情形之一的除外:</p>
<p>　　(一)要约人以确定承诺期限或者其他形式明示要约不可撤销;</p>
<p>　　(二)受要约人有理由认为要约是不可撤销的,并已经为履行合同做了合理准备工作。</p>
<p>　　第四百七十七条　【要约撤销】撤销要约的意思表示以对话方式作出的,该意思表示的内容应当在受要约人作出承诺之前为受要约人所知道;撤销要约的意思表示以非对话方式作出的,应当在受要约人作出承诺之前到达受要约人。</p>
<p>　　第四百七十八条　【要约失效】有下列情形之一的,要约失效:</p>
<p>　　(一)要约被拒绝;</p>
<p>　　(二)要约被依法撤销;</p>
<p>　　(三)承诺期限届满,受要约人未作出承诺;</p>
<p>　　(四)受要约人对要约的内容作出实质性变更。</p>
<p>　　第四百七十九条　【承诺的定义】承诺是受要约人同意要约的意思表示。</p>
<p>　　第四百八十条　【承诺的方式】承诺应当以通知的方式作出;但是,根据交易习惯或者要约表明可以通过行为作出承诺的除外。</p>
<p>　　第四百八十一条　【承诺的期限】承诺应当在要约确定的期限内到达要约人。</p>
<p>　　要约没有确定承诺期限的,承诺应当依照下列规定到达:</p>
<p>　　(一)要约以对话方式作出的,应当即时作出承诺;</p>
<p>　　(二)要约以非对话方式作出的,承诺应当在合理期限内到达。</p>
<p>　　第四百八十二条　【以信件或者电报等作出的要约的承诺期限计算方法】要约以信件或者电报作出的,承诺期限自信件载明的日期或者电报交发之日开始计算。信件未载明日期的,自投寄该信件的邮戳日期开始计算。要约以电话、传真、电子邮件等快速通讯方式作出的,承诺期限自要约到达受要约人时开始计算。</p>
<p>　　第四百八十三条　【合同成立时间】承诺生效时合同成立,但是法律另有规定或者当事人另有约定的除外。</p>
<p>　　第四百八十四条　【承诺生效时间】以通知方式作出的承诺,生效的时间适用本法第一百三十七条的规定。</p>
<p>　　承诺不需要通知的,根据交易习惯或者要约的要求作出承诺的行为时生效。</p>
<p>　　第四百八十五条　【承诺的撤回】承诺可以撤回。承诺的撤回适用本法第一百四十一条的规定。</p>
<p>　　第四百八十六条　【迟延承诺】受要约人超过承诺期限发出承诺,或者在承诺期限内发出承诺,按照通常情形不能及时到达要约人的,为新要约;但是,要约人及时通知受要约人该承诺有效的除外。</p>
<p>　　第四百八十七条　【未迟发而迟到的承诺】受要约人在承诺期限内发出承诺,按照通常情形能够及时到达要约人,但是因其他原因致使承诺到达要约人时超过承诺期限的,除要约人及时通知受要约人因承诺超过期限不接受该承诺外,该承诺有效。</p>
<p>　　第四百八十八条　【承诺对要约内容的实质性变更】承诺的内容应当与要约的内容一致。受要约人对要约的内容作出实质性变更的,为新要约。有关合同标的、数量、质量、价款或者报酬、履行期限、履行地点和方式、违约责任和解决争议方法等的变更,是对要约内容的实质性变更。</p>
<p>　　第四百八十九条　【承诺对要约内容的非实质性变更】承诺对要约的内容作出非实质性变更的,除要约人及时表示反对或者要约表明承诺不得对要约的内容作出任何变更外,该承诺有效,合同的内容以承诺的内容为准。</p>
<p>　　第四百九十条　【合同成立时间】当事人采用合同书形式订立合同的,自当事人均签名、盖章或者按指印时合同成立。在签名、盖章或者按指印之前,当事人一方已经履行主要义务,对方接受时,该合同成立。</p>
<p>　　法律、行政法规规定或者当事人约定合同应当采用书面形式订立,当事人未采用书面形式但是一方已经履行主要义务,对方接受时,该合同成立。</p>
<p>　　第四百九十一条　【信件、数据电文形式合同和网络合同成立时间】当事人采用信件、数据电文等形式订立合同要求签订确认书的,签订确认书时合同成立。</p>
<p>　　当事人一方通过互联网等信息网络发布的商品或者服务信息符合要约条件的,对方选择该商品或者服务并提交订单成功时合同成立,但是当事人另有约定的除外。</p>
<p>　　第四百九十二条　【合同成立地点】承诺生效的地点为合同成立的地点。</p>
<p>　　采用数据电文形式订立合同的,收件人的主营业地为合同成立的地点;没有主营业地的,其住所地为合同成立的地点。当事人另有约定的,按照其约定。</p>
<p>　　第四百九十三条　【书面合同成立地点】当事人采用合同书形式订立合同的,最后签名、盖章或者按指印的地点为合同成立的地点,但是当事人另有约定的除外。</p>
<p>　　第四百九十四条　【依国家订货任务、指令性任务订立合同及强制要约、强制承诺】国家根据抢险救灾、疫情防控或者其他需要下达国家订货任务、指令性任务的,有关民事主体之间应当依照有关法律、行政法规规定的权利和义务订立合同。</p>
<p>　　依照法律、行政法规的规定负有发出要约义务的当事人,应当及时发出合理的要约。</p>
<p>　　依照法律、行政法规的规定负有作出承诺义务的当事人,不得拒绝对方合理的订立合同要求。</p>
<p>　　第四百九十五条　【预约合同】当事人约定在将来一定期限内订立合同的认购书、订购书、预订书等,构成预约合同。</p>
<p>　　当事人一方不履行预约合同约定的订立合同义务的,对方可以请求其承担预约合同的违约责任。</p>
<p>　　第四百九十六条　【格式条款】格式条款是当事人为了重复使用而预先拟定,并在订立合同时未与对方协商的条款。</p>
<p>　　采用格式条款订立合同的,提供格式条款的一方应当遵循公平原则确定当事人之间的权利和义务,并采取合理的方式提示对方注意免除或者减轻其责任等与对方有重大利害关系的条款,按照对方的要求,对该条款予以说明。提供格式条款的一方未履行提示或者说明义务,致使对方没有注意或者理解与其有重大利害关系的条款的,对方可以主张该条款不成为合同的内容。</p>
<p>　　第四百九十七条　【格式条款无效的情形】有下列情形之一的,该格式条款无效:</p>
<p>　　(一)具有本法第一编第六章第三节和本法第五百零六条规定的无效情形;</p>
<p>　　(二)提供格式条款一方不合理地免除或者减轻其责任、加重对方责任、限制对方主要权利;</p>
<p>　　(三)提供格式条款一方排除对方主要权利。</p>
<p>　　第四百九十八条　【格式条款的解释】对格式条款的理解发生争议的,应当按照通常理解予以解释。对格式条款有两种以上解释的,应当作出不利于提供格式条款一方的解释。格式条款和非格式条款不一致的,应当采用非格式条款。</p>
<p>　　第四百九十九条　【悬赏广告】悬赏人以公开方式声明对完成特定行为的人支付报酬的,完成该行为的人可以请求其支付。</p>
<p>　　第五百条　【缔约过失责任】当事人在订立合同过程中有下列情形之一,造成对方损失的,应当承担赔偿责任:</p>
<p>　　(一)假借订立合同,恶意进行磋商;</p>
<p>　　(二)故意隐瞒与订立合同有关的重要事实或者提供虚假情况;</p>
<p>　　(三)有其他违背诚信原则的行为。</p>
<p>　　第五百零一条　【当事人保密义务】当事人在订立合同过程中知悉的商业秘密或者其他应当保密的信息,无论合同是否成立,不得泄露或者不正当地使用;泄露、不正当地使用该商业秘密或者信息,造成对方损失的,应当承担赔偿责任。</p>
<h3 id="第三章-合同的效力"><a href="#第三章-合同的效力" class="headerlink" title="第三章　合同的效力"></a>第三章　合同的效力</h3><p>　　第五百零二条　【合同生效时间】依法成立的合同,自成立时生效,但是法律另有规定或者当事人另有约定的除外。</p>
<p>　　依照法律、行政法规的规定,合同应当办理批准等手续的,依照其规定。未办理批准等手续影响合同生效的,不影响合同中履行报批等义务条款以及相关条款的效力。应当办理申请批准等手续的当事人未履行义务的,对方可以请求其承担违反该义务的责任。</p>
<p>　　依照法律、行政法规的规定,合同的变更、转让、解除等情形应当办理批准等手续的,适用前款规定。</p>
<p>　　第五百零三条　【被代理人对无权代理合同的追认】无权代理人以被代理人的名义订立合同,被代理人已经开始履行合同义务或者接受相对人履行的,视为对合同的追认。</p>
<p>　　第五百零四条　【越权订立的合同效力】法人的法定代表人或者非法人组织的负责人超越权限订立的合同,除相对人知道或者应当知道其超越权限外,该代表行为有效,订立的合同对法人或者非法人组织发生效力。</p>
<p>　　第五百零五条　【超越经营范围订立的合同效力】当事人超越经营范围订立的合同的效力,应当依照本法第一编第六章第三节和本编的有关规定确定,不得仅以超越经营范围确认合同无效。</p>
<p>　　第五百零六条　【免责条款效力】合同中的下列免责条款无效:</p>
<p>　　(一)造成对方人身损害的;</p>
<p>　　(二)因故意或者重大过失造成对方财产损失的。</p>
<p>　　第五百零七条　【争议解决条款效力】合同不生效、无效、被撤销或者终止的,不影响合同中有关解决争议方法的条款的效力。</p>
<p>　　第五百零八条　【合同效力援引规定】本编对合同的效力没有规定的,适用本法第一编第六章的有关规定。</p>
<h3 id="第四章-合同的履行"><a href="#第四章-合同的履行" class="headerlink" title="第四章　合同的履行"></a>第四章　合同的履行</h3><p>　　第五百零九条　【合同履行的原则】当事人应当按照约定全面履行自己的义务。</p>
<p>　　当事人应当遵循诚信原则,根据合同的性质、目的和交易习惯履行通知、协助、保密等义务。</p>
<p>　　当事人在履行合同过程中,应当避免浪费资源、污染环境和破坏生态。</p>
<p>　　第五百一十条　【合同没有约定或者约定不明的补救措施】合同生效后,当事人就质量、价款或者报酬、履行地点等内容没有约定或者约定不明确的,可以协议补充;不能达成补充协议的,按照合同相关条款或者交易习惯确定。</p>
<p>　　第五百一十一条　【合同约定不明确时的履行】当事人就有关合同内容约定不明确,依据前条规定仍不能确定的,适用下列规定:</p>
<p>　　(一)质量要求不明确的,按照强制性国家标准履行;没有强制性国家标准的,按照推荐性国家标准履行;没有推荐性国家标准的,按照行业标准履行;没有国家标准、行业标准的,按照通常标准或者符合合同目的的特定标准履行。</p>
<p>　　(二)价款或者报酬不明确的,按照订立合同时履行地的市场价格履行;依法应当执行政府定价或者政府指导价的,依照规定履行。</p>
<p>　　(三)履行地点不明确,给付货币的,在接受货币一方所在地履行;交付不动产的,在不动产所在地履行;其他标的,在履行义务一方所在地履行。</p>
<p>　　(四)履行期限不明确的,债务人可以随时履行,债权人也可以随时请求履行,但是应当给对方必要的准备时间。</p>
<p>　　(五)履行方式不明确的,按照有利于实现合同目的的方式履行。</p>
<p>　　(六)履行费用的负担不明确的,由履行义务一方负担;因债权人原因增加的履行费用,由债权人负担。</p>
<p>　　第五百一十二条　【电子合同标的交付时间】通过互联网等信息网络订立的电子合同的标的为交付商品并采用快递物流方式交付的,收货人的签收时间为交付时间。电子合同的标的为提供服务的,生成的电子凭证或者实物凭证中载明的时间为提供服务时间;前述凭证没有载明时间或者载明时间与实际提供服务时间不一致的,以实际提供服务的时间为准。</p>
<p>　　电子合同的标的物为采用在线传输方式交付的,合同标的物进入对方当事人指定的特定系统且能够检索识别的时间为交付时间。</p>
<p>　　电子合同当事人对交付商品或者提供服务的方式、时间另有约定的,按照其约定。</p>
<p>　　第五百一十三条　【政府定价、政府指导价】执行政府定价或者政府指导价的,在合同约定的交付期限内政府价格调整时,按照交付时的价格计价。逾期交付标的物的,遇价格上涨时,按照原价格执行;价格下降时,按照新价格执行。逾期提取标的物或者逾期付款的,遇价格上涨时,按照新价格执行;价格下降时,按照原价格执行。</p>
<p>　　第五百一十四条　【金钱之债中对于履行币种约定不明时的处理】以支付金钱为内容的债,除法律另有规定或者当事人另有约定外,债权人可以请求债务人以实际履行地的法定货币履行。</p>
<p>　　第五百一十五条　【选择之债中选择权归属与移转】标的有多项而债务人只需履行其中一项的,债务人享有选择权;但是,法律另有规定、当事人另有约定或者另有交易习惯的除外。</p>
<p>　　享有选择权的当事人在约定期限内或者履行期限届满未作选择,经催告后在合理期限内仍未选择的,选择权转移至对方。</p>
<p>　　第五百一十六条　【选择权的行使方式】当事人行使选择权应当及时通知对方,通知到达对方时,标的确定。标的确定后不得变更,但是经对方同意的除外。</p>
<p>　　可选择的标的发生不能履行情形的,享有选择权的当事人不得选择不能履行的标的,但是该不能履行的情形是由对方造成的除外。</p>
<p>　　第五百一十七条　【按份之债】债权人为二人以上,标的可分,按照份额各自享有债权的,为按份债权;债务人为二人以上,标的可分,按照份额各自负担债务的,为按份债务。</p>
<p>　　按份债权人或者按份债务人的份额难以确定的,视为份额相同。</p>
<p>　　第五百一十八条　【连带之债】债权人为二人以上,部分或者全部债权人均可以请求债务人履行债务的,为连带债权;债务人为二人以上,债权人可以请求部分或者全部债务人履行全部债务的,为连带债务。</p>
<p>　　连带债权或者连带债务,由法律规定或者当事人约定。</p>
<p>　　第五百一十九条　【连带债务人的份额确定及追偿权】连带债务人之间的份额难以确定的,视为份额相同。</p>
<p>　　实际承担债务超过自己份额的连带债务人,有权就超出部分在其他连带债务人未履行的份额范围内向其追偿,并相应地享有债权人的权利,但是不得损害债权人的利益。其他连带债务人对债权人的抗辩,可以向该债务人主张。</p>
<p>　　被追偿的连带债务人不能履行其应分担份额的,其他连带债务人应当在相应范围内按比例分担。</p>
<p>　　第五百二十条　【连带债务涉他效力】部分连带债务人履行、抵销债务或者提存标的物的,其他债务人对债权人的债务在相应范围内消灭;该债务人可以依据前条规定向其他债务人追偿。</p>
<p>　　部分连带债务人的债务被债权人免除的,在该连带债务人应当承担的份额范围内,其他债务人对债权人的债务消灭。</p>
<p>　　部分连带债务人的债务与债权人的债权同归于一人的,在扣除该债务人应当承担的份额后,债权人对其他债务人的债权继续存在。</p>
<p>　　债权人对部分连带债务人的给付受领迟延的,对其他连带债务人发生效力。</p>
<p>　　第五百二十一条　【连带债权的内部关系及法律适用】连带债权人之间的份额难以确定的,视为份额相同。</p>
<p>　　实际受领债权的连带债权人,应当按比例向其他连带债权人返还。</p>
<p>　　连带债权参照适用本章连带债务的有关规定。</p>
<p>　　第五百二十二条　【向第三人履行的合同】当事人约定由债务人向第三人履行债务,债务人未向第三人履行债务或者履行债务不符合约定的,应当向债权人承担违约责任。</p>
<p>　　法律规定或者当事人约定第三人可以直接请求债务人向其履行债务,第三人未在合理期限内明确拒绝,债务人未向第三人履行债务或者履行债务不符合约定的,第三人可以请求债务人承担违约责任;债务人对债权人的抗辩,可以向第三人主张。</p>
<p>　　第五百二十三条　【由第三人履行的合同】当事人约定由第三人向债权人履行债务,第三人不履行债务或者履行债务不符合约定的,债务人应当向债权人承担违约责任。</p>
<p>　　第五百二十四条　【第三人清偿规则】债务人不履行债务,第三人对履行该债务具有合法利益的,第三人有权向债权人代为履行;但是,根据债务性质、按照当事人约定或者依照法律规定只能由债务人履行的除外。</p>
<p>　　债权人接受第三人履行后,其对债务人的债权转让给第三人,但是债务人和第三人另有约定的除外。</p>
<p>　　第五百二十五条　【同时履行抗辩权】当事人互负债务,没有先后履行顺序的,应当同时履行。一方在对方履行之前有权拒绝其履行请求。一方在对方履行债务不符合约定时,有权拒绝其相应的履行请求。</p>
<p>　　第五百二十六条　【先履行抗辩权】当事人互负债务,有先后履行顺序,应当先履行债务一方未履行的,后履行一方有权拒绝其履行请求。先履行一方履行债务不符合约定的,后履行一方有权拒绝其相应的履行请求。</p>
<p>　　第五百二十七条　【不安抗辩权】应当先履行债务的当事人,有确切证据证明对方有下列情形之一的,可以中止履行:</p>
<p>　　(一)经营状况严重恶化;</p>
<p>　　(二)转移财产、抽逃资金,以逃避债务;</p>
<p>　　(三)丧失商业信誉;</p>
<p>　　(四)有丧失或者可能丧失履行债务能力的其他情形。</p>
<p>　　当事人没有确切证据中止履行的,应当承担违约责任。</p>
<p>　　第五百二十八条　【行使不安抗辩权】当事人依据前条规定中止履行的,应当及时通知对方。对方提供适当担保的,应当恢复履行。中止履行后,对方在合理期限内未恢复履行能力且未提供适当担保的,视为以自己的行为表明不履行主要债务,中止履行的一方可以解除合同并可以请求对方承担违约责任。</p>
<p>　　第五百二十九条　【因债权人原因致债务履行困难时的处理】债权人分立、合并或者变更住所没有通知债务人,致使履行债务发生困难的,债务人可以中止履行或者将标的物提存。</p>
<p>　　第五百三十条　【债务人提前履行债务】债权人可以拒绝债务人提前履行债务,但是提前履行不损害债权人利益的除外。</p>
<p>　　债务人提前履行债务给债权人增加的费用,由债务人负担。</p>
<p>　　第五百三十一条　【债务人部分履行债务】债权人可以拒绝债务人部分履行债务,但是部分履行不损害债权人利益的除外。</p>
<p>　　债务人部分履行债务给债权人增加的费用,由债务人负担。</p>
<p>　　第五百三十二条　【当事人变化对合同履行的影响】合同生效后,当事人不得因姓名、名称的变更或者法定代表人、负责人、承办人的变动而不履行合同义务。</p>
<p>　　第五百三十三条　【情势变更】合同成立后,合同的基础条件发生了当事人在订立合同时无法预见的、不属于商业风险的重大变化,继续履行合同对于当事人一方明显不公平的,受不利影响的当事人可以与对方重新协商;在合理期限内协商不成的,当事人可以请求人民法院或者仲裁机构变更或者解除合同。</p>
<p>　　人民法院或者仲裁机构应当结合案件的实际情况,根据公平原则变更或者解除合同。</p>
<p>　　第五百三十四条　【合同监管】对当事人利用合同实施危害国家利益、社会公共利益行为的,市场监督管理和其他有关行政主管部门依照法律、行政法规的规定负责监督处理。</p>
<h3 id="第五章-合同的保全"><a href="#第五章-合同的保全" class="headerlink" title="第五章　合同的保全"></a>第五章　合同的保全</h3><p>　　第五百三十五条　【债权人代位权】因债务人怠于行使其债权或者与该债权有关的从权利,影响债权人的到期债权实现的,债权人可以向人民法院请求以自己的名义代位行使债务人对相对人的权利,但是该权利专属于债务人自身的除外。</p>
<p>　　代位权的行使范围以债权人的到期债权为限。债权人行使代位权的必要费用,由债务人负担。</p>
<p>　　相对人对债务人的抗辩,可以向债权人主张。</p>
<p>　　第五百三十六条　【债权人代位权的提前行使】债权人的债权到期前,债务人的债权或者与该债权有关的从权利存在诉讼时效期间即将届满或者未及时申报破产债权等情形,影响债权人的债权实现的,债权人可以代位向债务人的相对人请求其向债务人履行、向破产管理人申报或者作出其他必要的行为。</p>
<p>　　第五百三十七条　【债权人代位权行使效果】人民法院认定代位权成立的,由债务人的相对人向债权人履行义务,债权人接受履行后,债权人与债务人、债务人与相对人之间相应的权利义务终止。债务人对相对人的债权或者与该债权有关的从权利被采取保全、执行措施,或者债务人破产的,依照相关法律的规定处理。</p>
<p>　　第五百三十八条　【无偿处分时的债权人撤销权行使】债务人以放弃其债权、放弃债权担保、无偿转让财产等方式无偿处分财产权益,或者恶意延长其到期债权的履行期限,影响债权人的债权实现的,债权人可以请求人民法院撤销债务人的行为。</p>
<p>　　第五百三十九条　【不合理价格交易时的债权人撤销权行使】债务人以明显不合理的低价转让财产、以明显不合理的高价受让他人财产或者为他人的债务提供担保,影响债权人的债权实现,债务人的相对人知道或者应当知道该情形的,债权人可以请求人民法院撤销债务人的行为。</p>
<p>　　第五百四十条　【债权人撤销权行使范围以及必要费用承担】撤销权的行使范围以债权人的债权为限。债权人行使撤销权的必要费用,由债务人负担。</p>
<p>　　第五百四十一条　【债权人撤销权除斥期间】撤销权自债权人知道或者应当知道撤销事由之日起一年内行使。自债务人的行为发生之日起五年内没有行使撤销权的,该撤销权消灭。</p>
<p>　　第五百四十二条　【债权人撤销权行使效果】债务人影响债权人的债权实现的行为被撤销的,自始没有法律约束力。</p>
<h3 id="第六章-合同的变更和转让"><a href="#第六章-合同的变更和转让" class="headerlink" title="第六章　合同的变更和转让"></a>第六章　合同的变更和转让</h3><p>　　第五百四十三条　【协议变更合同】当事人协商一致,可以变更合同。</p>
<p>　　第五百四十四条　【变更不明确推定为未变更】当事人对合同变更的内容约定不明确的,推定为未变更。</p>
<p>　　第五百四十五条　【债权转让】债权人可以将债权的全部或者部分转让给第三人,但是有下列情形之一的除外:</p>
<p>　　(一)根据债权性质不得转让;</p>
<p>　　(二)按照当事人约定不得转让;</p>
<p>　　(三)依照法律规定不得转让。</p>
<p>　　当事人约定非金钱债权不得转让的,不得对抗善意第三人。当事人约定金钱债权不得转让的,不得对抗第三人。</p>
<p>　　第五百四十六条　【债权转让通知】债权人转让债权,未通知债务人的,该转让对债务人不发生效力。</p>
<p>　　债权转让的通知不得撤销,但是经受让人同意的除外。</p>
<p>　　第五百四十七条　【债权转让时从权利一并变动】债权人转让债权的,受让人取得与债权有关的从权利,但是该从权利专属于债权人自身的除外。</p>
<p>　　受让人取得从权利不因该从权利未办理转移登记手续或者未转移占有而受到影响。</p>
<p>　　第五百四十八条　【债权转让时债务人抗辩权】债务人接到债权转让通知后,债务人对让与人的抗辩,可以向受让人主张。</p>
<p>　　第五百四十九条　【债权转让时债务人抵销权】有下列情形之一的,债务人可以向受让人主张抵销:</p>
<p>　　(一)债务人接到债权转让通知时,债务人对让与人享有债权,且债务人的债权先于转让的债权到期或者同时到期;</p>
<p>　　(二)债务人的债权与转让的债权是基于同一合同产生。</p>
<p>　　第五百五十条　【债权转让增加的履行费用的负担】因债权转让增加的履行费用,由让与人负担。</p>
<p>　　第五百五十一条　【债务转移】债务人将债务的全部或者部分转移给第三人的,应当经债权人同意。</p>
<p>　　债务人或者第三人可以催告债权人在合理期限内予以同意,债权人未作表示的,视为不同意。</p>
<p>　　第五百五十二条　【并存的债务承担】第三人与债务人约定加入债务并通知债权人,或者第三人向债权人表示愿意加入债务,债权人未在合理期限内明确拒绝的,债权人可以请求第三人在其愿意承担的债务范围内和债务人承担连带债务。</p>
<p>　　第五百五十三条　【债务转移时新债务人抗辩权】债务人转移债务的,新债务人可以主张原债务人对债权人的抗辩;原债务人对债权人享有债权的,新债务人不得向债权人主张抵销。</p>
<p>　　第五百五十四条　【债务转移时从债务一并转移】债务人转移债务的,新债务人应当承担与主债务有关的从债务,但是该从债务专属于原债务人自身的除外。</p>
<p>　　第五百五十五条　【合同权利义务一并转让】当事人一方经对方同意,可以将自己在合同中的权利和义务一并转让给第三人。</p>
<p>　　第五百五十六条　【合同权利义务一并转让的法律适用】合同的权利和义务一并转让的,适用债权转让、债务转移的有关规定。</p>
<h3 id="第七章-合同的权利义务终止"><a href="#第七章-合同的权利义务终止" class="headerlink" title="第七章　合同的权利义务终止"></a>第七章　合同的权利义务终止</h3><p>　　第五百五十七条　【债权债务终止情形】有下列情形之一的,债权债务终止:</p>
<p>　　(一)债务已经履行;</p>
<p>　　(二)债务相互抵销;</p>
<p>　　(三)债务人依法将标的物提存;</p>
<p>　　(四)债权人免除债务;</p>
<p>　　(五)债权债务同归于一人;</p>
<p>　　(六)法律规定或者当事人约定终止的其他情形。</p>
<p>　　合同解除的,该合同的权利义务关系终止。</p>
<p>　　第五百五十八条　【债权债务终止后的义务】债权债务终止后,当事人应当遵循诚信等原则,根据交易习惯履行通知、协助、保密、旧物回收等义务。</p>
<p>　　第五百五十九条　【债权的从权利消灭】债权债务终止时,债权的从权利同时消灭,但是法律另有规定或者当事人另有约定的除外。</p>
<p>　　第五百六十条　【债的清偿抵充顺序】债务人对同一债权人负担的数项债务种类相同,债务人的给付不足以清偿全部债务的,除当事人另有约定外,由债务人在清偿时指定其履行的债务。</p>
<p>　　债务人未作指定的,应当优先履行已经到期的债务;数项债务均到期的,优先履行对债权人缺乏担保或者担保最少的债务;均无担保或者担保相等的,优先履行债务人负担较重的债务;负担相同的,按照债务到期的先后顺序履行;到期时间相同的,按照债务比例履行。</p>
<p>　　第五百六十一条　【费用、利息和主债务的抵充顺序】债务人在履行主债务外还应当支付利息和实现债权的有关费用,其给付不足以清偿全部债务的,除当事人另有约定外,应当按照下列顺序履行:</p>
<p>　　(一)实现债权的有关费用;</p>
<p>　　(二)利息;</p>
<p>　　(三)主债务。</p>
<p>　　第五百六十二条　【合同约定解除】当事人协商一致,可以解除合同。</p>
<p>　　当事人可以约定一方解除合同的事由。解除合同的事由发生时,解除权人可以解除合同。</p>
<p>　　第五百六十三条　【合同法定解除】有下列情形之一的,当事人可以解除合同:</p>
<p>　　(一)因不可抗力致使不能实现合同目的;</p>
<p>　　(二)在履行期限届满前,当事人一方明确表示或者以自己的行为表明不履行主要债务;</p>
<p>　　(三)当事人一方迟延履行主要债务,经催告后在合理期限内仍未履行;</p>
<p>　　(四)当事人一方迟延履行债务或者有其他违约行为致使不能实现合同目的;</p>
<p>　　(五)法律规定的其他情形。</p>
<p>　　以持续履行的债务为内容的不定期合同,当事人可以随时解除合同,但是应当在合理期限之前通知对方。</p>
<p>　　第五百六十四条　【解除权行使期限】法律规定或者当事人约定解除权行使期限,期限届满当事人不行使的,该权利消灭。</p>
<p>　　法律没有规定或者当事人没有约定解除权行使期限,自解除权人知道或者应当知道解除事由之日起一年内不行使,或者经对方催告后在合理期限内不行使的,该权利消灭。</p>
<p>　　第五百六十五条　【合同解除程序】当事人一方依法主张解除合同的,应当通知对方。合同自通知到达对方时解除;通知载明债务人在一定期限内不履行债务则合同自动解除,债务人在该期限内未履行债务的,合同自通知载明的期限届满时解除。对方对解除合同有异议的,任何一方当事人均可以请求人民法院或者仲裁机构确认解除行为的效力。</p>
<p>　　当事人一方未通知对方,直接以提起诉讼或者申请仲裁的方式依法主张解除合同,人民法院或者仲裁机构确认该主张的,合同自起诉状副本或者仲裁申请书副本送达对方时解除。</p>
<p>　　第五百六十六条　【合同解除的效力】合同解除后,尚未履行的,终止履行;已经履行的,根据履行情况和合同性质,当事人可以请求恢复原状或者采取其他补救措施,并有权请求赔偿损失。</p>
<p>　　合同因违约解除的,解除权人可以请求违约方承担违约责任,但是当事人另有约定的除外。</p>
<p>　　主合同解除后,担保人对债务人应当承担的民事责任仍应当承担担保责任,但是担保合同另有约定的除外。</p>
<p>　　第五百六十七条　【合同终止后有关结算和清理条款效力】合同的权利义务关系终止,不影响合同中结算和清理条款的效力。</p>
<p>　　第五百六十八条　【债务法定抵销】当事人互负债务,该债务的标的物种类、品质相同的,任何一方可以将自己的债务与对方的到期债务抵销;但是,根据债务性质、按照当事人约定或者依照法律规定不得抵销的除外。</p>
<p>　　当事人主张抵销的,应当通知对方。通知自到达对方时生效。抵销不得附条件或者附期限。</p>
<p>　　第五百六十九条　【债务约定抵销】当事人互负债务,标的物种类、品质不相同的,经协商一致,也可以抵销。</p>
<p>　　第五百七十条　【标的物提存的条件】有下列情形之一,难以履行债务的,债务人可以将标的物提存:</p>
<p>　　(一)债权人无正当理由拒绝受领;</p>
<p>　　(二)债权人下落不明;</p>
<p>　　(三)债权人死亡未确定继承人、遗产管理人,或者丧失民事行为能力未确定监护人;</p>
<p>　　(四)法律规定的其他情形。</p>
<p>　　标的物不适于提存或者提存费用过高的,债务人依法可以拍卖或者变卖标的物,提存所得的价款。</p>
<p>　　第五百七十一条　【提存成立及提存对债务人效力】债务人将标的物或者将标的物依法拍卖、变卖所得价款交付提存部门时,提存成立。</p>
<p>　　提存成立的,视为债务人在其提存范围内已经交付标的物。</p>
<p>　　第五百七十二条　【提存通知】标的物提存后,债务人应当及时通知债权人或者债权人的继承人、遗产管理人、监护人、财产代管人。</p>
<p>　　第五百七十三条　【提存对债权人效力】标的物提存后,毁损、灭失的风险由债权人承担。提存期间,标的物的孳息归债权人所有。提存费用由债权人负担。</p>
<p>　　第五百七十四条　【提存物的受领及受领权消灭】债权人可以随时领取提存物。但是,债权人对债务人负有到期债务的,在债权人未履行债务或者提供担保之前,提存部门根据债务人的要求应当拒绝其领取提存物。</p>
<p>　　债权人领取提存物的权利,自提存之日起五年内不行使而消灭,提存物扣除提存费用后归国家所有。但是,债权人未履行对债务人的到期债务,或者债权人向提存部门书面表示放弃领取提存物权利的,债务人负担提存费用后有权取回提存物。</p>
<p>　　第五百七十五条　【债务免除】债权人免除债务人部分或者全部债务的,债权债务部分或者全部终止,但是债务人在合理期限内拒绝的除外。</p>
<p>　　第五百七十六条　【债权债务混同】债权和债务同归于一人的,债权债务终止,但是损害第三人利益的除外。</p>
<h3 id="第八章-违-约-责-任"><a href="#第八章-违-约-责-任" class="headerlink" title="第八章　违 约 责 任"></a>第八章　违 约 责 任</h3><p>　　第五百七十七条　【违约责任】当事人一方不履行合同义务或者履行合同义务不符合约定的,应当承担继续履行、采取补救措施或者赔偿损失等违约责任。</p>
<p>　　第五百七十八条　【预期违约责任】当事人一方明确表示或者以自己的行为表明不履行合同义务的,对方可以在履行期限届满前请求其承担违约责任。</p>
<p>　　第五百七十九条　【金钱债务实际履行责任】当事人一方未支付价款、报酬、租金、利息,或者不履行其他金钱债务的,对方可以请求其支付。</p>
<p>　　第五百八十条　【非金钱债务实际履行责任及违约责任】当事人一方不履行非金钱债务或者履行非金钱债务不符合约定的,对方可以请求履行,但是有下列情形之一的除外:</p>
<p>　　(一)法律上或者事实上不能履行;</p>
<p>　　(二)债务的标的不适于强制履行或者履行费用过高;</p>
<p>　　(三)债权人在合理期限内未请求履行。</p>
<p>　　有前款规定的除外情形之一,致使不能实现合同目的的,人民法院或者仲裁机构可以根据当事人的请求终止合同权利义务关系,但是不影响违约责任的承担。</p>
<p>　　第五百八十一条　【替代履行】当事人一方不履行债务或者履行债务不符合约定,根据债务的性质不得强制履行的,对方可以请求其负担由第三人替代履行的费用。</p>
<p>　　第五百八十二条　【瑕疵履行违约责任】履行不符合约定的,应当按照当事人的约定承担违约责任。对违约责任没有约定或者约定不明确,依据本法第五百一十条的规定仍不能确定的,受损害方根据标的的性质以及损失的大小,可以合理选择请求对方承担修理、重作、更换、退货、减少价款或者报酬等违约责任。</p>
<p>　　第五百八十三条　【违约损害赔偿责任】当事人一方不履行合同义务或者履行合同义务不符合约定的,在履行义务或者采取补救措施后,对方还有其他损失的,应当赔偿损失。</p>
<p>　　第五百八十四条　【损害赔偿范围】当事人一方不履行合同义务或者履行合同义务不符合约定,造成对方损失的,损失赔偿额应当相当于因违约所造成的损失,包括合同履行后可以获得的利益;但是,不得超过违约一方订立合同时预见到或者应当预见到的因违约可能造成的损失。</p>
<p>　　第五百八十五条　【违约金】当事人可以约定一方违约时应当根据违约情况向对方支付一定数额的违约金,也可以约定因违约产生的损失赔偿额的计算方法。</p>
<p>　　约定的违约金低于造成的损失的,人民法院或者仲裁机构可以根据当事人的请求予以增加;约定的违约金过分高于造成的损失的,人民法院或者仲裁机构可以根据当事人的请求予以适当减少。</p>
<p>　　当事人就迟延履行约定违约金的,违约方支付违约金后,还应当履行债务。</p>
<p>　　第五百八十六条　【定金担保】当事人可以约定一方向对方给付定金作为债权的担保。定金合同自实际交付定金时成立。</p>
<p>　　定金的数额由当事人约定;但是,不得超过主合同标的额的百分之二十,超过部分不产生定金的效力。实际交付的定金数额多于或者少于约定数额的,视为变更约定的定金数额。</p>
<p>　　第五百八十七条　【定金罚则】债务人履行债务的,定金应当抵作价款或者收回。给付定金的一方不履行债务或者履行债务不符合约定,致使不能实现合同目的的,无权请求返还定金;收受定金的一方不履行债务或者履行债务不符合约定,致使不能实现合同目的的,应当双倍返还定金。</p>
<p>　　第五百八十八条　【违约金与定金竞合时的责任】当事人既约定违约金,又约定定金的,一方违约时,对方可以选择适用违约金或者定金条款。</p>
<p>　　定金不足以弥补一方违约造成的损失的,对方可以请求赔偿超过定金数额的损失。</p>
<p>　　第五百八十九条　【拒绝受领和受领迟延】债务人按照约定履行债务,债权人无正当理由拒绝受领的,债务人可以请求债权人赔偿增加的费用。</p>
<p>　　在债权人受领迟延期间,债务人无须支付利息。</p>
<p>　　第五百九十条　【不可抗力】当事人一方因不可抗力不能履行合同的,根据不可抗力的影响,部分或者全部免除责任,但是法律另有规定的除外。因不可抗力不能履行合同的,应当及时通知对方,以减轻可能给对方造成的损失,并应当在合理期限内提供证明。</p>
<p>　　当事人迟延履行后发生不可抗力的,不免除其违约责任。</p>
<p>　　第五百九十一条　【减损规则】当事人一方违约后,对方应当采取适当措施防止损失的扩大;没有采取适当措施致使损失扩大的,不得就扩大的损失请求赔偿。</p>
<p>　　当事人因防止损失扩大而支出的合理费用,由违约方负担。</p>
<p>　　第五百九十二条　【双方违约和与有过失】当事人都违反合同的,应当各自承担相应的责任。</p>
<p>　　当事人一方违约造成对方损失,对方对损失的发生有过错的,可以减少相应的损失赔偿额。</p>
<p>　　第五百九十三条　【第三人原因造成违约时违约责任承担】当事人一方因第三人的原因造成违约的,应当依法向对方承担违约责任。当事人一方和第三人之间的纠纷,依照法律规定或者按照约定处理。</p>
<p>　　第五百九十四条　【国际贸易合同诉讼时效和仲裁时效】因国际货物买卖合同和技术进出口合同争议提起诉讼或者申请仲裁的时效期间为四年。</p>
<p>　　 </p>
<h2 id="第二分编-典-型-合-同"><a href="#第二分编-典-型-合-同" class="headerlink" title="第二分编　典 型 合 同"></a>第二分编　典 型 合 同</h2><h3 id="第九章-买-卖-合-同"><a href="#第九章-买-卖-合-同" class="headerlink" title="第九章　买 卖 合 同"></a>第九章　买 卖 合 同</h3><p>　　第五百九十五条　【买卖合同定义】买卖合同是出卖人转移标的物的所有权于买受人,买受人支付价款的合同。</p>
<p>　　第五百九十六条　【买卖合同条款】买卖合同的内容一般包括标的物的名称、数量、质量、价款、履行期限、履行地点和方式、包装方式、检验标准和方法、结算方式、合同使用的文字及其效力等条款。</p>
<p>　　第五百九十七条　【无权处分效力】因出卖人未取得处分权致使标的物所有权不能转移的,买受人可以解除合同并请求出卖人承担违约责任。</p>
<p>　　法律、行政法规禁止或者限制转让的标的物,依照其规定。</p>
<p>　　第五百九十八条　【出卖人基本义务】出卖人应当履行向买受人交付标的物或者交付提取标的物的单证,并转移标的物所有权的义务。</p>
<p>　　第五百九十九条　【出卖人交付有关单证和资料义务】出卖人应当按照约定或者交易习惯向买受人交付提取标的物单证以外的有关单证和资料。</p>
<p>　　第六百条　【知识产权归属】出卖具有知识产权的标的物的,除法律另有规定或者当事人另有约定外,该标的物的知识产权不属于买受人。</p>
<p>　　第六百零一条　【标的物交付期限】出卖人应当按照约定的时间交付标的物。约定交付期限的,出卖人可以在该交付期限内的任何时间交付。</p>
<p>　　第六百零二条　【标的物交付期限不明时的处理】当事人没有约定标的物的交付期限或者约定不明确的,适用本法第五百一十条、第五百一十一条第四项的规定。</p>
<p>　　第六百零三条　【标的物交付地点】出卖人应当按照约定的地点交付标的物。</p>
<p>　　当事人没有约定交付地点或者约定不明确,依据本法第五百一十条的规定仍不能确定的,适用下列规定:</p>
<p>　　(一)标的物需要运输的,出卖人应当将标的物交付给第一承运人以运交给买受人;</p>
<p>　　(二)标的物不需要运输,出卖人和买受人订立合同时知道标的物在某一地点的,出卖人应当在该地点交付标的物;不知道标的物在某一地点的,应当在出卖人订立合同时的营业地交付标的物。</p>
<p>　　第六百零四条　【标的物毁损、灭失风险负担的基本规则】标的物毁损、灭失的风险,在标的物交付之前由出卖人承担,交付之后由买受人承担,但是法律另有规定或者当事人另有约定的除外。</p>
<p>　　第六百零五条　【迟延交付标的物的风险负担】因买受人的原因致使标的物未按照约定的期限交付的,买受人应当自违反约定时起承担标的物毁损、灭失的风险。</p>
<p>　　第六百零六条　【路货买卖中的标的物风险负担】出卖人出卖交由承运人运输的在途标的物,除当事人另有约定外,毁损、灭失的风险自合同成立时起由买受人承担。</p>
<p>　　第六百零七条　【需要运输的标的物风险负担】出卖人按照约定将标的物运送至买受人指定地点并交付给承运人后,标的物毁损、灭失的风险由买受人承担。</p>
<p>　　当事人没有约定交付地点或者约定不明确,依据本法第六百零三条第二款第一项的规定标的物需要运输的,出卖人将标的物交付给第一承运人后,标的物毁损、灭失的风险由买受人承担。</p>
<p>　　第六百零八条　【买受人不收取标的物的风险负担】出卖人按照约定或者依据本法第六百零三条第二款第二项的规定将标的物置于交付地点,买受人违反约定没有收取的,标的物毁损、灭失的风险自违反约定时起由买受人承担。</p>
<p>　　第六百零九条　【未交付单证、资料不影响风险转移】出卖人按照约定未交付有关标的物的单证和资料的,不影响标的物毁损、灭失风险的转移。</p>
<p>　　第六百一十条　【出卖人根本违约的风险负担】因标的物不符合质量要求,致使不能实现合同目的的,买受人可以拒绝接受标的物或者解除合同。买受人拒绝接受标的物或者解除合同的,标的物毁损、灭失的风险由出卖人承担。</p>
<p>　　第六百一十一条　【买受人承担风险与出卖人违约责任关系】标的物毁损、灭失的风险由买受人承担的,不影响因出卖人履行义务不符合约定,买受人请求其承担违约责任的权利。</p>
<p>　　第六百一十二条　【出卖人权利瑕疵担保义务】出卖人就交付的标的物,负有保证第三人对该标的物不享有任何权利的义务,但是法律另有规定的除外。</p>
<p>　　第六百一十三条　【出卖人权利瑕疵担保义务免除】买受人订立合同时知道或者应当知道第三人对买卖的标的物享有权利的,出卖人不承担前条规定的义务。</p>
<p>　　第六百一十四条　【买受人的中止支付价款权】买受人有确切证据证明第三人对标的物享有权利的,可以中止支付相应的价款,但是出卖人提供适当担保的除外。</p>
<p>　　第六百一十五条　【标的物的质量要求】出卖人应当按照约定的质量要求交付标的物。出卖人提供有关标的物质量说明的,交付的标的物应当符合该说明的质量要求。</p>
<p>　　第六百一十六条　【标的物质量要求不明时的处理】当事人对标的物的质量要求没有约定或者约定不明确,依据本法第五百一十条的规定仍不能确定的,适用本法第五百一十一条第一项的规定。</p>
<p>　　第六百一十七条　【质量瑕疵担保责任】出卖人交付的标的物不符合质量要求的,买受人可以依据本法第五百八十二条至第五百八十四条的规定请求承担违约责任。</p>
<p>　　第六百一十八条　【减轻或者免除瑕疵担保责任的例外】当事人约定减轻或者免除出卖人对标的物瑕疵承担的责任,因出卖人故意或者重大过失不告知买受人标的物瑕疵的,出卖人无权主张减轻或者免除责任。</p>
<p>　　第六百一十九条　【标的物包装方式】出卖人应当按照约定的包装方式交付标的物。对包装方式没有约定或者约定不明确,依据本法第五百一十条的规定仍不能确定的,应当按照通用的方式包装;没有通用方式的,应当采取足以保护标的物且有利于节约资源、保护生态环境的包装方式。</p>
<p>　　第六百二十条　【买受人的检验义务】买受人收到标的物时应当在约定的检验期限内检验。没有约定检验期限的,应当及时检验。</p>
<p>　　第六百二十一条　【买受人的通知义务】当事人约定检验期限的,买受人应当在检验期限内将标的物的数量或者质量不符合约定的情形通知出卖人。买受人怠于通知的,视为标的物的数量或者质量符合约定。</p>
<p>　　当事人没有约定检验期限的,买受人应当在发现或者应当发现标的物的数量或者质量不符合约定的合理期限内通知出卖人。买受人在合理期限内未通知或者自收到标的物之日起二年内未通知出卖人的,视为标的物的数量或者质量符合约定;但是,对标的物有质量保证期的,适用质量保证期,不适用该二年的规定。</p>
<p>　　出卖人知道或者应当知道提供的标的物不符合约定的,买受人不受前两款规定的通知时间的限制。</p>
<p>　　第六百二十二条　【检验期限过短时的处理】当事人约定的检验期限过短,根据标的物的性质和交易习惯,买受人在检验期限内难以完成全面检验的,该期限仅视为买受人对标的物的外观瑕疵提出异议的期限。</p>
<p>　　约定的检验期限或者质量保证期短于法律、行政法规规定期限的,应当以法律、行政法规规定的期限为准。</p>
<p>　　第六百二十三条　【检验期限未约定时的处理】当事人对检验期限未作约定,买受人签收的送货单、确认单等载明标的物数量、型号、规格的,推定买受人已经对数量和外观瑕疵进行检验,但是有相关证据足以推翻的除外。</p>
<p>　　第六百二十四条　【向第三人履行情形下的检验标准】出卖人依照买受人的指示向第三人交付标的物,出卖人和买受人约定的检验标准与买受人和第三人约定的检验标准不一致的,以出卖人和买受人约定的检验标准为准。</p>
<p>　　第六百二十五条　【出卖人回收义务】依照法律、行政法规的规定或者按照当事人的约定,标的物在有效使用年限届满后应予回收的,出卖人负有自行或者委托第三人对标的物予以回收的义务。</p>
<p>　　第六百二十六条　【买受人支付价款的数额和方式】买受人应当按照约定的数额和支付方式支付价款。对价款的数额和支付方式没有约定或者约定不明确的,适用本法第五百一十条、第五百一十一条第二项和第五项的规定。</p>
<p>　　第六百二十七条　【买受人支付价款的地点】买受人应当按照约定的地点支付价款。对支付地点没有约定或者约定不明确,依据本法第五百一十条的规定仍不能确定的,买受人应当在出卖人的营业地支付;但是,约定支付价款以交付标的物或者交付提取标的物单证为条件的,在交付标的物或者交付提取标的物单证的所在地支付。</p>
<p>　　第六百二十八条　【买受人支付价款的时间】买受人应当按照约定的时间支付价款。对支付时间没有约定或者约定不明确,依据本法第五百一十条的规定仍不能确定的,买受人应当在收到标的物或者提取标的物单证的同时支付。</p>
<p>　　第六百二十九条　【出卖人多交标的物的处理】出卖人多交标的物的,买受人可以接收或者拒绝接收多交的部分。买受人接收多交部分的,按照约定的价格支付价款;买受人拒绝接收多交部分的,应当及时通知出卖人。</p>
<p>　　第六百三十条　【标的物孳息的归属】标的物在交付之前产生的孳息,归出卖人所有;交付之后产生的孳息,归买受人所有。但是,当事人另有约定的除外。</p>
<p>　　第六百三十一条　【从物与合同解除】因标的物的主物不符合约定而解除合同的,解除合同的效力及于从物。因标的物的从物不符合约定被解除的,解除的效力不及于主物。</p>
<p>　　第六百三十二条　【数物同时出卖时的合同解除】标的物为数物,其中一物不符合约定的,买受人可以就该物解除。但是,该物与他物分离使标的物的价值显受损害的,买受人可以就数物解除合同。</p>
<p>　　第六百三十三条　【分批交付标的物的合同解除】出卖人分批交付标的物的,出卖人对其中一批标的物不交付或者交付不符合约定,致使该批标的物不能实现合同目的的,买受人可以就该批标的物解除。</p>
<p>　　出卖人不交付其中一批标的物或者交付不符合约定,致使之后其他各批标的物的交付不能实现合同目的的,买受人可以就该批以及之后其他各批标的物解除。</p>
<p>　　买受人如果就其中一批标的物解除,该批标的物与其他各批标的物相互依存的,可以就已经交付和未交付的各批标的物解除。</p>
<p>　　第六百三十四条　【分期付款买卖合同】分期付款的买受人未支付到期价款的数额达到全部价款的五分之一,经催告后在合理期限内仍未支付到期价款的,出卖人可以请求买受人支付全部价款或者解除合同。</p>
<p>　　出卖人解除合同的,可以向买受人请求支付该标的物的使用费。</p>
<p>　　第六百三十五条　【凭样品买卖合同】凭样品买卖的当事人应当封存样品,并可以对样品质量予以说明。出卖人交付的标的物应当与样品及其说明的质量相同。</p>
<p>　　第六百三十六条　【凭样品买卖合同的隐蔽瑕疵处理】凭样品买卖的买受人不知道样品有隐蔽瑕疵的,即使交付的标的物与样品相同,出卖人交付的标的物的质量仍然应当符合同种物的通常标准。</p>
<p>　　第六百三十七条　【试用买卖的试用期限】试用买卖的当事人可以约定标的物的试用期限。对试用期限没有约定或者约定不明确,依据本法第五百一十条的规定仍不能确定的,由出卖人确定。</p>
<p>　　第六百三十八条　【试用买卖的效力】试用买卖的买受人在试用期内可以购买标的物,也可以拒绝购买。试用期限届满,买受人对是否购买标的物未作表示的,视为购买。</p>
<p>　　试用买卖的买受人在试用期内已经支付部分价款或者对标的物实施出卖、出租、设立担保物权等行为的,视为同意购买。</p>
<p>　　第六百三十九条　【试用买卖使用费的负担】试用买卖的当事人对标的物使用费没有约定或者约定不明确的,出卖人无权请求买受人支付。</p>
<p>　　第六百四十条　【试用期间标的物灭失风险的承担】标的物在试用期内毁损、灭失的风险由出卖人承担。</p>
<p>　　第六百四十一条　【所有权保留】当事人可以在买卖合同中约定买受人未履行支付价款或者其他义务的,标的物的所有权属于出卖人。</p>
<p>　　出卖人对标的物保留的所有权,未经登记,不得对抗善意第三人。</p>
<p>　　第六百四十二条　【出卖人的取回权】当事人约定出卖人保留合同标的物的所有权,在标的物所有权转移前,买受人有下列情形之一,造成出卖人损害的,除当事人另有约定外,出卖人有权取回标的物:</p>
<p>　　(一)未按照约定支付价款,经催告后在合理期限内仍未支付;</p>
<p>　　(二)未按照约定完成特定条件;</p>
<p>　　(三)将标的物出卖、出质或者作出其他不当处分。</p>
<p>　　出卖人可以与买受人协商取回标的物;协商不成的,可以参照适用担保物权的实现程序。</p>
<p>　　第六百四十三条　【买受人的回赎权】出卖人依据前条第一款的规定取回标的物后,买受人在双方约定或者出卖人指定的合理回赎期限内,消除出卖人取回标的物的事由的,可以请求回赎标的物。</p>
<p>　　买受人在回赎期限内没有回赎标的物,出卖人可以以合理价格将标的物出卖给第三人,出卖所得价款扣除买受人未支付的价款以及必要费用后仍有剩余的,应当返还买受人;不足部分由买受人清偿。</p>
<p>　　第六百四十四条　【招标投标买卖】招标投标买卖的当事人的权利和义务以及招标投标程序等,依照有关法律、行政法规的规定。</p>
<p>　　第六百四十五条　【拍卖】拍卖的当事人的权利和义务以及拍卖程序等,依照有关法律、行政法规的规定。</p>
<p>　　第六百四十六条　【买卖合同准用于有偿合同】法律对其他有偿合同有规定的,依照其规定;没有规定的,参照适用买卖合同的有关规定。</p>
<p>　　第六百四十七条　【互易合同】当事人约定易货交易,转移标的物的所有权的,参照适用买卖合同的有关规定。</p>
<h3 id="第十章-供用电、水、气、热力合同"><a href="#第十章-供用电、水、气、热力合同" class="headerlink" title="第十章　供用电、水、气、热力合同"></a>第十章　供用电、水、气、热力合同</h3><p>　　第六百四十八条　【供用电合同定义及强制缔约义务】供用电合同是供电人向用电人供电,用电人支付电费的合同。</p>
<p>　　向社会公众供电的供电人,不得拒绝用电人合理的订立合同要求。</p>
<p>　　第六百四十九条　【供用电合同内容】供用电合同的内容一般包括供电的方式、质量、时间,用电容量、地址、性质,计量方式,电价、电费的结算方式,供用电设施的维护责任等条款。</p>
<p>　　第六百五十条　【供用电合同履行地】供用电合同的履行地点,按照当事人约定;当事人没有约定或者约定不明确的,供电设施的产权分界处为履行地点。</p>
<p>　　第六百五十一条　【供电人的安全供电义务】供电人应当按照国家规定的供电质量标准和约定安全供电。供电人未按照国家规定的供电质量标准和约定安全供电,造成用电人损失的,应当承担赔偿责任。</p>
<p>　　第六百五十二条　【供电人中断供电时的通知义务】供电人因供电设施计划检修、临时检修、依法限电或者用电人违法用电等原因,需要中断供电时,应当按照国家有关规定事先通知用电人;未事先通知用电人中断供电,造成用电人损失的,应当承担赔偿责任。</p>
<p>　　第六百五十三条　【供电人的抢修义务】因自然灾害等原因断电,供电人应当按照国家有关规定及时抢修;未及时抢修,造成用电人损失的,应当承担赔偿责任。</p>
<p>　　第六百五十四条　【用电人的交付电费义务】用电人应当按照国家有关规定和当事人的约定及时支付电费。用电人逾期不支付电费的,应当按照约定支付违约金。经催告用电人在合理期限内仍不支付电费和违约金的,供电人可以按照国家规定的程序中止供电。</p>
<p>　　供电人依据前款规定中止供电的,应当事先通知用电人。</p>
<p>　　第六百五十五条　【用电人的安全用电义务】用电人应当按照国家有关规定和当事人的约定安全、节约和计划用电。用电人未按照国家有关规定和当事人的约定用电,造成供电人损失的,应当承担赔偿责任。</p>
<p>　　第六百五十六条　【供用水、供用气、供用热力合同的参照适用】供用水、供用气、供用热力合同,参照适用供用电合同的有关规定。</p>
<h3 id="第十一章-赠-与-合-同"><a href="#第十一章-赠-与-合-同" class="headerlink" title="第十一章　赠 与 合 同"></a>第十一章　赠 与 合 同</h3><p>　　第六百五十七条　【赠与合同定义】赠与合同是赠与人将自己的财产无偿给予受赠人,受赠人表示接受赠与的合同。</p>
<p>　　第六百五十八条　【赠与人任意撤销权及其限制】赠与人在赠与财产的权利转移之前可以撤销赠与。</p>
<p>　　经过公证的赠与合同或者依法不得撤销的具有救灾、扶贫、助残等公益、道德义务性质的赠与合同,不适用前款规定。</p>
<p>　　第六百五十九条　【赠与财产办理有关法律手续】赠与的财产依法需要办理登记或者其他手续的,应当办理有关手续。</p>
<p>　　第六百六十条　【受赠人的交付请求权以及赠与人的赔偿责任】经过公证的赠与合同或者依法不得撤销的具有救灾、扶贫、助残等公益、道德义务性质的赠与合同,赠与人不交付赠与财产的,受赠人可以请求交付。</p>
<p>　　依据前款规定应当交付的赠与财产因赠与人故意或者重大过失致使毁损、灭失的,赠与人应当承担赔偿责任。</p>
<p>　　第六百六十一条　【附义务赠与合同】赠与可以附义务。</p>
<p>　　赠与附义务的,受赠人应当按照约定履行义务。</p>
<p>　　第六百六十二条　【赠与人瑕疵担保责任】赠与的财产有瑕疵的,赠与人不承担责任。附义务的赠与,赠与的财产有瑕疵的,赠与人在附义务的限度内承担与出卖人相同的责任。</p>
<p>　　赠与人故意不告知瑕疵或者保证无瑕疵,造成受赠人损失的,应当承担赔偿责任。</p>
<p>　　第六百六十三条　【赠与人的法定撤销权及其行使期间】受赠人有下列情形之一的,赠与人可以撤销赠与:</p>
<p>　　(一)严重侵害赠与人或者赠与人近亲属的合法权益;</p>
<p>　　(二)对赠与人有扶养义务而不履行;</p>
<p>　　(三)不履行赠与合同约定的义务。</p>
<p>　　赠与人的撤销权,自知道或者应当知道撤销事由之日起一年内行使。</p>
<p>　　第六百六十四条　【赠与人继承人或者法定代理人的撤销权】因受赠人的违法行为致使赠与人死亡或者丧失民事行为能力的,赠与人的继承人或者法定代理人可以撤销赠与。</p>
<p>　　赠与人的继承人或者法定代理人的撤销权,自知道或者应当知道撤销事由之日起六个月内行使。</p>
<p>　　第六百六十五条　【撤销赠与的法律后果】撤销权人撤销赠与的,可以向受赠人请求返还赠与的财产。</p>
<p>　　第六百六十六条　【赠与人穷困抗辩】赠与人的经济状况显著恶化,严重影响其生产经营或者家庭生活的,可以不再履行赠与义务。</p>
<h3 id="第十二章-借-款-合-同"><a href="#第十二章-借-款-合-同" class="headerlink" title="第十二章　借 款 合 同"></a>第十二章　借 款 合 同</h3><p>　　第六百六十七条　【借款合同定义】借款合同是借款人向贷款人借款,到期返还借款并支付利息的合同。</p>
<p>　　第六百六十八条　【借款合同形式和内容】借款合同应当采用书面形式,但是自然人之间借款另有约定的除外。</p>
<p>　　借款合同的内容一般包括借款种类、币种、用途、数额、利率、期限和还款方式等条款。</p>
<p>　　第六百六十九条　【借款人应当提供真实情况义务】订立借款合同,借款人应当按照贷款人的要求提供与借款有关的业务活动和财务状况的真实情况。</p>
<p>　　第六百七十条　【借款利息不得预先扣除】借款的利息不得预先在本金中扣除。利息预先在本金中扣除的,应当按照实际借款数额返还借款并计算利息。</p>
<p>　　第六百七十一条　【贷款人未按照约定提供借款以及借款人未按照约定收取借款的后果】贷款人未按照约定的日期、数额提供借款,造成借款人损失的,应当赔偿损失。</p>
<p>　　借款人未按照约定的日期、数额收取借款的,应当按照约定的日期、数额支付利息。</p>
<p>　　第六百七十二条　【贷款人的监督、检查权】贷款人按照约定可以检查、监督借款的使用情况。借款人应当按照约定向贷款人定期提供有关财务会计报表或者其他资料。</p>
<p>　　第六百七十三条　【借款人未按照约定用途使用借款的责任】借款人未按照约定的借款用途使用借款的,贷款人可以停止发放借款、提前收回借款或者解除合同。</p>
<p>　　第六百七十四条　【借款人支付利息的期限】借款人应当按照约定的期限支付利息。对支付利息的期限没有约定或者约定不明确,依据本法第五百一十条的规定仍不能确定,借款期间不满一年的,应当在返还借款时一并支付;借款期间一年以上的,应当在每届满一年时支付,剩余期间不满一年的,应当在返还借款时一并支付。</p>
<p>　　第六百七十五条　【借款人返还借款的期限】借款人应当按照约定的期限返还借款。对借款期限没有约定或者约定不明确,依据本法第五百一十条的规定仍不能确定的,借款人可以随时返还;贷款人可以催告借款人在合理期限内返还。</p>
<p>　　第六百七十六条　【借款人逾期返还借款的责任】借款人未按照约定的期限返还借款的,应当按照约定或者国家有关规定支付逾期利息。</p>
<p>　　第六百七十七条　【借款人提前返还借款】借款人提前返还借款的,除当事人另有约定外,应当按照实际借款的期间计算利息。</p>
<p>　　第六百七十八条　【借款展期】借款人可以在还款期限届满前向贷款人申请展期;贷款人同意的,可以展期。</p>
<p>　　第六百七十九条　【自然人之间借款合同的成立时间】自然人之间的借款合同,自贷款人提供借款时成立。</p>
<p>　　第六百八十条　【禁止高利放贷以及对借款利息的确定】禁止高利放贷,借款的利率不得违反国家有关规定。</p>
<p>　　借款合同对支付利息没有约定的,视为没有利息。</p>
<p>　　借款合同对支付利息约定不明确,当事人不能达成补充协议的,按照当地或者当事人的交易方式、交易习惯、市场利率等因素确定利息;自然人之间借款的,视为没有利息。</p>
<h3 id="第十三章-保-证-合-同"><a href="#第十三章-保-证-合-同" class="headerlink" title="第十三章　保 证 合 同"></a>第十三章　保 证 合 同</h3><h4 id="第一节-一-般-规-定-3"><a href="#第一节-一-般-规-定-3" class="headerlink" title="第一节　一 般 规 定"></a>第一节　一 般 规 定</h4><p>　　第六百八十一条　【保证合同定义】保证合同是为保障债权的实现,保证人和债权人约定,当债务人不履行到期债务或者发生当事人约定的情形时,保证人履行债务或者承担责任的合同。</p>
<p>　　第六百八十二条　【保证合同的从属性及保证合同无效的法律后果】保证合同是主债权债务合同的从合同。主债权债务合同无效的,保证合同无效,但是法律另有规定的除外。</p>
<p>　　保证合同被确认无效后,债务人、保证人、债权人有过错的,应当根据其过错各自承担相应的民事责任。</p>
<p>　　第六百八十三条　【不得担任保证人的主体范围】机关法人不得为保证人,但是经国务院批准为使用外国政府或者国际经济组织贷款进行转贷的除外。</p>
<p>　　以公益为目的的非营利法人、非法人组织不得为保证人。</p>
<p>　　第六百八十四条　【保证合同内容】保证合同的内容一般包括被保证的主债权的种类、数额,债务人履行债务的期限,保证的方式、范围和期间等条款。</p>
<p>　　第六百八十五条　【保证合同形式】保证合同可以是单独订立的书面合同,也可以是主债权债务合同中的保证条款。</p>
<p>　　第三人单方以书面形式向债权人作出保证,债权人接收且未提出异议的,保证合同成立。</p>
<p>　　第六百八十六条　【保证方式】保证的方式包括一般保证和连带责任保证。</p>
<p>　　当事人在保证合同中对保证方式没有约定或者约定不明确的,按照一般保证承担保证责任。</p>
<p>　　第六百八十七条　【一般保证人先诉抗辩权】当事人在保证合同中约定,债务人不能履行债务时,由保证人承担保证责任的,为一般保证。</p>
<p>　　一般保证的保证人在主合同纠纷未经审判或者仲裁,并就债务人财产依法强制执行仍不能履行债务前,有权拒绝向债权人承担保证责任,但是有下列情形之一的除外:</p>
<p>　　(一)债务人下落不明,且无财产可供执行;</p>
<p>　　(二)人民法院已经受理债务人破产案件;</p>
<p>　　(三)债权人有证据证明债务人的财产不足以履行全部债务或者丧失履行债务能力;</p>
<p>　　(四)保证人书面表示放弃本款规定的权利。</p>
<p>　　第六百八十八条　【连带责任保证】当事人在保证合同中约定保证人和债务人对债务承担连带责任的,为连带责任保证。</p>
<p>　　连带责任保证的债务人不履行到期债务或者发生当事人约定的情形时,债权人可以请求债务人履行债务,也可以请求保证人在其保证范围内承担保证责任。</p>
<p>　　第六百八十九条　【反担保】保证人可以要求债务人提供反担保。</p>
<p>　　第六百九十条　【最高额保证合同】保证人与债权人可以协商订立最高额保证的合同,约定在最高债权额限度内就一定期间连续发生的债权提供保证。</p>
<p>　　最高额保证除适用本章规定外,参照适用本法第二编最高额抵押权的有关规定。</p>
<h4 id="第二节-保-证-责-任"><a href="#第二节-保-证-责-任" class="headerlink" title="第二节　保 证 责 任"></a>第二节　保 证 责 任</h4><p>　　第六百九十一条　【保证范围】保证的范围包括主债权及其利息、违约金、损害赔偿金和实现债权的费用。当事人另有约定的,按照其约定。</p>
<p>　　第六百九十二条　【保证期间】保证期间是确定保证人承担保证责任的期间,不发生中止、中断和延长。</p>
<p>　　债权人与保证人可以约定保证期间,但是约定的保证期间早于主债务履行期限或者与主债务履行期限同时届满的,视为没有约定;没有约定或者约定不明确的,保证期间为主债务履行期限届满之日起六个月。</p>
<p>　　债权人与债务人对主债务履行期限没有约定或者约定不明确的,保证期间自债权人请求债务人履行债务的宽限期届满之日起计算。</p>
<p>　　第六百九十三条　【保证责任免除】一般保证的债权人未在保证期间对债务人提起诉讼或者申请仲裁的,保证人不再承担保证责任。</p>
<p>　　连带责任保证的债权人未在保证期间请求保证人承担保证责任的,保证人不再承担保证责任。</p>
<p>　　第六百九十四条　【保证债务诉讼时效】一般保证的债权人在保证期间届满前对债务人提起诉讼或者申请仲裁的,从保证人拒绝承担保证责任的权利消灭之日起,开始计算保证债务的诉讼时效。</p>
<p>　　连带责任保证的债权人在保证期间届满前请求保证人承担保证责任的,从债权人请求保证人承担保证责任之日起,开始计算保证债务的诉讼时效。</p>
<p>　　第六百九十五条　【主合同变更对保证责任影响】债权人和债务人未经保证人书面同意,协商变更主债权债务合同内容,减轻债务的,保证人仍对变更后的债务承担保证责任;加重债务的,保证人对加重的部分不承担保证责任。</p>
<p>　　债权人和债务人变更主债权债务合同的履行期限,未经保证人书面同意的,保证期间不受影响。</p>
<p>　　第六百九十六条　【债权转让对保证责任影响】债权人转让全部或者部分债权,未通知保证人的,该转让对保证人不发生效力。</p>
<p>　　保证人与债权人约定禁止债权转让,债权人未经保证人书面同意转让债权的,保证人对受让人不再承担保证责任。</p>
<p>　　第六百九十七条　【债务承担对保证责任影响】债权人未经保证人书面同意,允许债务人转移全部或者部分债务,保证人对未经其同意转移的债务不再承担保证责任,但是债权人和保证人另有约定的除外。</p>
<p>　　第三人加入债务的,保证人的保证责任不受影响。</p>
<p>　　第六百九十八条　【一般保证人保证责任免除】一般保证的保证人在主债务履行期限届满后,向债权人提供债务人可供执行财产的真实情况,债权人放弃或者怠于行使权利致使该财产不能被执行的,保证人在其提供可供执行财产的价值范围内不再承担保证责任。</p>
<p>　　第六百九十九条　【共同保证】同一债务有两个以上保证人的,保证人应当按照保证合同约定的保证份额,承担保证责任;没有约定保证份额的,债权人可以请求任何一个保证人在其保证范围内承担保证责任。</p>
<p>　　第七百条　【保证人追偿权】保证人承担保证责任后,除当事人另有约定外,有权在其承担保证责任的范围内向债务人追偿,享有债权人对债务人的权利,但是不得损害债权人的利益。</p>
<p>　　第七百零一条　【保证人抗辩权】保证人可以主张债务人对债权人的抗辩。债务人放弃抗辩的,保证人仍有权向债权人主张抗辩。</p>
<p>　　第七百零二条　【保证人拒绝履行权】债务人对债权人享有抵销权或者撤销权的,保证人可以在相应范围内拒绝承担保证责任。</p>
<h3 id="第十四章-租-赁-合-同"><a href="#第十四章-租-赁-合-同" class="headerlink" title="第十四章　租 赁 合 同"></a>第十四章　租 赁 合 同</h3><p>　　第七百零三条　【租赁合同定义】租赁合同是出租人将租赁物交付承租人使用、收益,承租人支付租金的合同。</p>
<p>　　第七百零四条　【租赁合同主要内容】租赁合同的内容一般包括租赁物的名称、数量、用途、租赁期限、租金及其支付期限和方式、租赁物维修等条款。</p>
<p>　　第七百零五条　【租赁最长期限】租赁期限不得超过二十年。超过二十年的,超过部分无效。</p>
<p>　　租赁期限届满,当事人可以续订租赁合同;但是,约定的租赁期限自续订之日起不得超过二十年。</p>
<p>　　第七百零六条　【租赁合同的登记备案手续对合同效力影响】当事人未依照法律、行政法规规定办理租赁合同登记备案手续的,不影响合同的效力。</p>
<p>　　第七百零七条　【租赁合同形式】租赁期限六个月以上的,应当采用书面形式。当事人未采用书面形式,无法确定租赁期限的,视为不定期租赁。</p>
<p>　　第七百零八条　【出租人交付租赁物义务和适租义务】出租人应当按照约定将租赁物交付承租人,并在租赁期限内保持租赁物符合约定的用途。</p>
<p>　　第七百零九条　【承租人按约定使用租赁物的义务】承租人应当按照约定的方法使用租赁物。对租赁物的使用方法没有约定或者约定不明确,依据本法第五百一十条的规定仍不能确定的,应当根据租赁物的性质使用。</p>
<p>　　第七百一十条　【承租人按约定使用租赁物的免责义务】承租人按照约定的方法或者根据租赁物的性质使用租赁物,致使租赁物受到损耗的,不承担赔偿责任。</p>
<p>　　第七百一十一条　【租赁人未按约定使用租赁物的责任】承租人未按照约定的方法或者未根据租赁物的性质使用租赁物,致使租赁物受到损失的,出租人可以解除合同并请求赔偿损失。</p>
<p>　　第七百一十二条　【出租人维修义务】出租人应当履行租赁物的维修义务,但是当事人另有约定的除外。</p>
<p>　　第七百一十三条　【出租人不履行维修义务的法律后果】承租人在租赁物需要维修时可以请求出租人在合理期限内维修。出租人未履行维修义务的,承租人可以自行维修,维修费用由出租人负担。因维修租赁物影响承租人使用的,应当相应减少租金或者延长租期。</p>
<p>　　因承租人的过错致使租赁物需要维修的,出租人不承担前款规定的维修义务。</p>
<p>　　第七百一十四条　【承租人妥善保管租赁物义务】承租人应当妥善保管租赁物,因保管不善造成租赁物毁损、灭失的,应当承担赔偿责任。</p>
<p>　　第七百一十五条　【承租人对租赁物进行改善或增设他物】承租人经出租人同意,可以对租赁物进行改善或者增设他物。</p>
<p>　　承租人未经出租人同意,对租赁物进行改善或者增设他物的,出租人可以请求承租人恢复原状或者赔偿损失。</p>
<p>　　第七百一十六条　【承租人对租赁物转租】承租人经出租人同意,可以将租赁物转租给第三人。承租人转租的,承租人与出租人之间的租赁合同继续有效;第三人造成租赁物损失的,承租人应当赔偿损失。</p>
<p>　　承租人未经出租人同意转租的,出租人可以解除合同。</p>
<p>　　第七百一十七条　【超过承租人剩余租赁期限的转租期间效力】承租人经出租人同意将租赁物转租给第三人,转租期限超过承租人剩余租赁期限的,超过部分的约定对出租人不具有法律约束力,但是出租人与承租人另有约定的除外。</p>
<p>　　第七百一十八条　【推定出租人同意转租】出租人知道或者应当知道承租人转租,但是在六个月内未提出异议的,视为出租人同意转租。</p>
<p>　　第七百一十九条　【次承租人代位求偿权】承租人拖欠租金的,次承租人可以代承租人支付其欠付的租金和违约金,但是转租合同对出租人不具有法律约束力的除外。</p>
<p>　　次承租人代为支付的租金和违约金,可以充抵次承租人应当向承租人支付的租金;超出其应付的租金数额的,可以向承租人追偿。</p>
<p>　　第七百二十条　【租赁物收益归属】在租赁期限内因占有、使用租赁物获得的收益,归承租人所有,但是当事人另有约定的除外。</p>
<p>　　第七百二十一条　【租金支付期限】承租人应当按照约定的期限支付租金。对支付租金的期限没有约定或者约定不明确,依据本法第五百一十条的规定仍不能确定,租赁期限不满一年的,应当在租赁期限届满时支付;租赁期限一年以上的,应当在每届满一年时支付,剩余期限不满一年的,应当在租赁期限届满时支付。</p>
<p>　　第七百二十二条　【承租人违反支付租金义务的法律后果】承租人无正当理由未支付或者迟延支付租金的,出租人可以请求承租人在合理期限内支付;承租人逾期不支付的,出租人可以解除合同。</p>
<p>　　第七百二十三条　【出租人权利瑕疵担保责任】因第三人主张权利,致使承租人不能对租赁物使用、收益的,承租人可以请求减少租金或者不支付租金。</p>
<p>　　第三人主张权利的,承租人应当及时通知出租人。</p>
<p>　　第七百二十四条　【非承租人构成根本性违约承租人可以解除合同】有下列情形之一,非因承租人原因致使租赁物无法使用的,承租人可以解除合同:</p>
<p>　　(一)租赁物被司法机关或者行政机关依法查封、扣押;</p>
<p>　　(二)租赁物权属有争议;</p>
<p>　　(三)租赁物具有违反法律、行政法规关于使用条件的强制性规定情形。</p>
<p>　　第七百二十五条　【所有权变动不破租赁】租赁物在承租人按照租赁合同占有期限内发生所有权变动的,不影响租赁合同的效力。</p>
<p>　　第七百二十六条　【房屋承租人优先购买权】出租人出卖租赁房屋的,应当在出卖之前的合理期限内通知承租人,承租人享有以同等条件优先购买的权利;但是,房屋按份共有人行使优先购买权或者出租人将房屋出卖给近亲属的除外。</p>
<p>　　出租人履行通知义务后,承租人在十五日内未明确表示购买的,视为承租人放弃优先购买权。</p>
<p>　　第七百二十七条　【委托拍卖情况下房屋承租人优先购买权】出租人委托拍卖人拍卖租赁房屋的,应当在拍卖五日前通知承租人。承租人未参加拍卖的,视为放弃优先购买权。</p>
<p>　　第七百二十八条　【房屋承租人优先购买权受到侵害的法律后果】出租人未通知承租人或者有其他妨害承租人行使优先购买权情形的,承租人可以请求出租人承担赔偿责任。但是,出租人与第三人订立的房屋买卖合同的效力不受影响。</p>
<p>　　第七百二十九条　【不可归责于承租人的租赁物毁损、灭失的法律后果】因不可归责于承租人的事由,致使租赁物部分或者全部毁损、灭失的,承租人可以请求减少租金或者不支付租金;因租赁物部分或者全部毁损、灭失,致使不能实现合同目的的,承租人可以解除合同。</p>
<p>　　第七百三十条　【租赁期限没有约定或约定不明确时的法律后果】当事人对租赁期限没有约定或者约定不明确,依据本法第五百一十条的规定仍不能确定的,视为不定期租赁;当事人可以随时解除合同,但是应当在合理期限之前通知对方。</p>
<p>　　第七百三十一条　【租赁物质量不合格时承租人解除权】租赁物危及承租人的安全或者健康的,即使承租人订立合同时明知该租赁物质量不合格,承租人仍然可以随时解除合同。</p>
<p>　　第七百三十二条　【房屋承租人死亡的租赁关系的处理】承租人在房屋租赁期限内死亡的,与其生前共同居住的人或者共同经营人可以按照原租赁合同租赁该房屋。</p>
<p>　　第七百三十三条　【租赁期限届满承租人返还租赁物】租赁期限届满,承租人应当返还租赁物。返还的租赁物应当符合按照约定或者根据租赁物的性质使用后的状态。</p>
<p>　　第七百三十四条　【租赁期限届满承租人继续使用租赁物及房屋承租人的优先承租权】租赁期限届满,承租人继续使用租赁物,出租人没有提出异议的,原租赁合同继续有效,但是租赁期限为不定期。</p>
<p>　　租赁期限届满,房屋承租人享有以同等条件优先承租的权利。</p>
<h3 id="第十五章-融资租赁合同"><a href="#第十五章-融资租赁合同" class="headerlink" title="第十五章　融资租赁合同"></a>第十五章　融资租赁合同</h3><p>　　第七百三十五条　【融资租赁合同定义】融资租赁合同是出租人根据承租人对出卖人、租赁物的选择,向出卖人购买租赁物,提供给承租人使用,承租人支付租金的合同。</p>
<p>　　第七百三十六条　【融资租赁合同内容和形式】融资租赁合同的内容一般包括租赁物的名称、数量、规格、技术性能、检验方法,租赁期限,租金构成及其支付期限和方式、币种,租赁期限届满租赁物的归属等条款。</p>
<p>　　融资租赁合同应当采用书面形式。</p>
<p>　　第七百三十七条　【融资租赁合同无效】当事人以虚构租赁物方式订立的融资租赁合同无效。</p>
<p>　　第七百三十八条　【租赁物经营许可对合同效力影响】依照法律、行政法规的规定,对于租赁物的经营使用应当取得行政许可的,出租人未取得行政许可不影响融资租赁合同的效力。</p>
<p>　　第七百三十九条　【融资租赁标的物交付】出租人根据承租人对出卖人、租赁物的选择订立的买卖合同,出卖人应当按照约定向承租人交付标的物,承租人享有与受领标的物有关的买受人的权利。</p>
<p>　　第七百四十条　【承租人拒绝受领标的物的条件】出卖人违反向承租人交付标的物的义务,有下列情形之一的,承租人可以拒绝受领出卖人向其交付的标的物:</p>
<p>　　(一)标的物严重不符合约定;</p>
<p>　　(二)未按照约定交付标的物,经承租人或者出租人催告后在合理期限内仍未交付。</p>
<p>　　承租人拒绝受领标的物的,应当及时通知出租人。</p>
<p>　　第七百四十一条　【承租人行使索赔权】出租人、出卖人、承租人可以约定,出卖人不履行买卖合同义务的,由承租人行使索赔的权利。承租人行使索赔权利的,出租人应当协助。</p>
<p>　　第七百四十二条　【承租人行使索赔权不影响支付租金义务】承租人对出卖人行使索赔权利,不影响其履行支付租金的义务。但是,承租人依赖出租人的技能确定租赁物或者出租人干预选择租赁物的,承租人可以请求减免相应租金。</p>
<p>　　第七百四十三条　【索赔失败的责任承担】出租人有下列情形之一,致使承租人对出卖人行使索赔权利失败的,承租人有权请求出租人承担相应的责任:</p>
<p>　　(一)明知租赁物有质量瑕疵而不告知承租人;</p>
<p>　　(二)承租人行使索赔权利时,未及时提供必要协助。</p>
<p>　　出租人怠于行使只能由其对出卖人行使的索赔权利,造成承租人损失的,承租人有权请求出租人承担赔偿责任。</p>
<p>　　第七百四十四条　【出租人不得擅自变更买卖合同内容】出租人根据承租人对出卖人、租赁物的选择订立的买卖合同,未经承租人同意,出租人不得变更与承租人有关的合同内容。</p>
<p>　　第七百四十五条　【租赁物的所有权】出租人对租赁物享有的所有权,未经登记,不得对抗善意第三人。</p>
<p>　　第七百四十六条　【融资租赁合同租金的确定】融资租赁合同的租金,除当事人另有约定外,应当根据购买租赁物的大部分或者全部成本以及出租人的合理利润确定。</p>
<p>　　第七百四十七条　【租赁物质量瑕疵担保责任】租赁物不符合约定或者不符合使用目的的,出租人不承担责任。但是,承租人依赖出租人的技能确定租赁物或者出租人干预选择租赁物的除外。</p>
<p>　　第七百四十八条　【出租人保证承租人占有和使用租赁物】出租人应当保证承租人对租赁物的占有和使用。</p>
<p>　　出租人有下列情形之一的,承租人有权请求其赔偿损失:</p>
<p>　　(一)无正当理由收回租赁物;</p>
<p>　　(二)无正当理由妨碍、干扰承租人对租赁物的占有和使用;</p>
<p>　　(三)因出租人的原因致使第三人对租赁物主张权利;</p>
<p>　　(四)不当影响承租人对租赁物占有和使用的其他情形。</p>
<p>　　第七百四十九条　【租赁物致人损害的责任承担】承租人占有租赁物期间,租赁物造成第三人人身损害或者财产损失的,出租人不承担责任。</p>
<p>　　第七百五十条　【承租人对租赁物的保管、使用和维修义务】承租人应当妥善保管、使用租赁物。</p>
<p>　　承租人应当履行占有租赁物期间的维修义务。</p>
<p>　　第七百五十一条　【租赁物毁损、灭失对租金给付义务的影响】承租人占有租赁物期间,租赁物毁损、灭失的,出租人有权请求承租人继续支付租金,但是法律另有规定或者当事人另有约定的除外。</p>
<p>　　第七百五十二条　【承租人支付租金义务】承租人应当按照约定支付租金。承租人经催告后在合理期限内仍不支付租金的,出租人可以请求支付全部租金;也可以解除合同,收回租赁物。</p>
<p>　　第七百五十三条　【出租人解除融资租赁合同】承租人未经出租人同意,将租赁物转让、抵押、质押、投资入股或者以其他方式处分的,出租人可以解除融资租赁合同。</p>
<p>　　第七百五十四条　【出租人或承租人解除融资租赁合同】有下列情形之一的,出租人或者承租人可以解除融资租赁合同:</p>
<p>　　(一)出租人与出卖人订立的买卖合同解除、被确认无效或者被撤销,且未能重新订立买卖合同;</p>
<p>　　(二)租赁物因不可归责于当事人的原因毁损、灭失,且不能修复或者确定替代物;</p>
<p>　　(三)因出卖人的原因致使融资租赁合同的目的不能实现。</p>
<p>　　第七百五十五条　【承租人承担赔偿责任】融资租赁合同因买卖合同解除、被确认无效或者被撤销而解除,出卖人、租赁物系由承租人选择的,出租人有权请求承租人赔偿相应损失;但是,因出租人原因致使买卖合同解除、被确认无效或者被撤销的除外。</p>
<p>　　出租人的损失已经在买卖合同解除、被确认无效或者被撤销时获得赔偿的,承租人不再承担相应的赔偿责任。</p>
<p>　　第七百五十六条　【租赁物意外毁损灭失】融资租赁合同因租赁物交付承租人后意外毁损、灭失等不可归责于当事人的原因解除的,出租人可以请求承租人按照租赁物折旧情况给予补偿。</p>
<p>　　第七百五十七条　【租赁期限届满租赁物归属】出租人和承租人可以约定租赁期限届满租赁物的归属;对租赁物的归属没有约定或者约定不明确,依据本法第五百一十条的规定仍不能确定的,租赁物的所有权归出租人。</p>
<p>　　第七百五十八条　【租赁物价值返还及租赁物无法返还】当事人约定租赁期限届满租赁物归承租人所有,承租人已经支付大部分租金,但是无力支付剩余租金,出租人因此解除合同收回租赁物,收回的租赁物的价值超过承租人欠付的租金以及其他费用的,承租人可以请求相应返还。</p>
<p>　　当事人约定租赁期限届满租赁物归出租人所有,因租赁物毁损、灭失或者附合、混合于他物致使承租人不能返还的,出租人有权请求承租人给予合理补偿。</p>
<p>　　第七百五十九条　【支付象征性价款后租赁物归属】当事人约定租赁期限届满,承租人仅需向出租人支付象征性价款的,视为约定的租金义务履行完毕后租赁物的所有权归承租人。</p>
<p>　　第七百六十条　【融资租赁合同无效租赁物归属】融资租赁合同无效,当事人就该情形下租赁物的归属有约定的,按照其约定;没有约定或者约定不明确的,租赁物应当返还出租人。但是,因承租人原因致使合同无效,出租人不请求返还或者返还后会显著降低租赁物效用的,租赁物的所有权归承租人,由承租人给予出租人合理补偿。</p>
<h3 id="第十六章-保-理-合-同"><a href="#第十六章-保-理-合-同" class="headerlink" title="第十六章　保 理 合 同"></a>第十六章　保 理 合 同</h3><p>　　第七百六十一条　【保理合同定义】保理合同是应收账款债权人将现有的或者将有的应收账款转让给保理人,保理人提供资金融通、应收账款管理或者催收、应收账款债务人付款担保等服务的合同。</p>
<p>　　第七百六十二条　【保理合同内容和形式】保理合同的内容一般包括业务类型、服务范围、服务期限、基础交易合同情况、应收账款信息、保理融资款或者服务报酬及其支付方式等条款。</p>
<p>　　保理合同应当采用书面形式。</p>
<p>　　第七百六十三条　【虚构应收账款的法律后果】应收账款债权人与债务人虚构应收账款作为转让标的,与保理人订立保理合同的,应收账款债务人不得以应收账款不存在为由对抗保理人,但是保理人明知虚构的除外。</p>
<p>　　第七百六十四条　【保理人表明身份义务】保理人向应收账款债务人发出应收账款转让通知的,应当表明保理人身份并附有必要凭证。</p>
<p>　　第七百六十五条　【无正当理由变更或者终止基础交易合同行为对保理人的效力】应收账款债务人接到应收账款转让通知后,应收账款债权人与债务人无正当理由协商变更或者终止基础交易合同,对保理人产生不利影响的,对保理人不发生效力。</p>
<p>　　第七百六十六条　【有追索权保理】当事人约定有追索权保理的,保理人可以向应收账款债权人主张返还保理融资款本息或者回购应收账款债权,也可以向应收账款债务人主张应收账款债权。保理人向应收账款债务人主张应收账款债权,在扣除保理融资款本息和相关费用后有剩余的,剩余部分应当返还给应收账款债权人。</p>
<p>　　第七百六十七条　【无追索权保理】当事人约定无追索权保理的,保理人应当向应收账款债务人主张应收账款债权,保理人取得超过保理融资款本息和相关费用的部分,无需向应收账款债权人返还。</p>
<p>　　第七百六十八条　【多重保理的清偿顺序】应收账款债权人就同一应收账款订立多个保理合同,致使多个保理人主张权利的,已经登记的先于未登记的取得应收账款;均已经登记的,按照登记时间的先后顺序取得应收账款;均未登记的,由最先到达应收账款债务人的转让通知中载明的保理人取得应收账款;既未登记也未通知的,按照保理融资款或者服务报酬的比例取得应收账款。</p>
<p>　　第七百六十九条　【适用债权转让规定】本章没有规定的,适用本编第六章债权转让的有关规定。</p>
<h3 id="第十七章-承-揽-合-同"><a href="#第十七章-承-揽-合-同" class="headerlink" title="第十七章　承 揽 合 同"></a>第十七章　承 揽 合 同</h3><p>　　第七百七十条　【承揽合同定义和承揽主要类型】承揽合同是承揽人按照定作人的要求完成工作,交付工作成果,定作人支付报酬的合同。</p>
<p>　　承揽包括加工、定作、修理、复制、测试、检验等工作。</p>
<p>　　第七百七十一条　【承揽合同主要内容】承揽合同的内容一般包括承揽的标的、数量、质量、报酬,承揽方式,材料的提供,履行期限,验收标准和方法等条款。</p>
<p>　　第七百七十二条　【承揽工作主要完成人】承揽人应当以自己的设备、技术和劳力,完成主要工作,但是当事人另有约定的除外。</p>
<p>　　承揽人将其承揽的主要工作交由第三人完成的,应当就该第三人完成的工作成果向定作人负责;未经定作人同意的,定作人也可以解除合同。</p>
<p>　　第七百七十三条　【承揽辅助工作转交】承揽人可以将其承揽的辅助工作交由第三人完成。承揽人将其承揽的辅助工作交由第三人完成的,应当就该第三人完成的工作成果向定作人负责。</p>
<p>　　第七百七十四条　【承揽人提供材料时的义务】承揽人提供材料的,应当按照约定选用材料,并接受定作人检验。</p>
<p>　　第七百七十五条　【定作人提供材料时双方当事人的义务】定作人提供材料的,应当按照约定提供材料。承揽人对定作人提供的材料应当及时检验,发现不符合约定时,应当及时通知定作人更换、补齐或者采取其他补救措施。</p>
<p>　　承揽人不得擅自更换定作人提供的材料,不得更换不需要修理的零部件。</p>
<p>　　第七百七十六条　【定作人要求不合理时双方当事人的义务】承揽人发现定作人提供的图纸或者技术要求不合理的,应当及时通知定作人。因定作人怠于答复等原因造成承揽人损失的,应当赔偿损失。</p>
<p>　　第七百七十七条　【定作人变更工作要求的法律后果】定作人中途变更承揽工作的要求,造成承揽人损失的,应当赔偿损失。</p>
<p>　　第七百七十八条　【定作人协助义务】承揽工作需要定作人协助的,定作人有协助的义务。定作人不履行协助义务致使承揽工作不能完成的,承揽人可以催告定作人在合理期限内履行义务,并可以顺延履行期限;定作人逾期不履行的,承揽人可以解除合同。</p>
<p>　　第七百七十九条　【定作人监督检验】承揽人在工作期间,应当接受定作人必要的监督检验。定作人不得因监督检验妨碍承揽人的正常工作。</p>
<p>　　第七百八十条　【承揽人工作成果交付】承揽人完成工作的,应当向定作人交付工作成果,并提交必要的技术资料和有关质量证明。定作人应当验收该工作成果。</p>
<p>　　第七百八十一条　【工作成果不符合质量要求时的违约责任】承揽人交付的工作成果不符合质量要求的,定作人可以合理选择请求承揽人承担修理、重作、减少报酬、赔偿损失等违约责任。</p>
<p>　　第七百八十二条　【定作人支付报酬的期限】定作人应当按照约定的期限支付报酬。对支付报酬的期限没有约定或者约定不明确,依据本法第五百一十条的规定仍不能确定的,定作人应当在承揽人交付工作成果时支付;工作成果部分交付的,定作人应当相应支付。</p>
<p>　　第七百八十三条　【定作人未履行付款义务时承揽人权利】定作人未向承揽人支付报酬或者材料费等价款的,承揽人对完成的工作成果享有留置权或者有权拒绝交付,但是当事人另有约定的除外。</p>
<p>　　第七百八十四条　【承揽人保管义务】承揽人应当妥善保管定作人提供的材料以及完成的工作成果,因保管不善造成毁损、灭失的,应当承担赔偿责任。</p>
<p>　　第七百八十五条　【承揽人保密义务】承揽人应当按照定作人的要求保守秘密,未经定作人许可,不得留存复制品或者技术资料。</p>
<p>　　第七百八十六条　【共同承揽人连带责任】共同承揽人对定作人承担连带责任,但是当事人另有约定的除外。</p>
<p>　　第七百八十七条　【定作人任意解除权】定作人在承揽人完成工作前可以随时解除合同,造成承揽人损失的,应当赔偿损失。</p>
<h3 id="第十八章-建设工程合同"><a href="#第十八章-建设工程合同" class="headerlink" title="第十八章　建设工程合同"></a>第十八章　建设工程合同</h3><p>　　第七百八十八条　【建设工程合同定义和种类】建设工程合同是承包人进行工程建设,发包人支付价款的合同。</p>
<p>　　建设工程合同包括工程勘察、设计、施工合同。</p>
<p>　　第七百八十九条　【建设工程合同的形式】建设工程合同应当采用书面形式。</p>
<p>　　第七百九十条　【建设工程招投标活动的原则】建设工程的招标投标活动,应当依照有关法律的规定公开、公平、公正进行。</p>
<p>　　第七百九十一条　【建设工程的发包、承包、分包】发包人可以与总承包人订立建设工程合同,也可以分别与勘察人、设计人、施工人订立勘察、设计、施工承包合同。发包人不得将应当由一个承包人完成的建设工程支解成若干部分发包给数个承包人。</p>
<p>　　总承包人或者勘察、设计、施工承包人经发包人同意,可以将自己承包的部分工作交由第三人完成。第三人就其完成的工作成果与总承包人或者勘察、设计、施工承包人向发包人承担连带责任。承包人不得将其承包的全部建设工程转包给第三人或者将其承包的全部建设工程支解以后以分包的名义分别转包给第三人。</p>
<p>　　禁止承包人将工程分包给不具备相应资质条件的单位。禁止分包单位将其承包的工程再分包。建设工程主体结构的施工必须由承包人自行完成。</p>
<p>　　第七百九十二条　【订立国家重大建设工程合同】国家重大建设工程合同,应当按照国家规定的程序和国家批准的投资计划、可行性研究报告等文件订立。</p>
<p>　　第七百九十三条　【建设工程合同无效、验收不合格的处理】建设工程施工合同无效,但是建设工程经验收合格的,可以参照合同关于工程价款的约定折价补偿承包人。</p>
<p>　　建设工程施工合同无效,且建设工程经验收不合格的,按照以下情形处理:</p>
<p>　　(一)修复后的建设工程经验收合格的,发包人可以请求承包人承担修复费用;</p>
<p>　　(二)修复后的建设工程经验收不合格的,承包人无权请求参照合同关于工程价款的约定折价补偿。</p>
<p>　　发包人对因建设工程不合格造成的损失有过错的,应当承担相应的责任。</p>
<p>　　第七百九十四条　【勘察、设计合同的内容】勘察、设计合同的内容一般包括提交有关基础资料和概预算等文件的期限、质量要求、费用以及其他协作条件等条款。</p>
<p>　　第七百九十五条　【施工合同的内容】施工合同的内容一般包括工程范围、建设工期、中间交工工程的开工和竣工时间、工程质量、工程造价、技术资料交付时间、材料和设备供应责任、拨款和结算、竣工验收、质量保修范围和质量保证期、相互协作等条款。</p>
<p>　　第七百九十六条　【建设工程监理】建设工程实行监理的,发包人应当与监理人采用书面形式订立委托监理合同。发包人与监理人的权利和义务以及法律责任,应当依照本编委托合同以及其他有关法律、行政法规的规定。</p>
<p>　　第七百九十七条　【发包人的检查权】发包人在不妨碍承包人正常作业的情况下,可以随时对作业进度、质量进行检查。</p>
<p>　　第七百九十八条　【隐蔽工程】隐蔽工程在隐蔽以前,承包人应当通知发包人检查。发包人没有及时检查的,承包人可以顺延工程日期,并有权请求赔偿停工、窝工等损失。</p>
<p>　　第七百九十九条　【建设工程的竣工验收】建设工程竣工后,发包人应当根据施工图纸及说明书、国家颁发的施工验收规范和质量检验标准及时进行验收。验收合格的,发包人应当按照约定支付价款,并接收该建设工程。</p>
<p>　　建设工程竣工经验收合格后,方可交付使用;未经验收或者验收不合格的,不得交付使用。</p>
<p>　　第八百条　【勘察人、设计人对勘察、设计的责任】勘察、设计的质量不符合要求或者未按照期限提交勘察、设计文件拖延工期,造成发包人损失的,勘察人、设计人应当继续完善勘察、设计,减收或者免收勘察、设计费并赔偿损失。</p>
<p>　　第八百零一条　【施工人对建设工程质量承担的民事责任】因施工人的原因致使建设工程质量不符合约定的,发包人有权请求施工人在合理期限内无偿修理或者返工、改建。经过修理或者返工、改建后,造成逾期交付的,施工人应当承担违约责任。</p>
<p>　　第八百零二条　【合理使用期限内质量保证责任】因承包人的原因致使建设工程在合理使用期限内造成人身损害和财产损失的,承包人应当承担赔偿责任。</p>
<p>　　第八百零三条　【发包人未按约定的时间和要求提供相关物资的违约责任】发包人未按照约定的时间和要求提供原材料、设备、场地、资金、技术资料的,承包人可以顺延工程日期,并有权请求赔偿停工、窝工等损失。</p>
<p>　　第八百零四条　【因发包人原因造成工程停建、缓建所应承担责任】因发包人的原因致使工程中途停建、缓建的,发包人应当采取措施弥补或者减少损失,赔偿承包人因此造成的停工、窝工、倒运、机械设备调迁、材料和构件积压等损失和实际费用。</p>
<p>　　第八百零五条　【因发包人原因造成勘察、设计的返工、停工或者修改设计所应承担责任】因发包人变更计划,提供的资料不准确,或者未按照期限提供必需的勘察、设计工作条件而造成勘察、设计的返工、停工或者修改设计,发包人应当按照勘察人、设计人实际消耗的工作量增付费用。</p>
<p>　　第八百零六条　【合同解除及后果处理的规定】承包人将建设工程转包、违法分包的,发包人可以解除合同。</p>
<p>　　发包人提供的主要建筑材料、建筑构配件和设备不符合强制性标准或者不履行协助义务,致使承包人无法施工,经催告后在合理期限内仍未履行相应义务的,承包人可以解除合同。</p>
<p>　　合同解除后,已经完成的建设工程质量合格的,发包人应当按照约定支付相应的工程价款;已经完成的建设工程质量不合格的,参照本法第七百九十三条的规定处理。</p>
<p>　　第八百零七条　【发包人未支付工程价款的责任】发包人未按照约定支付价款的,承包人可以催告发包人在合理期限内支付价款。发包人逾期不支付的,除根据建设工程的性质不宜折价、拍卖外,承包人可以与发包人协议将该工程折价,也可以请求人民法院将该工程依法拍卖。建设工程的价款就该工程折价或者拍卖的价款优先受偿。</p>
<p>　　第八百零八条　【适用承揽合同】本章没有规定的,适用承揽合同的有关规定。</p>
<h3 id="第十九章-运-输-合-同"><a href="#第十九章-运-输-合-同" class="headerlink" title="第十九章　运 输 合 同"></a>第十九章　运 输 合 同</h3><h4 id="第一节-一-般-规-定-4"><a href="#第一节-一-般-规-定-4" class="headerlink" title="第一节　一 般 规 定"></a>第一节　一 般 规 定</h4><p>　　第八百零九条　【运输合同定义】运输合同是承运人将旅客或者货物从起运地点运输到约定地点,旅客、托运人或者收货人支付票款或者运输费用的合同。</p>
<p>　　第八百一十条　【承运人强制缔约义务】从事公共运输的承运人不得拒绝旅客、托运人通常、合理的运输要求。</p>
<p>　　第八百一十一条　【承运人安全运输义务】承运人应当在约定期限或者合理期限内将旅客、货物安全运输到约定地点。</p>
<p>　　第八百一十二条　【承运人合理运输义务】承运人应当按照约定的或者通常的运输路线将旅客、货物运输到约定地点。</p>
<p>　　第八百一十三条　【支付票款或者运输费用】旅客、托运人或者收货人应当支付票款或者运输费用。承运人未按照约定路线或者通常路线运输增加票款或者运输费用的,旅客、托运人或者收货人可以拒绝支付增加部分的票款或者运输费用。</p>
<h4 id="第二节-客-运-合-同"><a href="#第二节-客-运-合-同" class="headerlink" title="第二节　客 运 合 同"></a>第二节　客 运 合 同</h4><p>　　第八百一十四条　【客运合同成立时间】客运合同自承运人向旅客出具客票时成立,但是当事人另有约定或者另有交易习惯的除外。</p>
<p>　　第八百一十五条　【旅客乘运义务的一般规定】旅客应当按照有效客票记载的时间、班次和座位号乘坐。旅客无票乘坐、超程乘坐、越级乘坐或者持不符合减价条件的优惠客票乘坐的,应当补交票款,承运人可以按照规定加收票款;旅客不支付票款的,承运人可以拒绝运输。</p>
<p>　　实名制客运合同的旅客丢失客票的,可以请求承运人挂失补办,承运人不得再次收取票款和其他不合理费用。</p>
<p>　　第八百一十六条　【旅客办理退票或者变更乘运手续】旅客因自己的原因不能按照客票记载的时间乘坐的,应当在约定的期限内办理退票或者变更手续;逾期办理的,承运人可以不退票款,并不再承担运输义务。</p>
<p>　　第八百一十七条　【行李携带及托运要求】旅客随身携带行李应当符合约定的限量和品类要求;超过限量或者违反品类要求携带行李的,应当办理托运手续。</p>
<p>　　第八百一十八条　【禁止旅客携带危险物品、违禁物品】旅客不得随身携带或者在行李中夹带易燃、易爆、有毒、有腐蚀性、有放射性以及可能危及运输工具上人身和财产安全的危险物品或者违禁物品。</p>
<p>　　旅客违反前款规定的,承运人可以将危险物品或者违禁物品卸下、销毁或者送交有关部门。旅客坚持携带或者夹带危险物品或者违禁物品的,承运人应当拒绝运输。</p>
<p>　　第八百一十九条　【承运人的告知义务和旅客的协助义务】承运人应当严格履行安全运输义务,及时告知旅客安全运输应当注意的事项。旅客对承运人为安全运输所作的合理安排应当积极协助和配合。</p>
<p>　　第八百二十条　【承运人按照约定运输的义务】承运人应当按照有效客票记载的时间、班次和座位号运输旅客。承运人迟延运输或者有其他不能正常运输情形的,应当及时告知和提醒旅客,采取必要的安置措施,并根据旅客的要求安排改乘其他班次或者退票;由此造成旅客损失的,承运人应当承担赔偿责任,但是不可归责于承运人的除外。</p>
<p>　　第八百二十一条　【承运人擅自降低或者提高服务标准的后果】承运人擅自降低服务标准的,应当根据旅客的请求退票或者减收票款;提高服务标准的,不得加收票款。</p>
<p>　　第八百二十二条　【承运人救助义务】承运人在运输过程中,应当尽力救助患有急病、分娩、遇险的旅客。</p>
<p>　　第八百二十三条　【旅客人身伤亡责任】承运人应当对运输过程中旅客的伤亡承担赔偿责任;但是,伤亡是旅客自身健康原因造成的或者承运人证明伤亡是旅客故意、重大过失造成的除外。</p>
<p>　　前款规定适用于按照规定免票、持优待票或者经承运人许可搭乘的无票旅客。</p>
<p>　　第八百二十四条　【旅客随身携带物品毁损、灭失的责任承担】在运输过程中旅客随身携带物品毁损、灭失,承运人有过错的,应当承担赔偿责任。</p>
<p>　　旅客托运的行李毁损、灭失的,适用货物运输的有关规定。</p>
<h4 id="第三节-货-运-合-同"><a href="#第三节-货-运-合-同" class="headerlink" title="第三节　货 运 合 同"></a>第三节　货 运 合 同</h4><p>　　第八百二十五条　【托运人如实申报义务】托运人办理货物运输,应当向承运人准确表明收货人的姓名、名称或者凭指示的收货人,货物的名称、性质、重量、数量,收货地点等有关货物运输的必要情况。</p>
<p>　　因托运人申报不实或者遗漏重要情况,造成承运人损失的,托运人应当承担赔偿责任。</p>
<p>　　第八百二十六条　【托运人提交有关文件义务】货物运输需要办理审批、检验等手续的,托运人应当将办理完有关手续的文件提交承运人。</p>
<p>　　第八百二十七条　【托运人货物包装义务】托运人应当按照约定的方式包装货物。对包装方式没有约定或者约定不明确的,适用本法第六百一十九条的规定。</p>
<p>　　托运人违反前款规定的,承运人可以拒绝运输。</p>
<p>　　第八百二十八条　【运输危险货物】托运人托运易燃、易爆、有毒、有腐蚀性、有放射性等危险物品的,应当按照国家有关危险物品运输的规定对危险物品妥善包装,做出危险物品标志和标签,并将有关危险物品的名称、性质和防范措施的书面材料提交承运人。</p>
<p>　　托运人违反前款规定的,承运人可以拒绝运输,也可以采取相应措施以避免损失的发生,因此产生的费用由托运人负担。</p>
<p>　　第八百二十九条　【托运人变更或者解除运输合同权利】在承运人将货物交付收货人之前,托运人可以要求承运人中止运输、返还货物、变更到达地或者将货物交给其他收货人,但是应当赔偿承运人因此受到的损失。</p>
<p>　　第八百三十条　【提货】货物运输到达后,承运人知道收货人的,应当及时通知收货人,收货人应当及时提货。收货人逾期提货的,应当向承运人支付保管费等费用。</p>
<p>　　第八百三十一条　【收货人检验货物】收货人提货时应当按照约定的期限检验货物。对检验货物的期限没有约定或者约定不明确,依据本法第五百一十条的规定仍不能确定的,应当在合理期限内检验货物。收货人在约定的期限或者合理期限内对货物的数量、毁损等未提出异议的,视为承运人已经按照运输单证的记载交付的初步证据。</p>
<p>　　第八百三十二条　【运输过程中货物毁损、灭失的责任承担】承运人对运输过程中货物的毁损、灭失承担赔偿责任。但是,承运人证明货物的毁损、灭失是因不可抗力、货物本身的自然性质或者合理损耗以及托运人、收货人的过错造成的,不承担赔偿责任。</p>
<p>　　第八百三十三条　【确定货物赔偿额】货物的毁损、灭失的赔偿额,当事人有约定的,按照其约定;没有约定或者约定不明确,依据本法第五百一十条的规定仍不能确定的,按照交付或者应当交付时货物到达地的市场价格计算。法律、行政法规对赔偿额的计算方法和赔偿限额另有规定的,依照其规定。</p>
<p>　　第八百三十四条　【相继运输】两个以上承运人以同一运输方式联运的,与托运人订立合同的承运人应当对全程运输承担责任;损失发生在某一运输区段的,与托运人订立合同的承运人和该区段的承运人承担连带责任。</p>
<p>　　第八百三十五条　【货物因不可抗力灭失的运费处理】货物在运输过程中因不可抗力灭失,未收取运费的,承运人不得请求支付运费;已经收取运费的,托运人可以请求返还。法律另有规定的,依照其规定。</p>
<p>　　第八百三十六条　【承运人留置权】托运人或者收货人不支付运费、保管费或者其他费用的,承运人对相应的运输货物享有留置权,但是当事人另有约定的除外。</p>
<p>　　第八百三十七条　【承运人提存货物】收货人不明或者收货人无正当理由拒绝受领货物的,承运人依法可以提存货物。</p>
<h4 id="第四节-多式联运合同"><a href="#第四节-多式联运合同" class="headerlink" title="第四节　多式联运合同"></a>第四节　多式联运合同</h4><p>　　第八百三十八条　【多式联运经营人应当负责履行或者组织履行合同】多式联运经营人负责履行或者组织履行多式联运合同,对全程运输享有承运人的权利,承担承运人的义务。</p>
<p>　　第八百三十九条　【多式联运合同责任制度】多式联运经营人可以与参加多式联运的各区段承运人就多式联运合同的各区段运输约定相互之间的责任;但是,该约定不影响多式联运经营人对全程运输承担的义务。</p>
<p>　　第八百四十条　【多式联运单据】多式联运经营人收到托运人交付的货物时,应当签发多式联运单据。按照托运人的要求,多式联运单据可以是可转让单据,也可以是不可转让单据。</p>
<p>　　第八百四十一条　【托运人承担过错责任】因托运人托运货物时的过错造成多式联运经营人损失的,即使托运人已经转让多式联运单据,托运人仍然应当承担赔偿责任。</p>
<p>　　第八百四十二条　【多式联运经营人赔偿责任的法律适用】货物的毁损、灭失发生于多式联运的某一运输区段的,多式联运经营人的赔偿责任和责任限额,适用调整该区段运输方式的有关法律规定;货物毁损、灭失发生的运输区段不能确定的,依照本章规定承担赔偿责任。</p>
<h3 id="第二十章-技-术-合-同"><a href="#第二十章-技-术-合-同" class="headerlink" title="第二十章　技 术 合 同"></a>第二十章　技 术 合 同</h3><h4 id="第一节-一-般-规-定-5"><a href="#第一节-一-般-规-定-5" class="headerlink" title="第一节　一 般 规 定"></a>第一节　一 般 规 定</h4><p>　　第八百四十三条　【技术合同定义】技术合同是当事人就技术开发、转让、许可、咨询或者服务订立的确立相互之间权利和义务的合同。</p>
<p>　　第八百四十四条　【技术合同订立的目的】订立技术合同,应当有利于知识产权的保护和科学技术的进步,促进科学技术成果的研发、转化、应用和推广。</p>
<p>　　第八百四十五条　【技术合同主要条款】技术合同的内容一般包括项目的名称,标的的内容、范围和要求,履行的计划、地点和方式,技术信息和资料的保密,技术成果的归属和收益的分配办法,验收标准和方法,名词和术语的解释等条款。</p>
<p>　　与履行合同有关的技术背景资料、可行性论证和技术评价报告、项目任务书和计划书、技术标准、技术规范、原始设计和工艺文件,以及其他技术文档,按照当事人的约定可以作为合同的组成部分。</p>
<p>　　技术合同涉及专利的,应当注明发明创造的名称、专利申请人和专利权人、申请日期、申请号、专利号以及专利权的有效期限。</p>
<p>　　第八百四十六条　【技术合同价款、报酬及使用费】技术合同价款、报酬或者使用费的支付方式由当事人约定,可以采取一次总算、一次总付或者一次总算、分期支付,也可以采取提成支付或者提成支付附加预付入门费的方式。</p>
<p>　　约定提成支付的,可以按照产品价格、实施专利和使用技术秘密后新增的产值、利润或者产品销售额的一定比例提成,也可以按照约定的其他方式计算。提成支付的比例可以采取固定比例、逐年递增比例或者逐年递减比例。</p>
<p>　　约定提成支付的,当事人可以约定查阅有关会计账目的办法。</p>
<p>　　第八百四十七条　【职务技术成果的财产权权属】职务技术成果的使用权、转让权属于法人或者非法人组织的,法人或者非法人组织可以就该项职务技术成果订立技术合同。法人或者非法人组织订立技术合同转让职务技术成果时,职务技术成果的完成人享有以同等条件优先受让的权利。</p>
<p>　　职务技术成果是执行法人或者非法人组织的工作任务,或者主要是利用法人或者非法人组织的物质技术条件所完成的技术成果。</p>
<p>　　第八百四十八条　【非职务技术成果的财产权权属】非职务技术成果的使用权、转让权属于完成技术成果的个人,完成技术成果的个人可以就该项非职务技术成果订立技术合同。</p>
<p>　　第八百四十九条　【技术成果的人身权归属】完成技术成果的个人享有在有关技术成果文件上写明自己是技术成果完成者的权利和取得荣誉证书、奖励的权利。</p>
<p>　　第八百五十条　【技术合同无效】非法垄断技术或者侵害他人技术成果的技术合同无效。</p>
<h4 id="第二节-技术开发合同"><a href="#第二节-技术开发合同" class="headerlink" title="第二节　技术开发合同"></a>第二节　技术开发合同</h4><p>　　第八百五十一条　【技术开发合同定义及合同形式】技术开发合同是当事人之间就新技术、新产品、新工艺、新品种或者新材料及其系统的研究开发所订立的合同。</p>
<p>　　技术开发合同包括委托开发合同和合作开发合同。</p>
<p>　　技术开发合同应当采用书面形式。</p>
<p>　　当事人之间就具有实用价值的科技成果实施转化订立的合同,参照适用技术开发合同的有关规定。</p>
<p>　　第八百五十二条　【委托开发合同的委托人义务】委托开发合同的委托人应当按照约定支付研究开发经费和报酬,提供技术资料,提出研究开发要求,完成协作事项,接受研究开发成果。</p>
<p>　　第八百五十三条　【委托开发合同的研究开发人义务】委托开发合同的研究开发人应当按照约定制定和实施研究开发计划,合理使用研究开发经费,按期完成研究开发工作,交付研究开发成果,提供有关的技术资料和必要的技术指导,帮助委托人掌握研究开发成果。</p>
<p>　　第八百五十四条　【委托开发合同的违约责任】委托开发合同的当事人违反约定造成研究开发工作停滞、延误或者失败的,应当承担违约责任。</p>
<p>　　第八百五十五条　【合作开发合同的当事人主要义务】合作开发合同的当事人应当按照约定进行投资,包括以技术进行投资,分工参与研究开发工作,协作配合研究开发工作。</p>
<p>　　第八百五十六条　【合作开发合同的违约责任】合作开发合同的当事人违反约定造成研究开发工作停滞、延误或者失败的,应当承担违约责任。</p>
<p>　　第八百五十七条　【技术开发合同解除】作为技术开发合同标的的技术已经由他人公开,致使技术开发合同的履行没有意义的,当事人可以解除合同。</p>
<p>　　第八百五十八条　【技术开发合同风险负担及通知义务】技术开发合同履行过程中,因出现无法克服的技术困难,致使研究开发失败或者部分失败的,该风险由当事人约定;没有约定或者约定不明确,依据本法第五百一十条的规定仍不能确定的,风险由当事人合理分担。</p>
<p>　　当事人一方发现前款规定的可能致使研究开发失败或者部分失败的情形时,应当及时通知另一方并采取适当措施减少损失;没有及时通知并采取适当措施,致使损失扩大的,应当就扩大的损失承担责任。</p>
<p>　　第八百五十九条　【委托开发合同的技术成果归属】委托开发完成的发明创造,除法律另有规定或者当事人另有约定外,申请专利的权利属于研究开发人。研究开发人取得专利权的,委托人可以依法实施该专利。</p>
<p>　　研究开发人转让专利申请权的,委托人享有以同等条件优先受让的权利。</p>
<p>　　第八百六十条　【合作开发合同的技术成果归属】合作开发完成的发明创造,申请专利的权利属于合作开发的当事人共有;当事人一方转让其共有的专利申请权的,其他各方享有以同等条件优先受让的权利。但是,当事人另有约定的除外。</p>
<p>　　合作开发的当事人一方声明放弃其共有的专利申请权的,除当事人另有约定外,可以由另一方单独申请或者由其他各方共同申请。申请人取得专利权的,放弃专利申请权的一方可以免费实施该专利。</p>
<p>　　合作开发的当事人一方不同意申请专利的,另一方或者其他各方不得申请专利。</p>
<p>　　第八百六十一条　【技术秘密成果归属与分享】委托开发或者合作开发完成的技术秘密成果的使用权、转让权以及收益的分配办法,由当事人约定;没有约定或者约定不明确,依据本法第五百一十条的规定仍不能确定的,在没有相同技术方案被授予专利权前,当事人均有使用和转让的权利。但是,委托开发的研究开发人不得在向委托人交付研究开发成果之前,将研究开发成果转让给第三人。</p>
<h4 id="第三节-技术转让合同和技术许可合同"><a href="#第三节-技术转让合同和技术许可合同" class="headerlink" title="第三节　技术转让合同和技术许可合同"></a>第三节　技术转让合同和技术许可合同</h4><p>　　第八百六十二条　【技术转让合同和技术许可合同定义】技术转让合同是合法拥有技术的权利人,将现有特定的专利、专利申请、技术秘密的相关权利让与他人所订立的合同。</p>
<p>　　技术许可合同是合法拥有技术的权利人,将现有特定的专利、技术秘密的相关权利许可他人实施、使用所订立的合同。</p>
<p>　　技术转让合同和技术许可合同中关于提供实施技术的专用设备、原材料或者提供有关的技术咨询、技术服务的约定,属于合同的组成部分。</p>
<p>　　第八百六十三条　【技术转让合同和技术许可合同类型和形式】技术转让合同包括专利权转让、专利申请权转让、技术秘密转让等合同。</p>
<p>　　技术许可合同包括专利实施许可、技术秘密使用许可等合同。</p>
<p>　　技术转让合同和技术许可合同应当采用书面形式。</p>
<p>　　第八百六十四条　【技术转让合同和技术许可合同的限制性条款】技术转让合同和技术许可合同可以约定实施专利或者使用技术秘密的范围,但是不得限制技术竞争和技术发展。</p>
<p>　　第八百六十五条　【专利实施许可合同限制】专利实施许可合同仅在该专利权的存续期限内有效。专利权有效期限届满或者专利权被宣告无效的,专利权人不得就该专利与他人订立专利实施许可合同。</p>
<p>　　第八百六十六条　【专利实施许可合同许可人主要义务】专利实施许可合同的许可人应当按照约定许可被许可人实施专利,交付实施专利有关的技术资料,提供必要的技术指导。</p>
<p>　　第八百六十七条　【专利实施许可合同被许可人主要义务】专利实施许可合同的被许可人应当按照约定实施专利,不得许可约定以外的第三人实施该专利,并按照约定支付使用费。</p>
<p>　　第八百六十八条　【技术秘密让与人和许可人主要义务】技术秘密转让合同的让与人和技术秘密使用许可合同的许可人应当按照约定提供技术资料,进行技术指导,保证技术的实用性、可靠性,承担保密义务。</p>
<p>　　前款规定的保密义务,不限制许可人申请专利,但是当事人另有约定的除外。</p>
<p>　　第八百六十九条　【技术秘密受让人和被许可人主要义务】技术秘密转让合同的受让人和技术秘密使用许可合同的被许可人应当按照约定使用技术,支付转让费、使用费,承担保密义务。</p>
<p>　　第八百七十条　【技术转让合同让与人和技术许可合同许可人保证义务】技术转让合同的让与人和技术许可合同的许可人应当保证自己是所提供的技术的合法拥有者,并保证所提供的技术完整、无误、有效,能够达到约定的目标。</p>
<p>　　第八百七十一条　【技术转让合同受让人和技术许可合同被许可人保密义务】技术转让合同的受让人和技术许可合同的被许可人应当按照约定的范围和期限,对让与人、许可人提供的技术中尚未公开的秘密部分,承担保密义务。</p>
<p>　　第八百七十二条　【许可人和让与人违约责任】许可人未按照约定许可技术的,应当返还部分或者全部使用费,并应当承担违约责任;实施专利或者使用技术秘密超越约定的范围的,违反约定擅自许可第三人实施该项专利或者使用该项技术秘密的,应当停止违约行为,承担违约责任;违反约定的保密义务的,应当承担违约责任。</p>
<p>　　让与人承担违约责任,参照适用前款规定。</p>
<p>　　第八百七十三条　【被许可人和受让人违约责任】被许可人未按照约定支付使用费的,应当补交使用费并按照约定支付违约金;不补交使用费或者支付违约金的,应当停止实施专利或者使用技术秘密,交还技术资料,承担违约责任;实施专利或者使用技术秘密超越约定的范围的,未经许可人同意擅自许可第三人实施该专利或者使用该技术秘密的,应当停止违约行为,承担违约责任;违反约定的保密义务的,应当承担违约责任。</p>
<p>　　受让人承担违约责任,参照适用前款规定。</p>
<p>　　第八百七十四条　【受让人和被许可人侵权责任】受让人或者被许可人按照约定实施专利、使用技术秘密侵害他人合法权益的,由让与人或者许可人承担责任,但是当事人另有约定的除外。</p>
<p>　　第八百七十五条　【后续技术成果的归属与分享】当事人可以按照互利的原则,在合同中约定实施专利、使用技术秘密后续改进的技术成果的分享办法;没有约定或者约定不明确,依据本法第五百一十条的规定仍不能确定的,一方后续改进的技术成果,其他各方无权分享。</p>
<p>　　第八百七十六条　【其他知识产权的转让和许可】集成电路布图设计专有权、植物新品种权、计算机软件著作权等其他知识产权的转让和许可,参照适用本节的有关规定。</p>
<p>　　第八百七十七条　【技术进出口合同或者专利、专利申请合同法律适用】法律、行政法规对技术进出口合同或者专利、专利申请合同另有规定的,依照其规定。</p>
<h4 id="第四节-技术咨询合同和技术服务合同"><a href="#第四节-技术咨询合同和技术服务合同" class="headerlink" title="第四节　技术咨询合同和技术服务合同"></a>第四节　技术咨询合同和技术服务合同</h4><p>　　第八百七十八条　【技术咨询合同和技术服务合同定义】技术咨询合同是当事人一方以技术知识为对方就特定技术项目提供可行性论证、技术预测、专题技术调查、分析评价报告等所订立的合同。</p>
<p>　　技术服务合同是当事人一方以技术知识为对方解决特定技术问题所订立的合同,不包括承揽合同和建设工程合同。</p>
<p>　　第八百七十九条　【技术咨询合同委托人义务】技术咨询合同的委托人应当按照约定阐明咨询的问题,提供技术背景材料及有关技术资料,接受受托人的工作成果,支付报酬。</p>
<p>　　第八百八十条　【技术咨询合同受托人义务】技术咨询合同的受托人应当按照约定的期限完成咨询报告或者解答问题,提出的咨询报告应当达到约定的要求。</p>
<p>　　第八百八十一条　【技术咨询合同的违约责任】技术咨询合同的委托人未按照约定提供必要的资料,影响工作进度和质量,不接受或者逾期接受工作成果的,支付的报酬不得追回,未支付的报酬应当支付。</p>
<p>　　技术咨询合同的受托人未按期提出咨询报告或者提出的咨询报告不符合约定的,应当承担减收或者免收报酬等违约责任。</p>
<p>　　技术咨询合同的委托人按照受托人符合约定要求的咨询报告和意见作出决策所造成的损失,由委托人承担,但是当事人另有约定的除外。</p>
<p>　　第八百八十二条　【技术服务合同委托人义务】技术服务合同的委托人应当按照约定提供工作条件,完成配合事项,接受工作成果并支付报酬。</p>
<p>　　第八百八十三条　【技术服务合同受托人义务】技术服务合同的受托人应当按照约定完成服务项目,解决技术问题,保证工作质量,并传授解决技术问题的知识。</p>
<p>　　第八百八十四条　【技术服务合同的违约责任】技术服务合同的委托人不履行合同义务或者履行合同义务不符合约定,影响工作进度和质量,不接受或者逾期接受工作成果的,支付的报酬不得追回,未支付的报酬应当支付。</p>
<p>　　技术服务合同的受托人未按照约定完成服务工作的,应当承担免收报酬等违约责任。</p>
<p>　　第八百八十五条　【创新技术成果归属】技术咨询合同、技术服务合同履行过程中,受托人利用委托人提供的技术资料和工作条件完成的新的技术成果,属于受托人。委托人利用受托人的工作成果完成的新的技术成果,属于委托人。当事人另有约定的,按照其约定。</p>
<p>　　第八百八十六条　【工作费用的负担】技术咨询合同和技术服务合同对受托人正常开展工作所需费用的负担没有约定或者约定不明确的,由受托人负担。</p>
<p>　　第八百八十七条　【技术中介合同和技术培训合同法律适用】法律、行政法规对技术中介合同、技术培训合同另有规定的,依照其规定。</p>
<h3 id="第二十一章-保-管-合-同"><a href="#第二十一章-保-管-合-同" class="headerlink" title="第二十一章　保 管 合 同"></a>第二十一章　保 管 合 同</h3><p>　　第八百八十八条　【保管合同定义】保管合同是保管人保管寄存人交付的保管物,并返还该物的合同。</p>
<p>　　寄存人到保管人处从事购物、就餐、住宿等活动,将物品存放在指定场所的,视为保管,但是当事人另有约定或者另有交易习惯的除外。</p>
<p>　　第八百八十九条　【保管费】寄存人应当按照约定向保管人支付保管费。</p>
<p>　　当事人对保管费没有约定或者约定不明确,依据本法第五百一十条的规定仍不能确定的,视为无偿保管。</p>
<p>　　第八百九十条　【保管合同成立时间】保管合同自保管物交付时成立,但是当事人另有约定的除外。</p>
<p>　　第八百九十一条　【保管人出具保管凭证义务】寄存人向保管人交付保管物的,保管人应当出具保管凭证,但是另有交易习惯的除外。</p>
<p>　　第八百九十二条　【保管人妥善保管义务】保管人应当妥善保管保管物。</p>
<p>　　当事人可以约定保管场所或者方法。除紧急情况或者为维护寄存人利益外,不得擅自改变保管场所或者方法。</p>
<p>　　第八百九十三条　【寄存人告知义务】寄存人交付的保管物有瑕疵或者根据保管物的性质需要采取特殊保管措施的,寄存人应当将有关情况告知保管人。寄存人未告知,致使保管物受损失的,保管人不承担赔偿责任;保管人因此受损失的,除保管人知道或者应当知道且未采取补救措施外,寄存人应当承担赔偿责任。</p>
<p>　　第八百九十四条　【保管人亲自保管保管物义务】保管人不得将保管物转交第三人保管,但是当事人另有约定的除外。</p>
<p>　　保管人违反前款规定,将保管物转交第三人保管,造成保管物损失的,应当承担赔偿责任。</p>
<p>　　第八百九十五条　【保管人不得使用或者许可他人使用保管物的义务】保管人不得使用或者许可第三人使用保管物,但是当事人另有约定的除外。</p>
<p>　　第八百九十六条　【保管人返还保管物及通知寄存人的义务】第三人对保管物主张权利的,除依法对保管物采取保全或者执行措施外,保管人应当履行向寄存人返还保管物的义务。</p>
<p>　　第三人对保管人提起诉讼或者对保管物申请扣押的,保管人应当及时通知寄存人。</p>
<p>　　第八百九十七条　【保管人赔偿责任】保管期内,因保管人保管不善造成保管物毁损、灭失的,保管人应当承担赔偿责任。但是,无偿保管人证明自己没有故意或者重大过失的,不承担赔偿责任。</p>
<p>　　第八百九十八条　【寄存人声明义务】寄存人寄存货币、有价证券或者其他贵重物品的,应当向保管人声明,由保管人验收或者封存;寄存人未声明的,该物品毁损、灭失后,保管人可以按照一般物品予以赔偿。</p>
<p>　　第八百九十九条　【领取保管物】寄存人可以随时领取保管物。</p>
<p>　　当事人对保管期限没有约定或者约定不明确的,保管人可以随时请求寄存人领取保管物;约定保管期限的,保管人无特别事由,不得请求寄存人提前领取保管物。</p>
<p>　　第九百条　【返还保管物及其孳息】保管期限届满或者寄存人提前领取保管物的,保管人应当将原物及其孳息归还寄存人。</p>
<p>　　第九百零一条　【消费保管合同】保管人保管货币的,可以返还相同种类、数量的货币;保管其他可替代物的,可以按照约定返还相同种类、品质、数量的物品。</p>
<p>　　第九百零二条　【保管费支付期限】有偿的保管合同,寄存人应当按照约定的期限向保管人支付保管费。</p>
<p>　　当事人对支付期限没有约定或者约定不明确,依据本法第五百一十条的规定仍不能确定的,应当在领取保管物的同时支付。</p>
<p>　　第九百零三条　【保管人留置权】寄存人未按照约定支付保管费或者其他费用的,保管人对保管物享有留置权,但是当事人另有约定的除外。</p>
<h3 id="第二十二章-仓-储-合-同"><a href="#第二十二章-仓-储-合-同" class="headerlink" title="第二十二章　仓 储 合 同"></a>第二十二章　仓 储 合 同</h3><p>　　第九百零四条　【仓储合同定义】仓储合同是保管人储存存货人交付的仓储物,存货人支付仓储费的合同。</p>
<p>　　第九百零五条　【仓储合同成立时间】仓储合同自保管人和存货人意思表示一致时成立。</p>
<p>　　第九百零六条　【危险物品和易变质物品的储存】储存易燃、易爆、有毒、有腐蚀性、有放射性等危险物品或者易变质物品的,存货人应当说明该物品的性质,提供有关资料。</p>
<p>　　存货人违反前款规定的,保管人可以拒收仓储物,也可以采取相应措施以避免损失的发生,因此产生的费用由存货人负担。</p>
<p>　　保管人储存易燃、易爆、有毒、有腐蚀性、有放射性等危险物品的,应当具备相应的保管条件。</p>
<p>　　第九百零七条　【保管人验收义务以及损害赔偿】保管人应当按照约定对入库仓储物进行验收。保管人验收时发现入库仓储物与约定不符合的,应当及时通知存货人。保管人验收后,发生仓储物的品种、数量、质量不符合约定的,保管人应当承担赔偿责任。</p>
<p>　　第九百零八条　【保管人出具仓单、入库单义务】存货人交付仓储物的,保管人应当出具仓单、入库单等凭证。</p>
<p>　　第九百零九条　【仓单】保管人应当在仓单上签名或者盖章。仓单包括下列事项:</p>
<p>　　(一)存货人的姓名或者名称和住所;</p>
<p>　　(二)仓储物的品种、数量、质量、包装及其件数和标记;</p>
<p>　　(三)仓储物的损耗标准;</p>
<p>　　(四)储存场所;</p>
<p>　　(五)储存期限;</p>
<p>　　(六)仓储费;</p>
<p>　　(七)仓储物已经办理保险的,其保险金额、期间以及保险人的名称;</p>
<p>　　(八)填发人、填发地和填发日期。</p>
<p>　　第九百一十条　【仓单性质和转让】仓单是提取仓储物的凭证。存货人或者仓单持有人在仓单上背书并经保管人签名或者盖章的,可以转让提取仓储物的权利。</p>
<p>　　第九百一十一条　【存货人或者仓单持有人有权检查仓储物或者提取样品】保管人根据存货人或者仓单持有人的要求,应当同意其检查仓储物或者提取样品。</p>
<p>　　第九百一十二条　【保管人危险通知义务】保管人发现入库仓储物有变质或者其他损坏的,应当及时通知存货人或者仓单持有人。</p>
<p>　　第九百一十三条　【保管人危险催告义务和紧急处置权】保管人发现入库仓储物有变质或者其他损坏,危及其他仓储物的安全和正常保管的,应当催告存货人或者仓单持有人作出必要的处置。因情况紧急,保管人可以作出必要的处置;但是,事后应当将该情况及时通知存货人或者仓单持有人。</p>
<p>　　第九百一十四条　【储存期限不明确时仓储物提取】当事人对储存期限没有约定或者约定不明确的,存货人或者仓单持有人可以随时提取仓储物,保管人也可以随时请求存货人或者仓单持有人提取仓储物,但是应当给予必要的准备时间。</p>
<p>　　第九百一十五条　【储存期限届满仓储物提取】储存期限届满,存货人或者仓单持有人应当凭仓单、入库单等提取仓储物。存货人或者仓单持有人逾期提取的,应当加收仓储费;提前提取的,不减收仓储费。</p>
<p>　　第九百一十六条　【逾期提取仓储物】储存期限届满,存货人或者仓单持有人不提取仓储物的,保管人可以催告其在合理期限内提取;逾期不提取的,保管人可以提存仓储物。</p>
<p>　　第九百一十七条　【保管人的损害赔偿责任】储存期内,因保管不善造成仓储物毁损、灭失的,保管人应当承担赔偿责任。因仓储物本身的自然性质、包装不符合约定或者超过有效储存期造成仓储物变质、损坏的,保管人不承担赔偿责任。</p>
<p>　　第九百一十八条　【适用保管合同】本章没有规定的,适用保管合同的有关规定。</p>
<h3 id="第二十三章-委-托-合-同"><a href="#第二十三章-委-托-合-同" class="headerlink" title="第二十三章　委 托 合 同"></a>第二十三章　委 托 合 同</h3><p>　　第九百一十九条　【委托合同定义】委托合同是委托人和受托人约定,由受托人处理委托人事务的合同。</p>
<p>　　第九百二十条　【委托权限】委托人可以特别委托受托人处理一项或者数项事务,也可以概括委托受托人处理一切事务。</p>
<p>　　第九百二十一条　【委托费用的预付和垫付】委托人应当预付处理委托事务的费用。受托人为处理委托事务垫付的必要费用,委托人应当偿还该费用并支付利息。</p>
<p>　　第九百二十二条　【受托人应当按照委托人的指示处理委托事务】受托人应当按照委托人的指示处理委托事务。需要变更委托人指示的,应当经委托人同意;因情况紧急,难以和委托人取得联系的,受托人应当妥善处理委托事务,但是事后应当将该情况及时报告委托人。</p>
<p>　　第九百二十三条　【受托人亲自处理委托事务】受托人应当亲自处理委托事务。经委托人同意,受托人可以转委托。转委托经同意或者追认的,委托人可以就委托事务直接指示转委托的第三人,受托人仅就第三人的选任及其对第三人的指示承担责任。转委托未经同意或者追认的,受托人应当对转委托的第三人的行为承担责任;但是,在紧急情况下受托人为了维护委托人的利益需要转委托第三人的除外。</p>
<p>　　第九百二十四条　【受托人的报告义务】受托人应当按照委托人的要求,报告委托事务的处理情况。委托合同终止时,受托人应当报告委托事务的结果。</p>
<p>　　第九百二十五条　【委托人介入权】受托人以自己的名义,在委托人的授权范围内与第三人订立的合同,第三人在订立合同时知道受托人与委托人之间的代理关系的,该合同直接约束委托人和第三人;但是,有确切证据证明该合同只约束受托人和第三人的除外。</p>
<p>　　第九百二十六条　【委托人对第三人的权利和第三人选择权】受托人以自己的名义与第三人订立合同时,第三人不知道受托人与委托人之间的代理关系的,受托人因第三人的原因对委托人不履行义务,受托人应当向委托人披露第三人,委托人因此可以行使受托人对第三人的权利。但是,第三人与受托人订立合同时如果知道该委托人就不会订立合同的除外。</p>
<p>　　受托人因委托人的原因对第三人不履行义务,受托人应当向第三人披露委托人,第三人因此可以选择受托人或者委托人作为相对人主张其权利,但是第三人不得变更选定的相对人。</p>
<p>　　委托人行使受托人对第三人的权利的,第三人可以向委托人主张其对受托人的抗辩。第三人选定委托人作为其相对人的,委托人可以向第三人主张其对受托人的抗辩以及受托人对第三人的抗辩。</p>
<p>　　第九百二十七条　【受托人转移利益】受托人处理委托事务取得的财产,应当转交给委托人。</p>
<p>　　第九百二十八条　【委托人支付报酬】受托人完成委托事务的,委托人应当按照约定向其支付报酬。</p>
<p>　　因不可归责于受托人的事由,委托合同解除或者委托事务不能完成的,委托人应当向受托人支付相应的报酬。当事人另有约定的,按照其约定。</p>
<p>　　第九百二十九条　【受托人的赔偿责任】有偿的委托合同,因受托人的过错造成委托人损失的,委托人可以请求赔偿损失。无偿的委托合同,因受托人的故意或者重大过失造成委托人损失的,委托人可以请求赔偿损失。</p>
<p>　　受托人超越权限造成委托人损失的,应当赔偿损失。</p>
<p>　　第九百三十条　【委托人的赔偿责任】受托人处理委托事务时,因不可归责于自己的事由受到损失的,可以向委托人请求赔偿损失。</p>
<p>　　第九百三十一条　【委托人另行委托他人处理事务】委托人经受托人同意,可以在受托人之外委托第三人处理委托事务。因此造成受托人损失的,受托人可以向委托人请求赔偿损失。</p>
<p>　　第九百三十二条　【共同委托】两个以上的受托人共同处理委托事务的,对委托人承担连带责任。</p>
<p>　　第九百三十三条　【委托合同解除】委托人或者受托人可以随时解除委托合同。因解除合同造成对方损失的,除不可归责于该当事人的事由外,无偿委托合同的解除方应当赔偿因解除时间不当造成的直接损失,有偿委托合同的解除方应当赔偿对方的直接损失和合同履行后可以获得的利益。</p>
<p>　　第九百三十四条　【委托合同终止】委托人死亡、终止或者受托人死亡、丧失民事行为能力、终止的,委托合同终止;但是,当事人另有约定或者根据委托事务的性质不宜终止的除外。</p>
<p>　　第九百三十五条　【受托人继续处理委托事务】因委托人死亡或者被宣告破产、解散,致使委托合同终止将损害委托人利益的,在委托人的继承人、遗产管理人或者清算人承受委托事务之前,受托人应当继续处理委托事务。</p>
<p>　　第九百三十六条　【受托人的继承人等的义务】因受托人死亡、丧失民事行为能力或者被宣告破产、解散,致使委托合同终止的,受托人的继承人、遗产管理人、法定代理人或者清算人应当及时通知委托人。因委托合同终止将损害委托人利益的,在委托人作出善后处理之前,受托人的继承人、遗产管理人、法定代理人或者清算人应当采取必要措施。</p>
<h3 id="第二十四章-物业服务合同"><a href="#第二十四章-物业服务合同" class="headerlink" title="第二十四章　物业服务合同"></a>第二十四章　物业服务合同</h3><p>　　第九百三十七条　【物业服务合同定义】物业服务合同是物业服务人在物业服务区域内,为业主提供建筑物及其附属设施的维修养护、环境卫生和相关秩序的管理维护等物业服务,业主支付物业费的合同。</p>
<p>　　物业服务人包括物业服务企业和其他管理人。</p>
<p>　　第九百三十八条　【物业服务合同内容和形式】物业服务合同的内容一般包括服务事项、服务质量、服务费用的标准和收取办法、维修资金的使用、服务用房的管理和使用、服务期限、服务交接等条款。</p>
<p>　　物业服务人公开作出的有利于业主的服务承诺,为物业服务合同的组成部分。</p>
<p>　　物业服务合同应当采用书面形式。</p>
<p>　　第九百三十九条　【物业服务合同的效力】建设单位依法与物业服务人订立的前期物业服务合同,以及业主委员会与业主大会依法选聘的物业服务人订立的物业服务合同,对业主具有法律约束力。</p>
<p>　　第九百四十条　【前期物业服务合同法定终止条件】建设单位依法与物业服务人订立的前期物业服务合同约定的服务期限届满前,业主委员会或者业主与新物业服务人订立的物业服务合同生效的,前期物业服务合同终止。</p>
<p>　　第九百四十一条　【物业服务转委托的条件和限制性条款】物业服务人将物业服务区域内的部分专项服务事项委托给专业性服务组织或者其他第三人的,应当就该部分专项服务事项向业主负责。</p>
<p>　　物业服务人不得将其应当提供的全部物业服务转委托给第三人,或者将全部物业服务支解后分别转委托给第三人。</p>
<p>　　第九百四十二条　【物业服务人的一般义务】物业服务人应当按照约定和物业的使用性质,妥善维修、养护、清洁、绿化和经营管理物业服务区域内的业主共有部分,维护物业服务区域内的基本秩序,采取合理措施保护业主的人身、财产安全。</p>
<p>　　对物业服务区域内违反有关治安、环保、消防等法律法规的行为,物业服务人应当及时采取合理措施制止、向有关行政主管部门报告并协助处理。</p>
<p>　　第九百四十三条　【物业服务人信息公开义务】物业服务人应当定期将服务的事项、负责人员、质量要求、收费项目、收费标准、履行情况,以及维修资金使用情况、业主共有部分的经营与收益情况等以合理方式向业主公开并向业主大会、业主委员会报告。</p>
<p>　　第九百四十四条　【业主支付物业费义务】业主应当按照约定向物业服务人支付物业费。物业服务人已经按照约定和有关规定提供服务的,业主不得以未接受或者无需接受相关物业服务为由拒绝支付物业费。</p>
<p>　　业主违反约定逾期不支付物业费的,物业服务人可以催告其在合理期限内支付;合理期限届满仍不支付的,物业服务人可以提起诉讼或者申请仲裁。</p>
<p>　　物业服务人不得采取停止供电、供水、供热、供燃气等方式催交物业费。</p>
<p>　　第九百四十五条　【业主告知、协助义务】业主装饰装修房屋的,应当事先告知物业服务人,遵守物业服务人提示的合理注意事项,并配合其进行必要的现场检查。</p>
<p>　　业主转让、出租物业专有部分、设立居住权或者依法改变共有部分用途的,应当及时将相关情况告知物业服务人。</p>
<p>　　第九百四十六条　【业主合同任意解除权】业主依照法定程序共同决定解聘物业服务人的,可以解除物业服务合同。决定解聘的,应当提前六十日书面通知物业服务人,但是合同对通知期限另有约定的除外。</p>
<p>　　依据前款规定解除合同造成物业服务人损失的,除不可归责于业主的事由外,业主应当赔偿损失。</p>
<p>　　第九百四十七条　【物业服务合同的续订】物业服务期限届满前,业主依法共同决定续聘的,应当与原物业服务人在合同期限届满前续订物业服务合同。</p>
<p>　　物业服务期限届满前,物业服务人不同意续聘的,应当在合同期限届满前九十日书面通知业主或者业主委员会,但是合同对通知期限另有约定的除外。</p>
<p>　　第九百四十八条　【不定期物业服务合同】物业服务期限届满后,业主没有依法作出续聘或者另聘物业服务人的决定,物业服务人继续提供物业服务的,原物业服务合同继续有效,但是服务期限为不定期。</p>
<p>　　当事人可以随时解除不定期物业服务合同,但是应当提前六十日书面通知对方。</p>
<p>　　第九百四十九条　【物业服务人的移交义务及法律责任】物业服务合同终止的,原物业服务人应当在约定期限或者合理期限内退出物业服务区域,将物业服务用房、相关设施、物业服务所必需的相关资料等交还给业主委员会、决定自行管理的业主或者其指定的人,配合新物业服务人做好交接工作,并如实告知物业的使用和管理状况。</p>
<p>　　原物业服务人违反前款规定的,不得请求业主支付物业服务合同终止后的物业费;造成业主损失的,应当赔偿损失。</p>
<p>　　第九百五十条　【物业服务人的后合同义务】物业服务合同终止后,在业主或者业主大会选聘的新物业服务人或者决定自行管理的业主接管之前,原物业服务人应当继续处理物业服务事项,并可以请求业主支付该期间的物业费。</p>
<h3 id="第二十五章-行-纪-合-同"><a href="#第二十五章-行-纪-合-同" class="headerlink" title="第二十五章　行 纪 合 同"></a>第二十五章　行 纪 合 同</h3><p>　　第九百五十一条　【行纪合同定义】行纪合同是行纪人以自己的名义为委托人从事贸易活动,委托人支付报酬的合同。</p>
<p>　　第九百五十二条　【行纪人承担费用的义务】行纪人处理委托事务支出的费用,由行纪人负担,但是当事人另有约定的除外。</p>
<p>　　第九百五十三条　【行纪人的保管义务】行纪人占有委托物的,应当妥善保管委托物。</p>
<p>　　第九百五十四条　【行纪人处置委托物的义务】委托物交付给行纪人时有瑕疵或者容易腐烂、变质的,经委托人同意,行纪人可以处分该物;不能与委托人及时取得联系的,行纪人可以合理处分。</p>
<p>　　第九百五十五条　【行纪人依照委托人指定价格买卖的义务】行纪人低于委托人指定的价格卖出或者高于委托人指定的价格买入的,应当经委托人同意;未经委托人同意,行纪人补偿其差额的,该买卖对委托人发生效力。</p>
<p>　　行纪人高于委托人指定的价格卖出或者低于委托人指定的价格买入的,可以按照约定增加报酬;没有约定或者约定不明确,依据本法第五百一十条的规定仍不能确定的,该利益属于委托人。</p>
<p>　　委托人对价格有特别指示的,行纪人不得违背该指示卖出或者买入。</p>
<p>　　第九百五十六条　【行纪人的介入权】行纪人卖出或者买入具有市场定价的商品,除委托人有相反的意思表示外,行纪人自己可以作为买受人或者出卖人。</p>
<p>　　行纪人有前款规定情形的,仍然可以请求委托人支付报酬。</p>
<p>　　第九百五十七条　【委托人及时受领、取回和处分委托物及行纪人提存委托物】行纪人按照约定买入委托物,委托人应当及时受领。经行纪人催告,委托人无正当理由拒绝受领的,行纪人依法可以提存委托物。</p>
<p>　　委托物不能卖出或者委托人撤回出卖,经行纪人催告,委托人不取回或者不处分该物的,行纪人依法可以提存委托物。</p>
<p>　　第九百五十八条　【行纪人的直接履行义务】行纪人与第三人订立合同的,行纪人对该合同直接享有权利、承担义务。</p>
<p>　　第三人不履行义务致使委托人受到损害的,行纪人应当承担赔偿责任,但是行纪人与委托人另有约定的除外。</p>
<p>　　第九百五十九条　【行纪人的报酬请求权及留置权】行纪人完成或者部分完成委托事务的,委托人应当向其支付相应的报酬。委托人逾期不支付报酬的,行纪人对委托物享有留置权,但是当事人另有约定的除外。</p>
<p>　　第九百六十条　【参照适用委托合同】本章没有规定的,参照适用委托合同的有关规定。</p>
<h3 id="第二十六章-中-介-合-同"><a href="#第二十六章-中-介-合-同" class="headerlink" title="第二十六章　中 介 合 同"></a>第二十六章　中 介 合 同</h3><p>　　第九百六十一条　【中介合同定义】中介合同是中介人向委托人报告订立合同的机会或者提供订立合同的媒介服务,委托人支付报酬的合同。</p>
<p>　　第九百六十二条　【中介人报告义务】中介人应当就有关订立合同的事项向委托人如实报告。</p>
<p>　　中介人故意隐瞒与订立合同有关的重要事实或者提供虚假情况,损害委托人利益的,不得请求支付报酬并应当承担赔偿责任。</p>
<p>　　第九百六十三条　【中介人报酬请求权】中介人促成合同成立的,委托人应当按照约定支付报酬。对中介人的报酬没有约定或者约定不明确,依据本法第五百一十条的规定仍不能确定的,根据中介人的劳务合理确定。因中介人提供订立合同的媒介服务而促成合同成立的,由该合同的当事人平均负担中介人的报酬。</p>
<p>　　中介人促成合同成立的,中介活动的费用,由中介人负担。</p>
<p>　　第九百六十四条　【中介人必要费用请求权】中介人未促成合同成立的,不得请求支付报酬;但是,可以按照约定请求委托人支付从事中介活动支出的必要费用。</p>
<p>　　第九百六十五条　【委托人私下与第三人订立合同后果】委托人在接受中介人的服务后,利用中介人提供的交易机会或者媒介服务,绕开中介人直接订立合同的,应当向中介人支付报酬。</p>
<p>　　第九百六十六条　【参照适用委托合同】本章没有规定的,参照适用委托合同的有关规定。</p>
<h3 id="第二十七章-合-伙-合-同"><a href="#第二十七章-合-伙-合-同" class="headerlink" title="第二十七章　合 伙 合 同"></a>第二十七章　合 伙 合 同</h3><p>　　第九百六十七条　【合伙合同定义】合伙合同是两个以上合伙人为了共同的事业目的,订立的共享利益、共担风险的协议。</p>
<p>　　第九百六十八条　【合伙人履行出资义务】合伙人应当按照约定的出资方式、数额和缴付期限,履行出资义务。</p>
<p>　　第九百六十九条　【合伙财产】合伙人的出资、因合伙事务依法取得的收益和其他财产,属于合伙财产。</p>
<p>　　合伙合同终止前,合伙人不得请求分割合伙财产。</p>
<p>　　第九百七十条　【合伙事务的执行】合伙人就合伙事务作出决定的,除合伙合同另有约定外,应当经全体合伙人一致同意。</p>
<p>　　合伙事务由全体合伙人共同执行。按照合伙合同的约定或者全体合伙人的决定,可以委托一个或者数个合伙人执行合伙事务;其他合伙人不再执行合伙事务,但是有权监督执行情况。</p>
<p>　　合伙人分别执行合伙事务的,执行事务合伙人可以对其他合伙人执行的事务提出异议;提出异议后,其他合伙人应当暂停该项事务的执行。</p>
<p>　　第九百七十一条　【执行合伙事务报酬】合伙人不得因执行合伙事务而请求支付报酬,但是合伙合同另有约定的除外。</p>
<p>　　第九百七十二条　【合伙的利润分配与亏损分担】合伙的利润分配和亏损分担,按照合伙合同的约定办理;合伙合同没有约定或者约定不明确的,由合伙人协商决定;协商不成的,由合伙人按照实缴出资比例分配、分担;无法确定出资比例的,由合伙人平均分配、分担。</p>
<p>　　第九百七十三条　【合伙人的连带责任及追偿权】合伙人对合伙债务承担连带责任。清偿合伙债务超过自己应当承担份额的合伙人,有权向其他合伙人追偿。</p>
<p>　　第九百七十四条　【合伙人转让其财产份额】除合伙合同另有约定外,合伙人向合伙人以外的人转让其全部或者部分财产份额的,须经其他合伙人一致同意。</p>
<p>　　第九百七十五条　【合伙人权利代位】合伙人的债权人不得代位行使合伙人依照本章规定和合伙合同享有的权利,但是合伙人享有的利益分配请求权除外。</p>
<p>　　第九百七十六条　【合伙期限】合伙人对合伙期限没有约定或者约定不明确,依据本法第五百一十条的规定仍不能确定的,视为不定期合伙。</p>
<p>　　合伙期限届满,合伙人继续执行合伙事务,其他合伙人没有提出异议的,原合伙合同继续有效,但是合伙期限为不定期。</p>
<p>　　合伙人可以随时解除不定期合伙合同,但是应当在合理期限之前通知其他合伙人。</p>
<p>　　第九百七十七条　【合伙合同终止】合伙人死亡、丧失民事行为能力或者终止的,合伙合同终止;但是,合伙合同另有约定或者根据合伙事务的性质不宜终止的除外。</p>
<p>　　第九百七十八条　【合伙剩余财产分配顺序】合伙合同终止后,合伙财产在支付因终止而产生的费用以及清偿合伙债务后有剩余的,依据本法第九百七十二条的规定进行分配。</p>
<h2 id="第三分编-准-合-同"><a href="#第三分编-准-合-同" class="headerlink" title="第三分编　准　合　同"></a>第三分编　准　合　同</h2><h3 id="第二十八章-无-因-管-理"><a href="#第二十八章-无-因-管-理" class="headerlink" title="第二十八章　无 因 管 理"></a>第二十八章　无 因 管 理</h3><p>　　第九百七十九条　【无因管理定义】管理人没有法定的或者约定的义务,为避免他人利益受损失而管理他人事务的,可以请求受益人偿还因管理事务而支出的必要费用;管理人因管理事务受到损失的,可以请求受益人给予适当补偿。</p>
<p>　　管理事务不符合受益人真实意思的,管理人不享有前款规定的权利;但是,受益人的真实意思违反法律或者违背公序良俗的除外。</p>
<p>　　第九百八十条　【受益人享有管理利益时的法律适用】管理人管理事务不属于前条规定的情形,但是受益人享有管理利益的,受益人应当在其获得的利益范围内向管理人承担前条第一款规定的义务。</p>
<p>　　第九百八十一条　【管理人适当管理义务】管理人管理他人事务,应当采取有利于受益人的方法。中断管理对受益人不利的,无正当理由不得中断。</p>
<p>　　第九百八十二条　【管理人通知义务】管理人管理他人事务,能够通知受益人的,应当及时通知受益人。管理的事务不需要紧急处理的,应当等待受益人的指示。</p>
<p>　　第九百八十三条　【管理人报告和交付义务】管理结束后,管理人应当向受益人报告管理事务的情况。管理人管理事务取得的财产,应当及时转交给受益人。</p>
<p>　　第九百八十四条　【受益人追认的法律效果】管理人管理事务经受益人事后追认的,从管理事务开始时起,适用委托合同的有关规定,但是管理人另有意思表示的除外。</p>
<h3 id="第二十九章-不-当-得-利"><a href="#第二十九章-不-当-得-利" class="headerlink" title="第二十九章　不 当 得 利"></a>第二十九章　不 当 得 利</h3><p>　　第九百八十五条　【不当得利定义】得利人没有法律根据取得不当利益的,受损失的人可以请求得利人返还取得的利益,但是有下列情形之一的除外:</p>
<p>　　(一)为履行道德义务进行的给付;</p>
<p>　　(二)债务到期之前的清偿;</p>
<p>　　(三)明知无给付义务而进行的债务清偿。</p>
<p>　　第九百八十六条　【善意得利人返还义务免除】得利人不知道且不应当知道取得的利益没有法律根据,取得的利益已经不存在的,不承担返还该利益的义务。</p>
<p>　　第九百八十七条　【恶意得利人返还义务】得利人知道或者应当知道取得的利益没有法律根据的,受损失的人可以请求得利人返还其取得的利益并依法赔偿损失。</p>
<p>　　第九百八十八条　【第三人返还义务】得利人已经将取得的利益无偿转让给第三人的,受损失的人可以请求第三人在相应范围内承担返还义务。</p>
<h1 id="第四编-人-格-权"><a href="#第四编-人-格-权" class="headerlink" title="第四编　人　格　权"></a>第四编　人　格　权</h1><h3 id="第一章-一-般-规-定-2"><a href="#第一章-一-般-规-定-2" class="headerlink" title="第一章　一 般 规 定"></a>第一章　一 般 规 定</h3><p>　　第九百八十九条　【人格权编的调整范围】本编调整因人格权的享有和保护产生的民事关系。</p>
<p>　　第九百九十条　【人格权定义】人格权是民事主体享有的生命权、身体权、健康权、姓名权、名称权、肖像权、名誉权、荣誉权、隐私权等权利。</p>
<p>　　除前款规定的人格权外,自然人享有基于人身自由、人格尊严产生的其他人格权益。</p>
<p>　　第九百九十一条　【民事主体的人格权不受侵害】民事主体的人格权受法律保护,任何组织或者个人不得侵害。</p>
<p>　　第九百九十二条　【人格权禁止性规定】人格权不得放弃、转让或者继承。</p>
<p>　　第九百九十三条　【人格标识许可使用】民事主体可以将自己的姓名、名称、肖像等许可他人使用,但是依照法律规定或者根据其性质不得许可的除外。</p>
<p>　　第九百九十四条　【死者人格利益保护】死者的姓名、肖像、名誉、荣誉、隐私、遗体等受到侵害的,其配偶、子女、父母有权依法请求行为人承担民事责任;死者没有配偶、子女且父母已经死亡的,其他近亲属有权依法请求行为人承担民事责任。</p>
<p>　　第九百九十五条　【人格权请求权】人格权受到侵害的,受害人有权依照本法和其他法律的规定请求行为人承担民事责任。受害人的停止侵害、排除妨碍、消除危险、消除影响、恢复名誉、赔礼道歉请求权,不适用诉讼时效的规定。</p>
<p>　　第九百九十六条　【精神损害赔偿请求权聚合】因当事人一方的违约行为,损害对方人格权并造成严重精神损害,受损害方选择请求其承担违约责任的,不影响受损害方请求精神损害赔偿。</p>
<p>　　第九百九十七条　【人格权行为禁令】民事主体有证据证明行为人正在实施或者即将实施侵害其人格权的违法行为,不及时制止将使其合法权益受到难以弥补的损害的,有权依法向人民法院申请采取责令行为人停止有关行为的措施。</p>
<p>　　第九百九十八条　【认定人格侵权责任应考虑的主要因素】认定行为人承担侵害除生命权、身体权和健康权外的人格权的民事责任,应当考虑行为人和受害人的职业、影响范围、过错程度,以及行为的目的、方式、后果等因素。</p>
<p>　　第九百九十九条　【人格权的合理使用】为公共利益实施新闻报道、舆论监督等行为的,可以合理使用民事主体的姓名、名称、肖像、个人信息等;使用不合理侵害民事主体人格权的,应当依法承担民事责任。</p>
<p>　　第一千条　【消除影响、恢复名誉、赔礼道歉等民事责任的承担】行为人因侵害人格权承担消除影响、恢复名誉、赔礼道歉等民事责任的,应当与行为的具体方式和造成的影响范围相当。</p>
<p>　　行为人拒不承担前款规定的民事责任的,人民法院可以采取在报刊、网络等媒体上发布公告或者公布生效裁判文书等方式执行,产生的费用由行为人负担。</p>
<p>　　第一千零一条　【身份权的法律适用】对自然人因婚姻家庭关系等产生的身份权利的保护,适用本法第一编、第五编和其他法律的相关规定;没有规定的,可以根据其性质参照适用本编人格权保护的有关规定。</p>
<h3 id="第二章-生命权、身体权和健康权"><a href="#第二章-生命权、身体权和健康权" class="headerlink" title="第二章　生命权、身体权和健康权"></a>第二章　生命权、身体权和健康权</h3><p>　　第一千零二条　【生命权】自然人享有生命权。自然人的生命安全和生命尊严受法律保护。任何组织或者个人不得侵害他人的生命权。</p>
<p>　　第一千零三条　【身体权】自然人享有身体权。自然人的身体完整和行动自由受法律保护。任何组织或者个人不得侵害他人的身体权。</p>
<p>　　第一千零四条　【健康权】自然人享有健康权。自然人的身心健康受法律保护。任何组织或者个人不得侵害他人的健康权。</p>
<p>　　第一千零五条　【法定救助义务】自然人的生命权、身体权、健康权受到侵害或者处于其他危难情形的,负有法定救助义务的组织或者个人应当及时施救。</p>
<p>　　第一千零六条　【人体捐献】完全民事行为能力人有权依法自主决定无偿捐献其人体细胞、人体组织、人体器官、遗体。任何组织或者个人不得强迫、欺骗、利诱其捐献。</p>
<p>　　完全民事行为能力人依据前款规定同意捐献的,应当采用书面形式,也可以订立遗嘱。</p>
<p>　　自然人生前未表示不同意捐献的,该自然人死亡后,其配偶、成年子女、父母可以共同决定捐献,决定捐献应当采用书面形式。</p>
<p>　　第一千零七条　【禁止人体买卖】禁止以任何形式买卖人体细胞、人体组织、人体器官、遗体。</p>
<p>　　违反前款规定的买卖行为无效。</p>
<p>　　第一千零八条　【人体临床试验】为研制新药、医疗器械或者发展新的预防和治疗方法,需要进行临床试验的,应当依法经相关主管部门批准并经伦理委员会审查同意,向受试者或者受试者的监护人告知试验目的、用途和可能产生的风险等详细情况,并经其书面同意。</p>
<p>　　进行临床试验的,不得向受试者收取试验费用。</p>
<p>　　第一千零九条　【从事人体基因、人体胚胎等有关的医学和科研活动时的义务】从事与人体基因、人体胚胎等有关的医学和科研活动,应当遵守法律、行政法规和国家有关规定,不得危害人体健康,不得违背伦理道德,不得损害公共利益。</p>
<p>　　第一千零一十条　【性骚扰】违背他人意愿,以言语、文字、图像、肢体行为等方式对他人实施性骚扰的,受害人有权依法请求行为人承担民事责任。</p>
<p>　　机关、企业、学校等单位应当采取合理的预防、受理投诉、调查处置等措施,防止和制止利用职权、从属关系等实施性骚扰。</p>
<p>　　第一千零一十一条　【侵害行动自由和非法搜查身体】以非法拘禁等方式剥夺、限制他人的行动自由,或者非法搜查他人身体的,受害人有权依法请求行为人承担民事责任。</p>
<h3 id="第三章-姓名权和名称权"><a href="#第三章-姓名权和名称权" class="headerlink" title="第三章　姓名权和名称权"></a>第三章　姓名权和名称权</h3><p>　　第一千零一十二条　【姓名权】自然人享有姓名权,有权依法决定、使用、变更或者许可他人使用自己的姓名,但是不得违背公序良俗。</p>
<p>　　第一千零一十三条　【名称权】法人、非法人组织享有名称权,有权依法决定、使用、变更、转让或者许可他人使用自己的名称。</p>
<p>　　第一千零一十四条　【姓名权或名称权不得被非法侵害】任何组织或者个人不得以干涉、盗用、假冒等方式侵害他人的姓名权或者名称权。</p>
<p>　　第一千零一十五条　【自然人选取姓氏】自然人应当随父姓或者母姓,但是有下列情形之一的,可以在父姓和母姓之外选取姓氏:</p>
<p>　　(一)选取其他直系长辈血亲的姓氏;</p>
<p>　　(二)因由法定扶养人以外的人扶养而选取扶养人姓氏;</p>
<p>　　(三)有不违背公序良俗的其他正当理由。</p>
<p>　　少数民族自然人的姓氏可以遵从本民族的文化传统和风俗习惯。</p>
<p>　　第一千零一十六条　【姓名、名称的登记及其变更不影响之前民事法律行为效力】自然人决定、变更姓名,或者法人、非法人组织决定、变更、转让名称的,应当依法向有关机关办理登记手续,但是法律另有规定的除外。</p>
<p>　　民事主体变更姓名、名称的,变更前实施的民事法律行为对其具有法律约束力。</p>
<p>　　第一千零一十七条　【笔名、艺名等的保护】具有一定社会知名度,被他人使用足以造成公众混淆的笔名、艺名、网名、译名、字号、姓名和名称的简称等,参照适用姓名权和名称权保护的有关规定。</p>
<h3 id="第四章-肖-像-权"><a href="#第四章-肖-像-权" class="headerlink" title="第四章　肖　像　权"></a>第四章　肖　像　权</h3><p>　　第一千零一十八条　【肖像权】自然人享有肖像权,有权依法制作、使用、公开或者许可他人使用自己的肖像。</p>
<p>　　肖像是通过影像、雕塑、绘画等方式在一定载体上所反映的特定自然人可以被识别的外部形象。</p>
<p>　　第一千零一十九条　【肖像权消极权能】任何组织或者个人不得以丑化、污损,或者利用信息技术手段伪造等方式侵害他人的肖像权。未经肖像权人同意,不得制作、使用、公开肖像权人的肖像,但是法律另有规定的除外。</p>
<p>　　未经肖像权人同意,肖像作品权利人不得以发表、复制、发行、出租、展览等方式使用或者公开肖像权人的肖像。</p>
<p>　　第一千零二十条　【肖像权的合理使用】合理实施下列行为的,可以不经肖像权人同意:</p>
<p>　　(一)为个人学习、艺术欣赏、课堂教学或者科学研究,在必要范围内使用肖像权人已经公开的肖像;</p>
<p>　　(二)为实施新闻报道,不可避免地制作、使用、公开肖像权人的肖像;</p>
<p>　　(三)为依法履行职责,国家机关在必要范围内制作、使用、公开肖像权人的肖像;</p>
<p>　　(四)为展示特定公共环境,不可避免地制作、使用、公开肖像权人的肖像;</p>
<p>　　(五)为维护公共利益或者肖像权人合法权益,制作、使用、公开肖像权人的肖像的其他行为。</p>
<p>　　第一千零二十一条　【肖像许可使用合同解释规则】当事人对肖像许可使用合同中关于肖像使用条款的理解有争议的,应当作出有利于肖像权人的解释。</p>
<p>　　第一千零二十二条　【肖像许可使用合同解除权】当事人对肖像许可使用期限没有约定或者约定不明确的,任何一方当事人可以随时解除肖像许可使用合同,但是应当在合理期限之前通知对方。</p>
<p>　　当事人对肖像许可使用期限有明确约定,肖像权人有正当理由的,可以解除肖像许可使用合同,但是应当在合理期限之前通知对方。因解除合同造成对方损失的,除不可归责于肖像权人的事由外,应当赔偿损失。</p>
<p>　　第一千零二十三条　【姓名许可和声音保护的参照适用】对姓名等的许可使用,参照适用肖像许可使用的有关规定。</p>
<p>　　对自然人声音的保护,参照适用肖像权保护的有关规定。</p>
<h3 id="第五章-名誉权和荣誉权"><a href="#第五章-名誉权和荣誉权" class="headerlink" title="第五章　名誉权和荣誉权"></a>第五章　名誉权和荣誉权</h3><p>　　第一千零二十四条　【名誉权】民事主体享有名誉权。任何组织或者个人不得以侮辱、诽谤等方式侵害他人的名誉权。</p>
<p>　　名誉是对民事主体的品德、声望、才能、信用等的社会评价。</p>
<p>　　第一千零二十五条　【名誉权的限制】行为人为公共利益实施新闻报道、舆论监督等行为,影响他人名誉的,不承担民事责任,但是有下列情形之一的除外:</p>
<p>　　(一)捏造、歪曲事实;</p>
<p>　　(二)对他人提供的严重失实内容未尽到合理核实义务;</p>
<p>　　(三)使用侮辱性言辞等贬损他人名誉。</p>
<p>　　第一千零二十六条　【合理核实义务的认定因素】认定行为人是否尽到前条第二项规定的合理核实义务,应当考虑下列因素:</p>
<p>　　(一)内容来源的可信度;</p>
<p>　　(二)对明显可能引发争议的内容是否进行了必要的调查;</p>
<p>　　(三)内容的时限性;</p>
<p>　　(四)内容与公序良俗的关联性;</p>
<p>　　(五)受害人名誉受贬损的可能性;</p>
<p>　　(六)核实能力和核实成本。</p>
<p>　　第一千零二十七条　【作品侵害名誉权】行为人发表的文学、艺术作品以真人真事或者特定人为描述对象,含有侮辱、诽谤内容,侵害他人名誉权的,受害人有权依法请求该行为人承担民事责任。</p>
<p>　　行为人发表的文学、艺术作品不以特定人为描述对象,仅其中的情节与该特定人的情况相似的,不承担民事责任。</p>
<p>　　第一千零二十八条　【媒体报道内容失实侵害名誉权的补救】民事主体有证据证明报刊、网络等媒体报道的内容失实,侵害其名誉权的,有权请求该媒体及时采取更正或者删除等必要措施。</p>
<p>　　第一千零二十九条　【信用评价】民事主体可以依法查询自己的信用评价;发现信用评价不当的,有权提出异议并请求采取更正、删除等必要措施。信用评价人应当及时核查,经核查属实的,应当及时采取必要措施。</p>
<p>　　第一千零三十条　【民事主体与信用信息处理者之间关系的法律适用】民事主体与征信机构等信用信息处理者之间的关系,适用本编有关个人信息保护的规定和其他法律、行政法规的有关规定。</p>
<p>　　第一千零三十一条　【荣誉权】民事主体享有荣誉权。任何组织或者个人不得非法剥夺他人的荣誉称号,不得诋毁、贬损他人的荣誉。</p>
<p>　　获得的荣誉称号应当记载而没有记载的,民事主体可以请求记载;获得的荣誉称号记载错误的,民事主体可以请求更正。</p>
<h3 id="第六章-隐私权和个人信息保护"><a href="#第六章-隐私权和个人信息保护" class="headerlink" title="第六章　隐私权和个人信息保护"></a>第六章　隐私权和个人信息保护</h3><p>　　第一千零三十二条　【隐私权】自然人享有隐私权。任何组织或者个人不得以刺探、侵扰、泄露、公开等方式侵害他人的隐私权。</p>
<p>　　隐私是自然人的私人生活安宁和不愿为他人知晓的私密空间、私密活动、私密信息。</p>
<p>　　第一千零三十三条　【隐私权侵害行为】除法律另有规定或者权利人明确同意外,任何组织或者个人不得实施下列行为:</p>
<p>　　(一)以电话、短信、即时通讯工具、电子邮件、传单等方式侵扰他人的私人生活安宁;</p>
<p>　　(二)进入、拍摄、窥视他人的住宅、宾馆房间等私密空间;</p>
<p>　　(三)拍摄、窥视、窃听、公开他人的私密活动;</p>
<p>　　(四)拍摄、窥视他人身体的私密部位;</p>
<p>　　(五)处理他人的私密信息;</p>
<p>　　(六)以其他方式侵害他人的隐私权。</p>
<p>　　第一千零三十四条　【个人信息的定义】自然人的个人信息受法律保护。</p>
<p>　　个人信息是以电子或者其他方式记录的能够单独或者与其他信息结合识别特定自然人的各种信息,包括自然人的姓名、出生日期、身份证件号码、生物识别信息、住址、电话号码、电子邮箱、健康信息、行踪信息等。</p>
<p>　　个人信息中的私密信息,适用有关隐私权的规定;没有规定的,适用有关个人信息保护的规定。</p>
<p>　　第一千零三十五条　【个人信息处理的原则和条件】处理个人信息的,应当遵循合法、正当、必要原则,不得过度处理,并符合下列条件:</p>
<p>　　(一)征得该自然人或者其监护人同意,但是法律、行政法规另有规定的除外;</p>
<p>　　(二)公开处理信息的规则;</p>
<p>　　(三)明示处理信息的目的、方式和范围;</p>
<p>　　(四)不违反法律、行政法规的规定和双方的约定。</p>
<p>　　个人信息的处理包括个人信息的收集、存储、使用、加工、传输、提供、公开等。</p>
<p>　　第一千零三十六条　【处理个人信息免责事由】处理个人信息,有下列情形之一的,行为人不承担民事责任:</p>
<p>　　(一)在该自然人或者其监护人同意的范围内合理实施的行为;</p>
<p>　　(二)合理处理该自然人自行公开的或者其他已经合法公开的信息,但是该自然人明确拒绝或者处理该信息侵害其重大利益的除外;</p>
<p>　　(三)为维护公共利益或者该自然人合法权益,合理实施的其他行为。</p>
<p>　　第一千零三十七条　【个人信息主体的权利】自然人可以依法向信息处理者查阅或者复制其个人信息;发现信息有错误的,有权提出异议并请求及时采取更正等必要措施。</p>
<p>　　自然人发现信息处理者违反法律、行政法规的规定或者双方的约定处理其个人信息的,有权请求信息处理者及时删除。</p>
<p>　　第一千零三十八条　【信息处理者的信息安全保障义务】信息处理者不得泄露或者篡改其收集、存储的个人信息;未经自然人同意,不得向他人非法提供其个人信息,但是经过加工无法识别特定个人且不能复原的除外。</p>
<p>　　信息处理者应当采取技术措施和其他必要措施,确保其收集、存储的个人信息安全,防止信息泄露、篡改、丢失;发生或者可能发生个人信息泄露、篡改、丢失的,应当及时采取补救措施,按照规定告知自然人并向有关主管部门报告。</p>
<p>　　第一千零三十九条　【国家机关、承担行政职能的法定机构及其工作人员的保密义务】国家机关、承担行政职能的法定机构及其工作人员对于履行职责过程中知悉的自然人的隐私和个人信息,应当予以保密,不得泄露或者向他人非法提供。</p>
<p>　　 </p>
<h1 id="第五编-婚-姻-家-庭"><a href="#第五编-婚-姻-家-庭" class="headerlink" title="第五编　婚 姻 家 庭"></a>第五编　婚 姻 家 庭</h1><h3 id="第一章-一-般-规-定-3"><a href="#第一章-一-般-规-定-3" class="headerlink" title="第一章　一 般 规 定"></a>第一章　一 般 规 定</h3><p>　　第一千零四十条　【婚姻家庭编的调整范围】本编调整因婚姻家庭产生的民事关系。</p>
<p>　　第一千零四十一条　【基本原则】婚姻家庭受国家保护。</p>
<p>　　实行婚姻自由、一夫一妻、男女平等的婚姻制度。</p>
<p>　　保护妇女、未成年人、老年人、残疾人的合法权益。</p>
<p>　　第一千零四十二条　【婚姻家庭的禁止性规定】禁止包办、买卖婚姻和其他干涉婚姻自由的行为。禁止借婚姻索取财物。</p>
<p>　　禁止重婚。禁止有配偶者与他人同居。</p>
<p>　　禁止家庭暴力。禁止家庭成员间的虐待和遗弃。</p>
<p>　　第一千零四十三条　【婚姻家庭的倡导性规定】家庭应当树立优良家风,弘扬家庭美德,重视家庭文明建设。</p>
<p>　　夫妻应当互相忠实,互相尊重,互相关爱;家庭成员应当敬老爱幼,互相帮助,维护平等、和睦、文明的婚姻家庭关系。</p>
<p>　　第一千零四十四条　【收养的基本原则】收养应当遵循最有利于被收养人的原则,保障被收养人和收养人的合法权益。</p>
<p>　　禁止借收养名义买卖未成年人。</p>
<p>　　第一千零四十五条　【亲属、近亲属及家庭成员】亲属包括配偶、血亲和姻亲。</p>
<p>　　配偶、父母、子女、兄弟姐妹、祖父母、外祖父母、孙子女、外孙子女为近亲属。</p>
<p>　　配偶、父母、子女和其他共同生活的近亲属为家庭成员。</p>
<h3 id="第二章-结-婚"><a href="#第二章-结-婚" class="headerlink" title="第二章　结　　婚"></a>第二章　结　　婚</h3><p>　　第一千零四十六条　【结婚自愿】结婚应当男女双方完全自愿,禁止任何一方对另一方加以强迫,禁止任何组织或者个人加以干涉。</p>
<p>　　第一千零四十七条　【法定结婚年龄】结婚年龄,男不得早于二十二周岁,女不得早于二十周岁。</p>
<p>　　第一千零四十八条　【禁止结婚的情形】直系血亲或者三代以内的旁系血亲禁止结婚。</p>
<p>　　第一千零四十九条　【结婚登记】要求结婚的男女双方应当亲自到婚姻登记机关申请结婚登记。符合本法规定的,予以登记,发给结婚证。完成结婚登记,即确立婚姻关系。未办理结婚登记的,应当补办登记。</p>
<p>　　第一千零五十条　【婚后双方互为家庭成员】登记结婚后,按照男女双方约定,女方可以成为男方家庭的成员,男方可以成为女方家庭的成员。</p>
<p>　　第一千零五十一条　【婚姻无效的情形】有下列情形之一的,婚姻无效:</p>
<p>　　(一)重婚;</p>
<p>　　(二)有禁止结婚的亲属关系;</p>
<p>　　(三)未到法定婚龄。</p>
<p>　　第一千零五十二条　【胁迫婚姻】因胁迫结婚的,受胁迫的一方可以向人民法院请求撤销婚姻。</p>
<p>　　请求撤销婚姻的,应当自胁迫行为终止之日起一年内提出。</p>
<p>　　被非法限制人身自由的当事人请求撤销婚姻的,应当自恢复人身自由之日起一年内提出。</p>
<p>　　第一千零五十三条　【隐瞒疾病的可撤销婚姻】一方患有重大疾病的,应当在结婚登记前如实告知另一方;不如实告知的,另一方可以向人民法院请求撤销婚姻。</p>
<p>　　请求撤销婚姻的,应当自知道或者应当知道撤销事由之日起一年内提出。</p>
<p>　　第一千零五十四条　【婚姻无效和被撤销的法律后果】无效的或者被撤销的婚姻自始没有法律约束力,当事人不具有夫妻的权利和义务。同居期间所得的财产,由当事人协议处理;协议不成的,由人民法院根据照顾无过错方的原则判决。对重婚导致的无效婚姻的财产处理,不得侵害合法婚姻当事人的财产权益。当事人所生的子女,适用本法关于父母子女的规定。</p>
<p>　　婚姻无效或者被撤销的,无过错方有权请求损害赔偿。</p>
<h3 id="第三章-家-庭-关-系"><a href="#第三章-家-庭-关-系" class="headerlink" title="第三章　家 庭 关 系"></a>第三章　家 庭 关 系</h3><h4 id="第一节-夫-妻-关-系"><a href="#第一节-夫-妻-关-系" class="headerlink" title="第一节　夫 妻 关 系"></a>第一节　夫 妻 关 系</h4><p>　　第一千零五十五条　【夫妻地位平等】夫妻在婚姻家庭中地位平等。</p>
<p>　　第一千零五十六条　【夫妻姓名权】夫妻双方都有各自使用自己姓名的权利。</p>
<p>　　第一千零五十七条　【夫妻参加各种活动的自由】夫妻双方都有参加生产、工作、学习和社会活动的自由,一方不得对另一方加以限制或者干涉。</p>
<p>　　第一千零五十八条　【夫妻抚养、教育和保护子女的权利义务平等】夫妻双方平等享有对未成年子女抚养、教育和保护的权利,共同承担对未成年子女抚养、教育和保护的义务。</p>
<p>　　第一千零五十九条　【夫妻相互扶养义务】夫妻有相互扶养的义务。</p>
<p>　　需要扶养的一方,在另一方不履行扶养义务时,有要求其给付扶养费的权利。</p>
<p>　　第一千零六十条　【日常家事代理权】夫妻一方因家庭日常生活需要而实施的民事法律行为,对夫妻双方发生效力,但是夫妻一方与相对人另有约定的除外。</p>
<p>　　夫妻之间对一方可以实施的民事法律行为范围的限制,不得对抗善意相对人。</p>
<p>　　第一千零六十一条　【夫妻相互继承权】夫妻有相互继承遗产的权利。</p>
<p>　　第一千零六十二条　【夫妻共同财产】夫妻在婚姻关系存续期间所得的下列财产,为夫妻的共同财产,归夫妻共同所有:</p>
<p>　　(一)工资、奖金、劳务报酬;</p>
<p>　　(二)生产、经营、投资的收益;</p>
<p>　　(三)知识产权的收益;</p>
<p>　　(四)继承或者受赠的财产,但是本法第一千零六十三条第三项规定的除外;</p>
<p>　　(五)其他应当归共同所有的财产。</p>
<p>　　夫妻对共同财产,有平等的处理权。</p>
<p>　　第一千零六十三条　【夫妻个人财产】下列财产为夫妻一方的个人财产:</p>
<p>　　(一)一方的婚前财产;</p>
<p>　　(二)一方因受到人身损害获得的赔偿或者补偿;</p>
<p>　　(三)遗嘱或者赠与合同中确定只归一方的财产;</p>
<p>　　(四)一方专用的生活用品;</p>
<p>　　(五)其他应当归一方的财产。</p>
<p>　　第一千零六十四条　【夫妻共同债务】夫妻双方共同签名或者夫妻一方事后追认等共同意思表示所负的债务,以及夫妻一方在婚姻关系存续期间以个人名义为家庭日常生活需要所负的债务,属于夫妻共同债务。</p>
<p>　　夫妻一方在婚姻关系存续期间以个人名义超出家庭日常生活需要所负的债务,不属于夫妻共同债务;但是,债权人能够证明该债务用于夫妻共同生活、共同生产经营或者基于夫妻双方共同意思表示的除外。</p>
<p>　　第一千零六十五条　【夫妻约定财产制】男女双方可以约定婚姻关系存续期间所得的财产以及婚前财产归各自所有、共同所有或者部分各自所有、部分共同所有。约定应当采用书面形式。没有约定或者约定不明确的,适用本法第一千零六十二条、第一千零六十三条的规定。</p>
<p>　　夫妻对婚姻关系存续期间所得的财产以及婚前财产的约定,对双方具有法律约束力。</p>
<p>　　夫妻对婚姻关系存续期间所得的财产约定归各自所有,夫或者妻一方对外所负的债务,相对人知道该约定的,以夫或者妻一方的个人财产清偿。</p>
<p>　　第一千零六十六条　【婚姻关系存续期间夫妻共同财产的分割】婚姻关系存续期间,有下列情形之一的,夫妻一方可以向人民法院请求分割共同财产:</p>
<p>　　(一)一方有隐藏、转移、变卖、毁损、挥霍夫妻共同财产或者伪造夫妻共同债务等严重损害夫妻共同财产利益的行为;</p>
<p>　　(二)一方负有法定扶养义务的人患重大疾病需要医治,另一方不同意支付相关医疗费用。</p>
<h4 id="第二节-父母子女关系和其他"><a href="#第二节-父母子女关系和其他" class="headerlink" title="第二节　父母子女关系和其他"></a>第二节　父母子女关系和其他</h4><p>　　第一千零六十七条　【父母的抚养义务和子女的赡养义务】父母不履行抚养义务的,未成年子女或者不能独立生活的成年子女,有要求父母给付抚养费的权利。</p>
<p>　　成年子女不履行赡养义务的,缺乏劳动能力或者生活困难的父母,有要求成年子女给付赡养费的权利。</p>
<p>　　第一千零六十八条　【父母教育、保护未成年子女的权利义务】父母有教育、保护未成年子女的权利和义务。未成年子女造成他人损害的,父母应当依法承担民事责任。</p>
<p>　　第一千零六十九条　【子女应尊重父母的婚姻权利】子女应当尊重父母的婚姻权利,不得干涉父母离婚、再婚以及婚后的生活。子女对父母的赡养义务,不因父母的婚姻关系变化而终止。</p>
<p>　　第一千零七十条　【父母子女相互继承权】父母和子女有相互继承遗产的权利。</p>
<p>　　第一千零七十一条　【非婚生子女的权利】非婚生子女享有与婚生子女同等的权利,任何组织或者个人不得加以危害和歧视。</p>
<p>　　不直接抚养非婚生子女的生父或者生母,应当负担未成年子女或者不能独立生活的成年子女的抚养费。</p>
<p>　　第一千零七十二条　【继父母与继子女间的权利义务关系】继父母与继子女间,不得虐待或者歧视。</p>
<p>　　继父或者继母和受其抚养教育的继子女间的权利义务关系,适用本法关于父母子女关系的规定。</p>
<p>　　第一千零七十三条　【亲子关系异议之诉】对亲子关系有异议且有正当理由的,父或者母可以向人民法院提起诉讼,请求确认或者否认亲子关系。</p>
<p>　　对亲子关系有异议且有正当理由的,成年子女可以向人民法院提起诉讼,请求确认亲子关系。</p>
<p>　　第一千零七十四条　【祖孙之间的抚养、赡养义务】有负担能力的祖父母、外祖父母,对于父母已经死亡或者父母无力抚养的未成年孙子女、外孙子女,有抚养的义务。</p>
<p>　　有负担能力的孙子女、外孙子女,对于子女已经死亡或者子女无力赡养的祖父母、外祖父母,有赡养的义务。</p>
<p>　　第一千零七十五条　【兄弟姐妹间的扶养义务】有负担能力的兄、姐,对于父母已经死亡或者父母无力抚养的未成年弟、妹,有扶养的义务。</p>
<p>　　由兄、姐扶养长大的有负担能力的弟、妹,对于缺乏劳动能力又缺乏生活来源的兄、姐,有扶养的义务。</p>
<h3 id="第四章-离-婚"><a href="#第四章-离-婚" class="headerlink" title="第四章　离　　婚"></a>第四章　离　　婚</h3><p>　　第一千零七十六条　【协议离婚】夫妻双方自愿离婚的,应当签订书面离婚协议,并亲自到婚姻登记机关申请离婚登记。</p>
<p>　　离婚协议应当载明双方自愿离婚的意思表示和对子女抚养、财产以及债务处理等事项协商一致的意见。</p>
<p>　　第一千零七十七条　【离婚冷静期】自婚姻登记机关收到离婚登记申请之日起三十日内,任何一方不愿意离婚的,可以向婚姻登记机关撤回离婚登记申请。</p>
<p>　　前款规定期限届满后三十日内,双方应当亲自到婚姻登记机关申请发给离婚证;未申请的,视为撤回离婚登记申请。</p>
<p>　　第一千零七十八条　【离婚登记】婚姻登记机关查明双方确实是自愿离婚,并已经对子女抚养、财产以及债务处理等事项协商一致的,予以登记,发给离婚证。</p>
<p>　　第一千零七十九条　【诉讼离婚】夫妻一方要求离婚的,可以由有关组织进行调解或者直接向人民法院提起离婚诉讼。</p>
<p>　　人民法院审理离婚案件,应当进行调解;如果感情确已破裂,调解无效的,应当准予离婚。</p>
<p>　　有下列情形之一,调解无效的,应当准予离婚:</p>
<p>　　(一)重婚或者与他人同居;</p>
<p>　　(二)实施家庭暴力或者虐待、遗弃家庭成员;</p>
<p>　　(三)有赌博、吸毒等恶习屡教不改;</p>
<p>　　(四)因感情不和分居满二年;</p>
<p>　　(五)其他导致夫妻感情破裂的情形。</p>
<p>　　一方被宣告失踪,另一方提起离婚诉讼的,应当准予离婚。</p>
<p>　　经人民法院判决不准离婚后,双方又分居满一年,一方再次提起离婚诉讼的,应当准予离婚。</p>
<p>　　第一千零八十条　【婚姻关系解除时间】完成离婚登记,或者离婚判决书、调解书生效,即解除婚姻关系。</p>
<p>　　第一千零八十一条　【军婚的保护】现役军人的配偶要求离婚,应当征得军人同意,但是军人一方有重大过错的除外。</p>
<p>　　第一千零八十二条　【男方离婚诉权的限制】女方在怀孕期间、分娩后一年内或者终止妊娠后六个月内,男方不得提出离婚;但是,女方提出离婚或者人民法院认为确有必要受理男方离婚请求的除外。</p>
<p>　　第一千零八十三条　【复婚登记】离婚后,男女双方自愿恢复婚姻关系的,应当到婚姻登记机关重新进行结婚登记。</p>
<p>　　第一千零八十四条　【离婚后的父母子女关系】父母与子女间的关系,不因父母离婚而消除。离婚后,子女无论由父或者母直接抚养,仍是父母双方的子女。</p>
<p>　　离婚后,父母对于子女仍有抚养、教育、保护的权利和义务。</p>
<p>　　离婚后,不满两周岁的子女,以由母亲直接抚养为原则。已满两周岁的子女,父母双方对抚养问题协议不成的,由人民法院根据双方的具体情况,按照最有利于未成年子女的原则判决。子女已满八周岁的,应当尊重其真实意愿。</p>
<p>　　第一千零八十五条　【离婚后子女抚养费的负担】离婚后,子女由一方直接抚养的,另一方应当负担部分或者全部抚养费。负担费用的多少和期限的长短,由双方协议;协议不成的,由人民法院判决。</p>
<p>　　前款规定的协议或者判决,不妨碍子女在必要时向父母任何一方提出超过协议或者判决原定数额的合理要求。</p>
<p>　　第一千零八十六条　【父母的探望权】离婚后,不直接抚养子女的父或者母,有探望子女的权利,另一方有协助的义务。</p>
<p>　　行使探望权利的方式、时间由当事人协议;协议不成的,由人民法院判决。</p>
<p>　　父或者母探望子女,不利于子女身心健康的,由人民法院依法中止探望;中止的事由消失后,应当恢复探望。</p>
<p>　　第一千零八十七条　【离婚时夫妻共同财产的处理】离婚时,夫妻的共同财产由双方协议处理;协议不成的,由人民法院根据财产的具体情况,按照照顾子女、女方和无过错方权益的原则判决。</p>
<p>　　对夫或者妻在家庭土地承包经营中享有的权益等,应当依法予以保护。</p>
<p>　　第一千零八十八条　【离婚经济补偿】夫妻一方因抚育子女、照料老年人、协助另一方工作等负担较多义务的,离婚时有权向另一方请求补偿,另一方应当给予补偿。具体办法由双方协议;协议不成的,由人民法院判决。</p>
<p>　　第一千零八十九条　【离婚时夫妻共同债务清偿】离婚时,夫妻共同债务应当共同偿还。共同财产不足清偿或者财产归各自所有的,由双方协议清偿;协议不成的,由人民法院判决。</p>
<p>　　第一千零九十条　【离婚经济帮助】离婚时,如果一方生活困难,有负担能力的另一方应当给予适当帮助。具体办法由双方协议;协议不成的,由人民法院判决。</p>
<p>　　第一千零九十一条　【离婚损害赔偿】有下列情形之一,导致离婚的,无过错方有权请求损害赔偿:</p>
<p>　　(一)重婚;</p>
<p>　　(二)与他人同居;</p>
<p>　　(三)实施家庭暴力;</p>
<p>　　(四)虐待、遗弃家庭成员;</p>
<p>　　(五)有其他重大过错。</p>
<p>　　第一千零九十二条　【一方侵害夫妻共同财产的法律后果】夫妻一方隐藏、转移、变卖、毁损、挥霍夫妻共同财产,或者伪造夫妻共同债务企图侵占另一方财产的,在离婚分割夫妻共同财产时,对该方可以少分或者不分。离婚后,另一方发现有上述行为的,可以向人民法院提起诉讼,请求再次分割夫妻共同财产。</p>
<h3 id="第五章-收-养"><a href="#第五章-收-养" class="headerlink" title="第五章　收　　养"></a>第五章　收　　养</h3><h3 id="第一节-收养关系的成立"><a href="#第一节-收养关系的成立" class="headerlink" title="第一节　收养关系的成立"></a>第一节　收养关系的成立</h3><p>　　第一千零九十三条　【被收养人的范围】下列未成年人,可以被收养:</p>
<p>　　(一)丧失父母的孤儿;</p>
<p>　　(二)查找不到生父母的未成年人;</p>
<p>　　(三)生父母有特殊困难无力抚养的子女。</p>
<p>　　第一千零九十四条　【送养人的范围】下列个人、组织可以作送养人:</p>
<p>　　(一)孤儿的监护人;</p>
<p>　　(二)儿童福利机构;</p>
<p>　　(三)有特殊困难无力抚养子女的生父母。</p>
<p>　　第一千零九十五条　【监护人送养未成年人的特殊规定】未成年人的父母均不具备完全民事行为能力且可能严重危害该未成年人的,该未成年人的监护人可以将其送养。</p>
<p>　　第一千零九十六条　【监护人送养孤儿的特殊规定】监护人送养孤儿的,应当征得有抚养义务的人同意。有抚养义务的人不同意送养、监护人不愿意继续履行监护职责的,应当依照本法第一编的规定另行确定监护人。</p>
<p>　　第一千零九十七条　【生父母送养】生父母送养子女,应当双方共同送养。生父母一方不明或者查找不到的,可以单方送养。</p>
<p>　　第一千零九十八条　【收养人的条件】收养人应当同时具备下列条件:</p>
<p>　　(一)无子女或者只有一名子女;</p>
<p>　　(二)有抚养、教育和保护被收养人的能力;</p>
<p>　　(三)未患有在医学上认为不应当收养子女的疾病;</p>
<p>　　(四)无不利于被收养人健康成长的违法犯罪记录;</p>
<p>　　(五)年满三十周岁。</p>
<p>　　第一千零九十九条　【收养三代以内旁系同辈血亲子女的特殊规定】收养三代以内旁系同辈血亲的子女,可以不受本法第一千零九十三条第三项、第一千零九十四条第三项和第一千一百零二条规定的限制。</p>
<p>　　华侨收养三代以内旁系同辈血亲的子女,还可以不受本法第一千零九十八条第一项规定的限制。</p>
<p>　　第一千一百条　【收养子女的人数】无子女的收养人可以收养两名子女;有子女的收养人只能收养一名子女。</p>
<p>　　收养孤儿、残疾未成年人或者儿童福利机构抚养的查找不到生父母的未成年人,可以不受前款和本法第一千零九十八条第一项规定的限制。</p>
<p>　　第一千一百零一条　【共同收养】有配偶者收养子女,应当夫妻共同收养。</p>
<p>　　第一千一百零二条　【无配偶者收养异性子女】无配偶者收养异性子女的,收养人与被收养人的年龄应当相差四十周岁以上。</p>
<p>　　第一千一百零三条　【继父母收养继子女的特殊规定】继父或者继母经继子女的生父母同意,可以收养继子女,并可以不受本法第一千零九十三条第三项、第一千零九十四条第三项、第一千零九十八条和第一千一百条第一款规定的限制。</p>
<p>　　第一千一百零四条　【收养、送养自愿】收养人收养与送养人送养,应当双方自愿。收养八周岁以上未成年人的,应当征得被收养人的同意。</p>
<p>　　第一千一百零五条　【收养登记、收养公告、收养协议、收养公证、收养评估】收养应当向县级以上人民政府民政部门登记。收养关系自登记之日起成立。</p>
<p>　　收养查找不到生父母的未成年人的,办理登记的民政部门应当在登记前予以公告。</p>
<p>　　收养关系当事人愿意签订收养协议的,可以签订收养协议。</p>
<p>　　收养关系当事人各方或者一方要求办理收养公证的,应当办理收养公证。</p>
<p>　　县级以上人民政府民政部门应当依法进行收养评估。</p>
<p>　　第一千一百零六条　【被收养人户口登记】收养关系成立后,公安机关应当按照国家有关规定为被收养人办理户口登记。</p>
<p>　　第一千一百零七条　【抚养】孤儿或者生父母无力抚养的子女,可以由生父母的亲属、朋友抚养;抚养人与被抚养人的关系不适用本章规定。</p>
<p>　　第一千一百零八条　【抚养优先权】配偶一方死亡,另一方送养未成年子女的,死亡一方的父母有优先抚养的权利。</p>
<p>　　第一千一百零九条　【涉外收养】外国人依法可以在中华人民共和国收养子女。</p>
<p>　　外国人在中华人民共和国收养子女,应当经其所在国主管机关依照该国法律审查同意。收养人应当提供由其所在国有权机构出具的有关其年龄、婚姻、职业、财产、健康、有无受过刑事处罚等状况的证明材料,并与送养人签订书面协议,亲自向省、自治区、直辖市人民政府民政部门登记。</p>
<p>　　前款规定的证明材料应当经收养人所在国外交机关或者外交机关授权的机构认证,并经中华人民共和国驻该国使领馆认证,但是国家另有规定的除外。</p>
<p>　　第一千一百一十条　【收养保密义务】收养人、送养人要求保守收养秘密的,其他人应当尊重其意愿,不得泄露。</p>
<h4 id="第二节-收养的效力"><a href="#第二节-收养的效力" class="headerlink" title="第二节　收养的效力"></a>第二节　收养的效力</h4><p>　　第一千一百一十一条　【收养效力】自收养关系成立之日起,养父母与养子女间的权利义务关系,适用本法关于父母子女关系的规定;养子女与养父母的近亲属间的权利义务关系,适用本法关于子女与父母的近亲属关系的规定。</p>
<p>　　养子女与生父母以及其他近亲属间的权利义务关系,因收养关系的成立而消除。</p>
<p>　　第一千一百一十二条　【养子女的姓氏】养子女可以随养父或者养母的姓氏,经当事人协商一致,也可以保留原姓氏。</p>
<p>　　第一千一百一十三条　【无效收养行为】有本法第一编关于民事法律行为无效规定情形或者违反本编规定的收养行为无效。</p>
<p>　　无效的收养行为自始没有法律约束力。</p>
<h4 id="第三节-收养关系的解除"><a href="#第三节-收养关系的解除" class="headerlink" title="第三节　收养关系的解除"></a>第三节　收养关系的解除</h4><p>　　第一千一百一十四条　【当事人协议解除及因违法行为而解除】收养人在被收养人成年以前,不得解除收养关系,但是收养人、送养人双方协议解除的除外。养子女八周岁以上的,应当征得本人同意。</p>
<p>　　收养人不履行抚养义务,有虐待、遗弃等侵害未成年养子女合法权益行为的,送养人有权要求解除养父母与养子女间的收养关系。送养人、收养人不能达成解除收养关系协议的,可以向人民法院提起诉讼。</p>
<p>　　第一千一百一十五条　【关系恶化而协议解除】养父母与成年养子女关系恶化、无法共同生活的,可以协议解除收养关系。不能达成协议的,可以向人民法院提起诉讼。</p>
<p>　　第一千一百一十六条　【解除收养关系登记】当事人协议解除收养关系的,应当到民政部门办理解除收养关系登记。</p>
<p>　　第一千一百一十七条　【解除收养关系后的身份效力】收养关系解除后,养子女与养父母以及其他近亲属间的权利义务关系即行消除,与生父母以及其他近亲属间的权利义务关系自行恢复。但是,成年养子女与生父母以及其他近亲属间的权利义务关系是否恢复,可以协商确定。</p>
<p>　　第一千一百一十八条　【解除收养关系后的财产效力】收养关系解除后,经养父母抚养的成年养子女,对缺乏劳动能力又缺乏生活来源的养父母,应当给付生活费。因养子女成年后虐待、遗弃养父母而解除收养关系的,养父母可以要求养子女补偿收养期间支出的抚养费。</p>
<p>　　生父母要求解除收养关系的,养父母可以要求生父母适当补偿收养期间支出的抚养费;但是,因养父母虐待、遗弃养子女而解除收养关系的除外。</p>
<h1 id="第六编-继-承"><a href="#第六编-继-承" class="headerlink" title="第六编　继　　承"></a>第六编　继　　承</h1><h3 id="第一章-一-般-规-定-4"><a href="#第一章-一-般-规-定-4" class="headerlink" title="第一章　一 般 规 定"></a>第一章　一 般 规 定</h3><p>　　第一千一百一十九条　【继承编的调整范围】本编调整因继承产生的民事关系。</p>
<p>　　第一千一百二十条　【继承权受国家保护】国家保护自然人的继承权。</p>
<p>　　第一千一百二十一条　【继承开始的时间及死亡先后的推定】继承从被继承人死亡时开始。</p>
<p>　　相互有继承关系的数人在同一事件中死亡,难以确定死亡时间的,推定没有其他继承人的人先死亡。都有其他继承人,辈份不同的,推定长辈先死亡;辈份相同的,推定同时死亡,相互不发生继承。</p>
<p>　　第一千一百二十二条　【遗产的定义】遗产是自然人死亡时遗留的个人合法财产。</p>
<p>　　依照法律规定或者根据其性质不得继承的遗产,不得继承。</p>
<p>　　第一千一百二十三条　【法定继承、遗嘱继承、遗赠和遗赠扶养协议的效力】继承开始后,按照法定继承办理;有遗嘱的,按照遗嘱继承或者遗赠办理;有遗赠扶养协议的,按照协议办理。</p>
<p>　　第一千一百二十四条　【继承的接受和放弃】继承开始后,继承人放弃继承的,应当在遗产处理前,以书面形式作出放弃继承的表示;没有表示的,视为接受继承。</p>
<p>　　受遗赠人应当在知道受遗赠后六十日内,作出接受或者放弃受遗赠的表示;到期没有表示的,视为放弃受遗赠。</p>
<p>　　第一千一百二十五条　【继承权的丧失和恢复】继承人有下列行为之一的,丧失继承权:</p>
<p>　　(一)故意杀害被继承人;</p>
<p>　　(二)为争夺遗产而杀害其他继承人;</p>
<p>　　(三)遗弃被继承人,或者虐待被继承人情节严重;</p>
<p>　　(四)伪造、篡改、隐匿或者销毁遗嘱,情节严重;</p>
<p>　　(五)以欺诈、胁迫手段迫使或者妨碍被继承人设立、变更或者撤回遗嘱,情节严重。</p>
<p>　　继承人有前款第三项至第五项行为,确有悔改表现,被继承人表示宽恕或者事后在遗嘱中将其列为继承人的,该继承人不丧失继承权。</p>
<p>　　受遗赠人有本条第一款规定行为的,丧失受遗赠权。</p>
<h3 id="第二章-法-定-继-承"><a href="#第二章-法-定-继-承" class="headerlink" title="第二章　法 定 继 承"></a>第二章　法 定 继 承</h3><p>　　第一千一百二十六条　【男女平等享有继承权】继承权男女平等。</p>
<p>　　第一千一百二十七条　【法定继承人的范围及继承顺序】遗产按照下列顺序继承:</p>
<p>　　(一)第一顺序:配偶、子女、父母;</p>
<p>　　(二)第二顺序:兄弟姐妹、祖父母、外祖父母。</p>
<p>　　继承开始后,由第一顺序继承人继承,第二顺序继承人不继承;没有第一顺序继承人继承的,由第二顺序继承人继承。</p>
<p>　　本编所称子女,包括婚生子女、非婚生子女、养子女和有扶养关系的继子女。</p>
<p>　　本编所称父母,包括生父母、养父母和有扶养关系的继父母。</p>
<p>　　本编所称兄弟姐妹,包括同父母的兄弟姐妹、同父异母或者同母异父的兄弟姐妹、养兄弟姐妹、有扶养关系的继兄弟姐妹。</p>
<p>　　第一千一百二十八条　【代位继承】被继承人的子女先于被继承人死亡的,由被继承人的子女的直系晚辈血亲代位继承。</p>
<p>　　被继承人的兄弟姐妹先于被继承人死亡的,由被继承人的兄弟姐妹的子女代位继承。</p>
<p>　　代位继承人一般只能继承被代位继承人有权继承的遗产份额。</p>
<p>　　第一千一百二十九条　【丧偶儿媳、丧偶女婿的继承权】丧偶儿媳对公婆,丧偶女婿对岳父母,尽了主要赡养义务的,作为第一顺序继承人。</p>
<p>　　第一千一百三十条　【遗产分配的原则】同一顺序继承人继承遗产的份额,一般应当均等。</p>
<p>　　对生活有特殊困难又缺乏劳动能力的继承人,分配遗产时,应当予以照顾。</p>
<p>　　对被继承人尽了主要扶养义务或者与被继承人共同生活的继承人,分配遗产时,可以多分。</p>
<p>　　有扶养能力和有扶养条件的继承人,不尽扶养义务的,分配遗产时,应当不分或者少分。</p>
<p>　　继承人协商同意的,也可以不均等。</p>
<p>　　第一千一百三十一条　【酌情分得遗产权】对继承人以外的依靠被继承人扶养的人,或者继承人以外的对被继承人扶养较多的人,可以分给适当的遗产。</p>
<p>　　第一千一百三十二条　【继承处理方式】继承人应当本着互谅互让、和睦团结的精神,协商处理继承问题。遗产分割的时间、办法和份额,由继承人协商确定;协商不成的,可以由人民调解委员会调解或者向人民法院提起诉讼。</p>
<h3 id="第三章-遗嘱继承和遗赠"><a href="#第三章-遗嘱继承和遗赠" class="headerlink" title="第三章　遗嘱继承和遗赠"></a>第三章　遗嘱继承和遗赠</h3><p>　　第一千一百三十三条　【遗嘱处分个人财产】自然人可以依照本法规定立遗嘱处分个人财产,并可以指定遗嘱执行人。</p>
<p>　　自然人可以立遗嘱将个人财产指定由法定继承人中的一人或者数人继承。</p>
<p>　　自然人可以立遗嘱将个人财产赠与国家、集体或者法定继承人以外的组织、个人。</p>
<p>　　自然人可以依法设立遗嘱信托。</p>
<p>　　第一千一百三十四条　【自书遗嘱】自书遗嘱由遗嘱人亲笔书写,签名,注明年、月、日。</p>
<p>　　第一千一百三十五条　【代书遗嘱】代书遗嘱应当有两个以上见证人在场见证,由其中一人代书,并由遗嘱人、代书人和其他见证人签名,注明年、月、日。</p>
<p>　　第一千一百三十六条　【打印遗嘱】打印遗嘱应当有两个以上见证人在场见证。遗嘱人和见证人应当在遗嘱每一页签名,注明年、月、日。</p>
<p>　　第一千一百三十七条　【录音录像遗嘱】以录音录像形式立的遗嘱,应当有两个以上见证人在场见证。遗嘱人和见证人应当在录音录像中记录其姓名或者肖像,以及年、月、日。</p>
<p>　　第一千一百三十八条　【口头遗嘱】遗嘱人在危急情况下,可以立口头遗嘱。口头遗嘱应当有两个以上见证人在场见证。危急情况消除后,遗嘱人能够以书面或者录音录像形式立遗嘱的,所立的口头遗嘱无效。</p>
<p>　　第一千一百三十九条　【公证遗嘱】公证遗嘱由遗嘱人经公证机构办理。</p>
<p>　　第一千一百四十条　【遗嘱见证人资格的限制性规定】下列人员不能作为遗嘱见证人:</p>
<p>　　(一)无民事行为能力人、限制民事行为能力人以及其他不具有见证能力的人;</p>
<p>　　(二)继承人、受遗赠人;</p>
<p>　　(三)与继承人、受遗赠人有利害关系的人。</p>
<p>　　第一千一百四十一条　【必留份】遗嘱应当为缺乏劳动能力又没有生活来源的继承人保留必要的遗产份额。</p>
<p>　　第一千一百四十二条　【遗嘱的撤回、变更以及遗嘱效力顺位】遗嘱人可以撤回、变更自己所立的遗嘱。</p>
<p>　　立遗嘱后,遗嘱人实施与遗嘱内容相反的民事法律行为的,视为对遗嘱相关内容的撤回。</p>
<p>　　立有数份遗嘱,内容相抵触的,以最后的遗嘱为准。</p>
<p>　　第一千一百四十三条　【遗嘱的实质要件】无民事行为能力人或者限制民事行为能力人所立的遗嘱无效。</p>
<p>　　遗嘱必须表示遗嘱人的真实意思,受欺诈、胁迫所立的遗嘱无效。</p>
<p>　　伪造的遗嘱无效。</p>
<p>　　遗嘱被篡改的,篡改的内容无效。</p>
<p>　　第一千一百四十四条　【附义务遗嘱】遗嘱继承或者遗赠附有义务的,继承人或者受遗赠人应当履行义务。没有正当理由不履行义务的,经利害关系人或者有关组织请求,人民法院可以取消其接受附义务部分遗产的权利。</p>
<h3 id="第四章-遗产的处理"><a href="#第四章-遗产的处理" class="headerlink" title="第四章　遗产的处理"></a>第四章　遗产的处理</h3><p>　　第一千一百四十五条　【遗产管理人的选任】继承开始后,遗嘱执行人为遗产管理人;没有遗嘱执行人的,继承人应当及时推选遗产管理人;继承人未推选的,由继承人共同担任遗产管理人;没有继承人或者继承人均放弃继承的,由被继承人生前住所地的民政部门或者村民委员会担任遗产管理人。</p>
<p>　　第一千一百四十六条　【遗产管理人的指定】对遗产管理人的确定有争议的,利害关系人可以向人民法院申请指定遗产管理人。</p>
<p>　　第一千一百四十七条　【遗产管理人的职责】遗产管理人应当履行下列职责:</p>
<p>　　(一)清理遗产并制作遗产清单;</p>
<p>　　(二)向继承人报告遗产情况;</p>
<p>　　(三)采取必要措施防止遗产毁损、灭失;</p>
<p>　　(四)处理被继承人的债权债务;</p>
<p>　　(五)按照遗嘱或者依照法律规定分割遗产;</p>
<p>　　(六)实施与管理遗产有关的其他必要行为。</p>
<p>　　第一千一百四十八条　【遗产管理人未尽职责的民事责任】遗产管理人应当依法履行职责,因故意或者重大过失造成继承人、受遗赠人、债权人损害的,应当承担民事责任。</p>
<p>　　第一千一百四十九条　【遗产管理人的报酬】遗产管理人可以依照法律规定或者按照约定获得报酬。</p>
<p>　　第一千一百五十条　【继承开始后的通知】继承开始后,知道被继承人死亡的继承人应当及时通知其他继承人和遗嘱执行人。继承人中无人知道被继承人死亡或者知道被继承人死亡而不能通知的,由被继承人生前所在单位或者住所地的居民委员会、村民委员会负责通知。</p>
<p>　　第一千一百五十一条　【遗产的保管】存有遗产的人,应当妥善保管遗产,任何组织或者个人不得侵吞或者争抢。</p>
<p>　　第一千一百五十二条　【转继承】继承开始后,继承人于遗产分割前死亡,并没有放弃继承的,该继承人应当继承的遗产转给其继承人,但是遗嘱另有安排的除外。</p>
<p>　　第一千一百五十三条　【遗产的认定】夫妻共同所有的财产,除有约定的外,遗产分割时,应当先将共同所有的财产的一半分出为配偶所有,其余的为被继承人的遗产。</p>
<p>　　遗产在家庭共有财产之中的,遗产分割时,应当先分出他人的财产。</p>
<p>　　第一千一百五十四条　【法定继承的适用范围】有下列情形之一的,遗产中的有关部分按照法定继承办理:</p>
<p>　　(一)遗嘱继承人放弃继承或者受遗赠人放弃受遗赠;</p>
<p>　　(二)遗嘱继承人丧失继承权或者受遗赠人丧失受遗赠权;</p>
<p>　　(三)遗嘱继承人、受遗赠人先于遗嘱人死亡或者终止;</p>
<p>　　(四)遗嘱无效部分所涉及的遗产;</p>
<p>　　(五)遗嘱未处分的遗产。</p>
<p>　　第一千一百五十五条　【胎儿预留份】遗产分割时,应当保留胎儿的继承份额。胎儿娩出时是死体的,保留的份额按照法定继承办理。</p>
<p>　　第一千一百五十六条　【遗产分割的原则和方法】遗产分割应当有利于生产和生活需要,不损害遗产的效用。</p>
<p>　　不宜分割的遗产,可以采取折价、适当补偿或者共有等方法处理。</p>
<p>　　第一千一百五十七条　【再婚时对所继承遗产的处分权】夫妻一方死亡后另一方再婚的,有权处分所继承的财产,任何组织或者个人不得干涉。</p>
<p>　　第一千一百五十八条　【遗赠扶养协议】自然人可以与继承人以外的组织或者个人签订遗赠扶养协议。按照协议,该组织或者个人承担该自然人生养死葬的义务,享有受遗赠的权利。</p>
<p>　　第一千一百五十九条　【遗产分割时的义务】分割遗产,应当清偿被继承人依法应当缴纳的税款和债务;但是,应当为缺乏劳动能力又没有生活来源的继承人保留必要的遗产。</p>
<p>　　第一千一百六十条　【无人继承遗产的归属】无人继承又无人受遗赠的遗产,归国家所有,用于公益事业;死者生前是集体所有制组织成员的,归所在集体所有制组织所有。</p>
<p>　　第一千一百六十一条　【被继承人税款、债务清偿的原则】继承人以所得遗产实际价值为限清偿被继承人依法应当缴纳的税款和债务。超过遗产实际价值部分,继承人自愿偿还的不在此限。</p>
<p>　　继承人放弃继承的,对被继承人依法应当缴纳的税款和债务可以不负清偿责任。</p>
<p>　　第一千一百六十二条　【清偿被继承人税款、债务优先于执行遗赠的原则】执行遗赠不得妨碍清偿遗赠人依法应当缴纳的税款和债务。</p>
<p>　　第一千一百六十三条　【既有法定继承又有遗嘱继承、遗赠时税款和债务的清偿】既有法定继承又有遗嘱继承、遗赠的,由法定继承人清偿被继承人依法应当缴纳的税款和债务;超过法定继承遗产实际价值部分,由遗嘱继承人和受遗赠人按比例以所得遗产清偿。</p>
<p>　　 </p>
<p>　　第七编　侵 权 责 任</p>
<p>　　第一章　一 般 规 定</p>
<p>　　第一千一百六十四条　【侵权责任编的调整范围】本编调整因侵害民事权益产生的民事关系。</p>
<p>　　第一千一百六十五条　【过错责任原则】行为人因过错侵害他人民事权益造成损害的,应当承担侵权责任。</p>
<p>　　依照法律规定推定行为人有过错,其不能证明自己没有过错的,应当承担侵权责任。</p>
<p>　　第一千一百六十六条　【无过错责任原则】行为人造成他人民事权益损害,不论行为人有无过错,法律规定应当承担侵权责任的,依照其规定。</p>
<p>　　第一千一百六十七条　【危及他人人身、财产安全的责任承担方式】侵权行为危及他人人身、财产安全的,被侵权人有权请求侵权人承担停止侵害、排除妨碍、消除危险等侵权责任。</p>
<p>　　第一千一百六十八条　【共同侵权】二人以上共同实施侵权行为,造成他人损害的,应当承担连带责任。</p>
<p>　　第一千一百六十九条　【教唆侵权、帮助侵权】教唆、帮助他人实施侵权行为的,应当与行为人承担连带责任。</p>
<p>　　教唆、帮助无民事行为能力人、限制民事行为能力人实施侵权行为的,应当承担侵权责任;该无民事行为能力人、限制民事行为能力人的监护人未尽到监护职责的,应当承担相应的责任。</p>
<p>　　第一千一百七十条　【共同危险行为】二人以上实施危及他人人身、财产安全的行为,其中一人或者数人的行为造成他人损害,能够确定具体侵权人的,由侵权人承担责任;不能确定具体侵权人的,行为人承担连带责任。</p>
<p>　　第一千一百七十一条　【分别侵权承担连带责任】二人以上分别实施侵权行为造成同一损害,每个人的侵权行为都足以造成全部损害的,行为人承担连带责任。</p>
<p>　　第一千一百七十二条　【分别侵权承担按份责任】二人以上分别实施侵权行为造成同一损害,能够确定责任大小的,各自承担相应的责任;难以确定责任大小的,平均承担责任。</p>
<p>　　第一千一百七十三条　【过失相抵】被侵权人对同一损害的发生或者扩大有过错的,可以减轻侵权人的责任。</p>
<p>　　第一千一百七十四条　【受害人故意】损害是因受害人故意造成的,行为人不承担责任。</p>
<p>　　第一千一百七十五条　【第三人过错】损害是因第三人造成的,第三人应当承担侵权责任。</p>
<p>　　第一千一百七十六条　【自甘风险】自愿参加具有一定风险的文体活动,因其他参加者的行为受到损害的,受害人不得请求其他参加者承担侵权责任;但是,其他参加者对损害的发生有故意或者重大过失的除外。</p>
<p>　　活动组织者的责任适用本法第一千一百九十八条至第一千二百零一条的规定。</p>
<p>　　第一千一百七十七条　【自助行为】合法权益受到侵害,情况紧迫且不能及时获得国家机关保护,不立即采取措施将使其合法权益受到难以弥补的损害的,受害人可以在保护自己合法权益的必要范围内采取扣留侵权人的财物等合理措施;但是,应当立即请求有关国家机关处理。</p>
<p>　　受害人采取的措施不当造成他人损害的,应当承担侵权责任。</p>
<p>　　第一千一百七十八条　【优先适用特别规定】本法和其他法律对不承担责任或者减轻责任的情形另有规定的,依照其规定。</p>
<p>　　第二章　损 害 赔 偿</p>
<p>　　第一千一百七十九条　【人身损害赔偿范围】侵害他人造成人身损害的,应当赔偿医疗费、护理费、交通费、营养费、住院伙食补助费等为治疗和康复支出的合理费用,以及因误工减少的收入。造成残疾的,还应当赔偿辅助器具费和残疾赔偿金;造成死亡的,还应当赔偿丧葬费和死亡赔偿金。</p>
<p>　　第一千一百八十条　【以相同数额确定死亡赔偿金】因同一侵权行为造成多人死亡的,可以以相同数额确定死亡赔偿金。</p>
<p>　　第一千一百八十一条　【被侵权人死亡时请求权主体的确定】被侵权人死亡的,其近亲属有权请求侵权人承担侵权责任。被侵权人为组织,该组织分立、合并的,承继权利的组织有权请求侵权人承担侵权责任。</p>
<p>　　被侵权人死亡的,支付被侵权人医疗费、丧葬费等合理费用的人有权请求侵权人赔偿费用,但是侵权人已经支付该费用的除外。</p>
<p>　　第一千一百八十二条　【侵害人身权益造成财产损失的赔偿数额的确定】侵害他人人身权益造成财产损失的,按照被侵权人因此受到的损失或者侵权人因此获得的利益赔偿;被侵权人因此受到的损失以及侵权人因此获得的利益难以确定,被侵权人和侵权人就赔偿数额协商不一致,向人民法院提起诉讼的,由人民法院根据实际情况确定赔偿数额。</p>
<p>　　第一千一百八十三条　【精神损害赔偿】侵害自然人人身权益造成严重精神损害的,被侵权人有权请求精神损害赔偿。</p>
<p>　　因故意或者重大过失侵害自然人具有人身意义的特定物造成严重精神损害的,被侵权人有权请求精神损害赔偿。</p>
<p>　　第一千一百八十四条　【财产损失计算方式】侵害他人财产的,财产损失按照损失发生时的市场价格或者其他合理方式计算。</p>
<p>　　第一千一百八十五条　【侵害知识产权的惩罚性赔偿】故意侵害他人知识产权,情节严重的,被侵权人有权请求相应的惩罚性赔偿。</p>
<p>　　第一千一百八十六条　【公平责任原则】受害人和行为人对损害的发生都没有过错的,依照法律的规定由双方分担损失。</p>
<p>　　第一千一百八十七条　【赔偿费用支付方式】损害发生后,当事人可以协商赔偿费用的支付方式。协商不一致的,赔偿费用应当一次性支付;一次性支付确有困难的,可以分期支付,但是被侵权人有权请求提供相应的担保。</p>
<p>　　第三章　责任主体的特殊规定</p>
<p>　　第一千一百八十八条　【监护人责任】无民事行为能力人、限制民事行为能力人造成他人损害的,由监护人承担侵权责任。监护人尽到监护职责的,可以减轻其侵权责任。</p>
<p>　　有财产的无民事行为能力人、限制民事行为能力人造成他人损害的,从本人财产中支付赔偿费用;不足部分,由监护人赔偿。</p>
<p>　　第一千一百八十九条　【委托监护责任】无民事行为能力人、限制民事行为能力人造成他人损害,监护人将监护职责委托给他人的,监护人应当承担侵权责任;受托人有过错的,承担相应的责任。</p>
<p>　　第一千一百九十条　【丧失意识侵权责任】完全民事行为能力人对自己的行为暂时没有意识或者失去控制造成他人损害有过错的,应当承担侵权责任;没有过错的,根据行为人的经济状况对受害人适当补偿。</p>
<p>　　完全民事行为能力人因醉酒、滥用麻醉药品或者精神药品对自己的行为暂时没有意识或者失去控制造成他人损害的,应当承担侵权责任。</p>
<p>　　第一千一百九十一条　【用人单位责任和劳务派遣单位、劳务用工单位责任】用人单位的工作人员因执行工作任务造成他人损害的,由用人单位承担侵权责任。用人单位承担侵权责任后,可以向有故意或者重大过失的工作人员追偿。</p>
<p>　　劳务派遣期间,被派遣的工作人员因执行工作任务造成他人损害的,由接受劳务派遣的用工单位承担侵权责任;劳务派遣单位有过错的,承担相应的责任。</p>
<p>　　第一千一百九十二条　【个人劳务关系中的侵权责任】个人之间形成劳务关系,提供劳务一方因劳务造成他人损害的,由接受劳务一方承担侵权责任。接受劳务一方承担侵权责任后,可以向有故意或者重大过失的提供劳务一方追偿。提供劳务一方因劳务受到损害的,根据双方各自的过错承担相应的责任。</p>
<p>　　提供劳务期间,因第三人的行为造成提供劳务一方损害的,提供劳务一方有权请求第三人承担侵权责任,也有权请求接受劳务一方给予补偿。接受劳务一方补偿后,可以向第三人追偿。</p>
<p>　　第一千一百九十三条　【承揽关系中的侵权责任】承揽人在完成工作过程中造成第三人损害或者自己损害的,定作人不承担侵权责任。但是,定作人对定作、指示或者选任有过错的,应当承担相应的责任。</p>
<p>　　第一千一百九十四条　【网络侵权责任】网络用户、网络服务提供者利用网络侵害他人民事权益的,应当承担侵权责任。法律另有规定的,依照其规定。</p>
<p>　　第一千一百九十五条　【网络服务提供者侵权补救措施与责任承担】网络用户利用网络服务实施侵权行为的,权利人有权通知网络服务提供者采取删除、屏蔽、断开链接等必要措施。通知应当包括构成侵权的初步证据及权利人的真实身份信息。</p>
<p>　　网络服务提供者接到通知后,应当及时将该通知转送相关网络用户,并根据构成侵权的初步证据和服务类型采取必要措施;未及时采取必要措施的,对损害的扩大部分与该网络用户承担连带责任。</p>
<p>　　权利人因错误通知造成网络用户或者网络服务提供者损害的,应当承担侵权责任。法律另有规定的,依照其规定。</p>
<p>　　第一千一百九十六条　【不侵权声明】网络用户接到转送的通知后,可以向网络服务提供者提交不存在侵权行为的声明。声明应当包括不存在侵权行为的初步证据及网络用户的真实身份信息。</p>
<p>　　网络服务提供者接到声明后,应当将该声明转送发出通知的权利人,并告知其可以向有关部门投诉或者向人民法院提起诉讼。网络服务提供者在转送声明到达权利人后的合理期限内,未收到权利人已经投诉或者提起诉讼通知的,应当及时终止所采取的措施。</p>
<p>　　第一千一百九十七条　【网络服务提供者的连带责任】网络服务提供者知道或者应当知道网络用户利用其网络服务侵害他人民事权益,未采取必要措施的,与该网络用户承担连带责任。</p>
<p>　　第一千一百九十八条　【安全保障义务人责任】宾馆、商场、银行、车站、机场、体育场馆、娱乐场所等经营场所、公共场所的经营者、管理者或者群众性活动的组织者,未尽到安全保障义务,造成他人损害的,应当承担侵权责任。</p>
<p>　　因第三人的行为造成他人损害的,由第三人承担侵权责任;经营者、管理者或者组织者未尽到安全保障义务的,承担相应的补充责任。经营者、管理者或者组织者承担补充责任后,可以向第三人追偿。</p>
<p>　　第一千一百九十九条　【教育机构的过错推定责任】无民事行为能力人在幼儿园、学校或者其他教育机构学习、生活期间受到人身损害的,幼儿园、学校或者其他教育机构应当承担侵权责任;但是,能够证明尽到教育、管理职责的,不承担侵权责任。</p>
<p>　　第一千二百条　【教育机构的过错责任】限制民事行为能力人在学校或者其他教育机构学习、生活期间受到人身损害,学校或者其他教育机构未尽到教育、管理职责的,应当承担侵权责任。</p>
<p>　　第一千二百零一条　【在教育机构内第三人侵权时的责任分担】无民事行为能力人或者限制民事行为能力人在幼儿园、学校或者其他教育机构学习、生活期间,受到幼儿园、学校或者其他教育机构以外的第三人人身损害的,由第三人承担侵权责任;幼儿园、学校或者其他教育机构未尽到管理职责的,承担相应的补充责任。幼儿园、学校或者其他教育机构承担补充责任后,可以向第三人追偿。</p>
<p>　　第四章　产 品 责 任</p>
<p>　　第一千二百零二条　【产品生产者责任】因产品存在缺陷造成他人损害的,生产者应当承担侵权责任。</p>
<p>　　第一千二百零三条　【被侵权人请求损害赔偿的途径和先行赔偿人追偿权】因产品存在缺陷造成他人损害的,被侵权人可以向产品的生产者请求赔偿,也可以向产品的销售者请求赔偿。</p>
<p>　　产品缺陷由生产者造成的,销售者赔偿后,有权向生产者追偿。因销售者的过错使产品存在缺陷的,生产者赔偿后,有权向销售者追偿。</p>
<p>　　第一千二百零四条　【生产者和销售者对有过错第三人的追偿权】因运输者、仓储者等第三人的过错使产品存在缺陷,造成他人损害的,产品的生产者、销售者赔偿后,有权向第三人追偿。</p>
<p>　　第一千二百零五条　【危及他人人身、财产安全的责任承担方式】因产品缺陷危及他人人身、财产安全的,被侵权人有权请求生产者、销售者承担停止侵害、排除妨碍、消除危险等侵权责任。</p>
<p>　　第一千二百零六条　【流通后发现有缺陷的补救措施和侵权责任】产品投入流通后发现存在缺陷的,生产者、销售者应当及时采取停止销售、警示、召回等补救措施;未及时采取补救措施或者补救措施不力造成损害扩大的,对扩大的损害也应当承担侵权责任。</p>
<p>　　依据前款规定采取召回措施的,生产者、销售者应当负担被侵权人因此支出的必要费用。</p>
<p>　　第一千二百零七条　【产品责任惩罚性赔偿】明知产品存在缺陷仍然生产、销售,或者没有依据前条规定采取有效补救措施,造成他人死亡或者健康严重损害的,被侵权人有权请求相应的惩罚性赔偿。</p>
<h3 id="第五章-机动车交通事故责任"><a href="#第五章-机动车交通事故责任" class="headerlink" title="第五章　机动车交通事故责任"></a>第五章　机动车交通事故责任</h3><p>　　第一千二百零八条　【机动车交通事故责任的法律适用】机动车发生交通事故造成损害的,依照道路交通安全法律和本法的有关规定承担赔偿责任。</p>
<p>　　第一千二百零九条　【机动车所有人、管理人与使用人不一致时的侵权责任】因租赁、借用等情形机动车所有人、管理人与使用人不是同一人时,发生交通事故造成损害,属于该机动车一方责任的,由机动车使用人承担赔偿责任;机动车所有人、管理人对损害的发生有过错的,承担相应的赔偿责任。</p>
<p>　　第一千二百一十条　【转让并交付但未办理登记的机动车侵权责任】当事人之间已经以买卖或者其他方式转让并交付机动车但是未办理登记,发生交通事故造成损害,属于该机动车一方责任的,由受让人承担赔偿责任。</p>
<p>　　第一千二百一十一条　【挂靠机动车侵权责任】以挂靠形式从事道路运输经营活动的机动车,发生交通事故造成损害,属于该机动车一方责任的,由挂靠人和被挂靠人承担连带责任。</p>
<p>　　第一千二百一十二条　【未经允许驾驶他人机动车侵权责任】未经允许驾驶他人机动车,发生交通事故造成损害,属于该机动车一方责任的,由机动车使用人承担赔偿责任;机动车所有人、管理人对损害的发生有过错的,承担相应的赔偿责任,但是本章另有规定的除外。</p>
<p>　　第一千二百一十三条　【交通事故责任承担主体赔偿顺序】机动车发生交通事故造成损害,属于该机动车一方责任的,先由承保机动车强制保险的保险人在强制保险责任限额范围内予以赔偿;不足部分,由承保机动车商业保险的保险人按照保险合同的约定予以赔偿;仍然不足或者没有投保机动车商业保险的,由侵权人赔偿。</p>
<p>　　第一千二百一十四条　【拼装车或报废车侵权责任】以买卖或者其他方式转让拼装或者已经达到报废标准的机动车,发生交通事故造成损害的,由转让人和受让人承担连带责任。</p>
<p>　　第一千二百一十五条　【盗窃、抢劫或抢夺机动车侵权责任】盗窃、抢劫或者抢夺的机动车发生交通事故造成损害的,由盗窃人、抢劫人或者抢夺人承担赔偿责任。盗窃人、抢劫人或者抢夺人与机动车使用人不是同一人,发生交通事故造成损害,属于该机动车一方责任的,由盗窃人、抢劫人或者抢夺人与机动车使用人承担连带责任。</p>
<p>　　保险人在机动车强制保险责任限额范围内垫付抢救费用的,有权向交通事故责任人追偿。</p>
<p>　　第一千二百一十六条　【肇事后逃逸责任及受害人救济】机动车驾驶人发生交通事故后逃逸,该机动车参加强制保险的,由保险人在机动车强制保险责任限额范围内予以赔偿;机动车不明、该机动车未参加强制保险或者抢救费用超过机动车强制保险责任限额,需要支付被侵权人人身伤亡的抢救、丧葬等费用的,由道路交通事故社会救助基金垫付。道路交通事故社会救助基金垫付后,其管理机构有权向交通事故责任人追偿。</p>
<p>　　第一千二百一十七条　【好意同乘的责任承担】非营运机动车发生交通事故造成无偿搭乘人损害,属于该机动车一方责任的,应当减轻其赔偿责任,但是机动车使用人有故意或者重大过失的除外。</p>
<h3 id="第六章-医疗损害责任"><a href="#第六章-医疗损害责任" class="headerlink" title="第六章　医疗损害责任"></a>第六章　医疗损害责任</h3><p>　　第一千二百一十八条　【医疗损害责任归责原则和责任承担主体】患者在诊疗活动中受到损害,医疗机构或者其医务人员有过错的,由医疗机构承担赔偿责任。</p>
<p>　　第一千二百一十九条　【医务人员说明义务和患者知情同意权】医务人员在诊疗活动中应当向患者说明病情和医疗措施。需要实施手术、特殊检查、特殊治疗的,医务人员应当及时向患者具体说明医疗风险、替代医疗方案等情况,并取得其明确同意;不能或者不宜向患者说明的,应当向患者的近亲属说明,并取得其明确同意。</p>
<p>　　医务人员未尽到前款义务,造成患者损害的,医疗机构应当承担赔偿责任。</p>
<p>　　第一千二百二十条　【紧急情况下知情同意的特殊规定】因抢救生命垂危的患者等紧急情况,不能取得患者或者其近亲属意见的,经医疗机构负责人或者授权的负责人批准,可以立即实施相应的医疗措施。</p>
<p>　　第一千二百二十一条　【诊疗活动中医务人员过错的界定】医务人员在诊疗活动中未尽到与当时的医疗水平相应的诊疗义务,造成患者损害的,医疗机构应当承担赔偿责任。</p>
<p>　　第一千二百二十二条　【推定医疗机构有过错的情形】患者在诊疗活动中受到损害,有下列情形之一的,推定医疗机构有过错:</p>
<p>　　(一)违反法律、行政法规、规章以及其他有关诊疗规范的规定;</p>
<p>　　(二)隐匿或者拒绝提供与纠纷有关的病历资料;</p>
<p>　　(三)遗失、伪造、篡改或者违法销毁病历资料。</p>
<p>　　第一千二百二十三条　【药品、消毒产品、医疗器械的缺陷,或者输入不合格血液的侵权责任】因药品、消毒产品、医疗器械的缺陷,或者输入不合格的血液造成患者损害的,患者可以向药品上市许可持有人、生产者、血液提供机构请求赔偿,也可以向医疗机构请求赔偿。患者向医疗机构请求赔偿的,医疗机构赔偿后,有权向负有责任的药品上市许可持有人、生产者、血液提供机构追偿。</p>
<p>　　第一千二百二十四条　【医疗机构免责情形】患者在诊疗活动中受到损害,有下列情形之一的,医疗机构不承担赔偿责任:</p>
<p>　　(一)患者或者其近亲属不配合医疗机构进行符合诊疗规范的诊疗;</p>
<p>　　(二)医务人员在抢救生命垂危的患者等紧急情况下已经尽到合理诊疗义务;</p>
<p>　　(三)限于当时的医疗水平难以诊疗。</p>
<p>　　前款第一项情形中,医疗机构或者其医务人员也有过错的,应当承担相应的赔偿责任。</p>
<p>　　第一千二百二十五条　【医疗机构对病历资料的义务、患者对病历资料的权利】医疗机构及其医务人员应当按照规定填写并妥善保管住院志、医嘱单、检验报告、手术及麻醉记录、病理资料、护理记录等病历资料。</p>
<p>　　患者要求查阅、复制前款规定的病历资料的,医疗机构应当及时提供。</p>
<p>　　第一千二百二十六条　【患者隐私和个人信息保护】医疗机构及其医务人员应当对患者的隐私和个人信息保密。泄露患者的隐私和个人信息,或者未经患者同意公开其病历资料的,应当承担侵权责任。</p>
<p>　　第一千二百二十七条　【禁止违规过度检查】医疗机构及其医务人员不得违反诊疗规范实施不必要的检查。</p>
<p>　　第一千二百二十八条　【维护医疗机构及其医务人员合法权益】医疗机构及其医务人员的合法权益受法律保护。</p>
<p>　　干扰医疗秩序,妨碍医务人员工作、生活,侵害医务人员合法权益的,应当依法承担法律责任。</p>
<h3 id="第七章-环境污染和生态破坏责任"><a href="#第七章-环境污染和生态破坏责任" class="headerlink" title="第七章　环境污染和生态破坏责任"></a>第七章　环境污染和生态破坏责任</h3><p>　　第一千二百二十九条　【污染环境、破坏生态致损的侵权责任】因污染环境、破坏生态造成他人损害的,侵权人应当承担侵权责任。</p>
<p>　　第一千二百三十条　【环境污染、生态破坏侵权举证责任】因污染环境、破坏生态发生纠纷,行为人应当就法律规定的不承担责任或者减轻责任的情形及其行为与损害之间不存在因果关系承担举证责任。</p>
<p>　　第一千二百三十一条　【两个以上侵权人的责任大小确定】两个以上侵权人污染环境、破坏生态的,承担责任的大小,根据污染物的种类、浓度、排放量,破坏生态的方式、范围、程度,以及行为对损害后果所起的作用等因素确定。</p>
<p>　　第一千二百三十二条　【环境污染、生态破坏侵权的惩罚性赔偿】侵权人违反法律规定故意污染环境、破坏生态造成严重后果的,被侵权人有权请求相应的惩罚性赔偿。</p>
<p>　　第一千二百三十三条　【因第三人的过错污染环境、破坏生态的侵权责任】因第三人的过错污染环境、破坏生态的,被侵权人可以向侵权人请求赔偿,也可以向第三人请求赔偿。侵权人赔偿后,有权向第三人追偿。</p>
<p>　　第一千二百三十四条　【生态环境修复责任】违反国家规定造成生态环境损害,生态环境能够修复的,国家规定的机关或者法律规定的组织有权请求侵权人在合理期限内承担修复责任。侵权人在期限内未修复的,国家规定的机关或者法律规定的组织可以自行或者委托他人进行修复,所需费用由侵权人负担。</p>
<p>　　第一千二百三十五条　【公益诉讼的赔偿范围】违反国家规定造成生态环境损害的,国家规定的机关或者法律规定的组织有权请求侵权人赔偿下列损失和费用:</p>
<p>　　(一)生态环境受到损害至修复完成期间服务功能丧失导致的损失;</p>
<p>　　(二)生态环境功能永久性损害造成的损失;</p>
<p>　　(三)生态环境损害调查、鉴定评估等费用;</p>
<p>　　(四)清除污染、修复生态环境费用;</p>
<p>　　(五)防止损害的发生和扩大所支出的合理费用。</p>
<h3 id="第八章-高度危险责任"><a href="#第八章-高度危险责任" class="headerlink" title="第八章　高度危险责任"></a>第八章　高度危险责任</h3><p>　　第一千二百三十六条　【高度危险责任的一般规定】从事高度危险作业造成他人损害的,应当承担侵权责任。</p>
<p>　　第一千二百三十七条　【民用核设施或者核材料致害责任】民用核设施或者运入运出核设施的核材料发生核事故造成他人损害的,民用核设施的营运单位应当承担侵权责任;但是,能够证明损害是因战争、武装冲突、暴乱等情形或者受害人故意造成的,不承担责任。</p>
<p>　　第一千二百三十八条　【民用航空器致害责任】民用航空器造成他人损害的,民用航空器的经营者应当承担侵权责任;但是,能够证明损害是因受害人故意造成的,不承担责任。</p>
<p>　　第一千二百三十九条　【占有或使用高度危险物致害责任】占有或者使用易燃、易爆、剧毒、高放射性、强腐蚀性、高致病性等高度危险物造成他人损害的,占有人或者使用人应当承担侵权责任;但是,能够证明损害是因受害人故意或者不可抗力造成的,不承担责任。被侵权人对损害的发生有重大过失的,可以减轻占有人或者使用人的责任。</p>
<p>　　第一千二百四十条　【从事高空、高压、地下挖掘活动或者使用高速轨道运输工具致害责任】从事高空、高压、地下挖掘活动或者使用高速轨道运输工具造成他人损害的,经营者应当承担侵权责任;但是,能够证明损害是因受害人故意或者不可抗力造成的,不承担责任。被侵权人对损害的发生有重大过失的,可以减轻经营者的责任。</p>
<p>　　第一千二百四十一条　【遗失、抛弃高度危险物致害责任】遗失、抛弃高度危险物造成他人损害的,由所有人承担侵权责任。所有人将高度危险物交由他人管理的,由管理人承担侵权责任;所有人有过错的,与管理人承担连带责任。</p>
<p>　　第一千二百四十二条　【非法占有高度危险物致害责任】非法占有高度危险物造成他人损害的,由非法占有人承担侵权责任。所有人、管理人不能证明对防止非法占有尽到高度注意义务的,与非法占有人承担连带责任。</p>
<p>　　第一千二百四十三条　【高度危险场所安全保障责任】未经许可进入高度危险活动区域或者高度危险物存放区域受到损害,管理人能够证明已经采取足够安全措施并尽到充分警示义务的,可以减轻或者不承担责任。</p>
<p>　　第一千二百四十四条　【高度危险责任赔偿限额】承担高度危险责任,法律规定赔偿限额的,依照其规定,但是行为人有故意或者重大过失的除外。</p>
<h3 id="第九章-饲养动物损害责任"><a href="#第九章-饲养动物损害责任" class="headerlink" title="第九章　饲养动物损害责任"></a>第九章　饲养动物损害责任</h3><p>　　第一千二百四十五条　【饲养动物致害责任的一般规定】饲养的动物造成他人损害的,动物饲养人或者管理人应当承担侵权责任;但是,能够证明损害是因被侵权人故意或者重大过失造成的,可以不承担或者减轻责任。</p>
<p>　　第一千二百四十六条　【违反规定未对动物采取安全措施致害责任】违反管理规定,未对动物采取安全措施造成他人损害的,动物饲养人或者管理人应当承担侵权责任;但是,能够证明损害是因被侵权人故意造成的,可以减轻责任。</p>
<p>　　第一千二百四十七条　【禁止饲养的危险动物致害责任】禁止饲养的烈性犬等危险动物造成他人损害的,动物饲养人或者管理人应当承担侵权责任。</p>
<p>　　第一千二百四十八条　【动物园的动物致害责任】动物园的动物造成他人损害的,动物园应当承担侵权责任;但是,能够证明尽到管理职责的,不承担侵权责任。</p>
<p>　　第一千二百四十九条　【遗弃、逃逸的动物致害责任】遗弃、逃逸的动物在遗弃、逃逸期间造成他人损害的,由动物原饲养人或者管理人承担侵权责任。</p>
<p>　　第一千二百五十条　【因第三人的过错致使动物致害责任】因第三人的过错致使动物造成他人损害的,被侵权人可以向动物饲养人或者管理人请求赔偿,也可以向第三人请求赔偿。动物饲养人或者管理人赔偿后,有权向第三人追偿。</p>
<p>　　第一千二百五十一条　【饲养动物应履行的义务】饲养动物应当遵守法律法规,尊重社会公德,不得妨碍他人生活。</p>
<h3 id="第十章-建筑物和物件损害责任"><a href="#第十章-建筑物和物件损害责任" class="headerlink" title="第十章　建筑物和物件损害责任"></a>第十章　建筑物和物件损害责任</h3><p>　　第一千二百五十二条　【建筑物、构筑物或者其他设施倒塌、塌陷致害责任】建筑物、构筑物或者其他设施倒塌、塌陷造成他人损害的,由建设单位与施工单位承担连带责任,但是建设单位与施工单位能够证明不存在质量缺陷的除外。建设单位、施工单位赔偿后,有其他责任人的,有权向其他责任人追偿。</p>
<p>　　因所有人、管理人、使用人或者第三人的原因,建筑物、构筑物或者其他设施倒塌、塌陷造成他人损害的,由所有人、管理人、使用人或者第三人承担侵权责任。</p>
<p>　　第一千二百五十三条　【建筑物、构筑物或者其他设施及其搁置物、悬挂物脱落、坠落致害责任】建筑物、构筑物或者其他设施及其搁置物、悬挂物发生脱落、坠落造成他人损害,所有人、管理人或者使用人不能证明自己没有过错的,应当承担侵权责任。所有人、管理人或者使用人赔偿后,有其他责任人的,有权向其他责任人追偿。</p>
<p>　　第一千二百五十四条　【不明抛掷物、坠落物致害责任】禁止从建筑物中抛掷物品。从建筑物中抛掷物品或者从建筑物上坠落的物品造成他人损害的,由侵权人依法承担侵权责任;经调查难以确定具体侵权人的,除能够证明自己不是侵权人的外,由可能加害的建筑物使用人给予补偿。可能加害的建筑物使用人补偿后,有权向侵权人追偿。</p>
<p>　　物业服务企业等建筑物管理人应当采取必要的安全保障措施防止前款规定情形的发生;未采取必要的安全保障措施的,应当依法承担未履行安全保障义务的侵权责任。</p>
<p>　　发生本条第一款规定的情形的,公安等机关应当依法及时调查,查清责任人。</p>
<p>　　第一千二百五十五条　【堆放物倒塌、滚落或者滑落致害责任】堆放物倒塌、滚落或者滑落造成他人损害,堆放人不能证明自己没有过错的,应当承担侵权责任。</p>
<p>　　第一千二百五十六条　【在公共道路上堆放、倾倒、遗撒妨碍通行的物品致害责任】在公共道路上堆放、倾倒、遗撒妨碍通行的物品造成他人损害的,由行为人承担侵权责任。公共道路管理人不能证明已经尽到清理、防护、警示等义务的,应当承担相应的责任。</p>
<p>　　第一千二百五十七条　【林木折断、倾倒或者果实坠落等致人损害的侵权责任】因林木折断、倾倒或者果实坠落等造成他人损害,林木的所有人或者管理人不能证明自己没有过错的,应当承担侵权责任。</p>
<p>　　第一千二百五十八条　【公共场所或者道路上施工致害责任和窨井等地下设施致害责任】在公共场所或者道路上挖掘、修缮安装地下设施等造成他人损害,施工人不能证明已经设置明显标志和采取安全措施的,应当承担侵权责任。</p>
<p>　　窨井等地下设施造成他人损害,管理人不能证明尽到管理职责的,应当承担侵权责任。</p>
<p>　　附　　则</p>
<p>　　第一千二百五十九条　【法律术语含义】民法所称的“以上”、“以下”、“以内”、“届满”,包括本数;所称的“不满”、“超过”、“以外”,不包括本数。</p>
<p>　　第一千二百六十条　【施行日期及旧法废止】本法自2021年1月1日起施行。《中华人民共和国婚姻法》、《中华人民共和国继承法》、《中华人民共和国民法通则》、《中华人民共和国收养法》、《中华人民共和国担保法》、《中华人民共和国合同法》、《中华人民共和国物权法》、《中华人民共和国侵权责任法》、《中华人民共和国民法总则》同时废止。</p>
<p>　　 </p>
<h1 id="附-录"><a href="#附-录" class="headerlink" title="附　录"></a>附　录</h1><p>　　 </p>
<p>　　<br>关于《中华人民共和国民法典<br>(草案)》的说明</p>
<p>　　<br>——2020年5月22日在第十三届全国人民<br>代表大会第三次会议上</p>
<p>　　<br>全国人民代表大会常务委员会副委员长　王　晨</p>
<p>　　 </p>
<p>　　<br>各位代表:</p>
<p>　　我受全国人大常委会委托,作关于《中华人民共和国民法典(草案)》的说明。</p>
<p>　　一、编纂民法典的重大意义</p>
<p>　　编纂民法典是党的十八届四中全会确定的一项重大政治任务和立法任务,是以习近平同志为核心的党中央作出的重大法治建设部署。编纂民法典,就是通过对我国现行的民事法律制度规范进行系统整合、编订纂修,形成一部适应新时代中国特色社会主义发展要求,符合我国国情和实际,体例科学、结构严谨、规范合理、内容完整并协调一致的法典。这是一项系统的、重大的立法工程。</p>
<p>　　编纂一部真正属于中国人民的民法典,是新中国几代人的夙愿。党和国家曾于1954年、1962年、1979年和2001年先后四次启动民法制定工作。第一次和第二次,由于多种原因而未能取得实际成果。1979年第三次启动,由于刚刚进入改革开放新时期,制定一部完整民法典的条件尚不具备。因此,当时领导全国人大法制委员会立法工作的彭真、习仲勋等同志深入研究后,在八十年代初决定按照“成熟一个通过一个”的工作思路,确定先制定民事单行法律。现行的继承法、民法通则、担保法、合同法就是在这种工作思路下先后制定的。2001年,九届全国人大常委会组织起草《中华人民共和国民法(草案)》,并于2002年12月进行了一次审议。经讨论和研究,仍确定继续采取分别制定单行法的办法推进我国民事法律制度建设。2003年十届全国人大以来,又陆续制定了物权法、侵权责任法、涉外民事关系法律适用法等。总的看,经过多年来努力,我国民事立法是富有成效的,逐步形成了比较完备的民事法律规范体系,民事司法实践积累了丰富经验,民事法律服务取得显著进步,民法理论研究也达到较高水平,全社会民事法治观念普遍增强,为编纂民法典奠定了较好的制度基础、实践基础、理论基础和社会基础。随着我国社会主义现代化事业不断发展和全面依法治国深入推进,人民群众和社会各方面对编纂和出台民法典寄予很大的期盼。</p>
<p>　　党的十八大以来,以习近平同志为核心的党中央把全面依法治国摆在突出位置,推动党和国家事业发生历史性变革、取得历史性成就,中国特色社会主义已经进入新时代。在坚持和完善中国特色社会主义制度、推进国家治理体系和治理能力现代化的新征程中,编纂民法典具有重大而深远的意义。</p>
<p>　　(一)编纂民法典是坚持和完善中国特色社会主义制度的现实需要</p>
<p>　　回顾人类文明史,编纂法典是具有重要标志意义的法治建设工程,是一个国家、一个民族走向繁荣强盛的象征和标志。新中国成立70多年特别是改革开放40多年来,中国共产党团结带领中国人民不懈奋斗,成功开辟了中国特色社会主义道路,取得了举世瞩目的发展成就,中国特色社会主义制度展现出强大生命力和显著优越性。我国民事法律制度正是伴随着新时期改革开放和社会主义现代化建设的历史进程而形成并不断发展完善的,是中国特色社会主义法律制度的重要组成部分。在系统总结制度建设成果和实践经验的基础上,编纂一部具有中国特色、体现时代特点、反映人民意愿的民法典,不仅能充分彰显中国特色社会主义法律制度成果和制度自信,促进和保障中国特色社会主义事业不断发展,也能为人类法治文明的发展进步贡献中国智慧和中国方案。</p>
<p>　　(二)编纂民法典是推进全面依法治国、推进国家治理体系和治理能力现代化的重大举措</p>
<p>　　民法是中国特色社会主义法律体系的重要组成部分,是民事领域的基础性、综合性法律,它规范各类民事主体的各种人身关系和财产关系,涉及社会和经济生活的方方面面,被称为“社会生活的百科全书”。建立健全完备的法律规范体系,以良法保障善治,是全面依法治国的前提和基础。民法通过确立民事主体、民事权利、民事法律行为、民事责任等民事总则制度,确立物权、合同、人格权、婚姻家庭、继承、侵权责任等民事分则制度,来调整各类民事关系。民法与国家其他领域法律规范一起,支撑着国家制度和国家治理体系,是保证国家制度和国家治理体系正常有效运行的基础性法律规范。编纂民法典,就是全面总结我国的民事立法和司法的实践经验,对现行民事单行法律进行系统编订纂修,将相关民事法律规范编纂成一部综合性法典,不断健全完善中国特色社会主义法律体系。这对于以法治方式推进国家治理体系和治理能力现代化,更好地发挥法治固根本、稳预期、利长远的保障作用,具有重要意义。</p>
<p>　　(三)编纂民法典是坚持和完善社会主义基本经济制度、推动经济高质量发展的客观要求</p>
<p>　　公有制为主体、多种所有制经济共同发展,按劳分配为主体、多种分配方式并存,社会主义市场经济体制等社会主义基本经济制度,是以法治为基础、在法治轨道上运行、受法治规则调整的经济制度,社会主义市场经济本质上是法治经济。我国民事主体制度中的法人制度,规范民事活动的民事法律行为制度、代理制度,调整各类财产关系的物权制度,调整各类交易关系的合同制度,保护和救济民事权益的侵权责任制度,都是坚持和完善社会主义基本经济制度不可或缺的法律制度规范和行为规则。同时,我国民事法律制度建设一直秉持“民商合一”的传统,把许多商事法律规范纳入民法之中。编纂民法典,进一步完善我国民商事领域基本法律制度和行为规则,为各类民商事活动提供基本遵循,有利于充分调动民事主体的积极性和创造性、维护交易安全、维护市场秩序,有利于营造各种所有制主体依法平等使用资源要素、公开公平公正参与竞争、同等受到法律保护的市场环境,推动经济高质量发展。</p>
<p>　　(四)编纂民法典是增进人民福祉、维护最广大人民根本利益的必然要求</p>
<p>　　中国特色社会主义法治建设的根本目的是保障人民权益。改革开放以来,我国民事法律制度逐步得到完善和发展,公民的民事权利也得到越来越充分的保护。中国特色社会主义进入新时代,随着我国社会主要矛盾的变化,随着经济发展和国民财富的不断积累,随着信息化和大数据时代的到来,人民群众在民主、法治、公平、正义、安全、环境等方面的要求日益增长,希望对权利的保护更加充分、更加有效。党的十九大明确提出,要保护人民人身权、财产权、人格权。而现行民事立法中的有些规范已经滞后,难以适应人民日益增长的美好生活需要。编纂民法典,健全和充实民事权利种类,形成更加完备的民事权利体系,完善权利保护和救济规则,形成规范有效的权利保护机制,对于更好地维护人民权益,不断增加人民群众获得感、幸福感和安全感,促进人的全面发展,具有十分重要的意义。</p>
<p>　　二、编纂民法典的总体要求和基本原则</p>
<p>　　民法典是新中国第一部以法典命名的法律,开创了我国法典编纂立法的先河,具有里程碑意义。以习近平同志为核心的党中央高度重视民法典编纂工作,将编纂民法典列入党中央重要工作议程,并对编纂民法典工作任务作出总体部署、提出明确要求。十二届、十三届全国人大常委会都高度重视这一立法工作,将编纂民法典纳入全国人大常委会立法规划和年度立法工作计划,确定为全国人大常委会的立法工作重点项目,积极持续推进。为做好民法典编纂工作,全国人大常委会党组先后多次向党中央请示和报告,就民法典编纂工作的总体考虑、工作步骤、体例结构等重大问题进行汇报。2016年6月、2018年8月、2019年12月,习近平总书记三次主持中央政治局常委会会议,听取并原则同意全国人大常委会党组就民法典编纂工作所作的请示汇报,对民法典编纂工作作出重要指示,为民法典编纂工作提供了重要指导和基本遵循。</p>
<p>　　编纂民法典的指导思想是:高举中国特色社会主义伟大旗帜,以马克思列宁主义、毛泽东思想、邓小平理论、“三个代表”重要思想、科学发展观、习近平新时代中国特色社会主义思想为指导,增强“四个意识”,坚定“四个自信”,做到“两个维护”,全面贯彻党的十八大、十九大和有关中央全会精神,坚持党的领导、人民当家作主、依法治国有机统一,紧紧围绕统筹推进“五位一体”总体布局和协调推进“四个全面”战略布局,紧紧围绕建设中国特色社会主义法治体系、建设社会主义法治国家,总结实践经验,适应时代要求,对我国现行的、制定于不同时期的民法通则、物权法、合同法、担保法、婚姻法、收养法、继承法、侵权责任法和人格权方面的民事法律规范进行全面系统的编订纂修,形成一部具有中国特色、体现时代特点、反映人民意愿的民法典,为新时代坚持和完善中国特色社会主义制度、实现“两个一百年”奋斗目标、实现中华民族伟大复兴中国梦提供完备的民事法治保障。</p>
<p>　　贯彻上述指导思想,切实做好民法典编纂工作,必须遵循和体现以下基本原则:一是坚持正确政治方向,全面贯彻习近平总书记全面依法治国新理念新思想新战略,坚决贯彻党中央的决策部署,坚持服务党和国家工作大局,充分发挥民法典在坚持和完善中国特色社会主义制度、推进国家治理体系和治理能力现代化中的重要作用。二是坚持以人民为中心,以保护民事权利为出发点和落脚点,切实回应人民的法治需求,更好地满足人民日益增长的美好生活需要,充分实现好、维护好、发展好最广大人民的根本利益,使民法典成为新时代保护人民民事权利的好法典。三是坚持立足国情和实际,全面总结我国改革开放40多年来民事立法和实践经验,以法典化方式巩固、确认和发展民事法治建设成果,以实践需求指引立法方向,提高民事法律制度的针对性、有效性、适应性,发挥法治的引领、规范、保障作用。四是坚持依法治国与以德治国相结合,注重将社会主义核心价值观融入民事法律规范,大力弘扬传统美德和社会公德,强化规则意识,倡导契约精神,维护公序良俗。五是坚持科学立法、民主立法、依法立法,不断增强民事法律规范的系统性、完整性,既保持民事法律制度的连续性、稳定性,又保持适度的前瞻性、开放性,同时处理好、衔接好法典化民事法律制度下各类规范之间的关系。</p>
<p>　　三、民法典编纂工作情况</p>
<p>　　根据党中央的工作部署,编纂民法典的起草工作由全国人大常委会法制工作委员会牵头,最高人民法院、最高人民检察院、司法部、中国社会科学院、中国法学会为参加单位。为做好民法典编纂工作,全国人大常委会法制工作委员会与五家参加单位成立了民法典编纂工作协调小组,并成立了民法典编纂工作专班。</p>
<p>　　编纂民法典不是制定全新的民事法律,也不是简单的法律汇编,而是对现行的民事法律规范进行编订纂修,对已经不适应现实情况的规定进行修改完善,对经济社会生活中出现的新情况、新问题作出有针对性的新规定。编纂民法典采取“两步走”的工作思路进行:第一步,制定民法总则,作为民法典的总则编;第二步,编纂民法典各分编,经全国人大常委会审议和修改完善后,再与民法总则合并为一部完整的民法典草案。</p>
<p>　　2015年3月,全国人大常委会法制工作委员会启动民法典编纂工作,着手第一步的民法总则制定工作,以1986年制定的民法通则为基础,系统梳理总结有关民事法律的实践经验,提炼民事法律制度中具有普遍适用性和引领性的规则,形成民法总则草案,2016年由十二届全国人大常委会进行了三次审议,2017年3月由第十二届全国人民代表大会第五次会议审议通过。制定民法总则,完成了民法典编纂工作的第一步,为民法典编纂奠定了坚实基础。</p>
<p>　　民法总则通过后,十二届、十三届全国人大常委会接续努力、抓紧开展作为民法典编纂第二步的各分编编纂工作。法制工作委员会与民法典编纂工作各参加单位全力推进民法典各分编编纂工作,系统梳理、研究历年来有关方面提出的意见,开展立法调研,广泛听取意见建议,以现行物权法、合同法、担保法、婚姻法、收养法、继承法、侵权责任法等为基础,结合我国经济社会发展对民事法律提出的新需求,形成了包括物权、合同、人格权、婚姻家庭、继承、侵权责任等6个分编在内的民法典各分编草案,提请2018年8月召开的第十三届全国人大常委会第五次会议审议。其后,2018年12月、2019年4月、6月、8月、10月,第十三届全国人大常委会第七次、第十次、第十一次、第十二次、第十四次会议对民法典各分编草案进行了拆分审议,对全部6个分编草案进行了二审,对各方面比较关注的人格权、婚姻家庭、侵权责任3个分编草案进行了三审。在此基础上,将民法总则与经过常委会审议和修改完善的民法典各分编草案合并,形成《中华人民共和国民法典(草案)》,提请2019年12月召开的第十三届全国人大常委会第十五次会议审议。经审议,全国人大常委会作出决定,将民法典草案提请本次大会审议。</p>
<p>　　民法典草案经全国人大常委会审议后,全国人大常委会办公厅将草案印发十三届全国人大代表、部署组织全国人大代表研读讨论民法典草案工作,征求代表意见。同时,法制工作委员会还将草案印发地方人大、基层立法联系点、中央有关部门征求意见,并在中国人大网公布征求社会公众意见。法制工作委员会还在北京召开多个座谈会,听取有关部门、专家的意见。各方面普遍认为,编纂民法典,对于完善中国特色社会主义法律体系,以法治方式推进国家治理体系和治理能力现代化,切实维护最广大人民的根本利益,促进社会公平正义具有重要意义。</p>
<p>　　新冠肺炎疫情发生以来,全国人大常委会高度关注,栗战书委员长多次就贯彻落实习近平总书记对疫情防控工作的重要讲话精神和党中央决策部署,为疫情防控工作提供法治保障提出明确的工作要求。我们认真学习贯彻习近平总书记重要讲话精神和党中央决策部署,结合民法典编纂工作,对与疫情相关的民事法律制度进行梳理研究,对草案作了有针对性的修改完善。</p>
<p>　　2020年4月20日、21日,全国人大宪法和法律委员会召开会议,根据全国人大常委会的审议意见、代表研读讨论中提出的意见和各方面的意见,对民法典草案作了进一步修改完善;认为经过全国人大常委会多次审议和广泛征求意见,草案充分吸收各方面的意见建议,已经比较成熟,形成了提请本次会议审议的《中华人民共和国民法典(草案)》。</p>
<p>　　为进一步做好会议审议民法典草案的准备工作,更充分听取全国人大代表的意见,4月29日,法制工作委员会将修改后的民法典草案再次发送给各省、自治区、直辖市人大常委会,请各地方以适当方式组织有关全国人大代表研读讨论,听取意见。</p>
<p>　　四、民法典草案的主要内容</p>
<p>　　《中华人民共和国民法典(草案)》共7编、1260条,各编依次为总则、物权、合同、人格权、婚姻家庭、继承、侵权责任,以及附则。</p>
<p>　　(一)总则编</p>
<p>　　第一编“总则”规定民事活动必须遵循的基本原则和一般性规则,统领民法典各分编。第一编基本保持现行民法总则的结构和内容不变,根据法典编纂体系化要求对个别条款作了文字修改,并将“附则”部分移到民法典草案的最后。第一编共10章、204条,主要内容有:</p>
<p>　　1.关于基本规定。第一编第一章规定了民法典的立法目的和依据。其中,将“弘扬社会主义核心价值观”作为一项重要的立法目的,体现坚持依法治国与以德治国相结合的鲜明中国特色(草案第一条)。同时,规定了民事权利及其他合法权益受法律保护,确立了平等、自愿、公平、诚信、守法和公序良俗等民法基本原则(草案第四条至第八条)。为贯彻习近平生态文明思想,将绿色原则确立为民法的基本原则,规定民事主体从事民事活动,应当有利于节约资源、保护生态环境(草案第九条)。</p>
<p>　　2.关于民事主体。民事主体是民事关系的参与者、民事权利的享有者、民事义务的履行者和民事责任的承担者,具体包括三类:一是自然人。自然人是最基本的民事主体。草案规定了自然人的民事权利能力和民事行为能力制度、监护制度、宣告失踪和宣告死亡制度,并对个体工商户和农村承包经营户作了规定(草案第一编第二章)。结合此次疫情防控工作,对监护制度作了进一步完善,规定因发生突发事件等紧急情况,监护人暂时无法履行监护职责,被监护人的生活处于无人照料状态的,被监护人住所地的居民委员会、村民委员会或者民政部门应当为被监护人安排必要的临时生活照料措施(草案第三十四条第四款)。二是法人。法人是依法成立的,具有民事权利能力和民事行为能力,依法独立享有民事权利和承担民事义务的组织。草案规定了法人的定义、成立原则和条件、住所等一般规定,并对营利法人、非营利法人、特别法人三类法人分别作了具体规定(草案第一编第三章)。三是非法人组织。非法人组织是不具有法人资格,但是能够依法以自己的名义从事民事活动的组织。草案对非法人组织的设立、责任承担、解散、清算等作了规定(草案第一编第四章)。</p>
<p>　　3.关于民事权利。保护民事权利是民事立法的重要任务。第一编第五章规定了民事权利制度,包括各种人身权利和财产权利。为建设创新型国家,草案对知识产权作了概括性规定,以统领各个单行的知识产权法律(草案第一百二十三条)。同时,对数据、网络虚拟财产的保护作了原则性规定(草案第一百二十七条)。此外,还规定了民事权利的取得和行使规则等内容(草案第一百二十九条至第一百三十二条)。</p>
<p>　　4.关于民事法律行为和代理。民事法律行为是民事主体通过意思表示设立、变更、终止民事法律关系的行为,代理是民事主体通过代理人实施民事法律行为的制度。第一编第六章、第七章规定了民事法律行为制度、代理制度:一是规定民事法律行为的定义、成立、形式和生效时间等(草案第一编第六章第一节)。二是对意思表示的生效、方式、撤回和解释等作了规定(草案第一编第六章第二节)。三是规定民事法律行为的效力制度(草案第一编第六章第三节)。四是规定了代理的适用范围、效力、类型等代理制度的内容(草案第一编第七章)。</p>
<p>　　5.关于民事责任、诉讼时效和期间计算。民事责任是民事主体违反民事义务的法律后果,是保障和维护民事权利的重要制度。诉讼时效是权利人在法定期间内不行使权利,权利不受保护的法律制度,其功能主要是促使权利人及时行使权利、维护交易安全、稳定法律秩序。第一编第八章、第九章、第十章规定了民事责任、诉讼时效和期间计算制度:一是规定了民事责任的承担方式,并对不可抗力、正当防卫、紧急避险、自愿实施紧急救助等特殊的民事责任承担问题作了规定(草案第一编第八章)。二是规定了诉讼时效的期间及其起算、法律效果,诉讼时效的中止、中断等内容(草案第一编第九章)。三是规定了期间的计算单位、起算、结束和顺延等(草案第一编第十章)。</p>
<p>　　(二)物权编</p>
<p>　　物权是民事主体依法享有的重要财产权。物权法律制度调整因物的归属和利用而产生的民事关系,是最重要的民事基本制度之一。2007年第十届全国人民代表大会第五次会议通过了物权法。草案第二编“物权”在现行物权法的基础上,按照党中央提出的完善产权保护制度,健全归属清晰、权责明确、保护严格、流转顺畅的现代产权制度的要求,结合现实需要,进一步完善了物权法律制度。第二编共5个分编、20章、258条,主要内容有:</p>
<p>　　1.关于通则。第一分编为通则,规定了物权制度基础性规范,包括平等保护等物权基本原则,物权变动的具体规则,以及物权保护制度。党的十九届四中全会通过的《中共中央关于坚持和完善中国特色社会主义制度推进国家治理体系和治理能力现代化若干重大问题的决定》对社会主义基本经济制度有了新的表述,为贯彻会议精神,草案将有关基本经济制度的规定修改为:“国家坚持和完善公有制为主体、多种所有制经济共同发展,按劳分配为主体、多种分配方式并存,社会主义市场经济体制等社会主义基本经济制度。”(草案第二百零六条第一款)</p>
<p>　　2.关于所有权。所有权是物权的基础,是所有人对自己的不动产或者动产依法享有占有、使用、收益和处分的权利。第二分编规定了所有权制度,包括所有权人的权利,征收和征用规则,国家、集体和私人的所有权,相邻关系、共有等所有权基本制度。针对近年来群众普遍反映业主大会成立难、公共维修资金使用难等问题,并结合此次新冠肺炎疫情防控工作,在现行物权法规定的基础上,进一步完善了业主的建筑物区分所有权制度:一是明确地方政府有关部门、居民委员会应当对设立业主大会和选举业主委员会给予指导和协助(草案第二百七十七条第二款)。二是适当降低业主共同决定事项,特别是使用建筑物及其附属设施维修资金的表决门槛,并增加规定紧急情况下使用维修资金的特别程序(草案第二百七十八条、第二百八十一条第二款)。三是结合疫情防控工作,在征用组织、个人的不动产或者动产的事由中增加“疫情防控”;明确物业服务企业和业主的相关责任和义务,增加规定物业服务企业或者其他管理人应当执行政府依法实施的应急处置措施和其他管理措施,积极配合开展相关工作,业主应当依法予以配合(草案第二百四十五条、第二百八十五条第二款、第二百八十六条第一款)。</p>
<p>　　3.关于用益物权。用益物权是指权利人依法对他人的物享有占有、使用和收益的权利。第三分编规定了用益物权制度,明确了用益物权人的基本权利和义务,以及建设用地使用权、宅基地使用权、地役权等用益物权。草案还在现行物权法规定的基础上,作了进一步完善:一是落实党中央关于完善产权保护制度依法保护产权的要求,明确住宅建设用地使用权期限届满的,自动续期;续期费用的缴纳或者减免,依照法律、行政法规的规定办理(草案第三百五十九条第一款)。二是完善农村集体产权相关制度,落实农村承包地“三权分置”改革的要求,对土地承包经营权的相关规定作了完善,增加土地经营权的规定,并删除耕地使用权不得抵押的规定,以适应“三权分置”后土地经营权入市的需要(草案第二编第十一章、第三百九十九条)。考虑到农村集体建设用地和宅基地制度改革正在推进过程中,草案与土地管理法等作了衔接性规定(草案第三百六十一条、第三百六十三条)。三是为贯彻党的十九大提出的加快建立多主体供给、多渠道保障住房制度的要求,增加规定“居住权”这一新型用益物权,明确居住权原则上无偿设立,居住权人有权按照合同约定或者遗嘱,经登记占有、使用他人的住宅,以满足其稳定的生活居住需要(草案第二编第十四章)。</p>
<p>　　4.关于担保物权。担保物权是指为了确保债务履行而设立的物权,包括抵押权、质权和留置权。第四分编对担保物权作了规定,明确了担保物权的含义、适用范围、担保范围等共同规则,以及抵押权、质权和留置权的具体规则。草案在现行物权法规定的基础上,进一步完善了担保物权制度,为优化营商环境提供法治保障:一是扩大担保合同的范围,明确融资租赁、保理、所有权保留等非典型担保合同的担保功能,增加规定担保合同包括抵押合同、质押合同和其他具有担保功能的合同(草案第三百八十八条第一款)。二是删除有关担保物权具体登记机构的规定,为建立统一的动产抵押和权利质押登记制度留下空间。三是简化抵押合同和质押合同的一般条款(草案第四百条第二款、第四百二十七条第二款)。四是明确实现担保物权的统一受偿规则(草案第四百一十四条)。</p>
<p>　　5.关于占有。占有是指对不动产或者动产事实上的控制与支配。第五分编对占有的调整范围、无权占有情形下的损害赔偿责任、原物及孳息的返还以及占有保护等作了规定。(草案第二编第二十章)</p>
<p>　　(三)合同编</p>
<p>　　合同制度是市场经济的基本法律制度。1999年第九届全国人民代表大会第二次会议通过了合同法。草案第三编“合同”在现行合同法的基础上,贯彻全面深化改革的精神,坚持维护契约、平等交换、公平竞争,促进商品和要素自由流动,完善合同制度。第三编共3个分编、29章、526条,主要内容有:</p>
<p>　　1.关于通则。第一分编为通则,规定了合同的订立、效力、履行、保全、转让、终止、违约责任等一般性规则,并在现行合同法的基础上,完善了合同总则制度:一是通过规定非合同之债的法律适用规则、多数人之债的履行规则等完善债法的一般性规则(草案第四百六十八条、第五百一十七条至第五百二十一条)。二是完善了电子合同订立规则,增加了预约合同的具体规定,完善了格式条款制度等合同订立制度(草案第四百九十一条、第四百九十五条至第四百九十八条)。三是结合新冠肺炎疫情防控工作,完善国家订货合同制度,规定国家根据抢险救灾、疫情防控或者其他需要下达国家订货任务、指令性计划的,有关民事主体之间应当依照有关法律、行政法规规定的权利和义务订立合同(草案第四百九十四条第一款)。四是针对实践中一方当事人违反义务不办理报批手续影响合同生效的问题,草案明确了当事人违反报批义务的法律后果,健全合同效力制度(草案第五百零二条第二款)。五是完善合同履行制度,落实绿色原则,规定当事人在履行合同过程中应当避免浪费资源、污染环境和破坏生态(草案第五百零九条第三款)。同时,在总结司法实践经验的基础上增加规定了情势变更制度(草案第五百三十三条)。六是完善代位权、撤销权等合同保全制度,进一步强化对债权人的保护,细化了债权转让、债务移转制度,增加了债务清偿抵充规则、完善了合同解除等合同终止制度(草案第三编第五章、第五百四十五条至第五百五十六条、第五百六十条、第五百六十三条至第五百六十六条)。七是通过吸收现行担保法有关定金规则的规定,完善违约责任制度(草案第五百八十六条至第五百八十八条)。</p>
<p>　　2.关于典型合同。典型合同在市场经济活动和社会生活中应用普遍。为适应现实需要,在现行合同法规定的买卖合同、赠与合同、借款合同、租赁合同等15种典型合同的基础上,第二分编增加了4种新的典型合同:一是吸收了担保法中关于保证的内容,增加了保证合同(草案第三编第十三章)。二是适应我国保理行业发展和优化营商环境的需要,增加了保理合同(草案第三编第十六章)。三是针对物业服务领域的突出问题,增加规定了物业服务合同(草案第三编第二十四章)。四是增加规定合伙合同,将民法通则中有关个人合伙的规定纳入其中(草案第三编第二十七章)。</p>
<p>　　第三编还在总结现行合同法实践经验的基础上,完善了其他典型合同:一是通过完善检验期限的规定和所有权保留规则等完善买卖合同(草案第六百二十二条、第六百二十三条、第六百四十一条至第六百四十三条)。二是为维护正常的金融秩序,明确规定禁止高利放贷,借款的利率不得违反国家有关规定(草案第六百八十条第一款)。三是落实党中央提出的建立租购同权住房制度的要求,保护承租人利益,增加规定房屋承租人的优先承租权(草案第七百三十四条第二款)。四是针对近年来客运合同领域出现的旅客霸座、不配合承运人采取安全运输措施等严重干扰运输秩序和危害运输安全的问题,维护正常的运输秩序,草案细化了客运合同当事人的权利义务(草案第八百一十五条第一款、第八百一十九条、第八百二十条)。五是根据经济社会发展需要,修改完善了赠与合同、融资租赁合同、建设工程合同、技术合同等典型合同(草案第三编第十一章、第十五章、第十八章、第二十章)。</p>
<p>　　3.关于准合同。无因管理和不当得利既与合同规则同属债法性质的内容,又与合同规则有所区别,第三分编“准合同”分别对无因管理和不当得利的一般性规则作了规定。(草案第三编第二十八章、第二十九章)</p>
<p>　　(四)人格权编</p>
<p>　　人格权是民事主体对其特定的人格利益享有的权利,关系到每个人的人格尊严,是民事主体最基本的权利。草案第四编“人格权”在现行有关法律法规和司法解释的基础上,从民事法律规范的角度规定自然人和其他民事主体人格权的内容、边界和保护方式,不涉及公民政治、社会等方面权利。第四编共6章、51条,主要内容有:</p>
<p>　　1.关于一般规定。第四编第一章规定了人格权的一般性规则:一是明确人格权的定义(草案第九百九十条)。二是规定民事主体的人格权受法律保护,人格权不得放弃、转让或者继承(草案第九百九十一条、第九百九十二条)。三是规定了对死者人格利益的保护(草案第九百九十四条)。四是明确规定人格权受到侵害后的救济方式(草案第九百九十五条至第一千条)。</p>
<p>　　2.关于生命权、身体权和健康权。第四编第二章规定了生命权、身体权和健康权的具体内容,并对实践中社会比较关注的有关问题作了有针对性的规定:一是为促进医疗卫生事业的发展,鼓励遗体捐献的善行义举,草案吸收行政法规的相关规定,确立器官捐献的基本规则(草案第一千零六条)。二是为规范与人体基因、人体胚胎等有关的医学和科研活动,明确从事此类活动应遵守的规则(草案第一千零九条)。三是近年来,性骚扰问题引起社会较大关注,草案在总结既有立法和司法实践经验的基础上,规定了性骚扰的认定标准,以及机关、企业、学校等单位防止和制止性骚扰的义务(草案第一千零一十条)。</p>
<p>　　3.关于姓名权和名称权。第四编第三章规定了姓名权、名称权的具体内容,并对民事主体尊重保护他人姓名权、名称权的基本义务作了规定:一是对自然人选取姓氏的规则作了规定(草案第一千零一十五条)。二是明确对具有一定社会知名度,被他人使用足以造成公众混淆的笔名、艺名、网名等,参照适用姓名权和名称权保护的有关规定(草案第一千零一十七条)。</p>
<p>　　4.关于肖像权。第四编第四章规定了肖像权的权利内容及许可使用肖像的规则,明确禁止侵害他人的肖像权:一是针对利用信息技术手段“深度伪造”他人的肖像、声音,侵害他人人格权益,甚至危害社会公共利益等问题,规定禁止任何组织或者个人利用信息技术手段伪造等方式侵害他人的肖像权。并明确对自然人声音的保护,参照适用肖像权保护的有关规定(草案第一千零一十九条第一款、第一千零二十三条第二款)。二是为了合理平衡保护肖像权与维护公共利益之间的关系,草案结合司法实践,规定肖像权的合理使用规则(草案第一千零二十条)。三是从有利于保护肖像权人利益的角度,对肖像许可使用合同的解释、解除等作了规定(草案第一千零二十一条、第一千零二十二条)。</p>
<p>　　5.关于名誉权和荣誉权。第四编第五章规定了名誉权和荣誉权的内容:一是为了平衡个人名誉权保护与新闻报道、舆论监督之间的关系,草案对行为人实施新闻报道、舆论监督等行为涉及的民事责任承担,以及行为人是否尽到合理核实义务的认定等作了规定(草案第一千零二十五条、第一千零二十六条)。二是规定民事主体有证据证明报刊、网络等媒体报道的内容失实,侵害其名誉权的,有权请求更正或者删除(草案第一千零二十八条)。</p>
<p>　　6.关于隐私权和个人信息保护。第四编第六章在现行有关法律规定的基础上,进一步强化对隐私权和个人信息的保护,并为下一步制定个人信息保护法留下空间:一是规定了隐私的定义,列明禁止侵害他人隐私权的具体行为(草案第一千零三十二条、第一千零三十三条)。二是界定了个人信息的定义,明确了处理个人信息应遵循的原则和条件(草案第一千零三十四条、第一千零三十五条)。三是构建自然人与信息处理者之间的基本权利义务框架,明确处理个人信息不承担责任的特定情形,合理平衡保护个人信息与维护公共利益之间的关系(草案第一千零三十六条至第一千零三十八条)。四是规定国家机关及其工作人员负有保护自然人的隐私和个人信息的义务(草案第一千零三十九条)。</p>
<p>　　(五)婚姻家庭编</p>
<p>　　婚姻家庭制度是规范夫妻关系和家庭关系的基本准则。1980年第五届全国人民代表大会第三次会议通过了新的婚姻法,2001年进行了修改。1991年第七届全国人大常委会第二十三次会议通过了收养法,1998年作了修改。草案第五编“婚姻家庭”以现行婚姻法、收养法为基础,在坚持婚姻自由、一夫一妻等基本原则的前提下,结合社会发展需要,修改完善了部分规定,并增加了新的规定。第五编共5章、79条,主要内容有:</p>
<p>　　1.关于一般规定。第五编第一章在现行婚姻法规定的基础上,重申了婚姻自由、一夫一妻、男女平等等婚姻家庭领域的基本原则和规则,并在现行婚姻法的基础上,作了进一步完善:一是为贯彻落实习近平总书记有关加强家庭文明建设的重要讲话精神,更好地弘扬家庭美德,规定家庭应当树立优良家风,弘扬家庭美德,重视家庭文明建设(草案第一千零四十三条第一款)。二是为了更好地维护被收养的未成年人的合法权益,将联合国《儿童权利公约》关于儿童利益最大化的原则落实到收养工作中,增加规定了最有利于被收养人的原则(草案第一千零四十四条第一款)。三是界定了亲属、近亲属、家庭成员的范围(草案第一千零四十五条)。</p>
<p>　　2.关于结婚。第五编第二章规定了结婚制度,并在现行婚姻法的基础上,对有关规定作了完善:一是将受胁迫一方请求撤销婚姻的期间起算点由“自结婚登记之日起”修改为“自胁迫行为终止之日起”(草案第一千零五十二条第二款)。二是不再将“患有医学上认为不应当结婚的疾病”作为禁止结婚的情形,并相应增加规定一方隐瞒重大疾病的,另一方可以向人民法院请求撤销婚姻(草案第一千零五十三条)。三是增加规定婚姻无效或者被撤销的,无过错方有权请求损害赔偿(草案第一千零五十四条第二款)。</p>
<p>　　3.关于家庭关系。第五编第三章规定了夫妻关系、父母子女关系和其他近亲属关系,并根据社会发展需要,在现行婚姻法的基础上,完善了有关内容:一是明确了夫妻共同债务的范围。现行婚姻法没有对夫妻共同债务的范围作出规定。2003年最高人民法院出台司法解释,对夫妻共同债务的认定作出规定,近年来成为社会关注的热点问题。2018年1月,最高人民法院出台新的司法解释,修改了此前关于夫妻共同债务认定的规定。从新司法解释施行效果看,总体上能够有效平衡各方利益,各方面总体上赞同。因此,草案吸收新司法解释的规定,明确了夫妻共同债务的范围(草案第一千零六十四条)。二是规范亲子关系确认和否认之诉。亲子关系问题涉及家庭稳定和未成年人的保护,作为民事基本法律,草案对此类诉讼进行了规范(草案第一千零七十三条)。</p>
<p>　　4.关于离婚。第五编第四章对离婚制度作出了规定,并在现行婚姻法的基础上,作了进一步完善:一是增加离婚冷静期制度。实践中,轻率离婚的现象增多,不利于婚姻家庭的稳定。为此,草案规定了提交离婚登记申请后三十日的离婚冷静期,在此期间,任何一方可以向登记机关撤回离婚申请(草案第一千零七十七条)。二是针对离婚诉讼中出现的“久调不判”问题,增加规定,经人民法院判决不准离婚后,双方又分居满一年,一方再次提起离婚诉讼的,应当准予离婚(草案第一千零七十九条第五款)。三是关于离婚后子女的抚养,将现行婚姻法规定的“哺乳期内的子女,以随哺乳的母亲抚养为原则”修改为“不满两周岁的子女,以由母亲直接抚养为原则”,以增强可操作性(草案第一千零八十四条第三款)。四是将夫妻采用法定共同财产制的,纳入适用离婚经济补偿的范围,以加强对家庭负担较多义务一方权益的保护(草案第一千零八十八条)。五是将“有其他重大过错”增加规定为离婚损害赔偿的适用情形(草案第一千零九十一条第五项)。</p>
<p>　　5.关于收养。第五编第五章对收养关系的成立、收养的效力、收养关系的解除作了规定,并在现行收养法的基础上,进一步完善了有关制度:一是扩大被收养人的范围,删除被收养的未成年人仅限于不满十四周岁的限制,修改为符合条件的未成年人均可被收养(草案第一千零九十三条)。二是与国家计划生育政策的调整相协调,将收养人须无子女的要求修改为收养人无子女或者只有一名子女(草案第一千零九十八条第一项)。三是为进一步强化对被收养人利益的保护,在收养人的条件中增加规定“无不利于被收养人健康成长的违法犯罪记录”,并增加规定民政部门应当依法进行收养评估(草案第一千零九十八条第四项、第一千一百零五条第五款)。</p>
<p>　　(六)继承编</p>
<p>　　继承制度是关于自然人死亡后财富传承的基本制度。1985年第六届全国人民代表大会第三次会议通过了继承法。随着人民群众生活水平的不断提高,个人和家庭拥有的财产日益增多,因继承引发的纠纷也越来越多。根据我国社会家庭结构、继承观念等方面的发展变化,草案第六编“继承”在现行继承法的基础上,修改完善了继承制度,以满足人民群众处理遗产的现实需要。第六编共4章、45条,主要内容有:</p>
<p>　　1.关于一般规定。第六编第一章规定了继承制度的基本规则,重申了国家保护自然人的继承权,规定了继承的基本制度。并在现行继承法的基础上,作了进一步完善:一是增加规定相互有继承关系的数人在同一事件中死亡,且难以确定死亡时间的继承规则(草案第一千一百二十一条第二款)。二是增加规定对继承人的宽恕制度,对继承权法定丧失制度予以完善(草案第一千一百二十五条第二款)。</p>
<p>　　2.关于法定继承。法定继承是在被继承人没有对其遗产的处理立有遗嘱的情况下,继承人的范围、继承顺序等均按照法律规定确定的继承方式。第六编第二章规定了法定继承制度,明确了继承权男女平等原则,规定了法定继承人的顺序和范围,以及遗产分配的基本制度。同时,在现行继承法的基础上,完善代位继承制度,增加规定被继承人的兄弟姐妹先于被继承人死亡的,由被继承人的兄弟姐妹的子女代位继承(草案第一千一百二十八条第二款)。</p>
<p>　　3.关于遗嘱继承和遗赠。遗嘱继承是根据被继承人生前所立遗嘱处理遗产的继承方式。第六编第三章规定了遗嘱继承和遗赠制度,并在现行继承法的基础上,进一步修改完善了遗嘱继承制度:一是增加了打印、录像等新的遗嘱形式(草案第一千一百三十六条、第一千一百三十七条)。二是修改了遗嘱效力规则,删除了现行继承法关于公证遗嘱效力优先的规定,切实尊重遗嘱人的真实意愿。</p>
<p>　　4.关于遗产的处理。第六编第四章规定了遗产处理的程序和规则,并在现行继承法的基础上,进一步完善了有关遗产处理的制度:一是增加遗产管理人制度。为确保遗产得到妥善管理、顺利分割,更好地维护继承人、债权人利益,草案增加规定了遗产管理人制度,明确了遗产管理人的产生方式、职责和权利等内容(草案第一千一百四十五条至第一千一百四十九条)。二是完善遗赠扶养协议制度,适当扩大扶养人的范围,明确继承人以外的组织或者个人均可以成为扶养人,以满足养老形式多样化需求(草案第一千一百五十八条)。三是完善无人继承遗产的归属制度,明确归国家所有的无人继承遗产应当用于公益事业(草案第一千一百六十条)。</p>
<p>　　(七)侵权责任编</p>
<p>　　侵权责任是民事主体侵害他人权益应当承担的法律后果。2009年第十一届全国人大常委会第十二次会议通过了侵权责任法。侵权责任法实施以来,在保护民事主体的合法权益、预防和制裁侵权行为方面发挥了重要作用。草案第七编“侵权责任”在总结实践经验的基础上,针对侵权领域出现的新情况,吸收借鉴司法解释的有关规定,对侵权责任制度作了必要的补充和完善。第七编共10章、95条,主要内容有:</p>
<p>　　1.关于一般规定。第七编第一章规定了侵权责任的归责原则、多数人侵权的责任承担、侵权责任的减轻或者免除等一般规则。并在现行侵权责任法的基础上作了进一步的完善:一是确立“自甘风险”规则,规定自愿参加具有一定风险的文体活动,因其他参加者的行为受到损害的,受害人不得请求没有故意或者重大过失的其他参加者承担侵权责任(草案第一千一百七十六条第一款)。二是规定“自助行为”制度,明确合法权益受到侵害,情况紧迫且不能及时获得国家机关保护,不立即采取措施将使其合法权益受到难以弥补的损害的,受害人可以在保护自己合法权益的必要范围内采取扣留侵权人的财物等合理措施,但是应当立即请求有关国家机关处理。受害人采取的措施不当造成他人损害的,应当承担侵权责任(草案第一千一百七十七条)。</p>
<p>　　2.关于损害赔偿。第七编第二章规定了侵害人身权益和财产权益的赔偿规则、精神损害赔偿规则等。同时,在现行侵权责任法的基础上,对有关规定作了进一步完善:一是完善精神损害赔偿制度,规定因故意或者重大过失侵害自然人具有人身意义的特定物造成严重精神损害的,被侵权人有权请求精神损害赔偿(草案第一千一百八十三条第二款)。二是为加强对知识产权的保护,提高侵权违法成本,草案增加规定,故意侵害他人知识产权,情节严重的,被侵权人有权请求相应的惩罚性赔偿(草案第一千一百八十五条)。</p>
<p>　　3.关于责任主体的特殊规定。第七编第三章规定了无民事行为能力人、限制民事行为能力人及其监护人的侵权责任,用人单位的侵权责任,网络侵权责任,以及公共场所的安全保障义务等。同时,草案在现行侵权责任法的基础上作了进一步完善:一是增加规定委托监护的侵权责任(草案第一千一百八十九条)。二是完善网络侵权责任制度。为了更好地保护权利人的利益,平衡好网络用户和网络服务提供者之间的利益,草案细化了网络侵权责任的具体规定,完善了权利人通知规则和网络服务提供者的转通知规则(草案第一千一百九十五条、第一千一百九十六条)。</p>
<p>　　4.关于各种具体侵权责任。第七编的其他各章分别对产品生产销售、机动车交通事故、医疗、环境污染和生态破坏、高度危险、饲养动物、建筑物和物件等领域的侵权责任规则作出了具体规定。并在现行侵权责任法的基础上,对有关内容作了进一步完善:一是完善生产者、销售者召回缺陷产品的责任,增加规定,依照相关规定采取召回措施的,生产者、销售者应当负担被侵权人因此支出的必要费用(草案第一千二百零六条第二款)。二是明确交通事故损害赔偿的顺序,即先由机动车强制保险理赔,不足部分由机动车商业保险理赔,仍不足的由侵权人赔偿(草案第一千二百一十三条)。三是进一步保障患者的知情同意权,明确医务人员的相关说明义务,加强医疗机构及其医务人员对患者隐私和个人信息的保护(草案第一千二百一十九条、第一千二百二十六条)。四是贯彻落实习近平生态文明思想,增加规定生态环境损害的惩罚性赔偿制度,并明确规定了生态环境损害的修复和赔偿规则(草案第一千二百三十二条、第一千二百三十四条、第一千二百三十五条)。五是加强生物安全管理,完善高度危险责任,明确占有或者使用高致病性危险物造成他人损害的,应当承担侵权责任(草案第一千二百三十九条)。六是完善高空抛物坠物治理规则。为保障好人民群众的生命财产安全,草案对高空抛物坠物治理规则作了进一步的完善,规定禁止从建筑物中抛掷物品,同时针对此类事件处理的主要困难是行为人难以确定的问题,强调有关机关应当依法及时调查,查清责任人,并规定物业服务企业等建筑物管理人应当采取必要的安全保障措施防止此类行为的发生(草案第一千二百五十四条)。</p>
<p>　　(八)附则</p>
<p>　　草案最后部分“附则”明确了民法典与婚姻法、继承法、民法通则、收养法、担保法、合同法、物权法、侵权责任法、民法总则的关系。民法典施行后,上述民事单行法律将被替代。因此,草案规定在民法典施行之时,同步废止上述民事单行法律(草案第一千二百六十条)。需要说明的是,2014年第十二届全国人大常委会第十一次会议通过的《全国人民代表大会常务委员会关于&lt;中华人民共和国民法通则&gt;第九十九条第一款、&lt;中华人民共和国婚姻法&gt;第二十二条的解释》,作为与民法通则、婚姻法相关的法律解释,也同步废止。</p>
<p>　　《中华人民共和国民法典(草案)》和以上说明,请审议。</p>
<p>注：本文内容来自于<a href="http://www.elawcn.com" target="_blank" rel="noopener">中国互联网法务网</a>整理。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>docker中安装php+mysql+nginx</title>
    <url>/p/18e52500.html</url>
    <content><![CDATA[<h1 id="1、拉取镜像"><a href="#1、拉取镜像" class="headerlink" title="1、拉取镜像"></a>1、拉取镜像</h1><p>php和mysql不要用最新的版本，听说有很多坑</p>
<pre><code class="line-numbers language-bash">docker pull nginx
docker pull php:7.1-fpm
docker pull mysql:5.7</code></pre>
<h1 id="2-创建文件夹"><a href="#2-创建文件夹" class="headerlink" title="2. 创建文件夹"></a>2. 创建文件夹</h1><pre><code class="line-numbers language-bash"># 网站目录
mkdir -p /data/www
# nginx 配置
mkdir -p /data/nginx/conf.d

# mysql数据
mkdir -p /data/mysql/data
# mysql配置
mkdir -p /data/mysql/conf.d</code></pre>
<h1 id="3、创建-Nginx-容器"><a href="#3、创建-Nginx-容器" class="headerlink" title="3、创建 Nginx 容器"></a>3、创建 Nginx 容器</h1><p>将nginx配置文件<code>nginx.conf</code>复制到主机<code>/data/nginx</code>目录中</p>
<pre><code class="line-numbers language-bash">docker run --rm nginx cat /etc/nginx/nginx.conf &gt; /data/nginx/nginx.conf</code></pre>
<p>创建nginx</p>
<pre><code class="line-numbers language-bash">docker run --name nginx \
-v /data/www:/usr/local/html \
-v /data/nginx/conf.d:/etc/nginx/conf.d \
-v /data/nginx/nginx.conf:/etc/nginx/nginx.conf:ro \
--net=host \
-d nginx</code></pre>
<p>这里会启动失败，因为缺少个default.conf配置，后面php容器创建好后会添加</p>
<h1 id="4-创建-PHP-容器"><a href="#4-创建-PHP-容器" class="headerlink" title="4. 创建 PHP 容器"></a>4. 创建 PHP 容器</h1><pre><code class="line-numbers language-bash">docker run --name php-fpm \
-v /data/www:/var/www/html \
-d php:7.1-fpm</code></pre>
<h1 id="5-查看-PHP-容器的IP"><a href="#5-查看-PHP-容器的IP" class="headerlink" title="5. 查看 PHP 容器的IP"></a>5. 查看 PHP 容器的IP</h1><pre><code class="line-numbers language-bash">docker inspect php-fpm --format=&#39;{{.NetworkSettings.IPAddress}}&#39;

# 返回 IP
172.17.0.2</code></pre>
<h1 id="6-创建-Nginx-配置文件"><a href="#6-创建-Nginx-配置文件" class="headerlink" title="6. 创建 Nginx 配置文件"></a>6. 创建 Nginx 配置文件</h1><pre><code class="line-numbers language-bash">vim /data/nginx/conf.d/default.conf

server {
    listen       80;
    server_name  localhost;

    location / {
        root   /usr/share/nginx/html;
        index  index.php index.html index.htm;
    }

    location ~ \.php(.*)$ {
        root          /var/www/html;           # php 容器的目录,进 php 容器查看
        fastcgi_pass  172.17.0.2:9000;         # php 容器的IP
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
    }

}</code></pre>
<p>修改后重启一下  nginx 容器 </p>
<pre><code class="line-numbers language-bash">docker restart nginx    </code></pre>
<h1 id="7-测试"><a href="#7-测试" class="headerlink" title="7. 测试"></a>7. 测试</h1><p>编写测试页</p>
<pre><code class="line-numbers language-bash">echo &quot;&lt;?php phpinfo(); ?&gt;&quot; &gt; /data/www/info.php</code></pre>
<p>测试</p>
<pre><code class="line-numbers language-bash">curl http://127.0.0.1/info.php</code></pre>
<h1 id="8-创建-MySQL-容器"><a href="#8-创建-MySQL-容器" class="headerlink" title="8. 创建 MySQL 容器"></a>8. 创建 MySQL 容器</h1><pre><code class="line-numbers language-bash">docker run --name mysql \
-p 3306:3306 \
-v /data/mysql/conf.d:/etc/mysql/conf.d \
-v /data/mysql/data:/var/lib/mysql \
-e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</code></pre>
<h1 id="9-PHP-安装-MySQLI-扩展"><a href="#9-PHP-安装-MySQLI-扩展" class="headerlink" title="9. PHP 安装 MySQLI 扩展"></a>9. PHP 安装 MySQLI 扩展</h1><pre><code class="line-numbers language-bash"># 进入容器
docker exec -it php-fpm /bin/bash

# 安装 pdo_mysql mysqli
docker-php-ext-install pdo_mysql mysqli

# CTRL + D 退出容器
docker restart php-fpm</code></pre>
<h1 id="10-连接-MySQL测试"><a href="#10-连接-MySQL测试" class="headerlink" title="10. 连接 MySQL测试"></a>10. 连接 MySQL测试</h1><p>查看mysql的ip</p>
<pre><code class="line-numbers language-bash">docker inspect mysql --format=&#39;{{.NetworkSettings.IPAddress}}&#39;

# 返回 IP
172.17.0.3</code></pre>
<p>编辑连接测试文件 <code>vim /data/www/conn.php</code></p>
<pre><code class="line-numbers language-php">&lt;?php
        $serve = &#39;172.17.0.3:3306&#39;;
        $username = &#39;root&#39;;
        $password = &#39;123456&#39;;
        $dbname = &#39;mysql&#39;;

        $mysqli = new Mysqli($serve,$username,$password,$dbname);

        if ($mysqli-&gt;connect_error) {
                die(&#39;connect error:&#39;.$mysqli-&gt;connect_errno);
        }

        $mysqli-&gt;set_charset(&#39;UTF-8&#39;);
        $result = $mysqli-&gt;query(&#39;select * from user&#39;);
        $data = $result-&gt;fetch_all();
        print_r($data);
?&gt;</code></pre>
<p>测试</p>
<pre><code class="line-numbers language-bash">curl http://127.0.0.1/conn.php</code></pre>
<p>本文参考：<a href="https://blog.csdn.net/mshxuyi/article/details/105409457" target="_blank" rel="noopener">https://blog.csdn.net/mshxuyi/article/details/105409457</a></p>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>linux连接信息监控</title>
    <url>/p/1b461af6.html</url>
    <content><![CDATA[<p>最近发现一直有人在暴力破解远程登录信息，在linux中可以用iptraf监控所有的连接信息。<br>iptraf是一个基于ncurses开发的IP局域网监控工具，它可以实时地监视网卡流量，可以生成各种网络统计数据，包括TCP信息、UDP统计、ICMP和OSPF信息、以太网负载信息、节点统计、IP校验和错误和其它一些信息。</p>
<h1 id="1-安装iptraf"><a href="#1-安装iptraf" class="headerlink" title="1. 安装iptraf"></a>1. 安装iptraf</h1><h2 id="centos中"><a href="#centos中" class="headerlink" title="centos中"></a>centos中</h2><pre><code class="line-numbers language-bash">yum install iptraf</code></pre>
<h2 id="ubuntu中"><a href="#ubuntu中" class="headerlink" title="ubuntu中"></a>ubuntu中</h2><pre><code class="line-numbers language-bash">apt install iptraf </code></pre>
<h1 id="2-使得iptraf后台运行并产生日志"><a href="#2-使得iptraf后台运行并产生日志" class="headerlink" title="2. 使得iptraf后台运行并产生日志"></a>2. 使得iptraf后台运行并产生日志</h1><pre><code class="line-numbers language-bash">iptraf-ng -i eth0 -L /var/log/traffic_log -B</code></pre>
<table>
<thead>
<tr>
<th>参数命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>-i iface</td>
<td>网络接口：立即在指定网络接口上开启IP流量监视,iface为all指监视所有的网络接口，iface指相应的interface</td>
</tr>
<tr>
<td>-g</td>
<td>立即开始生成网络接口的概要状态信息</td>
</tr>
<tr>
<td>-d iface</td>
<td>网络接口：在指定网络接口上立即开始监视明细的网络流量信息,iface指相应的interface</td>
</tr>
<tr>
<td>-s iface</td>
<td>网络接口：在指定网络接口上立即开始监视TCP和UDP网络流量信息,iface指相应的interface</td>
</tr>
<tr>
<td>-z iface</td>
<td>网络接口：在指定网络接口上显示包计数,iface指相应的interface</td>
</tr>
<tr>
<td>-l iface</td>
<td>网络接口：在指定网络接口上立即开始监视局域网工作站信息,iface指相应的interface</td>
</tr>
<tr>
<td>-t timeout</td>
<td>时间：指定iptraf指令监视的时间，timeout指监视时间的minute数</td>
</tr>
<tr>
<td>-B</td>
<td>将标注输出重新定向到“/dev/null”，关闭标注输入，将程序作为后台进程运行</td>
</tr>
<tr>
<td>-L logfile</td>
<td>指定一个文件用于记录所有命令行的log，默认文件是地址：/var/log/iptraf</td>
</tr>
<tr>
<td>-I interval</td>
<td>指定记录log的时间间隔（单位是minute），不包括IP traffic monitor</td>
</tr>
<tr>
<td>-u</td>
<td>允许使用不支持的接口作为以太网设备</td>
</tr>
<tr>
<td>-f</td>
<td>清空所有计数器</td>
</tr>
<tr>
<td>-h</td>
<td>显示帮助信息</td>
</tr>
</tbody></table>
<h1 id="3-查看日志"><a href="#3-查看日志" class="headerlink" title="3. 查看日志"></a>3. 查看日志</h1><pre><code class="line-numbers language-bash"># 浏览之前的日志
less /var/log/traffic_log

# 查看时实日志
tail -f /var/log/traffic_log</code></pre>
<h1 id="4-定时清理"><a href="#4-定时清理" class="headerlink" title="4. 定时清理"></a>4. 定时清理</h1><p>为了防止日志文件过大，可以设置定时任务定时清理</p>
<pre><code class="line-numbers language-bash"># 编辑定时任务
crontab -e

# 设置每周清理
 0 0 * * 0 rm -f /var/log/traffic_log

# 重启定时任务使用之生效
systemctl restart crond.service</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>减少朋友圈中的推荐广告</title>
    <url>/p/190b71d4.html</url>
    <content><![CDATA[<p>不怎么打开微信朋友圈的我，发现里面的推荐广告越来越多了，这个广告是可以减少的，只是，太太太复杂了一点。</p>
<h1 id="1-打开微信-gt-我-gt-设置"><a href="#1-打开微信-gt-我-gt-设置" class="headerlink" title="1.  打开微信 -&gt; 我 -&gt; 设置"></a>1.  打开微信 -&gt; 我 -&gt; 设置</h1><p>找到 <strong>关于微信</strong></p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/190b71d4/19826068-8c9019e44ec335c2.png" alt></p>
<h1 id="2-点击最下面的《隐私保护指引》"><a href="#2-点击最下面的《隐私保护指引》" class="headerlink" title="2. 点击最下面的《隐私保护指引》"></a>2. 点击最下面的《隐私保护指引》</h1><p><img src="//gitee.com/guoke3915/zw/raw/master/p/190b71d4/19826068-49eda268b79e25e4.png" alt></p>
<h1 id="3-向下翻一点，找到第9条-其他"><a href="#3-向下翻一点，找到第9条-其他" class="headerlink" title="3.  向下翻一点，找到第9条 其他"></a>3.  向下翻一点，找到第9条 其他</h1><p><img src="//gitee.com/guoke3915/zw/raw/master/p/190b71d4/19826068-bc8888323de9207c.png" alt></p>
<h1 id="4-找到《隐私政策》"><a href="#4-找到《隐私政策》" class="headerlink" title="4.  找到《隐私政策》"></a>4.  找到《隐私政策》</h1><p><img src="//gitee.com/guoke3915/zw/raw/master/p/190b71d4/19826068-130584cb76c052d7.png" alt></p>
<h1 id="5-向下翻，找到-广告-项"><a href="#5-向下翻，找到-广告-项" class="headerlink" title="5. 向下翻，找到 广告 项"></a>5. 向下翻，找到 <strong>广告</strong> 项</h1><p><img src="//gitee.com/guoke3915/zw/raw/master/p/190b71d4/19826068-12ae0835e2eaa417.png" alt></p>
<h1 id="6-在广告项中找到关于广告"><a href="#6-在广告项中找到关于广告" class="headerlink" title="6. 在广告项中找到关于广告"></a>6. 在广告项中找到<strong>关于广告</strong></h1><p><img src="//gitee.com/guoke3915/zw/raw/master/p/190b71d4/19826068-f8da9b419e3941d4.png" alt></p>
<h1 id="7-在关于广告页面下翻，找到管理"><a href="#7-在关于广告页面下翻，找到管理" class="headerlink" title="7.  在关于广告页面下翻，找到管理"></a>7.  在关于广告页面下翻，找到<strong>管理</strong></h1><p><img src="//gitee.com/guoke3915/zw/raw/master/p/190b71d4/19826068-eca0753505de761d.png" alt></p>
<h1 id="8-在广告管理中拉到最下面，找到一个个性化推荐广告开关，关掉。"><a href="#8-在广告管理中拉到最下面，找到一个个性化推荐广告开关，关掉。" class="headerlink" title="8. 在广告管理中拉到最下面，找到一个个性化推荐广告开关，关掉。"></a>8. 在广告管理中拉到最下面，找到一个<strong>个性化推荐广告</strong>开关，关掉。</h1><p><img src="//gitee.com/guoke3915/zw/raw/master/p/190b71d4/19826068-85a794dcab0c54cd.png" alt></p>
<p>关闭了这个再回到朋友圈会发现广告基本上没有了，为什么说基本上没有了呢，因为还是偶尔会会看到广告，但是会少很多很多，但一次也只能关半年。</p>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>yum安装nginx后添加nginx-upstream-fair</title>
    <url>/p/72e79b4.html</url>
    <content><![CDATA[<p>yum安装的nginx是不带nginx-upstream-fair模块的，所以在负载均衡的策略中使用<code>fair</code>会报错。</p>
<a id="more"></a>

<h1 id="1-安装nginx的依赖包"><a href="#1-安装nginx的依赖包" class="headerlink" title="1. 安装nginx的依赖包"></a>1. 安装nginx的依赖包</h1><pre><code class="line-numbers language-bash">yum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel</code></pre>
<h1 id="2-查看原nginx版本信息"><a href="#2-查看原nginx版本信息" class="headerlink" title="2. 查看原nginx版本信息"></a>2. 查看原nginx版本信息</h1><pre><code class="line-numbers language-bash">#/usr/sbin/nginx 默认yun安装的nginx执行行文路径
#-V大写的v是详细的版本和配置信息

/usr/sbin/nginx -V
nginx version: nginx/1.18.0
built by gcc 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC) 
built with OpenSSL 1.0.2k-fips  26 Jan 2017
TLS SNI support enabled
configure arguments: --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt=&#39;-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fPIC&#39; --with-ld-opt=&#39;-Wl,-z,relro -Wl,-z,now -pie&#39;</code></pre>
<h1 id="3-去下载nginx和fair"><a href="#3-去下载nginx和fair" class="headerlink" title="3. 去下载nginx和fair"></a>3. 去下载nginx和fair</h1><ul>
<li><p>去<a href="http://nginx.org/download/" target="_blank" rel="noopener">nginx官网</a>找到对应的nginx版本，我这里是1.18.0，所以直接下载<a href="http://nginx.org/download/nginx-1.18.0.tar.gz" target="_blank" rel="noopener">http://nginx.org/download/nginx-1.18.0.tar.gz</a></p>
</li>
<li><p>去<a href="https://www.nginx.com/resources/wiki/modules/fair_balancer/" target="_blank" rel="noopener">nginx源码模块</a>下载<code>nginx-upstream-fair</code>模块。</p>
</li>
</ul>
<p>将下载的nginx和fair模块解压到本地目录。这里直接放到/home目录下了</p>
<pre><code class="line-numbers language-bash">[root@localhost home]# pwd
/home
[root@localhost home]# ll
total 1028
-rw-r--r--. 1 root root   10073 Dec 19 13:23 gnosek-nginx-upstream-fair-a18b409.tar.gz
drwxr-xr-x. 9 1001 1001     186 Dec 19 13:29 nginx-1.18.0
-rw-r--r--. 1 root root 1039530 Dec 19 13:21 nginx-1.18.0.tar.gz
drwxrwxr-x. 2 root root      89 Apr  8  2012 nginx-upstream-fair</code></pre>
<h1 id="4-配置fair模块"><a href="#4-配置fair模块" class="headerlink" title="4. 配置fair模块"></a>4. 配置fair模块</h1><p>进入nginx源码目录，使用前面第2步查出来的配置信息<code>configure arguments:</code>，在后面添加<code>--add-module=/home/nginx-upstream-fair</code>。这里是你解压的nginx-upstream-fair路径</p>
<pre><code class="line-numbers language-bash">./configure --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt=&#39;-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fPIC&#39; --with-ld-opt=&#39;-Wl,-z,relro -Wl,-z,now -pie&#39; --add-module=/home/nginx-upstream-fair</code></pre>
<h1 id="5-编译"><a href="#5-编译" class="headerlink" title="5.编译"></a>5.编译</h1><p>直接使用make编译，不要加make install。后面手动去替换就好。</p>
<p>如果出现错误： ngx_http_upstream_srv_conf_t’ has no member named ‘default_port</p>
<pre><code class="line-numbers language-bash">/home/nginx-upstream-fair/ngx_http_upstream_fair_module.c: In function ‘ngx_http_upstream_init_fair_rr’:
/home/nginx-upstream-fair/ngx_http_upstream_fair_module.c:543:28: error: ‘ngx_http_upstream_srv_conf_t’ has no member named ‘default_port’
     if (us-&gt;port == 0 &amp;&amp; us-&gt;default_port == 0) {
                            ^
/home/nginx-upstream-fair/ngx_http_upstream_fair_module.c:553:51: error: ‘ngx_http_upstream_srv_conf_t’ has no member named ‘default_port’
     u.port = (in_port_t) (us-&gt;port ? us-&gt;port : us-&gt;default_port);</code></pre>
<p>找到nginx的源码 <strong>src/http/ngx_http_upstream.h</strong>文件找到<code>ngx_http_upstream_srv_conf_s</code>结构添加<code>in_port_t default_port;</code></p>
<pre><code class="line-numbers language-.h">struct ngx_http_upstream_srv_conf_s {
    ngx_http_upstream_peer_t         peer;
    void                           **srv_conf;

    ngx_array_t                     *servers;  /* ngx_http_upstream_server_t */

    ngx_uint_t                       flags;
    ngx_str_t                        host;
    u_char                          *file_name;
    ngx_uint_t                       line;
    in_port_t                        port;
    in_port_t                          default_port;
    ngx_uint_t                       no_port;  /* unsigned no_port:1 */

#if (NGX_HTTP_UPSTREAM_ZONE)
    ngx_shm_zone_t                  *shm_zone;
#endif
};</code></pre>
<p>修改保存后，再回到之前继续make</p>
<h1 id="6-用新编译的nginx文件覆盖之前的"><a href="#6-用新编译的nginx文件覆盖之前的" class="headerlink" title="6. 用新编译的nginx文件覆盖之前的"></a>6. 用新编译的nginx文件覆盖之前的</h1><p>编译好的文件会在nginx源码目录中的objs下。</p>
<pre><code class="line-numbers language-bash">mv /usr/sbin/nginx /usr/sbin/nginx_bak  # 备份原来的
cp /home/nginx-1.18.0/objs/nginx /usr/sbin/ginx
systemctl start nginx</code></pre>
<p>本文参考: <a href="http://www.javamoney.cn/article/199" target="_blank" rel="noopener">http://www.javamoney.cn/article/199</a></p>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL存储过程中使用动态sql语句</title>
    <url>/p/d485851d.html</url>
    <content><![CDATA[<p>MySQL的存储过程在5.0后的版本中支持了动态sql语句。也就是说我们可以通过传的参数不同拼接查询不同的表或执行不同的语句。</p>
<a id="more"></a>

<h2 id="1-动态语句没有返回值"><a href="#1-动态语句没有返回值" class="headerlink" title="1. 动态语句没有返回值"></a>1. 动态语句没有返回值</h2><p>如：需要根据不同的游戏ID去增加 <code>TGameData_ID</code>表中玩家对应的金币数。</p>
<pre><code class="line-numbers language-sql">CREATE DEFINER = `test`@`%` PROCEDURE `AddGold`(IN `GameId` INT,IN `UserId` INT,IN `addvalue` INT)
BEGIN
    -- 用CONCAT拼接查询sql语句
    SET @sqlStr= CONCAT(&#39;UPDATE TGameData_&#39;,Gameid,&#39; SET Gold = Gold +&#39;,addvalue,&#39;, WHERE CUserID = &#39;,UserId,&#39;;&#39;);
    PREPARE stmt FROM @sqlStr;    -- 预处理动态sql语句
    EXECUTE stmt ;                -- 执行sql语句
    deallocate prepare stmt;      -- 释放prepare
END;</code></pre>
<h2 id="2-动态语句有返回值"><a href="#2-动态语句有返回值" class="headerlink" title="2. 动态语句有返回值"></a>2. 动态语句有返回值</h2><p>如：需要根据不同的游戏ID去 <code>TGameData_ID</code>表中查询玩家对应的金币数，数量足够减去，数量不够不减。</p>
<pre><code class="line-numbers language-sql">CREATE DEFINER = `test`@`%` PROCEDURE `DelGold`(IN `GameId` INT,IN `UserId` INT,IN `delvalue` INT, OUT `result` INT)
BEGIN
    -- 用CONCAT拼接查询sql语句
    SET @sqlStr= CONCAT(&#39;SELECT Gold INTO @gold FROM TGameData_&#39;,GameId,&#39; WHERE `CUserID` = &#39;,UserId,&#39; LIMIT 1;&#39;);
    PREPARE stmt FROM @sqlStr;    -- 预处理动态sql语句
    EXECUTE stmt ;                -- 执行sql语句
    deallocate prepare stmt;      -- 释放prepare

    IF @gold &gt;= delvalue THEN
        SET @sqlStr= CONCAT(&#39;UPDATE TGameData_&#39;,Gameid,&#39; SET Gold = Gold -&#39;,delvalue,&#39;, WHERE CUserID = &#39;,UserId,&#39;;&#39;);
        PREPARE stmt FROM @sqlStr;    -- 预处理动态sql语句
        EXECUTE stmt ;                -- 执行sql语句
        deallocate prepare stmt;      -- 释放prepare

        set result = 1;            -- 设置结果
    ELSE
        set result = 0;            -- 设置结果
    END IF;
END;</code></pre>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL判断表是否存在</title>
    <url>/p/4a4f39d5.html</url>
    <content><![CDATA[<h1 id="MySQL语句中"><a href="#MySQL语句中" class="headerlink" title="MySQL语句中"></a>MySQL语句中</h1><a id="more"></a>

<pre><code class="line-numbers language-mysql">SELECT COUNT(*) FROM information_schema.TABLES WHERE table_name =&#39;查询的表名&#39;;</code></pre>
<h1 id="存储过程中"><a href="#存储过程中" class="headerlink" title="存储过程中"></a>存储过程中</h1><pre><code class="line-numbers language-mysql">DECLARE tableExists INT DEFAULT 0;

SELECT COUNT(*) INTO tableExists FROM INFORMATION_SCHEMA.TABLES WHERE table_name = &#39;查询的表名&#39;;
IF tableExists &gt; 0 THEN
    -- 表存在
ELSE
    -- 表不存在
END IF;</code></pre>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>AAPT 查看APK 包名 版本号</title>
    <url>/p/6b3aed86.html</url>
    <content><![CDATA[<p>首先需要找到Android SDK所在的目录。然后找到build-tools下对应版本.</p>
<a id="more"></a>

<p>如: <code>D:\Android\androidsdk\build-tools\28.0.3</code></p>
<p>目录下会有一个aapt.ext的程序.</p>
<pre><code class="line-numbers language-bat">D:\Android\androidsdk\build-tools\28.0.3\aapt dump badging xxx.apk</code></pre>
<p>也可以把<code>D:\Android\androidsdk\build-tools\28.0.3</code>配置到环境变量中去,直接用</p>
<pre><code class="line-numbers language-bat">aapt dump badging xxx.apk</code></pre>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>TinyPng批量压缩js脚本</title>
    <url>/p/be4ee6dc.html</url>
    <content><![CDATA[<p>有关于<a href="https://tinypng.com/" target="_blank" rel="noopener">TingPng</a>压缩图片的效果和质量不用多说，下面提供一个批量调用的js脚本。</p>
<a id="more"></a>

<pre><code class="line-numbers language-js">/**
 * 命令行脚本参考示例
 * &gt; node ./tinypng.js -f ./test -deep
 * 获取命令执行文件夹
 * 指令 -f
 * 参数 ./
 * 必填，待处理的图片文件夹
 *
 * 获取是否深度递归处理图片文件夹
 * 指令 -deep
 * 可选，默认不深度递归
 *
 **/

const fs = require(&#39;fs&#39;);
const path = require(&#39;path&#39;);
const https = require(&#39;https&#39;);
const URL = require(&#39;url&#39;).URL;
const EventEmitter = require(&#39;events&#39;);
const err = msg =&gt; new EventEmitter().emit(&#39;error&#39;, msg);

const conf = {
    files: [],
    EntryFolder: getEntryFolder(),
    DeepLoop: getDeepLoop(),
    Exts: [&#39;jpg&#39;,&#39;.png&#39;],
    Max: 5200000, // 5MB == 5242880
     Min: 10240,  // 10KB
}

fileFilter(conf.EntryFolder)

console.log(&quot;本次执行脚本的配置：&quot;, conf);
console.log(&quot;等待处理文件的数量:&quot;, conf.files.length)

conf.files.forEach(img =&gt; fileUpload(img));

//////////////////////////////// 工具函数
/**
 * 获取命令执行文件夹
 * 指令 -f
 * 参数 ./
 * 必填，待处理的图片文件夹
 */
function getEntryFolder() {
    let i = process.argv.findIndex(i =&gt; i === &quot;-f&quot;);
    if (i === -1 || !process.argv[i + 1]) return err(&#39;获取命令执行文件夹：失败&#39;);
    return process.argv[i + 1];
}

/**
 * 获取是否深度递归处理图片文件夹
 * 指令 -deep
 * 可选，默认不深度递归
 */
function getDeepLoop() {
    return process.argv.findIndex(i =&gt; i === &quot;-deep&quot;) !== -1;
}

/**
 * 过滤待处理文件夹，得到待处理文件列表
 * @param {*} folder 待处理文件夹
 * @param {*} files 待处理文件列表
 */
function fileFilter(folder) {
    // 读取文件夹
    fs.readdirSync(folder).forEach(file =&gt; {
        let fullFilePath = path.join(folder, file)
        // 读取文件信息
        let fileStat = fs.statSync(fullFilePath);
        // 过滤文件安全性/大小限制/后缀名
        if (fileStat.size &gt;= conf.Min &amp;&amp; fileStat.size &lt;= conf.Max &amp;&amp; fileStat.isFile() &amp;&amp; conf.Exts.includes(path.extname(file))) conf.files.push(fullFilePath);
        // 是都要深度递归处理文件夹
        else if (conf.DeepLoop &amp;&amp; fileStat.isDirectory()) fileFilter(fullFilePath);
    });
}

/**
 * TinyPng 远程压缩 HTTPS 请求的配置生成方法
 */

function getAjaxOptions() {
    return {
        method: &#39;POST&#39;,
        hostname: &#39;tinypng.com&#39;,
        path: &#39;/web/shrink&#39;,
        headers: {
            rejectUnauthorized: false,
            &quot;X-Forwarded-For&quot;: Array(4).fill(1).map(() =&gt; parseInt(Math.random() * 254 + 1)).join(&#39;.&#39;),
            &#39;Postman-Token&#39;: Date.now(),
            &#39;Cache-Control&#39;: &#39;no-cache&#39;,
            &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;,
            &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36&#39;
        }
    }
}

/**
 * TinyPng 远程压缩 HTTPS 请求
 * @param {string} img 待处理的文件
 * @success {
 *              &quot;input&quot;: { &quot;size&quot;: 887, &quot;type&quot;: &quot;image/png&quot; },
 *              &quot;output&quot;: { &quot;size&quot;: 785, &quot;type&quot;: &quot;image/png&quot;, &quot;width&quot;: 81, &quot;height&quot;: 81, &quot;ratio&quot;: 0.885, &quot;url&quot;: &quot;https://tinypng.com/web/output/7aztz90nq5p9545zch8gjzqg5ubdatd6&quot; }
 *           }
 * @error  {&quot;error&quot;: &quot;Bad request&quot;, &quot;message&quot; : &quot;Request is invalid&quot;}
 */
function fileUpload(imgPath) {
    let req = https.request(getAjaxOptions(), (res) =&gt; {
        res.on(&#39;data&#39;, buf =&gt; {
            let obj = JSON.parse(buf.toString());
            if (obj.error) console.log(&#39;压缩失败！\n 当前文件：&#39;+imgPath +&#39;\n &#39;+obj.message);
            else fileUpdate(imgPath, obj);
        });
    });

    req.write(fs.readFileSync(imgPath), &#39;binary&#39;);
    req.on(&#39;error&#39;, e =&gt; console.error(&#39;请求错误! \n 当前文件：&#39;+imgPath+&#39;\n&#39;, e));
    req.end();
}

// 该方法被循环调用,请求图片数据
function fileUpdate(entryImgPath, obj) {
    let options = new URL(obj.output.url);
    let req = https.request(options, res =&gt; {
        let body = &#39;&#39;;
        res.setEncoding(&#39;binary&#39;);
        res.on(&#39;data&#39;, (data) =&gt; body += data);
        res.on(&#39;end&#39;, () =&gt; {
            fs.writeFile(entryImgPath, body, &#39;binary&#39;, err =&gt; {
                if (err) return console.error(err);
                let log = &#39;压缩成功 ，&#39;
                log += &#39;优化比例: &#39;+ (( 1 - obj.output.ratio) * 100).toFixed(2) + &#39;，&#39;
                log += &#39;原始大小: &#39;+(obj.input.size / 1024).toFixed(2) +&#39;KB ，&#39;
                log += &#39;压缩大小: &#39;+(obj.output.size / 1024).toFixed(2) +&#39;KB ,&#39;
                log += &#39;文件：&#39;+entryImgPath
                console.log(log);
            });
        });
    });
    req.on(&#39;error&#39;, e =&gt; console.error(e));
    req.end();
}</code></pre>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>TS异或加密并输出Base64字符串</title>
    <url>/p/9187680a.html</url>
    <content><![CDATA[<p>在做游戏或应用的时候，一些本地数据为了安全需要加密。最简单的加密方式当然是异或加密了，但异或之后输出的是数据块，并非字符串，有效且省空间的做法是装数据块转成Base64了，Base64之后的空间占用约为原数据的133%左右.</p>
<h2 id="字符串与数据块转换"><a href="#字符串与数据块转换" class="headerlink" title="字符串与数据块转换"></a>字符串与数据块转换</h2><p>因为在使用过种中，会用到数据块，这里用字节数组<strong>Uint8Array</strong>来存储数据块,并需要Uint8Array与String UTF8的互转.</p>
<pre><code class="line-numbers language-js">    // 字符串转uint字节数组
    // 由于字符串中可能包含utf8不定长度字节的编码
    private str2bytes(str: string):Array&lt;any&gt; {
        let bytes = new Array();
        let len, c;
        len = str.length;
        for (let i = 0; i &lt; len; i++) {
            c = str.charCodeAt(i);
            if (c &gt;= 0x010000 &amp;&amp; c &lt;= 0x10FFFF) {
                bytes.push(((c &gt;&gt; 18) &amp; 0x07) | 0xF0);
                bytes.push(((c &gt;&gt; 12) &amp; 0x3F) | 0x80);
                bytes.push(((c &gt;&gt; 6) &amp; 0x3F) | 0x80);
                bytes.push((c &amp; 0x3F) | 0x80);
            } else if (c &gt;= 0x000800 &amp;&amp; c &lt;= 0x00FFFF) {
                bytes.push(((c &gt;&gt; 12) &amp; 0x0F) | 0xE0);
                bytes.push(((c &gt;&gt; 6) &amp; 0x3F) | 0x80);
                bytes.push((c &amp; 0x3F) | 0x80);
            } else if (c &gt;= 0x000080 &amp;&amp; c &lt;= 0x0007FF) {
                bytes.push(((c &gt;&gt; 6) &amp; 0x1F) | 0xC0);
                bytes.push((c &amp; 0x3F) | 0x80);
            } else {
                bytes.push(c &amp; 0xFF);
            }
        }
        return bytes;
    }

    // uint8字节数组转string utf8
    private bytes2str(uintArray: any): string {
        let encodedString = String.fromCharCode.apply(null, uintArray),
            decodedString = decodeURIComponent(escape(encodedString));
        return decodedString;
    }</code></pre>
<pre><code class="line-numbers language-js">    // 测试
    let base = &quot;guoke3915&quot;;
    var tmp = this.str2bytes(base);
    console.log(tmp);   // 输出: 103,117,111,107,101,51,57,49,53

    var out = this.bytes2str(tmp);
    console.log(out )     // 输出: guoke3915</code></pre>
<h2 id="异或加密"><a href="#异或加密" class="headerlink" title="异或加密"></a>异或加密</h2><p>网上也有很多异或的算法，很多都是用<strong>charCodeAt</strong>和<strong>fromCharCode</strong>来对字符串直接操作的,这样的操作在ts中很不错也不会出问题.但我还是比较喜欢转成用字节数组来操作,在种在网络通讯中,跨平台跨语言时不容易出错.</p>
<pre><code class="line-numbers language-js">    /**
      * encrypto 加密程序
      * @param {strng} str 待加密字符串
      * @param {number} xor 异或值
      * @return {Uint8Array} 加密后的字符串
    */
    private xor_encrypto(str: string, xor: number): Uint8Array {
        let buf = this.str2bytes(str)
        let bufView = new Uint8Array(buf.length);
        for (let i = 0; i &lt; buf.length; i++) {
            // 进行异或加密
            bufView[i] = buf[i] ^ xor;
        }
        return bufView;
    }

    /**
     * decrypto 解密程序
     * @param {strng} str 待加密字符串
     * @param {number} xor 异或值
     * @return {strng} 解密后的字符串
     */
    private xor_decrypto(data: any, xor: number): string {
        let bytes = new Uint8Array(data)
        let resultList = new Uint8Array(bytes.length);
        // 分割出加密字符串的加密后的每个字符
        for (let i = 0; i &lt; bytes.length; i++) {
            // 异或解密出原字符的ascll码
            resultList[i] = bytes[i] ^ xor;
        }
        return this.bytes2str(resultList);
    }</code></pre>
<pre><code class="line-numbers language-js">    // 测试
    let base = &quot;guoke3915&quot;;
    var tmp = this.xor_encrypto(base);
    console.log(tmp);   // 输出: 80,66,88,92,82,4,14,6,2

    var out = this.xor_decrypto(tmp);
    console.log(out )     // 输出: guoke3915</code></pre>
<h2 id="Base64算法"><a href="#Base64算法" class="headerlink" title="Base64算法"></a>Base64算法</h2><p>Base64算法在js原生平台有库,使用Buffer类就能实现. Base64的算法也挺简单的,这里为了配合异或加密还是自己写一个.</p>
<pre><code class="line-numbers language-js">    // base64 编码
    private base64_encode(input:string):string{
        const _keyStr = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;;
        var output = &quot;&quot;;
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        var i = 0;

        let data = this.str2bytes(input);

        while (i &lt; data.length)
        {
            chr1 = data[i++];
            chr2 = data[i++];
            chr3 = data[i++];

            enc1 = chr1 &gt;&gt; 2;
            enc2 = ((chr1 &amp; 3) &lt;&lt; 4) | (chr2 &gt;&gt; 4);
            enc3 = ((chr2 &amp; 15) &lt;&lt; 2) | (chr3 &gt;&gt; 6);
            enc4 = chr3 &amp; 63;

            if (isNaN(chr2))
            {
                enc3 = enc4 = 64;
            }
            else if (isNaN(chr3))
            {
                enc4 = 64;
            }

            output = output +
                _keyStr.charAt(enc1) + _keyStr.charAt(enc2) +
                _keyStr.charAt(enc3) + _keyStr.charAt(enc4);
        }

        return output;
    }

    // base64 解码
    private base64_decode(input:string):string{
        const _keyStr = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;;
        var output = new Uint8Array(input.length);
        var chr1, chr2, chr3;
        var enc1, enc2, enc3, enc4;
        var i = 0, index = 0;

        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, &quot;&quot;);
        while (i &lt; input.length)
        {
            enc1 = _keyStr.indexOf(input.charAt(i++));
            enc2 = _keyStr.indexOf(input.charAt(i++));
            enc3 = _keyStr.indexOf(input.charAt(i++));
            enc4 = _keyStr.indexOf(input.charAt(i++));

            chr1 = (enc1 &lt;&lt; 2) | (enc2 &gt;&gt; 4);
            chr2 = ((enc2 &amp; 15) &lt;&lt; 4) | (enc3 &gt;&gt; 2);
            chr3 = ((enc3 &amp; 3) &lt;&lt; 6) | enc4;

            output[index++] = chr1;

            if (enc3 != 64)
            {
                output[index++] = chr2;
            }

            if (enc4 != 64)
            {
                output[index++] = chr3;
            }

        }

        return this.bytes2str(output.subarray(0,index));
    }</code></pre>
<pre><code class="line-numbers language-js">    // 测试
    let base = &quot;guoke3915&quot;;
    var tmp = this.base64_encode(base);
    console.log(tmp);   // 输出: Z3Vva2UzOTE1

    var out = this.base64_decode(tmp);
    console.log(out )     // 输出: guoke3915</code></pre>
<h2 id="异或加密并输出Base64字符串"><a href="#异或加密并输出Base64字符串" class="headerlink" title="异或加密并输出Base64字符串"></a>异或加密并输出Base64字符串</h2><p>回到主题,从上面异或加密和Base64编码的方法中,很容易就能找出规律,要合并二个算法,只要在Base64编码的时候对编码时的字节做一个异或操作就可以了.</p>
<pre><code class="line-numbers language-js">     /**
      * encrypto 加密程序
      * @param {strng} str 待加密字符串
      * @param {number} xor 异或值
      * @return {string} 加密后并base64编码的字符串
    */
    private base64_xor_encode(input:string, xor: number):string{
        const _keyStr = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;;
        var output = &quot;&quot;;
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        var i = 0;

        let data = this.str2bytes(input);

        while (i &lt; data.length)
        {
            chr1 = data[i++]^xor;
            chr2 = i &lt; data.length?(data[i++]^xor):undefined;
            chr3 = i &lt; data.length?(data[i++]^xor):undefined;

            enc1 = chr1 &gt;&gt; 2;
            enc2 = ((chr1 &amp; 3) &lt;&lt; 4) | (chr2 &gt;&gt; 4);
            enc3 = ((chr2 &amp; 15) &lt;&lt; 2) | (chr3 &gt;&gt; 6);
            enc4 = chr3 &amp; 63;

            if (isNaN(chr2))
            {
                enc3 = enc4 = 64;
            }
            else if (isNaN(chr3))
            {
                enc4 = 64;
            }

            output = output +
                _keyStr.charAt(enc1) + _keyStr.charAt(enc2) +
                _keyStr.charAt(enc3) + _keyStr.charAt(enc4);
        }

        return output;
    }

    /**
     * decrypto 解密程序
     * @param {strng} str 待加密字符串
     * @param {number} xor 异或值
     * @return {strng} 解密后的字符串
     */
    private base64_xor_decode(input:string,xor: number):string{
        const _keyStr = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;;
        var output = new Uint8Array(input.length);
        var chr1, chr2, chr3;
        var enc1, enc2, enc3, enc4;
        var i = 0, index = 0;

        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, &quot;&quot;);
        while (i &lt; input.length)
        {
            enc1 = _keyStr.indexOf(input.charAt(i++));
            enc2 = _keyStr.indexOf(input.charAt(i++));
            enc3 = _keyStr.indexOf(input.charAt(i++));
            enc4 = _keyStr.indexOf(input.charAt(i++));

            chr1 = ((enc1 &lt;&lt; 2) | (enc2 &gt;&gt; 4));
            chr2 = (((enc2 &amp; 15) &lt;&lt; 4) | (enc3 &gt;&gt; 2));
            chr3 = (((enc3 &amp; 3) &lt;&lt; 6) | enc4);

            output[index++] = chr1^xor;

            if (enc3 != 64)
            {
                output[index++] = chr2^xor;
            }

            if (enc4 != 64)
            {
                output[index++] = chr3^xor;
            }

        }

        return this.bytes2str(output.subarray(0,index));
    }</code></pre>
<pre><code class="line-numbers language-js">    // 测试
    let base = &quot;guoke3915&quot;;
    var tmp = this.base64_xor_encode(base);
    console.log(tmp);   // 输出: UEJYXFIEDgYC

    var out = this.base64_xor_decode(tmp);
    console.log(out )     // 输出: guoke3915</code></pre>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>Cocos creator Label文字太多显示不全</title>
    <url>/p/e59003e7.html</url>
    <content><![CDATA[<p>在用到Cocos Creator的Label显示文字的时候，文字太多了会显示不全。这是因为一张 renderFrame 的尺寸是 2048 * 2048，超出的部分就无法被渲染。解决办法是使用 label 的 cache mode 中的 char 模式，它可以正常渲染。</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/e59003e7/19826068-9a0d93e9caa97c53.png" alt></p>
]]></content>
      <categories>
        <category>Cocos2d-JS</category>
      </categories>
      <tags>
        <tag>Cocos2djs</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS获取设备唯一标识</title>
    <url>/p/b0f0cbf6.html</url>
    <content><![CDATA[<h2 id="一、需求"><a href="#一、需求" class="headerlink" title="一、需求"></a>一、需求</h2><p>多个小游戏app获取相同的设备唯一标识。</p>
<h2 id="二、分析"><a href="#二、分析" class="headerlink" title="二、分析"></a>二、分析</h2><p>iOS设备有很多设备标识,如:UDID、IDFA、IDFV、OpenIDFA、SimulateIDFA等。但是在iOS 7.0后很多标识就不能用了。多个app想要获取相同的设备唯一标识可以用到IDFV，然后再用KeyChain共享写入就能保证设备唯一标识相同了。</p>
<h2 id="三、实现"><a href="#三、实现" class="headerlink" title="三、实现"></a>三、实现</h2><h3 id="3-1-确保多个app的BundleID前缀相同。"><a href="#3-1-确保多个app的BundleID前缀相同。" class="headerlink" title="3.1 确保多个app的BundleID前缀相同。"></a>3.1 确保多个app的BundleID前缀相同。</h3><p>iOS6.x是通过BundleID前两部分来匹配，iOS7.x是通过除了最后一个部分来匹配。如果相同就是同一个Vender，共享同一个idfv的值。</p>
<table>
<thead>
<tr>
<th>Bundle ID</th>
<th>iOS 6.x</th>
<th>iOS 7.x+</th>
</tr>
</thead>
<tbody><tr>
<td>com.example.app1</td>
<td><strong>com.example</strong>.app1</td>
<td><strong>com.example</strong>.app1</td>
</tr>
<tr>
<td>com.example.app2</td>
<td><strong>com.example</strong>.app2</td>
<td><strong>com.example</strong>.app2</td>
</tr>
<tr>
<td>com.example.app.app1</td>
<td><strong>com.example</strong>.app.app1</td>
<td><strong>com.example.app</strong>.app1</td>
</tr>
<tr>
<td>com.example.app.app2</td>
<td><strong>com.example</strong>.app.app2</td>
<td><strong>com.example.app</strong>.app2</td>
</tr>
<tr>
<td>example</td>
<td><strong>example</strong></td>
<td><strong>example</strong></td>
</tr>
</tbody></table>
<h3 id="3-2-多个app在同一开发者账号下"><a href="#3-2-多个app在同一开发者账号下" class="headerlink" title="3.2 多个app在同一开发者账号下"></a>3.2 多个app在同一开发者账号下</h3><p>使用KeyChain来共享存储时，需要在相同的账号下，因为存储BundleID的时候默认在前面加上了账号的证书id。</p>
<h3 id="3-3-在项目的-Build-Phases中添加Security-framework库"><a href="#3-3-在项目的-Build-Phases中添加Security-framework库" class="headerlink" title="3.3 在项目的 Build Phases中添加Security.framework库"></a>3.3 在项目的 <code>Build Phases</code>中添加<code>Security.framework</code>库</h3><h3 id="3-4-在项目的-Signing-amp-Capabilities中添加Keychain-Sharing，加入Keychain-Groups分组。每个app都设置相同的Keychain-Groups值"><a href="#3-4-在项目的-Signing-amp-Capabilities中添加Keychain-Sharing，加入Keychain-Groups分组。每个app都设置相同的Keychain-Groups值" class="headerlink" title="3.4 在项目的 Signing &amp; Capabilities中添加Keychain Sharing，加入Keychain Groups分组。每个app都设置相同的Keychain Groups值"></a>3.4 在项目的 <code>Signing &amp; Capabilities</code>中添加<code>Keychain Sharing</code>，加入<code>Keychain Groups</code>分组。每个app都设置相同的<code>Keychain Groups</code>值</h3><p><img src="//gitee.com/guoke3915/zw/raw/master/p/b0f0cbf6/19826068-2f1fbbc716d3fe90.png" alt></p>
<h3 id="3-5-导入文件-KeyChainTool-h-m-到项目中"><a href="#3-5-导入文件-KeyChainTool-h-m-到项目中" class="headerlink" title="3.5 导入文件 KeyChainTool.h/m 到项目中"></a>3.5 导入文件 <code>KeyChainTool.h/m</code> 到项目中</h3><pre><code class="line-numbers language-objective-c">//
//  customKeyChainTool.h
//
#import &lt;Foundation/Foundation.h&gt;

@interface KeyChainTool : NSObject

+ (void)save:(NSString *)service data:(id)data;
+ (id)load:(NSString *)service;
+ (void)delete:(NSString *)service;
@end</code></pre>
<pre><code class="line-numbers language-objective-c">//
//  customKeyChainTool.m
//

#import &quot;KeyChainTool.h&quot;
#import &lt;Security/Security.h&gt;

@implementation KeyChainTool
+ (NSMutableDictionary *)getKeychainQuery:(NSString *)service {
    //这个就和keychainitemwrapper里面提前预设了参数一样
    return [NSMutableDictionary dictionaryWithObjectsAndKeys:
            (id)kSecClassGenericPassword,(id)kSecClass,
            service, (id)kSecAttrService,
            service, (id)kSecAttrAccount,
            (id)kSecAttrAccessibleAfterFirstUnlock,(id)kSecAttrAccessible,
            nil];
}

+ (void)save:(NSString *)service data:(id)data {
    //Get search dictionary
    NSMutableDictionary *keychainQuery = [self getKeychainQuery:service];
    //Delete old item before add new item
    SecItemDelete((CFDictionaryRef)keychainQuery);
    //Add new object to search dictionary(Attention:the data format)
    [keychainQuery setObject:[NSKeyedArchiver archivedDataWithRootObject:data] forKey:(id)kSecValueData];
    //Add item to keychain with the search dictionary
    SecItemAdd((CFDictionaryRef)keychainQuery, NULL);
}

+ (id)load:(NSString *)service {
    id ret = nil;
    NSMutableDictionary *keychainQuery = [self getKeychainQuery:service];
    //Configure the search setting
    //Since in our simple case we are expecting only a single attribute to be returned (the password) we can set the attribute kSecReturnData to kCFBooleanTrue
    [keychainQuery setObject:(id)kCFBooleanTrue forKey:(id)kSecReturnData];
    [keychainQuery setObject:(id)kSecMatchLimitOne forKey:(id)kSecMatchLimit];
    CFDataRef keyData = NULL;
    if (SecItemCopyMatching((CFDictionaryRef)keychainQuery, (CFTypeRef *)&amp;keyData) == noErr) {
        @try {
            ret = [NSKeyedUnarchiver unarchiveObjectWithData:(__bridge NSData *)keyData];
        } @catch (NSException *e) {
            NSLog(@&quot;Unarchive of %@ failed: %@&quot;, service, e);
        } @finally {
        }
    }
    if (keyData)
        CFRelease(keyData);
    return ret;
}

+ (void)delete:(NSString *)service {
    NSMutableDictionary *keychainQuery = [self getKeychainQuery:service];
    SecItemDelete((CFDictionaryRef)keychainQuery);
}
@end</code></pre>
<h3 id="3-6-添加获取设备唯一标识的UUID方法"><a href="#3-6-添加获取设备唯一标识的UUID方法" class="headerlink" title="3.6 添加获取设备唯一标识的UUID方法"></a>3.6 添加获取设备唯一标识的UUID方法</h3><pre><code class="line-numbers language-objective-c">+ (NSString *)getUUID {

    NSString *strUUID = [(NSMutableDictionary*)[KeyChainTool load:@&quot;com.guoke&quot;] objectForKey:@&quot;UUID&quot;];
    if (!strUUID || strUUID.length == 0) {
        strUUID = [[[UIDevice currentDevice] identifierForVendor] UUIDString];
        NSMutableDictionary *usernamepasswordKVPairs = [NSMutableDictionary dictionary];
        [usernamepasswordKVPairs setObject:strUUID forKey:@&quot;UUID&quot;];
        [KeyChainTool save:@&quot;com.guoke&quot; data:usernamepasswordKVPairs];
    }

    return strUUID;
}</code></pre>
<h2 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h2><p>同账号打二个app包<br>app1 ： com.guoke.test1<br>app2 ： com.guoke.test2</p>
<table>
<thead>
<tr>
<th>测试流程</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>安装app1, 删除app1, 重装app1</td>
<td>二次安装获取到的strUUID相同</td>
</tr>
<tr>
<td>安装app1, 安装app2</td>
<td>app1,app2获取到的strUUID相同</td>
</tr>
<tr>
<td>安装app1,  删除app1, 安装app2,</td>
<td>二次安装获取到的strUUID相同</td>
</tr>
<tr>
<td>安装app1,  安装app2, 删除app1, 重装app1,</td>
<td>三次安装获取到的strUUID相同</td>
</tr>
<tr>
<td>安装app1,  删除app1, 系统还原所有设置,重装app1</td>
<td>二次安装获取到的strUUID<strong>不同</strong></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS读写挂载NTFS磁盘</title>
    <url>/p/23562abc.html</url>
    <content><![CDATA[<p>mac系统是支持NTFS格式读写的，但是由于NTFS是微软公司开发的专用文件系统等原因，mac系统默认是不支持NTFS写入的。</p>
<p>用命令行可以以读写模式挂在，但是每次都要写，也可以用第三方的软件<a href="https://mounty.app/" target="_blank" rel="noopener">Mounty</a>来玩成这个挂在过程，而且是全免费的。</p>
<p>进入官网点<code>here</code>下载，直接安装<br><img src="//gitee.com/guoke3915/zw/raw/master/p/23562abc/19826068-bab8a54dc460a6c9.png" alt></p>
<p>安装运行后，在状态栏上会有一个M的图标，插入NTFS格式的U盘或移动硬盘的时候，会有提示是否以读写模式挂载。<br><img src="//gitee.com/guoke3915/zw/raw/master/p/23562abc/19826068-d14c748b615b7e0c.png" alt></p>
<p>然后就可以对NTFS盘进行读写了。不过有点要注意的是，用完之后需要用到Mounty的卸载来弹出硬盘</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/23562abc/19826068-657275d6eeedd1d8.png" alt></p>
<p>不然，可能下次插入硬盘的时候有可能会报错哦。<code>卷不能在读/写模式下重新挂载。可能是国为先前没有完全卸载(安全删除)</code><br><img src="//gitee.com/guoke3915/zw/raw/master/p/23562abc/19826068-d2c65ff5fe9d5b95.jpg" alt></p>
<p>遇到这样的问题，需要一台windows系统的电脑来处理，把有问题的硬盘插入到windows系统电脑中，找到硬盘的硬盘，如：G盘</p>
<p>最后在运行栏中输入  <code>chkdsk G: /f</code> 等待执行完成后，弹出硬盘，再把硬盘拿到mac下使用就可以用了</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>win 2012 r2开启BitLocker</title>
    <url>/p/799aaf5d.html</url>
    <content><![CDATA[<p>在用到远程服务器的时候，我们可能会存储一些私密的key之类的，但是，又怕服务器不安全，所以呢，可以把所有的key放到一个独立的磁盘中，然后把这个磁盘用BitLocker加密，注销时自动加密，登录后手动解锁后再使用。但是win 2012 r2默认是不开启BitLocker的。</p>
<h2 id="一、开启BitLocker"><a href="#一、开启BitLocker" class="headerlink" title="一、开启BitLocker"></a>一、开启BitLocker</h2><h3 id="1-打开服务器管理器"><a href="#1-打开服务器管理器" class="headerlink" title="1. 打开服务器管理器"></a>1. 打开服务器管理器</h3><h3 id="2-添加角色功能"><a href="#2-添加角色功能" class="headerlink" title="2. 添加角色功能"></a>2. 添加角色功能</h3><p><img src="//gitee.com/guoke3915/zw/raw/master/p/799aaf5d/19826068-84be792bb729ac0d.png" alt></p>
<h3 id="3-添加BitLocker-驱动器加密"><a href="#3-添加BitLocker-驱动器加密" class="headerlink" title="3. 添加BitLocker 驱动器加密"></a>3. 添加BitLocker 驱动器加密</h3><p>一直下一步，来到<code>功能</code>项,勾选上<code>BitLocker驱动器加密</code>.然后确认安装. 安装完之后重启服务器</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/799aaf5d/19826068-6940f0828b07c194.png" alt></p>
<h2 id="二、-加密磁盘"><a href="#二、-加密磁盘" class="headerlink" title="二、 加密磁盘"></a>二、 加密磁盘</h2><p>右键要加密的磁盘，选择<code>启用BitLocker</code>.设置密码,开启磁盘加密</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/799aaf5d/19826068-28aef61daf099f04.png" alt></p>
<h2 id="三、-注销锁定"><a href="#三、-注销锁定" class="headerlink" title="三、 注销锁定"></a>三、 注销锁定</h2><h3 id="1-使用命令加锁"><a href="#1-使用命令加锁" class="headerlink" title="1. 使用命令加锁"></a>1. 使用命令加锁</h3><p>默认情况下，注销时BitLocker是不会加锁磁盘的。所以，我们可以使用命令来加锁</p>
<pre><code class="line-numbers language-bash">manage-bde -lock -ForceDismount D:</code></pre>
<p>这里的D是BitLocker加密的磁盘.</p>
<h3 id="2-注销时启动加锁"><a href="#2-注销时启动加锁" class="headerlink" title="2. 注销时启动加锁"></a>2. 注销时启动加锁</h3><p>将前面的加锁命令编写一个lockd.bat脚本.然后进入本地组策略 gpedit.msc中，在注销中添加前面的lockd.bat脚本。之后每次用注销退出远程，这样断开远程后设置的磁盘就会被BitLocker加密了</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/799aaf5d/19826068-c846514b4d0e9e69.png" alt></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>shell脚本PING记录延迟高于指定值</title>
    <url>/p/ad3ba5cd.html</url>
    <content><![CDATA[<p>有时多台服务器之间存在网络波动，需要一直ping来判断延迟值，但一直记录ping的延迟值太多了，可以写个脚本判定ping延迟值超过指定值时才记录下来。</p>
<h2 id="1-新建一个脚本文件pingtest-sh"><a href="#1-新建一个脚本文件pingtest-sh" class="headerlink" title="1. 新建一个脚本文件pingtest.sh"></a>1. 新建一个脚本文件<code>pingtest.sh</code></h2><pre><code class="line-numbers language-bash">#!/bin/bash

# 测试IP
IP=&quot;192.168.1.55&quot;;

# 限制时间
TimeLimit=50;

# 日志文件
LogFile=&quot;./ping.log&quot;;

while [ 1 ] 
do 
    # 用ping检测1次，设置超时时间为1s，并用awk取延迟值
    rtt=`ping -c 1 -W 1 $IP |grep rtt |awk &#39;{print $4}&#39; |awk -F&#39;/&#39; &#39;{print $2}&#39;`

    # 如果不存在ping延迟时间输出timeout
    if [[ -z $rtt ]];then
        echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;` ping timeout &gt;&gt; $LogFile
    else
        # 判定延迟值是否超出设定限制时间
        if [ $(echo &quot;$TimeLimit &lt;= $rtt&quot;|bc) = 1 ]; then
            echo `date &quot;+%Y-%m-%d %H:%M:%S&quot;` ping time = $rtt ms &gt;&gt; $LogFile
        fi
    fi

    sleep 1 
done</code></pre>
<h2 id="2-赋予可执行权限"><a href="#2-赋予可执行权限" class="headerlink" title="2. 赋予可执行权限"></a>2. 赋予可执行权限</h2><pre><code class="line-numbers language-bash">chmod +x pingtest.sh</code></pre>
<h2 id="3-后台执行"><a href="#3-后台执行" class="headerlink" title="3. 后台执行"></a>3. 后台执行</h2><pre><code class="line-numbers language-bash">./pingtest.sh &amp;</code></pre>
<p>如果有超ping延迟有超过设定的<code>TimeLimit</code>值时会记录在<code>LogFile</code>设定的文件中</p>
<pre><code class="line-numbers language-log">2020-10-22 22:26:09 ping time = 50.198 ms
2020-10-22 22:26:10 ping time = 59.360 ms
2020-10-22 22:26:11 ping time = 59.341 ms
2020-10-22 22:26:12 ping time = 50.054 ms</code></pre>
<h2 id="4-注意"><a href="#4-注意" class="headerlink" title="4. 注意"></a>4. 注意</h2><p>如果运行脚本时出现<code>bc: command not found</code>,直接安装<code>bc</code>就可以了</p>
<pre><code class="line-numbers language-bash">yum install -y bc</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>使用npm生成ETH钱包地址</title>
    <url>/p/b93c557d.html</url>
    <content><![CDATA[<p>先在npm中安装eth的依赖库<code>ethereumjs-wallet</code></p>
<pre><code class="line-numbers language-bash">npm i ethereumjs-wallet</code></pre>
<p>编写生成脚本<code>gen.js</code></p>
<pre><code class="line-numbers language-js">var Wallet = require(&#39;ethereumjs-wallet&#39;)

// 生成50个钱包地址数量
for(var i = 0; i &lt; 50; i++){
  const EthWallet = Wallet.default.generate(false);
  console.log(&quot;address: &quot; + EthWallet.getAddressString());
  console.log(&quot;privateKey: &quot; + EthWallet.getPrivateKeyString());
}</code></pre>
<p>最后直接用命令运行生成</p>
<pre><code class="line-numbers language-bash">node gen.js</code></pre>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>git设置代理</title>
    <url>/p/439c4b80.html</url>
    <content><![CDATA[<p>访问github慢是一个通病，不过可以给git设置带来提速</p>
<h2 id="1-为git设置全局代理"><a href="#1-为git设置全局代理" class="headerlink" title="1. 为git设置全局代理"></a>1. 为git设置全局代理</h2><pre><code class="line-numbers language-bash">git config --global http.proxy socks5://127.0.0.1:1080
git config --global https.proxy socks5://127.0.0.1:1080</code></pre>
<h2 id="2-取消代理"><a href="#2-取消代理" class="headerlink" title="2. 取消代理"></a>2. 取消代理</h2><pre><code class="line-numbers language-bash">git config --global --unset http.proxy
git config --global --unset https.proxy</code></pre>
<h2 id="3-只对github-com"><a href="#3-只对github-com" class="headerlink" title="3. 只对github.com"></a>3. 只对github.com</h2><pre><code class="line-numbers language-bash">#设置代理
git config --global http.https://github.com.proxy socks5://127.0.0.1:1080

#取消代理
git config --global --unset http.https://github.com.proxy</code></pre>
<h2 id="4-修改配置文件办法"><a href="#4-修改配置文件办法" class="headerlink" title="4. 修改配置文件办法"></a>4. 修改配置文件办法</h2><p>找到git的配置文件<code>.gitconfig</code>。这个文件一般在用户目录下</p>
<pre><code class="line-numbers language-config"># 为github.com配置socks5代理
[http &quot;https://github.com&quot;]
  proxy = socks5://127.0.0.1:1080

# 为所有的配置socks5代理
[http]
  proxy = socks5://127.0.0.1:1080</code></pre>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
      </tags>
  </entry>
  <entry>
    <title>执行docker-compose up -d时出现ERROR: Failed to Setup IP tables: Unable to enable SKIP DNAT rule</title>
    <url>/p/708a4ff9.html</url>
    <content><![CDATA[<p>在CentOS关闭防火墙后，再执行<code>docker-compose up -d</code>时报错了</p>
<pre><code class="line-numbers language-bash">ERROR: Failed to Setup IP tables: Unable to enable SKIP DNAT rule:  (iptables failed: iptables --wait -t nat -I DOCKER -i br-7506353a9954 -j RETURN: iptables: No chain/target/match by that name.</code></pre>
<p>解决办法是重启docker</p>
<pre><code class="line-numbers language-bash">systemctl restart docker</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Win清除远程桌面连接记录</title>
    <url>/p/c215602c.html</url>
    <content><![CDATA[<ol>
<li><p>按Win+R键打开运行窗口</p>
</li>
<li><p>在运行窗口中输入regedit打开注册表</p>
</li>
<li><p>在注册表中进入HKEY_CURRENT_USER/Software/Microsoft/Terminal Server Client/Default到达Default文件里面</p>
</li>
<li><p>这个文件里面就是输入过记录ip，选择要删除的鼠标右键</p>
</li>
</ol>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/c215602c/19826068-ee310683fd9433e5.png" alt></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Win 2012 r2配置开机启动项</title>
    <url>/p/160c415c.html</url>
    <content><![CDATA[<ol>
<li><p>运行 shell:startup 命令，打开<code>C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code>目录，将需要启动的程序快捷键放入目录中，或编写bat启动程序放入目录<br><img src="//gitee.com/guoke3915/zw/raw/master/p/160c415c/19826068-951cf7370ecf1a9b.png" alt></p>
</li>
<li><p>打开<code>C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp</code>目录。，将需要启动的程序快捷键放入目录中，或编写bat启动程序放入目录<br><img src="//gitee.com/guoke3915/zw/raw/master/p/160c415c/19826068-aa8119d0945c6671.png" alt></p>
</li>
<li><p>编辑注册表 HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run ，如下：<br><img src="//gitee.com/guoke3915/zw/raw/master/p/160c415c/19826068-d7621263e759aa8a.png" alt></p>
</li>
</ol>
<p>可以 编写注册表脚本（将以下代码保存为.reg文件即可）双击运行</p>
<pre><code class="line-numbers language-reg">Windows Registry Editor Version 5.00

[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run]
&quot;SSServer&quot;=&quot;ssr.bat&quot;</code></pre>
<ol start="4">
<li>编辑本地组策略 gpedit.msc</li>
</ol>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/160c415c/19826068-6aaed9ac1bb40c63.png" alt></p>
<p>系统-&gt;脚本(启动/关机) 或 用户-&gt;脚本(登录/注销)中添加程序</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/160c415c/19826068-d4a4f0d8746393eb.png" alt></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Win 2012 r2 安装 VC14 安装失败</title>
    <url>/p/a91cbbd3.html</url>
    <content><![CDATA[<p>在服务器上运行一些程序时需要用到<a href="http://www.microsoft.com/en-us/download/details.aspx?id=48145" target="_blank" rel="noopener">VC14(Visual C++ Redistributable for Visual Studio 2015)</a><br>)运行库。</p>
<h2 id="1-安装报错"><a href="#1-安装报错" class="headerlink" title="1. 安装报错"></a>1. 安装报错</h2><p><img src="//gitee.com/guoke3915/zw/raw/master/p/a91cbbd3/19826068-bd2a3d6f1d673889.png" alt></p>
<p>查看日志文件：Windows8.1-KB2999226-x64.msu 安装失败<br><img src="//gitee.com/guoke3915/zw/raw/master/p/a91cbbd3/19826068-7c818919579663b9.png" alt></p>
<h2 id="2-解决办法"><a href="#2-解决办法" class="headerlink" title="2. 解决办法"></a>2. 解决办法</h2><h3 id="2-1-安装补丁-KB2919442"><a href="#2-1-安装补丁-KB2919442" class="headerlink" title="2.1 安装补丁 KB2919442"></a>2.1 安装补丁 KB2919442</h3><p>选择适合自己的版本下载<a href="https://www.microsoft.com/zh-cn/download/details.aspx?id=42153" target="_blank" rel="noopener">KB2919442</a><br><img src="//gitee.com/guoke3915/zw/raw/master/p/a91cbbd3/19826068-efb4a3733589df36.png" alt></p>
<p>下载后直接运行安装<br><img src="//gitee.com/guoke3915/zw/raw/master/p/a91cbbd3/19826068-392b744994d55811.png" alt></p>
<h3 id="2-2-安装补丁-KB2919355"><a href="#2-2-安装补丁-KB2919355" class="headerlink" title="2.2 安装补丁 KB2919355"></a>2.2 安装补丁 KB2919355</h3><p>选择适合自己的版本下载<a href="https://www.microsoft.com/zh-cn/download/confirmation.aspx?id=42334" target="_blank" rel="noopener">KB2919355</a></p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/a91cbbd3/19826068-ab295f0d70d30af3.png" alt></p>
<p>选择所有的文件下载</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/a91cbbd3/19826068-dbcc9fa0c9f0a0de.png" alt></p>
<p>按以下顺序安装更新: </p>
<ul>
<li>clearcompressionflag.exe:　管理员身份运行，没有界面，后台运</li>
<li>Windows8.1-KB2919355-x64.msu</li>
<li>Windows8.1-KB2932046-x64.msu</li>
<li>Windows8.1-KB2934018-x64.msu</li>
<li>Windows8.1-KB2937592-x64.msu</li>
<li>Windows8.1-KB2938439-x64.msu</li>
<li>Windows8.1-KB2959977-x64.msu<br>安装完成后，需要重起。</li>
</ul>
<h2 id="3-再重新修复安装"><a href="#3-再重新修复安装" class="headerlink" title="3. 再重新修复安装"></a>3. 再重新修复安装</h2><p>再次运行vc_redist.x86完成安装<br><img src="//gitee.com/guoke3915/zw/raw/master/p/a91cbbd3/19826068-867551625810df20.png" alt></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>docker中/var/lib/docker目录迁移</title>
    <url>/p/fe977338.html</url>
    <content><![CDATA[<p>今天突然发现服务器的磁盘空间不足，查了一下发现是<code>/var/lib/docker/overlay2</code>目录占用空间太大。这个是docker的默认路径，由于磁盘分区问题，导致<code>/var</code>目录空间有限，所以，可以将<code>/var/lib/docker</code>目录迁移到空间最大的盘中。</p>
<ol>
<li>停止docker服务</li>
</ol>
<pre><code class="line-numbers language-bash">systemctl stop docker</code></pre>
<ol start="2">
<li>查看磁盘空间<br>通过命令<code>df -lh</code> 先去看下磁盘大概的情况，找一个大的空间。</li>
</ol>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/fe977338/19826068-12a65fc6df4d55d9.png" alt></p>
<ol start="3">
<li>创建docker的新目录</li>
</ol>
<p>创建docker的新目录，我这边找了<code>/home</code>, 所以我这边的新目录地址是 <code>/home/docker</code>中</p>
<pre><code class="line-numbers language-bash">mkdir -p /home/docker</code></pre>
<ol start="4">
<li>开始迁移</li>
</ol>
<p>使用<code>rsync</code>命令，将<code>/var/lib/docker/</code>迁移到<code>/home/docker/</code>目录中</p>
<pre><code class="line-numbers language-bash">rsync -avzP /var/lib/docker/ /home/docker/</code></pre>
<p>若未安装rsync使用<code>yum install -y rsync</code>安装</p>
<p>参数解释：</p>
<ul>
<li>-a，归档模式，表示递归传输并保持文件属性。</li>
<li>-v，显示rsync过程中详细信息。可以使用”-vvvv”获取更详细信息。</li>
<li>-P，显示文件传输的进度信息。(实际上”-P”=”–partial –progress”，其中的”–progress”才是显示进度信息的)。</li>
<li>-z,   传输时进行压缩提高效率。</li>
</ul>
<ol start="5">
<li>修改docker目录</li>
</ol>
<p>修改<code>vim /lib/systemd/system/docker.service</code>文件，在ExecStart加入中加入<code>--graph=/data/docker/lib/docker</code></p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/fe977338/19826068-4b2d2ecef02d137a.png" alt></p>
<ol start="6">
<li>重启docker</li>
</ol>
<pre><code class="line-numbers language-bash">systemctl daemon-reload
systemctl restart docker
systemctl enable docker</code></pre>
<ol start="7">
<li>启动之后确认docker 没有问题，删除旧的/var/lib/docker/目录</li>
</ol>
<p>本文参考：<a href="https://my.oschina.net/qbj/blog/2998164" target="_blank" rel="noopener">https://my.oschina.net/qbj/blog/2998164</a></p>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker中compose安装owncloud</title>
    <url>/p/c1f1da06.html</url>
    <content><![CDATA[<p><a href="https://owncloud.com" target="_blank" rel="noopener">ownCloud</a> 跨平台支持 Windows、Mac、Android、iOS、Linux 等平台，而且还提供了网页版和 WebDAV 形式访问，因此你可以在任何电脑、手机上都能轻松获取你的文件了。</p>
<h1 id="一、安装Docker"><a href="#一、安装Docker" class="headerlink" title="一、安装Docker"></a>一、安装Docker</h1><p>在Centos中，使用脚本直接安装Docker</p>
<pre><code class="line-numbers language-bash">## 确保 yum 包更新到最新。
sudo yum -y update

## 卸载旧版本
sudo yum remove docker  docker-common docker-selinux docker-engine
&lt;!-- more --&gt;
## 安装需要的软件包
sudo yum install -y yum-utils device-mapper-persistent-data lvm2 

## 安装container-selinux
yum  install -y http://mirror.centos.org/centos/7/extras/x86_64/Packages/container-selinux-2.107-1.el7_6.noarch.rpm

## 设置yum源
sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

## 安装
sudo yum -y install docker-ce

## 设置开机启动
sudo systemctl enable docker

## 启动docker
sudo systemctl start docker

## 显示版本
docker version</code></pre>
<h1 id="二、Compose-安装"><a href="#二、Compose-安装" class="headerlink" title="二、Compose 安装"></a>二、Compose 安装</h1><p>Linux 上我们可以从 Github 上下载它的二进制包来使用，最新发行的版本地址：<a href="https://github.com/docker/compose/releases" target="_blank" rel="noopener">https://github.com/docker/compose/releases</a>。<br>运行以下命令以下载 Docker Compose 的当前稳定版本：</p>
<pre><code class="line-numbers language-bash">curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</code></pre>
<p>将可执行权限应用于二进制文件：</p>
<pre><code class="line-numbers language-bash">chmod +x /usr/local/bin/docker-compose
ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</code></pre>
<h1 id="三、安装owncloud"><a href="#三、安装owncloud" class="headerlink" title="三、安装owncloud"></a>三、安装owncloud</h1><h2 id="1-创建yml文件"><a href="#1-创建yml文件" class="headerlink" title="1. 创建yml文件"></a>1. 创建yml文件</h2><p>在适当的目录中，创建<code>docker-compose.yml</code>文件，文件内容:</p>
<pre><code class="line-numbers language-yml">version: &#39;2.1&#39;

volumes:
  files:
    driver: local
  mysql:
    driver: local
  backup:
    driver: local
  redis:
    driver: local

services:
  owncloud:
    image: owncloud/server:${OWNCLOUD_VERSION}
    restart: always
    ports:
      - ${HTTP_PORT}:8080
    depends_on:
      - db
      - redis
    environment:
      - OWNCLOUD_DOMAIN=${OWNCLOUD_DOMAIN}
      - OWNCLOUD_DB_TYPE=mysql
      - OWNCLOUD_DB_NAME=owncloud
      - OWNCLOUD_DB_USERNAME=owncloud
      - OWNCLOUD_DB_PASSWORD=owncloud
      - OWNCLOUD_DB_HOST=db
      - OWNCLOUD_ADMIN_USERNAME=${ADMIN_USERNAME}
      - OWNCLOUD_ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - OWNCLOUD_MYSQL_UTF8MB4=true
      - OWNCLOUD_REDIS_ENABLED=true
      - OWNCLOUD_REDIS_HOST=redis
    healthcheck:
      test: [&quot;CMD&quot;, &quot;/usr/bin/healthcheck&quot;]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - files:/mnt/data

  db:
    image: webhippie/mariadb:latest
    restart: always
    environment:
      - MARIADB_ROOT_PASSWORD=owncloud
      - MARIADB_USERNAME=owncloud
      - MARIADB_PASSWORD=owncloud
      - MARIADB_DATABASE=owncloud
      - MARIADB_MAX_ALLOWED_PACKET=128M
      - MARIADB_INNODB_LOG_FILE_SIZE=64M
    healthcheck:
      test: [&quot;CMD&quot;, &quot;/usr/bin/healthcheck&quot;]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - mysql:/var/lib/mysql
      - backup:/var/lib/backup

  redis:
    image: webhippie/redis:latest
    restart: always
    environment:
      - REDIS_DATABASES=1
    healthcheck:
      test: [&quot;CMD&quot;, &quot;/usr/bin/healthcheck&quot;]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - redis:/var/lib/redis</code></pre>
<h2 id="2-创建环境配置文件"><a href="#2-创建环境配置文件" class="headerlink" title="2. 创建环境配置文件"></a>2. 创建环境配置文件</h2><pre><code class="line-numbers language-bash">cat &lt;&lt; EOF &gt; .env
OWNCLOUD_VERSION=10.5
OWNCLOUD_DOMAIN=localhost
ADMIN_USERNAME=admin
ADMIN_PASSWORD=admin
HTTP_PORT=8080
EOF</code></pre>
<table>
<thead>
<tr>
<th>配置文件</th>
<th>描述</th>
<th>例如</th>
</tr>
</thead>
<tbody><tr>
<td>OWNCLOUD_VERSION</td>
<td>ownCloud 版本</td>
<td>latest</td>
</tr>
<tr>
<td>OWNCLOUD_DOMAIN</td>
<td>域名</td>
<td>localhost</td>
</tr>
<tr>
<td>ADMIN_USERNAME</td>
<td>管理员账号</td>
<td>admin</td>
</tr>
<tr>
<td>ADMIN_PASSWORD</td>
<td>管理员密码</td>
<td>123456</td>
</tr>
<tr>
<td>HTTP_PORT</td>
<td>访问端口</td>
<td>latest</td>
</tr>
</tbody></table>
<h2 id="3-安装"><a href="#3-安装" class="headerlink" title="3.  安装"></a>3.  安装</h2><pre><code class="line-numbers language-bash">docker-compose up -d</code></pre>
<h2 id="4-查看结果"><a href="#4-查看结果" class="headerlink" title="4. 查看结果"></a>4. 查看结果</h2><pre><code class="line-numbers language-txt">Name                              Command                     State   Ports
__________________________________________________________________________________________
ownclouddockerserver_db_1         … /bin/s6-svscan /etc/s6    Up      3306/tcp
ownclouddockerserver_owncloud_1   … /usr/bin/owncloud server  Up      0.0.0.0:8080-&gt;8080/tcp
ownclouddockerserver_redis_1      … /bin/s6-svscan /etc/s6    Up      6379/tcp</code></pre>
<h2 id="5-运行测试"><a href="#5-运行测试" class="headerlink" title="5. 运行测试"></a>5. 运行测试</h2><p><img src="//gitee.com/guoke3915/zw/raw/master/p/c1f1da06/19826068-00e7dffa229de892.png" alt></p>
<h2 id="6-文件目录"><a href="#6-文件目录" class="headerlink" title="6. 文件目录"></a>6. 文件目录</h2><p>上传的文件会在Docker对应的volumes目录中</p>
<pre><code class="line-numbers language-bash">/var/lib/docker/volumes/owncloud_files/_data/files/用户名</code></pre>
<p>如果未设置<code>启用服务器端加密</code>,则文件就是网盘中的原文件，可以直接拿出来用</p>
<h2 id="7-Nginx反向代理"><a href="#7-Nginx反向代理" class="headerlink" title="7. Nginx反向代理"></a>7. Nginx反向代理</h2><h3 id="7-1-进入容器内部"><a href="#7-1-进入容器内部" class="headerlink" title="7.1 进入容器内部"></a>7.1 进入容器内部</h3><pre><code class="line-numbers language-bash">docker exec -it owncloud_owncloud_1 /bin/bash</code></pre>
<h3 id="7-2-修改配置文件"><a href="#7-2-修改配置文件" class="headerlink" title="7.2 修改配置文件"></a>7.2 修改配置文件</h3><p>找到<code>/var/www/owncloud</code>目录下的<code>config/config.php</code>配置文件，修改配置</p>
<pre><code class="line-numbers language-php">  &#39;trusted_domains&#39; =&gt;
  array (
    0 =&gt; &#39;pan.zengwu.com.cn&#39;,                           // 添加自己的域名
    1 =&gt; &#39;localhost&#39;
  ),

  &#39;overwrite.cli.url&#39; =&gt; &#39;https://pan.zengwu.com.cn/&#39;, // 修改为自己的域名</code></pre>
<h3 id="7-3-配置nginx"><a href="#7-3-配置nginx" class="headerlink" title="7.3 配置nginx"></a>7.3 配置nginx</h3><pre><code class="line-numbers language-conf"># http 转 https
server{
  listen 80;
  return 301 https://$host$request_uri;
}

# https域名
server{
  listen 443 ssl;
  server_name pan.zengwu.com.cn;

  index   index.html;
  ssl on;
  ssl_certificate /etc/nginx/key/pan.zengwu.com.cn.pem;
  ssl_certificate_key /etc/nginx/key/pan.zengwu.com.cn.key;
  ssl_session_timeout 5m;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
  ssl_prefer_server_ciphers on;

  location / {
    proxy_pass http://localhost:8080/;

    # header 开始
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header   Cookie $http_cookie;
    # header 结束

    client_max_body_size 5G;  # 允许上传的文件大小
  }
}</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>x64环境下_findnext()报错</title>
    <url>/p/636032b3.html</url>
    <content><![CDATA[<h2 id="原报错代码："><a href="#原报错代码：" class="headerlink" title="原报错代码："></a>原报错代码：</h2><pre><code class="line-numbers language-c++">//获取所有的文件名  
void getAllFiles(string path, vector&lt;string&gt;&amp; files)
{
    long  hFile = 0;
    //文件信息    
    struct _finddata_t fileinfo;//用来存储文件信息的结构体    
    string p;
    if ((hFile = _findfirst(p.assign(path).append(&quot;\\*&quot;).c_str(), &amp;fileinfo)) != -1)  //第一次查找  
    {
        do
        {
            if ((fileinfo.attrib &amp;  _A_SUBDIR))  //如果查找到的是文件夹  
            {
                if (strcmp(fileinfo.name, &quot;.&quot;) != 0 &amp;&amp; strcmp(fileinfo.name, &quot;..&quot;) != 0)  //进入文件夹查找  
                {
                    //files.push_back(p.assign(path).append(&quot;\\&quot;).append(fileinfo.name));
                    getAllFiles(p.assign(path).append(&quot;\\&quot;).append(fileinfo.name), files);
                }
            }
            else //如果查找到的不是是文件夹   
            {
                files.push_back(p.assign(path).append(&quot;\\&quot;).append(fileinfo.name));
            }

        } while (_findnext(hFile, &amp;fileinfo) == 0);

        _findclose(hFile); //结束查找  
    }
}</code></pre>
<h2 id="发生异常"><a href="#发生异常" class="headerlink" title="发生异常"></a>发生异常</h2><p><img src="//gitee.com/guoke3915/zw/raw/master/p/636032b3/19826068-9cc638e195b25e30.png" alt></p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>_findnext()第一个参数”路径句柄”，返回的类型为intptr_t（long long），如果定义为long，在x86环境中是没有问题，但是在x64环境中就要改为long long或者intptr_t</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>win远程桌面不自动刷新</title>
    <url>/p/e5a2d411.html</url>
    <content><![CDATA[<p>远程桌面连接windows 2008r2后，发现刷新有问题。</p>
<ol>
<li>Win + R 打开运行输入：regedit 回车进入注册表编辑器</li>
<li>找到：HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control</li>
<li>右键Control项，新建UPdata 子项</li>
<li>右键UPdata子项，新建DWORD（32）子键，重命名为UpdateMode，键值为0（自动刷新，1为手动刷新）</li>
</ol>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/e5a2d411/19826068-adba670b4bbb824e.png" alt></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Cocos Creator 抗锯齿</title>
    <url>/p/a92cd108.html</url>
    <content><![CDATA[<p>cocos creator 3.0版本后支持3D模型了，但是，3D模型默认是关闭抗锯齿的。<br>这个可以通过<code>ENABLE_WEBGL_ANTIALIAS</code>来开启<strong>webgl</strong>的抗锯齿</p>
<pre><code class="line-numbers language-js">/** !#en
Boolean that indicates if the WebGL context is created with `antialias` option turned on, default value is false.
Set it to true could make your game graphics slightly smoother, like texture hard edges when rotated.
Whether to use this really depend on your game design and targeted platform,
device with retina display usually have good detail on graphics with or without this option,
you probably don&#39;t want antialias if your game style is pixel art based.
Also, it could have great performance impact with some browser / device using software MSAA.
You can set it to true before `cc.game.run`.
Web only.
!#zh
用于设置在创建 WebGL Context 时是否开启抗锯齿选项，默认值是 false。
将这个选项设置为 true 会让你的游戏画面稍稍平滑一些，比如旋转硬边贴图时的锯齿。是否开启这个选项很大程度上取决于你的游戏和面向的平台。
在大多数拥有 retina 级别屏幕的设备上用户往往无法区分这个选项带来的变化；如果你的游戏选择像素艺术风格，你也多半不会想开启这个选项。
同时，在少部分使用软件级别抗锯齿算法的设备或浏览器上，这个选项会对性能产生比较大的影响。
你可以在 `cc.game.run` 之前设置这个值，否则它不会生效。
仅支持 Web */
static ENABLE_WEBGL_ANTIALIAS: boolean;        </code></pre>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>新建一个antiAlias.js插件文件</p>
<pre><code class="line-numbers language-js">cc.macro.ENABLE_WEBGL_ANTIALIAS = true;</code></pre>
<p>然后,把这个文件设置为<strong>插件脚本</strong></p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/a92cd108/19826068-0f794a3e98c0b6d5.png" alt></p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>在编译后的<code>main.js</code>文件中,找到<code>cc.game.run</code>,在之前插入<code>cc.macro.ENABLE_WEBGL_ANTIALIAS = true;</code></p>
<pre><code class="line-numbers language-js">function cb (err) {
    if (err) return console.error(err.message, err.stack);
    count++;
    if (count === bundleRoot.length + 1) {
        cc.macro.ENABLE_WEBGL_ANTIALIAS = true;
        cc.game.run(option, onStart);
    }
}</code></pre>
]]></content>
      <categories>
        <category>Cocos2d-JS</category>
      </categories>
      <tags>
        <tag>Cocos2djs</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 限制ip并发数及请求速度</title>
    <url>/p/89819110.html</url>
    <content><![CDATA[<h2 id="1-限制单IP并发访问数量"><a href="#1-限制单IP并发访问数量" class="headerlink" title="1. 限制单IP并发访问数量"></a>1. 限制单IP并发访问数量</h2><p>nginx中ngx_http_limit_conn_module模块用于限制连接数量，特别是来自单个IP地址的连接数量。并非所有的连接都被计数。只有当服务器处理了请求并且已经读取了整个请求头时，连接才被计数。</p>
<pre><code class="line-numbers language-conf">http {
    limit_conn_zone $binary_remote_addr zone=addr:10m;
    ...
    server {
        ...
        location / {
            limit_conn addr 10;
            ...
        }
}</code></pre>
<p>$binary_remote_addr对于IPv4地址，变量的大小始终为4个字节，对于IPv6地址则为16个字节。存储状态在32位平台上始终占用32或64个字节，在64位平台上占用64个字节。一个兆字节的区域可以保持大约32000个32字节的状态或大约16000个64字节的状态。如果区域存储耗尽，服务器会将错误返回 给所有其他请求。10M可存储160000个状态</p>
<h2 id="2-限制单IP访问速度"><a href="#2-限制单IP访问速度" class="headerlink" title="2. 限制单IP访问速度"></a>2. 限制单IP访问速度</h2><p>nginx中ngx_http_limit_req_module模块用于限制每一个请求的处理速率，特别是从一个单一的IP地址的请求的处理速率。</p>
<pre><code class="line-numbers language-conf">http {
    limit_req_zone $binary_remote_addr zone=one:10m rate=30r/s;
    ...
    server {
        ...
        location / {
            limit_req zone=one burst=50;
            ...
        }
}</code></pre>
<h2 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h2><p>我们可以用ab工具测试一下。</p>
<pre><code class="line-numbers language-bash">yum -y install httpd-tools</code></pre>
<h3 id="并发测试"><a href="#并发测试" class="headerlink" title="并发测试"></a>并发测试</h3><p>并发数50，总共执行次数100</p>
<pre><code class="line-numbers language-bash">ab -c 50 -n 100 http://127.0.0.1:6688/</code></pre>
<h3 id="无限制时"><a href="#无限制时" class="headerlink" title="无限制时"></a>无限制时</h3><pre><code class="line-numbers language-bash">&gt; ab  -c 50 -n 100 http://127.0.0.1:6688/
This is ApacheBench, Version 2.3 &lt;$Revision: 1430300 $&gt;
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking 127.0.0.1 (be patient).....done


Server Software:        nginx
Server Hostname:        127.0.0.1
Server Port:            6688

Document Path:          /
Document Length:        612 bytes

Concurrency Level:      50
Time taken for tests:   0.007 seconds
Complete requests:      100
Failed requests:        0
Write errors:           0
Total transferred:      83800 bytes
HTML transferred:       61200 bytes
Requests per second:    14828.00 [#/sec] (mean)
Time per request:       3.372 [ms] (mean)
Time per request:       0.067 [ms] (mean, across all concurrent requests)
Transfer rate:          12134.63 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    1   0.3      1       2
Processing:     0    1   0.7      2       2
Waiting:        0    1   0.5      1       2
Total:          1    2   0.5      2       3</code></pre>
<h3 id="限制配置"><a href="#限制配置" class="headerlink" title="限制配置"></a>限制配置</h3><pre><code class="line-numbers language-conf">http {
    ...
    limit_conn_zone $binary_remote_addr zone=addr:10m;
    limit_req_zone $binary_remote_addr zone=one:10m rate=30r/s;
    server {
        limit_conn addr 10;
        limit_req zone=one burst=50;
        ...
    }
}</code></pre>
<h3 id="限制后"><a href="#限制后" class="headerlink" title="限制后"></a>限制后</h3><pre><code class="line-numbers language-bash">&gt; ab  -c 50 -n 100 http://121.40.237.209:6688/
This is ApacheBench, Version 2.3 &lt;$Revision: 1430300 $&gt;
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking 121.40.237.209 (be patient).....done


Server Software:        nginx
Server Hostname:        121.40.237.209
Server Port:            6688

Document Path:          /
Document Length:        612 bytes

Concurrency Level:      50
Time taken for tests:   3.309 seconds
Complete requests:      100
Failed requests:        0
Write errors:           0
Total transferred:      83800 bytes
HTML transferred:       61200 bytes
Requests per second:    30.22 [#/sec] (mean)
Time per request:       1654.476 [ms] (mean)
Time per request:       33.090 [ms] (mean, across all concurrent requests)
Transfer rate:          24.73 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        4    5   0.3      5       5
Processing:     5 1237 547.1   1660    1664
Waiting:        5 1237 547.1   1660    1664
Total:         10 1241 547.2   1665    1668</code></pre>
<p>可以看出100个请求在3.3秒完成符合30r/s</p>
<p>参考文章<br><a href="http://nginx.org/en/docs/http/ngx_http_limit_conn_module.html" target="_blank" rel="noopener">http://nginx.org/en/docs/http/ngx_http_limit_conn_module.html</a><br><a href="http://nginx.org/en/docs/http/ngx_http_limit_req_module.html" target="_blank" rel="noopener">http://nginx.org/en/docs/http/ngx_http_limit_req_module.html</a></p>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker中配置MongoDB副本集群</title>
    <url>/p/6d2b5c4a.html</url>
    <content><![CDATA[<h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ol>
<li>n个不同类型节点组成</li>
<li>每个节点数据相同</li>
<li>建议至少有一个primary和两个secondary节点</li>
<li>集群中只能有一个primary节点</li>
<li>写请求都通过primary节点</li>
<li>支持自动故障恢复</li>
<li>primary节点不可用时，通过投票选举从secondary节点列表中选出primary节点，因此最好节点数量是奇数</li>
<li>secondary节点从primary节点通过oplog异步方式同步数据 节点类型</li>
</ol>
<h1 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h1><pre><code class="line-numbers language-bash">docker run -d --name m0 --volume /data/mdb/m0:/data/db -p 27017:27017 mongo /bin/bash -c &#39;mongod --replSet replset0&#39; --auth
docker run -d --name m1 --volume /data/mdb/m1:/data/db -p 27018:27017 mongo /bin/bash -c &#39;mongod --replSet replset0&#39; --auth
docker run -d --name m2 --volume /data/mdb/m2:/data/db -p 27019:27017 mongo /bin/bash -c &#39;mongod --replSet replset0&#39; --auth</code></pre>
<table>
<thead>
<tr>
<th>容器名</th>
<th>ip</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>m0</td>
<td>127.0.0.1:27017</td>
<td>Primary(主, 读写)</td>
</tr>
<tr>
<td>m1</td>
<td>127.0.0.1:27018</td>
<td>Secondary1(从,读)</td>
</tr>
<tr>
<td>m2</td>
<td>127.0.0.1:27019</td>
<td>Secondary2(从, 读)</td>
</tr>
</tbody></table>
<h1 id="配置副本集"><a href="#配置副本集" class="headerlink" title="配置副本集"></a>配置副本集</h1><pre><code class="line-numbers language-bash">docker exec -it m0 mongo
&gt;use admin
&gt;config = { _id:&quot;replset0&quot;, members:[{_id:0,host:&quot;127.0.0.1:27017&quot;},{_id:1,host:&quot;127.0.0.1:27017&quot;},{_id:2,host:&quot;127.0.0.1:27019&quot;}]}
&gt;rs.initiate(config)</code></pre>
<h1 id="创建数据库密码"><a href="#创建数据库密码" class="headerlink" title="创建数据库密码"></a>创建数据库密码</h1><pre><code class="line-numbers language-bash">docker exec -it m0 mongo admin --eval &quot;db.createUser({ user: &#39;root&#39;, pwd: &#39;123456&#39;, roles: [ { role: &#39;root&#39;, db: &#39;admin&#39; } , &#39;readWriteAnyDatabase&#39;] })&quot;</code></pre>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="Primary-插入"><a href="#Primary-插入" class="headerlink" title="Primary 插入"></a>Primary 插入</h2><pre><code class="line-numbers language-bash">docker exec -it m0 mongo
&gt;use admin
&gt;db.auth(&quot;root&quot;, &quot;123456&quot;)

&gt;use school
&gt;db.student.insert({name:&quot;Guoke&quot;, age:16})
&gt;db.student.insert({name:&quot;CenWu&quot;, age:15})</code></pre>
<h2 id="Secondary1库查询"><a href="#Secondary1库查询" class="headerlink" title="Secondary1库查询"></a>Secondary1库查询</h2><pre><code class="line-numbers language-bash">docker exec -it m1 mongo
&gt;db.getMongo().setSlaveOk()
&gt;use school
&gt;db.student.find()
{ &quot;_id&quot; : ObjectId(&quot;5f4de851632fb64e4ba9838f&quot;), &quot;name&quot; : &quot;Guoke&quot;, &quot;age&quot; : 16 }
{ &quot;_id&quot; : ObjectId(&quot;5f4de855632fb64e4ba98390&quot;), &quot;name&quot; : &quot;CenWu&quot;, &quot;age&quot; : 15 }</code></pre>
<h1 id="节点属性说明"><a href="#节点属性说明" class="headerlink" title="节点属性说明"></a>节点属性说明</h1><pre><code class="line-numbers language-json">&gt; rs.config()
{
    &quot;_id&quot; : &quot;replset0&quot;,
    &quot;version&quot; : 1,
    &quot;protocolVersion&quot; : NumberLong(1),
    &quot;members&quot; : [
        {
            &quot;_id&quot; : 0,
            &quot;host&quot; : &quot;127.0.0.1:27017&quot;,
            &quot;arbiterOnly&quot; : false,
            &quot;buildIndexes&quot; : true,
            &quot;hidden&quot; : false,
            &quot;priority&quot; : 1,
            &quot;tags&quot; : {

            },
            &quot;slaveDelay&quot; : NumberLong(0),
            &quot;votes&quot; : 1
        },
        {
            &quot;_id&quot; : 1,
            &quot;host&quot; : &quot;127.0.0.1:27018&quot;,
            &quot;arbiterOnly&quot; : false,
            &quot;buildIndexes&quot; : true,
            &quot;hidden&quot; : false,
            &quot;priority&quot; : 1,
            &quot;tags&quot; : {

            },
            &quot;slaveDelay&quot; : NumberLong(0),
            &quot;votes&quot; : 1
        },
        {
            &quot;_id&quot; : 1,
            &quot;host&quot; : &quot;127.0.0.1:27019&quot;,
            &quot;arbiterOnly&quot; : false,
            &quot;buildIndexes&quot; : true,
            &quot;hidden&quot; : false,
            &quot;priority&quot; : 1,
            &quot;tags&quot; : {

            },
            &quot;slaveDelay&quot; : NumberLong(0),
            &quot;votes&quot; : 1
        }
    ],
    &quot;settings&quot; : {
        &quot;chainingAllowed&quot; : true,
        &quot;heartbeatIntervalMillis&quot; : 2000,
        &quot;heartbeatTimeoutSecs&quot; : 10,
        &quot;electionTimeoutMillis&quot; : 10000,
        &quot;getLastErrorModes&quot; : {

        },
        &quot;getLastErrorDefaults&quot; : {
            &quot;w&quot; : 1,
            &quot;wtimeout&quot; : 0
        },
        &quot;replicaSetId&quot; : ObjectId(&quot;5f4de76695204c8d504ff50c&quot;)
    }
}</code></pre>
<p>priority: 0 表示不是候选人，可以投票<br>hidden:true 对用户端不可见，不可见的节点priority必须设置为0<br>votes: 1 投票权限 0表示不能投票</p>
<h1 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h1><h2 id="修改hidden属性"><a href="#修改hidden属性" class="headerlink" title="修改hidden属性"></a>修改hidden属性</h2><pre><code class="line-numbers language-bash">&gt; use admin 
&gt; cfg = rs.conf()
&gt; cfg.members[2].priority = 0
&gt; cfg.members[2].hidden = true
&gt; rs.reconfig(cfg)</code></pre>
<h2 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h2><pre><code class="line-numbers language-bash">mongo 主节点地址
rs.add({} | host地址)</code></pre>
<h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><pre><code class="line-numbers language-bash">mongo 主节点地址
# 删除前，建议先停止这个节点的服务
rs.remove(hostname)</code></pre>
<h2 id="更改集群配置"><a href="#更改集群配置" class="headerlink" title="更改集群配置"></a>更改集群配置</h2><pre><code class="line-numbers language-bash">mongo 主节点地址
rs.reconfig({},{})</code></pre>
]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7设置密钥登录</title>
    <url>/p/84e637d8.html</url>
    <content><![CDATA[<h2 id="一、生成密钥"><a href="#一、生成密钥" class="headerlink" title="一、生成密钥"></a>一、生成密钥</h2><p>如果没有密钥,可以用<strong>ssh-keygen</strong>来生成</p>
<pre><code class="line-numbers language-bash">ssh-keygen -t rsa</code></pre>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/84e637d8/19826068-b48deec05d92e5e9.png" alt></p>
<ol>
<li>执行命令： ssh-keygen -t rsa</li>
<li>输入密钥存储路径，直接回车则为默认路径</li>
<li>输入密钥密码，直接回车为空密码</li>
<li>重复确认密码</li>
<li>生成成功，生成路径</li>
</ol>
<h2 id="二、已有密钥"><a href="#二、已有密钥" class="headerlink" title="二、已有密钥"></a>二、已有密钥</h2><p>如果已经有rsa密钥， 将密钥文件放置到用户目录下 <code>/root/.ssh/authorized_keys</code><br>然后修改文件权限 <code>chmod 600 /root/.ssh/authorized_keys</code></p>
<h2 id="三、配置ssh"><a href="#三、配置ssh" class="headerlink" title="三、配置ssh"></a>三、配置ssh</h2><pre><code class="line-numbers language-bash">vim /etc/ssh/sshd_config

#端口
Port 22

#配置监听地址
ListenAddress 0.0.0.0
ListenAddress ::

#配置密钥
AuthorizedKeysFile .ssh/authorized_keys

#使用公钥
PubkeyAuthentication yes

#禁用密码登录
PasswordAuthentication no

#使用默认sftp
Subsystem sftp /usr/libexec/openssh/sftp-server
#Subsystem sftp internal-sftp</code></pre>
<p>重启生效<code>systemctl restart sshd</code></p>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>C++遍历目录下所有文件</title>
    <url>/p/d39a5e81.html</url>
    <content><![CDATA[<p>在Windows中可以用 &lt;io.h&gt;库来处理<br>linux中可以用&lt;sys/io.h&gt;库</p>
<pre><code class="line-numbers language-c++">//获取所有的文件名  
void getAllFiles(string path, vector&lt;string&gt;&amp; files)
{

    long   hFile = 0;
    //文件信息    
    struct _finddata_t fileinfo;//用来存储文件信息的结构体    
    string p;
    if ((hFile = _findfirst(p.assign(path).append(&quot;\\*&quot;).c_str(), &amp;fileinfo)) != -1)  //第一次查找  
    {
        do
        {
            if ((fileinfo.attrib &amp;  _A_SUBDIR))  //如果查找到的是文件夹  
            {
                if (strcmp(fileinfo.name, &quot;.&quot;) != 0 &amp;&amp; strcmp(fileinfo.name, &quot;..&quot;) != 0)  //进入文件夹查找  
                {
                    //files.push_back(p.assign(path).append(&quot;\\&quot;).append(fileinfo.name));  // 存入目录
                    getAllFiles(p.assign(path).append(&quot;\\&quot;).append(fileinfo.name), files);
                }
            }
            else //如果查找到的不是是文件夹   
            {
                files.push_back(p.assign(path).append(&quot;\\&quot;).append(fileinfo.name));
            }

        } while (_findnext(hFile, &amp;fileinfo) == 0);

        _findclose(hFile); //结束查找  
    }
}</code></pre>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++string字符串分割</title>
    <url>/p/e0c1faa3.html</url>
    <content><![CDATA[<p>可以用string类的find和substr函数</p>
<h2 id="1-find函数"><a href="#1-find函数" class="headerlink" title="1. find函数"></a>1. find函数</h2><p>函数原型：size_t find(const string&amp; str, size_t pos = 0) const;<br>功能说明：从pos位置开始查找子字符串str第一次出现的位置<br>参数说明：str为要查找的子字符串，pos从为初始查找位置<br>返回值：找到的话返回子字符串第一次出现的位置，否则返回string::npos</p>
<h2 id="2-substr函数"><a href="#2-substr函数" class="headerlink" title="2. substr函数"></a>2. substr函数</h2><p>函数原型：string substr(size_t pos = 0, size_t n = npos) const;<br>功能说明：获取从指定的起始位置开始，长度为n的子字符串<br>参数说明：pos为起始位置，n获取的1字符串长度<br>返回值：子字符串</p>
<pre><code class="line-numbers language-C++">// 字符串分割
vector&lt;string&gt; split(const string &amp;str, const string &amp;pattern)
{
    vector&lt;string&gt; res;
    if (str == &quot;&quot;)
        return res;

    //在字符串末尾也加入分隔符，方便截取最后一段
    string strs = str + pattern;
    size_t pos = strs.find(pattern);

    while (pos != strs.npos)
    {
        string temp = strs.substr(0, pos);
        res.push_back(temp);
        //去掉已分割的字符串,在剩下的字符串中进行分割
        strs = strs.substr(pos + 1, strs.size());
        pos = strs.find(pattern);
    }

    return res;
}</code></pre>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 9.0 应用请求http请求无法访问网络</title>
    <url>/p/baddbcad.html</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>前两天Android Studio打包时，sdk版本从27 升级到29，发现原来的http请求访问不了。原来是在Android (9.0)+系统的设备上，如果应用使用的是非加密的明文流量的http网络请求，则会导致该应用无法进行网络请求，https则不会受影响</p>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><h2 id="1-将SDK版本降为27及以下"><a href="#1-将SDK版本降为27及以下" class="headerlink" title="1. 将SDK版本降为27及以下"></a>1. 将SDK版本降为27及以下</h2><h2 id="2-将http协议改为https协议"><a href="#2-将http协议改为https协议" class="headerlink" title="2. 将http协议改为https协议"></a>2. 将http协议改为https协议</h2><h2 id="3-修改工程配置"><a href="#3-修改工程配置" class="headerlink" title="3. 修改工程配置"></a>3. 修改工程配置</h2><p>修改工程AndroidManifest文件中的application标签内添加</p>
<pre><code>&lt;application
...
  android:usesCleartextTraffic=&quot;true&quot;
...
/&gt;</code></pre>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Studio Gradle工程路径太长</title>
    <url>/p/55b12ce9.html</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>用cocos creator生成了一个gradle 的 android工程，项目本身目录就比较深，再加上默认的生成路径又是一大堆，最后用Android Studio打开的时候，目录已经很长很长了。再然后就编译出错了</p>
<h1 id="报错原因"><a href="#报错原因" class="headerlink" title="报错原因"></a>报错原因</h1><p>在Window中，Android的默认最大目录长度是240，所以，目录长度超过240的时候就会报错了。</p>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><h2 id="1-移动项目"><a href="#1-移动项目" class="headerlink" title="1. 移动项目"></a>1. 移动项目</h2><p>移动整个工程项目目录，使用项目中所用到的所有文件的目录长度都不超过240</p>
<h2 id="2-创建目录硬链接"><a href="#2-创建目录硬链接" class="headerlink" title="2. 创建目录硬链接"></a>2. 创建目录硬链接</h2><ul>
<li>用cmd打开命令行窗口</li>
<li>输入命令<code>mklink /J 链接目录 源项目目录</code>。如：</li>
</ul>
<pre><code>mklink /J C:\AndroidProjects\ProjectName C:\MyVeryVeryVeryVery…VeryVeryVeryLongPath\ProjectName</code></pre><ul>
<li>然后，用Android Studio打开链接目录(<code>C:\AndroidProjects\ProjectName</code>)就可以了</li>
</ul>
<h2 id="3-修改build-gradle文件"><a href="#3-修改build-gradle文件" class="headerlink" title="3. 修改build.gradle文件"></a>3. 修改<code>build.gradle</code>文件</h2><p>打开项目中的<code>build.gradle</code>文件，找到<code>allprojects</code>项，在里面添加编译目录<code>buildDir = &quot;C:/tmp/${rootProject.name}/${project.name}&quot;</code></p>
<pre><code>allprojects {
    buildDir = &quot;C:/tmp/${rootProject.name}/${project.name}&quot;
    repositories {
       ...
    }
}</code></pre><p>然后，重新用Android Studio打开项目就可以了</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Studio Gradle工程无Generate signed apk选项</title>
    <url>/p/45025b2.html</url>
    <content><![CDATA[<p>用 <strong>Android Studio</strong> 打开别的人 Gradle 工程时，build的时候没有找到 <strong>Generate signed apk选项</strong><br><img src="//gitee.com/guoke3915/zw/raw/master/p/45025b2/19826068-56bdc54b2341f760.png" alt></p>
<p>点击file，选中如下图所示<strong>Sync Project with Gradle Files</strong><br><img src="//gitee.com/guoke3915/zw/raw/master/p/45025b2/19826068-b21fe3cda7a89db2.png" alt></p>
<p>然后，就会有了<br><img src="//gitee.com/guoke3915/zw/raw/master/p/45025b2/19826068-89e39a8399d53c5c.png" alt></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>施氏食狮史</title>
    <url>/p/16c889de.html</url>
    <content><![CDATA[<p>石室诗士施氏，嗜狮，誓食十狮。施氏时时适市视狮。十时，适十狮适市。是时，适施氏适市。氏视是十狮，恃矢势，使是十狮逝世。氏拾是十狮尸，适石室。石室湿，氏使侍拭石室。石室拭，氏始试食是十狮。食时，始识是十狮，实十石狮尸。</p>
<p>ps：睡不着，刷网页无意中看到的赵元任写的同音字故事，感觉汉子博大精深哈哈 </p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>iPhone投屏Mac</title>
    <url>/p/c7e25331.html</url>
    <content><![CDATA[<h1 id="一、有线模式"><a href="#一、有线模式" class="headerlink" title="一、有线模式"></a>一、有线模式</h1><ol>
<li><p>用数据线装iPhone连接到Mac电脑上</p>
</li>
<li><p>打开系统自带的 <strong>QuickTime Player</strong>， 选择<strong>文件</strong> -&gt; <strong>新建影片录制</strong></p>
</li>
</ol>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/c7e25331/19826068-73e34c9a77ff72b4.png" alt=" "></p>
<ol start="3">
<li>录制源选择你的手机就可以了</li>
</ol>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/c7e25331/19826068-a0c4fe1f9f9b1bf9.png" alt=" "></p>
<h1 id="二、无线模式"><a href="#二、无线模式" class="headerlink" title="二、无线模式"></a>二、无线模式</h1><ol>
<li><p>手机和Mac在同一局域网下</p>
</li>
<li><p>需要软件 AirServer</p>
</li>
</ol>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/c7e25331/19826068-34ce025a04d097ac.png" alt=" "></p>
<ol start="3">
<li><p>打开手机在下拉菜单中选择<strong>屏幕镜像</strong></p>
</li>
<li><p>在<strong>屏幕镜像</strong>列表中，选择Mac计算机名的airtv</p>
</li>
</ol>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/c7e25331/19826068-762e3abe1d8d9c8d.png" alt=" "></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>iPhone中添加163邮件</title>
    <url>/p/e523d0a.html</url>
    <content><![CDATA[<ol>
<li>开通 <code>IMAP/SMTP服务</code><br>进入163邮箱设置页面，选择<code>POP3/SMTP/IMAP</code>，开通<code>IMAP/SMTP服务</code></li>
</ol>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/e523d0a/19826068-90272c73e64ebcfe.png" alt></p>
<ol start="2">
<li>短信验证</li>
</ol>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/e523d0a/19826068-3537e40effcd69f2.png" alt></p>
<ol start="3">
<li>开通授权码</li>
</ol>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/e523d0a/19826068-524adf0edf186d2a.png" alt></p>
<ol start="4">
<li>进入手机设置-&gt;密码与账户</li>
</ol>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/e523d0a/19826068-660e28d39162e85d.png" alt></p>
<ol start="5">
<li>添加账户</li>
</ol>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/e523d0a/19826068-a3fc63203759fc14.png" alt></p>
<ol start="6">
<li>选择163邮件</li>
</ol>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/e523d0a/19826068-73a2c2f15eecb584.png" alt></p>
<ol start="7">
<li>添加账号密码，这里的密码为前面设置页面中的授权码</li>
</ol>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/e523d0a/19826068-a38ef139c3cc0fe7.png" alt></p>
<ol start="8">
<li>存储完成</li>
</ol>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/e523d0a/19826068-e9a44ab52d3a583d.png" alt></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>C++实现AES加解密算法</title>
    <url>/p/81e6531e.html</url>
    <content><![CDATA[<h1 id="AES-头文件"><a href="#AES-头文件" class="headerlink" title="AES 头文件"></a>AES 头文件</h1><p>CAES.h</p>
<pre><code class="line-numbers language-cpp">#pragma once

class CAES
{
public:
    CAES(const char* key);
    virtual ~CAES();

    /**
     * 加密
     * @param in 输入加密数据
     * @param inlen 输入加密数据长度
     * @param outlen 输出加密后数据长度
     * @param fill 如果不是16的整数倍，是否用0值补全。 true:用0值补全, false:用xor加密多余的数据
     * @return 返回加密后数据
     */
    void* Encrypt(void* in, int inlen, int&amp; outlen, bool fill = false); 

    /**
     * 解密
     * @param in 输入解密数据
     * @param inlen 输入解密数据长度
     * @param outlen 输出解密后数据长度
     * @return 返回解密后数据
     */
    void* Decrypt(void* in, int inlen, int&amp; outlen);

private:
    // S 盒变换
    unsigned char Sbox[256];
    // 逆 S 盒变换
    unsigned char InvSbox[256];
    // 密钥
    unsigned char w[11][4][4];

private:
    /**
     * 密钥扩展函数 - 对128位密钥进行扩展得到 w[11][4][4]
     * @param key 16位密钥
     */
    void KeyExpansion(const char* key);

    /**
     * 异或加解密
     * @param in 加解密输入数据
     * @param len 加解密输入数据长度
     */
    void Xor(unsigned char* in, int len);

    /**
     * 加密，传入的数组大小必须是16字节
     * @param data 加密数据
     */
    void Encrypt(unsigned char* data);

    /**
     * 解密，传入的数组也必须是16字节
     * @param data 解密数据
     */
    void Decrypt(unsigned char* data);

    /**
     * S 盒变换
     * @param state 变换数据
     */
    void SubBytes(unsigned char state[][4]);

    /**
     * 行变换
     * @param state 变换数据
     */
    void ShiftRows(unsigned char state[][4]);

    /**
     * 列变换
     * @param state 变换数据
     */
    void MixColumns(unsigned char state[][4]);

    /**
     * 与扩展密钥的异或
     * @param state 变换数据
     */
    void AddRoundKey(unsigned char state[][4], unsigned char k[][4]);

    /**
     * 逆 S 盒变换
     * @param state 变换数据
     */
    void InvSubBytes(unsigned char state[][4]);

    /**
     * 逆行变换
     * @param state 变换数据
     */
    void InvShiftRows(unsigned char state[][4]);

    /**
     * 逆列变换
     * @param state 变换数据
     */
    void InvMixColumns(unsigned char state[][4]);
};
</code></pre>
<h2 id="AES-实现文件"><a href="#AES-实现文件" class="headerlink" title="AES 实现文件"></a>AES 实现文件</h2><p>CAES.cpp</p>
<pre><code class="line-numbers language-cpp">#include &quot;CAES.h&quot;
#include &lt;algorithm&gt;
#include &lt;fstream&gt;

unsigned char Mul_01[256] = {
    0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,
    0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,
    0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,
    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3a,0x3b,0x3c,0x3d,0x3e,0x3f,
    0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,
    0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,
    0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,
    0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a,0x7b,0x7c,0x7d,0x7e,0x7f,
    0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8a,0x8b,0x8c,0x8d,0x8e,0x8f,
    0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9a,0x9b,0x9c,0x9d,0x9e,0x9f,
    0xa0,0xa1,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,0xa8,0xa9,0xaa,0xab,0xac,0xad,0xae,0xaf,
    0xb0,0xb1,0xb2,0xb3,0xb4,0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xbb,0xbc,0xbd,0xbe,0xbf,
    0xc0,0xc1,0xc2,0xc3,0xc4,0xc5,0xc6,0xc7,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xce,0xcf,
    0xd0,0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb,0xdc,0xdd,0xde,0xdf,
    0xe0,0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,
    0xf0,0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,0xf9,0xfa,0xfb,0xfc,0xfd,0xfe,0xff,
};

unsigned char Mul_02[256] = {
    0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
    0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
    0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
    0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
    0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
    0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
    0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
    0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
    0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
    0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
    0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
    0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
    0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
    0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
    0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
    0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5
};

unsigned char Mul_03[256] = {
    0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
    0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
    0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
    0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
    0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
    0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
    0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
    0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,
    0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
    0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
    0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,
    0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,
    0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
    0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
    0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
    0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a
};

unsigned char Mul_09[256] = {
    0x00,0x09,0x12,0x1b,0x24,0x2d,0x36,0x3f,0x48,0x41,0x5a,0x53,0x6c,0x65,0x7e,0x77,
    0x90,0x99,0x82,0x8b,0xb4,0xbd,0xa6,0xaf,0xd8,0xd1,0xca,0xc3,0xfc,0xf5,0xee,0xe7,
    0x3b,0x32,0x29,0x20,0x1f,0x16,0x0d,0x04,0x73,0x7a,0x61,0x68,0x57,0x5e,0x45,0x4c,
    0xab,0xa2,0xb9,0xb0,0x8f,0x86,0x9d,0x94,0xe3,0xea,0xf1,0xf8,0xc7,0xce,0xd5,0xdc,
    0x76,0x7f,0x64,0x6d,0x52,0x5b,0x40,0x49,0x3e,0x37,0x2c,0x25,0x1a,0x13,0x08,0x01,
    0xe6,0xef,0xf4,0xfd,0xc2,0xcb,0xd0,0xd9,0xae,0xa7,0xbc,0xb5,0x8a,0x83,0x98,0x91,
    0x4d,0x44,0x5f,0x56,0x69,0x60,0x7b,0x72,0x05,0x0c,0x17,0x1e,0x21,0x28,0x33,0x3a,
    0xdd,0xd4,0xcf,0xc6,0xf9,0xf0,0xeb,0xe2,0x95,0x9c,0x87,0x8e,0xb1,0xb8,0xa3,0xaa,
    0xec,0xe5,0xfe,0xf7,0xc8,0xc1,0xda,0xd3,0xa4,0xad,0xb6,0xbf,0x80,0x89,0x92,0x9b,
    0x7c,0x75,0x6e,0x67,0x58,0x51,0x4a,0x43,0x34,0x3d,0x26,0x2f,0x10,0x19,0x02,0x0b,
    0xd7,0xde,0xc5,0xcc,0xf3,0xfa,0xe1,0xe8,0x9f,0x96,0x8d,0x84,0xbb,0xb2,0xa9,0xa0,
    0x47,0x4e,0x55,0x5c,0x63,0x6a,0x71,0x78,0x0f,0x06,0x1d,0x14,0x2b,0x22,0x39,0x30,
    0x9a,0x93,0x88,0x81,0xbe,0xb7,0xac,0xa5,0xd2,0xdb,0xc0,0xc9,0xf6,0xff,0xe4,0xed,
    0x0a,0x03,0x18,0x11,0x2e,0x27,0x3c,0x35,0x42,0x4b,0x50,0x59,0x66,0x6f,0x74,0x7d,
    0xa1,0xa8,0xb3,0xba,0x85,0x8c,0x97,0x9e,0xe9,0xe0,0xfb,0xf2,0xcd,0xc4,0xdf,0xd6,
    0x31,0x38,0x23,0x2a,0x15,0x1c,0x07,0x0e,0x79,0x70,0x6b,0x62,0x5d,0x54,0x4f,0x46
};

unsigned char Mul_0b[256] = {
    0x00,0x0b,0x16,0x1d,0x2c,0x27,0x3a,0x31,0x58,0x53,0x4e,0x45,0x74,0x7f,0x62,0x69,
    0xb0,0xbb,0xa6,0xad,0x9c,0x97,0x8a,0x81,0xe8,0xe3,0xfe,0xf5,0xc4,0xcf,0xd2,0xd9,
    0x7b,0x70,0x6d,0x66,0x57,0x5c,0x41,0x4a,0x23,0x28,0x35,0x3e,0x0f,0x04,0x19,0x12,
    0xcb,0xc0,0xdd,0xd6,0xe7,0xec,0xf1,0xfa,0x93,0x98,0x85,0x8e,0xbf,0xb4,0xa9,0xa2,
    0xf6,0xfd,0xe0,0xeb,0xda,0xd1,0xcc,0xc7,0xae,0xa5,0xb8,0xb3,0x82,0x89,0x94,0x9f,
    0x46,0x4d,0x50,0x5b,0x6a,0x61,0x7c,0x77,0x1e,0x15,0x08,0x03,0x32,0x39,0x24,0x2f,
    0x8d,0x86,0x9b,0x90,0xa1,0xaa,0xb7,0xbc,0xd5,0xde,0xc3,0xc8,0xf9,0xf2,0xef,0xe4,
    0x3d,0x36,0x2b,0x20,0x11,0x1a,0x07,0x0c,0x65,0x6e,0x73,0x78,0x49,0x42,0x5f,0x54,
    0xf7,0xfc,0xe1,0xea,0xdb,0xd0,0xcd,0xc6,0xaf,0xa4,0xb9,0xb2,0x83,0x88,0x95,0x9e,
    0x47,0x4c,0x51,0x5a,0x6b,0x60,0x7d,0x76,0x1f,0x14,0x09,0x02,0x33,0x38,0x25,0x2e,
    0x8c,0x87,0x9a,0x91,0xa0,0xab,0xb6,0xbd,0xd4,0xdf,0xc2,0xc9,0xf8,0xf3,0xee,0xe5,
    0x3c,0x37,0x2a,0x21,0x10,0x1b,0x06,0x0d,0x64,0x6f,0x72,0x79,0x48,0x43,0x5e,0x55,
    0x01,0x0a,0x17,0x1c,0x2d,0x26,0x3b,0x30,0x59,0x52,0x4f,0x44,0x75,0x7e,0x63,0x68,
    0xb1,0xba,0xa7,0xac,0x9d,0x96,0x8b,0x80,0xe9,0xe2,0xff,0xf4,0xc5,0xce,0xd3,0xd8,
    0x7a,0x71,0x6c,0x67,0x56,0x5d,0x40,0x4b,0x22,0x29,0x34,0x3f,0x0e,0x05,0x18,0x13,
    0xca,0xc1,0xdc,0xd7,0xe6,0xed,0xf0,0xfb,0x92,0x99,0x84,0x8f,0xbe,0xb5,0xa8,0xa3
};

unsigned char Mul_0d[256] = {
    0x00,0x0d,0x1a,0x17,0x34,0x39,0x2e,0x23,0x68,0x65,0x72,0x7f,0x5c,0x51,0x46,0x4b,
    0xd0,0xdd,0xca,0xc7,0xe4,0xe9,0xfe,0xf3,0xb8,0xb5,0xa2,0xaf,0x8c,0x81,0x96,0x9b,
    0xbb,0xb6,0xa1,0xac,0x8f,0x82,0x95,0x98,0xd3,0xde,0xc9,0xc4,0xe7,0xea,0xfd,0xf0,
    0x6b,0x66,0x71,0x7c,0x5f,0x52,0x45,0x48,0x03,0x0e,0x19,0x14,0x37,0x3a,0x2d,0x20,
    0x6d,0x60,0x77,0x7a,0x59,0x54,0x43,0x4e,0x05,0x08,0x1f,0x12,0x31,0x3c,0x2b,0x26,
    0xbd,0xb0,0xa7,0xaa,0x89,0x84,0x93,0x9e,0xd5,0xd8,0xcf,0xc2,0xe1,0xec,0xfb,0xf6,
    0xd6,0xdb,0xcc,0xc1,0xe2,0xef,0xf8,0xf5,0xbe,0xb3,0xa4,0xa9,0x8a,0x87,0x90,0x9d,
    0x06,0x0b,0x1c,0x11,0x32,0x3f,0x28,0x25,0x6e,0x63,0x74,0x79,0x5a,0x57,0x40,0x4d,
    0xda,0xd7,0xc0,0xcd,0xee,0xe3,0xf4,0xf9,0xb2,0xbf,0xa8,0xa5,0x86,0x8b,0x9c,0x91,
    0x0a,0x07,0x10,0x1d,0x3e,0x33,0x24,0x29,0x62,0x6f,0x78,0x75,0x56,0x5b,0x4c,0x41,
    0x61,0x6c,0x7b,0x76,0x55,0x58,0x4f,0x42,0x09,0x04,0x13,0x1e,0x3d,0x30,0x27,0x2a,
    0xb1,0xbc,0xab,0xa6,0x85,0x88,0x9f,0x92,0xd9,0xd4,0xc3,0xce,0xed,0xe0,0xf7,0xfa,
    0xb7,0xba,0xad,0xa0,0x83,0x8e,0x99,0x94,0xdf,0xd2,0xc5,0xc8,0xeb,0xe6,0xf1,0xfc,
    0x67,0x6a,0x7d,0x70,0x53,0x5e,0x49,0x44,0x0f,0x02,0x15,0x18,0x3b,0x36,0x21,0x2c,
    0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47,
    0xdc,0xd1,0xc6,0xcb,0xe8,0xe5,0xf2,0xff,0xb4,0xb9,0xae,0xa3,0x80,0x8d,0x9a,0x97
};

unsigned char Mul_0e[256] = {
    0x00,0x0e,0x1c,0x12,0x38,0x36,0x24,0x2a,0x70,0x7e,0x6c,0x62,0x48,0x46,0x54,0x5a,
    0xe0,0xee,0xfc,0xf2,0xd8,0xd6,0xc4,0xca,0x90,0x9e,0x8c,0x82,0xa8,0xa6,0xb4,0xba,
    0xdb,0xd5,0xc7,0xc9,0xe3,0xed,0xff,0xf1,0xab,0xa5,0xb7,0xb9,0x93,0x9d,0x8f,0x81,
    0x3b,0x35,0x27,0x29,0x03,0x0d,0x1f,0x11,0x4b,0x45,0x57,0x59,0x73,0x7d,0x6f,0x61,
    0xad,0xa3,0xb1,0xbf,0x95,0x9b,0x89,0x87,0xdd,0xd3,0xc1,0xcf,0xe5,0xeb,0xf9,0xf7,
    0x4d,0x43,0x51,0x5f,0x75,0x7b,0x69,0x67,0x3d,0x33,0x21,0x2f,0x05,0x0b,0x19,0x17,
    0x76,0x78,0x6a,0x64,0x4e,0x40,0x52,0x5c,0x06,0x08,0x1a,0x14,0x3e,0x30,0x22,0x2c,
    0x96,0x98,0x8a,0x84,0xae,0xa0,0xb2,0xbc,0xe6,0xe8,0xfa,0xf4,0xde,0xd0,0xc2,0xcc,
    0x41,0x4f,0x5d,0x53,0x79,0x77,0x65,0x6b,0x31,0x3f,0x2d,0x23,0x09,0x07,0x15,0x1b,
    0xa1,0xaf,0xbd,0xb3,0x99,0x97,0x85,0x8b,0xd1,0xdf,0xcd,0xc3,0xe9,0xe7,0xf5,0xfb,
    0x9a,0x94,0x86,0x88,0xa2,0xac,0xbe,0xb0,0xea,0xe4,0xf6,0xf8,0xd2,0xdc,0xce,0xc0,
    0x7a,0x74,0x66,0x68,0x42,0x4c,0x5e,0x50,0x0a,0x04,0x16,0x18,0x32,0x3c,0x2e,0x20,
    0xec,0xe2,0xf0,0xfe,0xd4,0xda,0xc8,0xc6,0x9c,0x92,0x80,0x8e,0xa4,0xaa,0xb8,0xb6,
    0x0c,0x02,0x10,0x1e,0x34,0x3a,0x28,0x26,0x7c,0x72,0x60,0x6e,0x44,0x4a,0x58,0x56,
    0x37,0x39,0x2b,0x25,0x0f,0x01,0x13,0x1d,0x47,0x49,0x5b,0x55,0x7f,0x71,0x63,0x6d,
    0xd7,0xd9,0xcb,0xc5,0xef,0xe1,0xf3,0xfd,0xa7,0xa9,0xbb,0xb5,0x9f,0x91,0x83,0x8d
};

CAES::CAES(const char* key)
{
    unsigned char sBox[] =
    { /*  0    1    2    3    4    5    6    7    8    9    a    b    c    d    e    f */
        0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76, /*0*/
        0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0, /*1*/
        0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15, /*2*/
        0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75, /*3*/
        0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84, /*4*/
        0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf, /*5*/
        0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8, /*6*/
        0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2, /*7*/
        0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73, /*8*/
        0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb, /*9*/
        0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79, /*a*/
        0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08, /*b*/
        0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a, /*c*/
        0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e, /*d*/
        0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf, /*e*/
        0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16  /*f*/
    };
    unsigned char invsBox[256] =
    { /*  0    1    2    3    4    5    6    7    8    9    a    b    c    d    e    f  */
        0x52,0x09,0x6a,0xd5,0x30,0x36,0xa5,0x38,0xbf,0x40,0xa3,0x9e,0x81,0xf3,0xd7,0xfb, /*0*/
        0x7c,0xe3,0x39,0x82,0x9b,0x2f,0xff,0x87,0x34,0x8e,0x43,0x44,0xc4,0xde,0xe9,0xcb, /*1*/
        0x54,0x7b,0x94,0x32,0xa6,0xc2,0x23,0x3d,0xee,0x4c,0x95,0x0b,0x42,0xfa,0xc3,0x4e, /*2*/
        0x08,0x2e,0xa1,0x66,0x28,0xd9,0x24,0xb2,0x76,0x5b,0xa2,0x49,0x6d,0x8b,0xd1,0x25, /*3*/
        0x72,0xf8,0xf6,0x64,0x86,0x68,0x98,0x16,0xd4,0xa4,0x5c,0xcc,0x5d,0x65,0xb6,0x92, /*4*/
        0x6c,0x70,0x48,0x50,0xfd,0xed,0xb9,0xda,0x5e,0x15,0x46,0x57,0xa7,0x8d,0x9d,0x84, /*5*/
        0x90,0xd8,0xab,0x00,0x8c,0xbc,0xd3,0x0a,0xf7,0xe4,0x58,0x05,0xb8,0xb3,0x45,0x06, /*6*/
        0xd0,0x2c,0x1e,0x8f,0xca,0x3f,0x0f,0x02,0xc1,0xaf,0xbd,0x03,0x01,0x13,0x8a,0x6b, /*7*/
        0x3a,0x91,0x11,0x41,0x4f,0x67,0xdc,0xea,0x97,0xf2,0xcf,0xce,0xf0,0xb4,0xe6,0x73, /*8*/
        0x96,0xac,0x74,0x22,0xe7,0xad,0x35,0x85,0xe2,0xf9,0x37,0xe8,0x1c,0x75,0xdf,0x6e, /*9*/
        0x47,0xf1,0x1a,0x71,0x1d,0x29,0xc5,0x89,0x6f,0xb7,0x62,0x0e,0xaa,0x18,0xbe,0x1b, /*a*/
        0xfc,0x56,0x3e,0x4b,0xc6,0xd2,0x79,0x20,0x9a,0xdb,0xc0,0xfe,0x78,0xcd,0x5a,0xf4, /*b*/
        0x1f,0xdd,0xa8,0x33,0x88,0x07,0xc7,0x31,0xb1,0x12,0x10,0x59,0x27,0x80,0xec,0x5f, /*c*/
        0x60,0x51,0x7f,0xa9,0x19,0xb5,0x4a,0x0d,0x2d,0xe5,0x7a,0x9f,0x93,0xc9,0x9c,0xef, /*d*/
        0xa0,0xe0,0x3b,0x4d,0xae,0x2a,0xf5,0xb0,0xc8,0xeb,0xbb,0x3c,0x83,0x53,0x99,0x61, /*e*/
        0x17,0x2b,0x04,0x7e,0xba,0x77,0xd6,0x26,0xe1,0x69,0x14,0x63,0x55,0x21,0x0c,0x7d  /*f*/
    };
    memcpy(Sbox, sBox, 256);
    memcpy(InvSbox, invsBox, 256);
    KeyExpansion(key);
}

CAES::~CAES()
{

}

void CAES::Xor(unsigned char* in, int len)
{
    for (int i = 0; i &lt; len; i++)
        in[i] ^= w[i%11][0][0];
}

void CAES::Encrypt(unsigned char* data)
{
    unsigned char state[4][4];
    int i, r, c;

    for (r = 0; r &lt; 4; r++)
    {
        for (c = 0; c &lt; 4; c++)
        {
            state[r][c] = data[c * 4 + r];
        }
    }

    AddRoundKey(state, w[0]);

    for (i = 1; i &lt;= 10; i++)
    {
        SubBytes(state);
        ShiftRows(state);
        if (i != 10)MixColumns(state);
        AddRoundKey(state, w[i]);
    }

    for (r = 0; r &lt; 4; r++)
    {
        for (c = 0; c &lt; 4; c++)
        {
            data[c * 4 + r] = state[r][c];
        }
    }
}

void CAES::Decrypt(unsigned char* data)
{
    unsigned char state[4][4];
    int i, r, c;

    for (r = 0; r &lt; 4; r++)
    {
        for (c = 0; c &lt; 4; c++)
        {
            state[r][c] = data[c * 4 + r];
        }
    }

    AddRoundKey(state, w[10]);
    for (i = 9; i &gt;= 0; i--)
    {
        InvShiftRows(state);
        InvSubBytes(state);
        AddRoundKey(state, w[i]);
        if (i)
        {
            InvMixColumns(state);
        }
    }

    for (r = 0; r &lt; 4; r++)
    {
        for (c = 0; c &lt; 4; c++)
        {
            data[c * 4 + r] = state[r][c];
        }
    }
}

void* CAES::Encrypt(void* in, int inlen, int&amp; outlen, bool fill)
{
    outlen = inlen;
    if (fill &amp;&amp; inlen % 16 &gt; 0)
        outlen += 16 - (inlen % 16);

    unsigned char* data = new unsigned char[outlen];
    memset(data, 0x0, outlen);
    memcpy(data, in, inlen);
    for (int i = 0; i &lt; inlen; i += 16)
    {
        // 不足16位的用异或加密
        if (outlen - i &lt; 16)
            Xor(data + i, outlen - i);
        else
            Encrypt(data + i);
    }

    return (void*)data;
}

void* CAES::Decrypt(void* in, int inlen, int&amp; outlen)
{
    outlen = inlen;
    unsigned char* data = new unsigned char[outlen];
    memset(data, 0x0, outlen);
    memcpy(data, in, inlen);

    for (int i = 0; i &lt; outlen; i += 16)
    {
        if (outlen - i &lt; 16)
            Xor(data + i, outlen - i);
        else
            Decrypt(data + i);
    }

    return (void*)data;
}

void CAES::KeyExpansion(const char* key)
{
    int i, j, r, c;
    unsigned char rc[] = { 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36 };
    for (r = 0; r &lt; 4; r++)
    {
        for (c = 0; c &lt; 4; c++)
        {
            w[0][r][c] = key[r + c * 4];
        }
    }
    for (i = 1; i &lt;= 10; i++)
    {
        for (j = 0; j &lt; 4; j++)
        {
            unsigned char t[4];
            for (r = 0; r &lt; 4; r++)
            {
                t[r] = j ? w[i][r][j - 1] : w[i - 1][r][3];
            }
            if (j == 0)
            {
                unsigned char temp = t[0];
                for (r = 0; r &lt; 3; r++)
                {
                    t[r] = Sbox[t[(r + 1) % 4]];
                }
                t[3] = Sbox[temp];
                t[0] ^= rc[i - 1];
            }
            for (r = 0; r &lt; 4; r++)
            {
                w[i][r][j] = w[i - 1][r][j] ^ t[r];
            }
        }
    }
}

void CAES::SubBytes(unsigned char state[][4])
{
    int r, c;
    for (r = 0; r &lt; 4; r++)
    {
        for (c = 0; c &lt; 4; c++)
        {
            state[r][c] = Sbox[state[r][c]];
        }
    }
}

void CAES::ShiftRows(unsigned char state[][4])
{
    unsigned char t[4];
    int r, c;
    for (r = 1; r &lt; 4; r++)
    {
        for (c = 0; c &lt; 4; c++)
        {
            t[c] = state[r][(c + r) % 4];
        }
        for (c = 0; c &lt; 4; c++)
        {
            state[r][c] = t[c];
        }
    }
}

void CAES::MixColumns(unsigned char state[][4])
{
    unsigned char t[4];
    int r, c;
    for (c = 0; c &lt; 4; c++)
    {
        for (r = 0; r &lt; 4; r++)
        {
            t[r] = state[r][c];
        }
        for (r = 0; r &lt; 4; r++)
        {
            state[r][c] = Mul_02[t[r]]
                ^ Mul_03[t[(r + 1) % 4]]
                ^ Mul_01[t[(r + 2) % 4]]
                ^ Mul_01[t[(r + 3) % 4]];
        }
    }
}

void CAES::AddRoundKey(unsigned char state[][4], unsigned char k[][4])
{
    int r, c;
    for (c = 0; c &lt; 4; c++)
    {
        for (r = 0; r &lt; 4; r++)
        {
            state[r][c] ^= k[r][c];
        }
    }
}

void CAES::InvSubBytes(unsigned char state[][4])
{
    int r, c;
    for (r = 0; r &lt; 4; r++)
    {
        for (c = 0; c &lt; 4; c++)
        {
            state[r][c] = InvSbox[state[r][c]];
        }
    }
}

void CAES::InvShiftRows(unsigned char state[][4])
{
    unsigned char t[4];
    int r, c;
    for (r = 1; r &lt; 4; r++)
    {
        for (c = 0; c &lt; 4; c++)
        {
            t[c] = state[r][(c - r + 4) % 4];
        }
        for (c = 0; c &lt; 4; c++)
        {
            state[r][c] = t[c];
        }
    }
}

void CAES::InvMixColumns(unsigned char state[][4])
{
    unsigned char t[4];
    int r, c;
    for (c = 0; c &lt; 4; c++)
    {
        for (r = 0; r &lt; 4; r++)
        {
            t[r] = state[r][c];
        }
        for (r = 0; r &lt; 4; r++)
        {
            state[r][c] = Mul_0e[t[r]]
                ^ Mul_0b[t[(r + 1) % 4]]
                ^ Mul_0d[t[(r + 2) % 4]]
                ^ Mul_09[t[(r + 3) % 4]];
        }
    }
}</code></pre>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>main.cpp</p>
<pre><code class="line-numbers language-cpp">#include &quot;CAES.h&quot;
#include &lt;iostream&gt;
#include &lt;io.h&gt;

void printf2char(const char* data, int len) {
    for (int i = 0; i &lt; len; i++)
    {
        std::cout &lt;&lt; std::hex &lt;&lt; static_cast&lt;unsigned int&gt;(static_cast&lt;unsigned char&gt;(data[i])) &lt;&lt; &#39; &#39;;
    }

    std::cout &lt;&lt; std::endl;
}

int main(int argc, char **argv)
{
    CAES* aes = new CAES(&quot;1234567890abcdef&quot;);

    char str[] = &quot;guoke3915&quot;;
    printf2char(str, strlen(str) + 1);

    int encLen = 0;
    char* enc = (char*)aes-&gt;Encrypt(str, strlen(str)+1, encLen, true);
    printf2char(enc, encLen);

    int decLen = 0;
    char* dec = (char*)aes-&gt;Decrypt(enc, encLen, decLen);
    printf2char(dec, decLen);

    return 0;
}</code></pre>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>常用正则表达式</title>
    <url>/p/81d5af05.html</url>
    <content><![CDATA[<h3 id="火车车次"><a href="#火车车次" class="headerlink" title="火车车次"></a>火车车次</h3><pre><code>/^[GCDZTSPKXLY1-9]\d{1,4}$/</code></pre><h3 id="手机机身码-IMEI"><a href="#手机机身码-IMEI" class="headerlink" title="手机机身码(IMEI)"></a>手机机身码(IMEI)</h3><pre><code>/^\d{15,17}$/</code></pre><h3 id="必须带端口号的网址-或ip"><a href="#必须带端口号的网址-或ip" class="headerlink" title="必须带端口号的网址(或ip)"></a>必须带端口号的网址(或ip)</h3><pre><code>/^((ht|f)tps?:\/\/)?[\w-]+(\.[\w-]+)+:\d{1,5}\/?$/</code></pre><h3 id="网址-url-支持端口和”-参数”和”-参数"><a href="#网址-url-支持端口和”-参数”和”-参数" class="headerlink" title="网址(url,支持端口和”?+参数”和”#+参数)"></a>网址(url,支持端口和”?+参数”和”#+参数)</h3><pre><code>/^(((ht|f)tps?):\/\/)?[\w-]+(\.[\w-]+)+([\w.,@?^=%&amp;:/~+#-]*[\w@?^=%&amp;/~+#-])?$/</code></pre><h3 id="统一社会信用代码"><a href="#统一社会信用代码" class="headerlink" title="统一社会信用代码"></a>统一社会信用代码</h3><pre><code>/^[0-9A-HJ-NPQRTUWXY]{2}\d{6}[0-9A-HJ-NPQRTUWXY]{10}$/</code></pre><h3 id="迅雷链接"><a href="#迅雷链接" class="headerlink" title="迅雷链接"></a>迅雷链接</h3><pre><code>/^thunderx?:\/\/[a-zA-Z\d]+=$/</code></pre><h3 id="ed2k链接-宽松匹配"><a href="#ed2k链接-宽松匹配" class="headerlink" title="ed2k链接(宽松匹配)"></a>ed2k链接(宽松匹配)</h3><pre><code>/^ed2k:\/\/\|file\|.+\|\/$/</code></pre><h3 id="磁力链接-宽松匹配"><a href="#磁力链接-宽松匹配" class="headerlink" title="磁力链接(宽松匹配)"></a>磁力链接(宽松匹配)</h3><pre><code>/^magnet:\?xt=urn:btih:[0-9a-fA-F]{40,}.*$/</code></pre><h3 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h3><pre><code>/^(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])(?:\.(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])){3}$/</code></pre><h3 id="linux”隐藏文件”路径"><a href="#linux”隐藏文件”路径" class="headerlink" title="linux”隐藏文件”路径"></a>linux”隐藏文件”路径</h3><pre><code>/^\/(?:[^/]+\/)*\.[^/]*/</code></pre><h3 id="linux文件夹路径"><a href="#linux文件夹路径" class="headerlink" title="linux文件夹路径"></a>linux文件夹路径</h3><pre><code>/^\/(?:[^/]+\/)*$/</code></pre><h3 id="linux文件路径"><a href="#linux文件路径" class="headerlink" title="linux文件路径"></a>linux文件路径</h3><pre><code>/^\/(?:[^/]+\/)*[^/]+$/</code></pre><h3 id="window”文件夹”路径"><a href="#window”文件夹”路径" class="headerlink" title="window”文件夹”路径"></a>window”文件夹”路径</h3><pre><code>/^[a-zA-Z]:\\(?:\w+\\?)*$/</code></pre><h3 id="window下”文件”路径"><a href="#window下”文件”路径" class="headerlink" title="window下”文件”路径"></a>window下”文件”路径</h3><pre><code>/^[a-zA-Z]:\\(?:\w+\\)*\w+\.\w+$/</code></pre><h3 id="股票代码-A股"><a href="#股票代码-A股" class="headerlink" title="股票代码(A股)"></a>股票代码(A股)</h3><pre><code>/^(s[hz]|S[HZ])(000[\d]{3}|002[\d]{3}|300[\d]{3}|600[\d]{3}|60[\d]{4})$/</code></pre><h3 id="大于等于0-小于等于150-支持小数位出现5-如145-5-用于判断考卷分数"><a href="#大于等于0-小于等于150-支持小数位出现5-如145-5-用于判断考卷分数" class="headerlink" title="大于等于0, 小于等于150, 支持小数位出现5, 如145.5, 用于判断考卷分数"></a>大于等于0, 小于等于150, 支持小数位出现5, 如145.5, 用于判断考卷分数</h3><pre><code>/^150$|^(?:\d|[1-9]\d|1[0-4]\d)(?:.5)?$/</code></pre><h3 id="html注释"><a href="#html注释" class="headerlink" title="html注释"></a>html注释</h3><pre><code>/^$/</code></pre><h3 id="md5格式-32位"><a href="#md5格式-32位" class="headerlink" title="md5格式(32位)"></a>md5格式(32位)</h3><pre><code>/^([a-f\d]{32}|[A-F\d]{32})$/</code></pre><h3 id="版本号-version-格式必须为X-Y-Z"><a href="#版本号-version-格式必须为X-Y-Z" class="headerlink" title="版本号(version)格式必须为X.Y.Z"></a>版本号(version)格式必须为X.Y.Z</h3><pre><code>/^\d+(?:\.\d+){2}$/</code></pre><h3 id="视频-video-链接地址（视频格式可按需增删）"><a href="#视频-video-链接地址（视频格式可按需增删）" class="headerlink" title="视频(video)链接地址（视频格式可按需增删）"></a>视频(video)链接地址（视频格式可按需增删）</h3><pre><code>/^https?:\/\/(.+\/)+.+(\.(swf|avi|flv|mpg|rm|mov|wav|asf|3gp|mkv|rmvb|mp4))$/i</code></pre><h3 id="图片-image-链接地址（图片格式可按需增删）"><a href="#图片-image-链接地址（图片格式可按需增删）" class="headerlink" title="图片(image)链接地址（图片格式可按需增删）"></a>图片(image)链接地址（图片格式可按需增删）</h3><pre><code>/^https?:\/\/(.+\/)+.+(\.(gif|png|jpg|jpeg|webp|svg|psd|bmp|tif))$/i</code></pre><h3 id="24小时制时间（HH-mm-ss）"><a href="#24小时制时间（HH-mm-ss）" class="headerlink" title="24小时制时间（HH:mm:ss）"></a>24小时制时间（HH:mm:ss）</h3><pre><code>/^(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d$/</code></pre><h3 id="12小时制时间（hh-mm-ss）"><a href="#12小时制时间（hh-mm-ss）" class="headerlink" title="12小时制时间（hh:mm:ss）"></a>12小时制时间（hh:mm:ss）</h3><pre><code>/^(?:1[0-2]|0?[1-9]):[0-5]\d:[0-5]\d$/</code></pre><h3 id="base64格式"><a href="#base64格式" class="headerlink" title="base64格式"></a>base64格式</h3><pre><code>/^\s*data:(?:[a-z]+\/[a-z0-9-+.]+(?:;[a-z-]+=[a-z0-9-]+)?)?(?:;base64)?,([a-z0-9!$&amp;&#39;,()*+;=\-._~:@/?%\s]*?)\s*$/i</code></pre><h3 id="数字-货币金额（支持负数、千分位分隔符）"><a href="#数字-货币金额（支持负数、千分位分隔符）" class="headerlink" title="数字/货币金额（支持负数、千分位分隔符）"></a>数字/货币金额（支持负数、千分位分隔符）</h3><pre><code>/^-?\d+(,\d{3})*(\.\d{1,2})?$/</code></pre><h3 id="数字-货币金额-只支持正数、不支持校验千分位分隔符"><a href="#数字-货币金额-只支持正数、不支持校验千分位分隔符" class="headerlink" title="数字/货币金额 (只支持正数、不支持校验千分位分隔符)"></a>数字/货币金额 (只支持正数、不支持校验千分位分隔符)</h3><pre><code>/(?:^[1-9](https://github.com/any86/any-rule/blob/master/[0-9]+)?(?:\.[0-9]{1,2})?$)|(?:^(?:0){1}$)|(?:^[0-9]\.[0-9](https://github.com/any86/any-rule/blob/master?:[0-9])?$)/</code></pre><h3 id="银行卡号（10到30位-覆盖对公-私账户-参考微信支付）"><a href="#银行卡号（10到30位-覆盖对公-私账户-参考微信支付）" class="headerlink" title="银行卡号（10到30位, 覆盖对公/私账户, 参考微信支付）"></a>银行卡号（10到30位, 覆盖对公/私账户, 参考<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fpay.weixin.qq.com%2Fwiki%2Fdoc%2Fapi%2Fxiaowei.php%3Fchapter%3D22_1" target="_blank" rel="noopener">微信支付</a>）</h3><pre><code>/^[1-9]\d{9,29}$/</code></pre><h3 id="中文姓名"><a href="#中文姓名" class="headerlink" title="中文姓名"></a>中文姓名</h3><pre><code>/^(?:[\u4e00-\u9fa5·]{2,16})$/</code></pre><h3 id="英文姓名"><a href="#英文姓名" class="headerlink" title="英文姓名"></a>英文姓名</h3><pre><code>/(^[a-zA-Z]{1}[a-zA-Z\s]{0,20}[a-zA-Z]{1}$)/</code></pre><h3 id="车牌号-新能源"><a href="#车牌号-新能源" class="headerlink" title="车牌号(新能源)"></a>车牌号(新能源)</h3><pre><code>/[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领 A-Z]{1}[A-HJ-NP-Z]{1}(([0-9]{5}[DF])|([DF][A-HJ-NP-Z0-9][0-9]{4}))$/</code></pre><h3 id="车牌号-非新能源"><a href="#车牌号-非新能源" class="headerlink" title="车牌号(非新能源)"></a>车牌号(非新能源)</h3><pre><code>/^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领 A-Z]{1}[A-HJ-NP-Z]{1}[A-Z0-9]{4}[A-Z0-9挂学警港澳]{1}$/</code></pre><h3 id="车牌号-新能源-非新能源"><a href="#车牌号-新能源-非新能源" class="headerlink" title="车牌号(新能源+非新能源)"></a>车牌号(新能源+非新能源)</h3><pre><code>/^(?:[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领 A-Z]{1}[A-HJ-NP-Z]{1}(?:(?:[0-9]{5}[DF])|(?:[DF](https://github.com/any86/any-rule/blob/master?:[A-HJ-NP-Z0-9])[0-9]{4})))|(?:[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领 A-Z]{1}[A-Z]{1}[A-HJ-NP-Z0-9]{4}[A-HJ-NP-Z0-9 挂学警港澳]{1})$/</code></pre><h3 id="手机号-mobile-phone-中国-严谨-根据工信部2019年最新公布的手机号段"><a href="#手机号-mobile-phone-中国-严谨-根据工信部2019年最新公布的手机号段" class="headerlink" title="手机号(mobile phone)中国(严谨), 根据工信部2019年最新公布的手机号段"></a>手机号(mobile phone)中国(严谨), 根据工信部2019年最新公布的手机号段</h3><pre><code>/^(?:(?:\+|00)86)?1(?:(?:3[\d])|(?:4[5-7|9])|(?:5[0-3|5-9])|(?:6[5-7])|(?:7[0-8])|(?:8[\d])|(?:9[1|8|9]))\d{8}$/</code></pre><h3 id="手机号-mobile-phone-中国-宽松-只要是13-14-15-16-17-18-19开头即可"><a href="#手机号-mobile-phone-中国-宽松-只要是13-14-15-16-17-18-19开头即可" class="headerlink" title="手机号(mobile phone)中国(宽松), 只要是13,14,15,16,17,18,19开头即可"></a>手机号(mobile phone)中国(宽松), 只要是13,14,15,16,17,18,19开头即可</h3><pre><code>/^(?:(?:\+|00)86)?1[3-9]\d{9}$/</code></pre><h3 id="手机号-mobile-phone-中国-最宽松-只要是1开头即可-如果你的手机号是用来接收短信-优先建议选择这一条"><a href="#手机号-mobile-phone-中国-最宽松-只要是1开头即可-如果你的手机号是用来接收短信-优先建议选择这一条" class="headerlink" title="手机号(mobile phone)中国(最宽松), 只要是1开头即可, 如果你的手机号是用来接收短信, 优先建议选择这一条"></a>手机号(mobile phone)中国(最宽松), 只要是1开头即可, 如果你的手机号是用来接收短信, 优先建议选择这一条</h3><pre><code>/^(?:(?:\+|00)86)?1\d{10}$/</code></pre><h3 id="date-日期"><a href="#date-日期" class="headerlink" title="date(日期)"></a>date(日期)</h3><pre><code>/^\d{4}(-)(1[0-2]|0?\d)\1([0-2]\d|\d|30|31)$/</code></pre><h3 id="email-邮箱"><a href="#email-邮箱" class="headerlink" title="email(邮箱)"></a>email(邮箱)</h3><pre><code>^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$</code></pre><h3 id="座机-tel-phone-电话-国内-如-0341-86091234"><a href="#座机-tel-phone-电话-国内-如-0341-86091234" class="headerlink" title="座机(tel phone)电话(国内),如: 0341-86091234"></a>座机(tel phone)电话(国内),如: 0341-86091234</h3><pre><code>/^\d{3}-\d{8}$|^\d{4}-\d{7}$/</code></pre><h3 id="身份证号-1代-15位数字"><a href="#身份证号-1代-15位数字" class="headerlink" title="身份证号(1代,15位数字)"></a>身份证号(1代,15位数字)</h3><pre><code>/^[1-9]\d{7}(?:0\d|10|11|12)(?:0[1-9]|[1-2][\d]|30|31)\d{3}$/</code></pre><h3 id="身份证号-2代-18位数字-最后一位是校验位-可能为数字或字符X"><a href="#身份证号-2代-18位数字-最后一位是校验位-可能为数字或字符X" class="headerlink" title="身份证号(2代,18位数字),最后一位是校验位,可能为数字或字符X"></a>身份证号(2代,18位数字),最后一位是校验位,可能为数字或字符X</h3><pre><code>/^[1-9]\d{5}(?:18|19|20)\d{2}(?:0\d|10|11|12)(?:0[1-9]|[1-2]\d|30|31)\d{3}[\dXx]$/</code></pre><h3 id="身份证号-支持1-2代-15位-18位数字"><a href="#身份证号-支持1-2代-15位-18位数字" class="headerlink" title="身份证号, 支持1/2代(15位/18位数字)"></a>身份证号, 支持1/2代(15位/18位数字)</h3><pre><code>/(^\d{8}(0\d|10|11|12)([0-2]\d|30|31)\d{3}$)|(^\d{6}(18|19|20)\d{2}(0\d|10|11|12)([0-2]\d|30|31)\d{3}(\d|X|x)$)/</code></pre><h3 id="护照（包含香港、澳门）"><a href="#护照（包含香港、澳门）" class="headerlink" title="护照（包含香港、澳门）"></a>护照（包含香港、澳门）</h3><pre><code>/(^[EeKkGgDdSsPpHh]\d{8}$)|(^(([Ee][a-fA-F])|([DdSsPp][Ee])|([Kk][Jj])|([Mm][Aa])|(1[45]))\d{7}$)/</code></pre><h3 id="帐号是否合法-字母开头，允许5-16字节，允许字母数字下划线组合"><a href="#帐号是否合法-字母开头，允许5-16字节，允许字母数字下划线组合" class="headerlink" title="帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线组合"></a>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线组合</h3><pre><code>/^[a-zA-Z]\w{4,15}$/</code></pre><h3 id="中文-汉字"><a href="#中文-汉字" class="headerlink" title="中文/汉字"></a>中文/汉字</h3><pre><code>/^(?:[\u3400-\u4DB5\u4E00-\u9FEA\uFA0E\uFA0F\uFA11\uFA13\uFA14\uFA1F\uFA21\uFA23\uFA24\uFA27-\uFA29]|[\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0])+$/</code></pre><h3 id="小数"><a href="#小数" class="headerlink" title="小数"></a>小数</h3><pre><code>/^\d+\.\d+$/</code></pre><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><pre><code>/^\d{1,}$/</code></pre><h3 id="html标签-宽松匹配"><a href="#html标签-宽松匹配" class="headerlink" title="html标签(宽松匹配)"></a>html标签(宽松匹配)</h3><pre><code>/&lt;(\w+)[^&gt;]*&gt;(.*?&lt;\/\1&gt;)?/</code></pre><h3 id="qq号格式正确"><a href="#qq号格式正确" class="headerlink" title="qq号格式正确"></a>qq号格式正确</h3><pre><code>/^[1-9][0-9]{4,10}$/</code></pre><h3 id="数字和字母组成"><a href="#数字和字母组成" class="headerlink" title="数字和字母组成"></a>数字和字母组成</h3><pre><code>/^[A-Za-z0-9]+$/</code></pre><h3 id="英文字母"><a href="#英文字母" class="headerlink" title="英文字母"></a>英文字母</h3><pre><code>/^[a-zA-Z]+$/</code></pre><h3 id="小写英文字母组成"><a href="#小写英文字母组成" class="headerlink" title="小写英文字母组成"></a>小写英文字母组成</h3><pre><code>/^[a-z]+$/</code></pre><h3 id="大写英文字母"><a href="#大写英文字母" class="headerlink" title="大写英文字母"></a>大写英文字母</h3><pre><code>/^[A-Z]+$/</code></pre><h3 id="密码强度校验，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符"><a href="#密码强度校验，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符" class="headerlink" title="密码强度校验，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符"></a>密码强度校验，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符</h3><pre><code>/^\S*(?=\S{6,})(?=\S*\d)(?=\S*[A-Z])(?=\S*[a-z])(?=\S*[!@#$%^&amp;*? ])\S*$/</code></pre><h3 id="用户名校验，4到16位（字母，数字，下划线，减号）"><a href="#用户名校验，4到16位（字母，数字，下划线，减号）" class="headerlink" title="用户名校验，4到16位（字母，数字，下划线，减号）"></a>用户名校验，4到16位（字母，数字，下划线，减号）</h3><pre><code>/^[a-zA-Z0-9_-]{4,16}$/</code></pre><h3 id="ip-v4"><a href="#ip-v4" class="headerlink" title="ip-v4"></a>ip-v4</h3><pre><code>/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/</code></pre><h3 id="ip-v6"><a href="#ip-v6" class="headerlink" title="ip-v6"></a>ip-v6</h3><pre><code>/^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$/i</code></pre><h3 id="16进制颜色"><a href="#16进制颜色" class="headerlink" title="16进制颜色"></a>16进制颜色</h3><pre><code>/^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/</code></pre><h3 id="微信号-wx-，6至20位，以字母开头，字母，数字，减号，下划线"><a href="#微信号-wx-，6至20位，以字母开头，字母，数字，减号，下划线" class="headerlink" title="微信号(wx)，6至20位，以字母开头，字母，数字，减号，下划线"></a>微信号(wx)，6至20位，以字母开头，字母，数字，减号，下划线</h3><pre><code>/^[a-zA-Z][-_a-zA-Z0-9]{5,19}$/</code></pre><h3 id="邮政编码-中国"><a href="#邮政编码-中国" class="headerlink" title="邮政编码(中国)"></a>邮政编码(中国)</h3><pre><code>/^(0[1-7]|1[0-356]|2[0-7]|3[0-6]|4[0-7]|5[1-7]|6[1-7]|7[0-5]|8[013-6])\d{4}$/</code></pre><h3 id="中文和数字"><a href="#中文和数字" class="headerlink" title="中文和数字"></a>中文和数字</h3><pre><code>/^((?:[\u3400-\u4DB5\u4E00-\u9FEA\uFA0E\uFA0F\uFA11\uFA13\uFA14\uFA1F\uFA21\uFA23\uFA24\uFA27-\uFA29]|[\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0])|(\d))+$/</code></pre><h3 id="不能包含字母"><a href="#不能包含字母" class="headerlink" title="不能包含字母"></a>不能包含字母</h3><pre><code>/^[^A-Za-z]*$/</code></pre><h3 id="java包名"><a href="#java包名" class="headerlink" title="java包名"></a>java包名</h3><pre><code>/^([a-zA-Z_][a-zA-Z0-9_]*)+([.][a-zA-Z_][a-zA-Z0-9_]*)+$/</code></pre><h3 id="mac地址"><a href="#mac地址" class="headerlink" title="mac地址"></a>mac地址</h3><pre><code>/^((([a-f0-9]{2}:){5})|(([a-f0-9]{2}-){5}))[a-f0-9]{2}$/i</code></pre>]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>VS Code unins000尝试在目标目录创建文件时出错</title>
    <url>/p/8bdd650d.html</url>
    <content><![CDATA[<p>VS Code 运行时会弹出<code>unins000.exe 尝试在目标目录创建文件时出错</code><br><img src="//gitee.com/guoke3915/zw/raw/master/p/8bdd650d/19826068-811e2a4ee0abf6e9.png" alt></p>
<p>解决办法是，装VS Code 目录权限添加 Everyone 用户完全控制就可以了</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/8bdd650d/19826068-21b0e87738ff6c34.png" alt></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Navicat连接MySQL报错2059</title>
    <url>/p/b2665535.html</url>
    <content><![CDATA[<p>使用Navicat 12连接MySQL 8.0时，出现了2059的错误<code>2059 - authentication plugin &#39;caching_sha2_password&#39; cannot be loaded:</code>。原因是加密规则不同导致的</p>
<h1 id="1-用命令行登录数据库"><a href="#1-用命令行登录数据库" class="headerlink" title="1. 用命令行登录数据库"></a>1. 用命令行登录数据库</h1><pre><code class="line-numbers language-sql">mysql -u root -p</code></pre>
<h1 id="2-进入mysql数据库"><a href="#2-进入mysql数据库" class="headerlink" title="2. 进入mysql数据库"></a>2. 进入mysql数据库</h1><pre><code class="line-numbers language-sql">mysql &gt; use mysql;</code></pre>
<h1 id="3-查看账号加密规则"><a href="#3-查看账号加密规则" class="headerlink" title="3. 查看账号加密规则"></a>3. 查看账号加密规则</h1><pre><code class="line-numbers language-sql">mysql &gt; select Host,User,plugin from mysql.user;
+-----------+------------------+-----------------------+
| Host      | User             | plugin                |
+-----------+------------------+-----------------------+
| %         | root             | caching_sha2_password |
| localhost | mysql.infoschema | caching_sha2_password |
| localhost | mysql.session    | caching_sha2_password |
| localhost | mysql.sys        | caching_sha2_password |
| localhost | root             | caching_sha2_password |
+-----------+------------------+-----------------------+</code></pre>
<h1 id="4-修改加密规则"><a href="#4-修改加密规则" class="headerlink" title="4. 修改加密规则"></a>4. 修改加密规则</h1><pre><code class="line-numbers language-sql">#更改加密方式
ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;password&#39; PASSWORD EXPIRE NEVER; 

#更新用户密码
ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;password&#39;; 

#刷新权限
FLUSH PRIVILEGES;</code></pre>
<p>这里可以根据自己的账号来判定</p>
<ul>
<li>root: 连接的账号</li>
<li>localhost: 本地连接，如果是外网连接，修改为 ‘%’</li>
<li>password: 账号对应的密码</li>
</ul>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx 负载均衡策略</title>
    <url>/p/bb08dfed.html</url>
    <content><![CDATA[<p>Nginx 反向代理的负载均衡中，内置了 <strong>轮询</strong>、<strong>IP分配</strong>、<strong>URL hash</strong>、<strong>最小连接</strong>、<strong>响应时间</strong>等几种策略算法</p>
<p>负载均衡的配置为：</p>
<pre><code class="line-numbers language-conf">http {
    # ... 省略其它配置
    upstream myserver {
        # 默认为轮询算法
        server 192.168.0.55:8081;
        server 192.168.0.55:8082;
        server 192.168.0.55:8083;
    }
    server {
        server_name zengwu.com.cn
        listen 80;
        location / {
            proxy_pass http://myserver;
        }
    }
    # ... 省略其它配置
}</code></pre>
<h1 id="轮询（默认）"><a href="#轮询（默认）" class="headerlink" title="轮询（默认）"></a>轮询（默认）</h1><p>轮询是Nginx支持的默认负载均衡策略，轮询策略就是指每个请求会按时间顺序逐一分配到不同的后台服务器上。轮询也是可以附带参数的，可以附加权重、超时等设置，来分配转发策略</p>
<table>
<thead>
<tr>
<th>说明</th>
<th>ip</th>
</tr>
</thead>
<tbody><tr>
<td>fail_timeout</td>
<td>与max_fails结合使用，表示max_fails次失败后服务器暂停的时间。</td>
</tr>
<tr>
<td>max_fails</td>
<td>设置在fail_timeout参数设置的时间内最大失败次数，默认是1，如果在这个时间内，所有针对该服务器的请求都失败了，那么认为该服务器会被认为是停机了，返回proxy_next_upstream模块定义的错误。</td>
</tr>
<tr>
<td>fail_time</td>
<td>服务器会被认为停机的时间长度,默认为10s。</td>
</tr>
<tr>
<td>backup</td>
<td>标记该服务器为备用服务器。当主服务器停止时，请求会被发送到它这里，当其他所有的非backup机器down掉或者繁忙的时候才会请求backup服务器，因此这台机器压力会最低。</td>
</tr>
<tr>
<td>down</td>
<td>标记服务器永久停机了，表示当前的server暂时不参与负载。</td>
</tr>
<tr>
<td>weight</td>
<td>负载的权重，默认为1。weight越大，表示这台服务器被访问的几率就越大。</td>
</tr>
</tbody></table>
<pre><code class="line-numbers language-conf">upstream myserver {
    server 192.168.0.55:8081;
    server 192.168.0.55:8082 backup;  # 备用服务
    server 192.168.0.55:8083 max_fails=3 fail_timeout=20s; # 3次失败后，停止20秒后再尝试
    server 192.168.0.55:8084 weight=2; # 权重为2
}</code></pre>
<h1 id="IP分配"><a href="#IP分配" class="headerlink" title="IP分配"></a>IP分配</h1><p>这种策略是按照客户端的IP去分配服务器，使同一个客户端的请求都转发到同一个后台服务器，保证了Session的统一性，可以用来解决Session的跨域问题。</p>
<pre><code class="line-numbers language-conf">upstream balanceServer {
    ip_hash; # 指定负载均衡策略为ip_hash
    server 192.168.0.55:8081;
    server 192.168.0.55:8082 backup;
    server 192.168.0.55:8083 max_fails=3 fail_timeout=20s;
    server 192.168.0.55:8084 weight=2;
}</code></pre>
<h1 id="URL-Hash"><a href="#URL-Hash" class="headerlink" title="URL Hash"></a>URL Hash</h1><p>这种策略是按照访问url的hash结果来分配请求，使得每个url定向到同一个后端服务器，要配合缓存命中来使用。同一个资源多次请求，可能会到达不同的服务器上，导致不必要的多次下载，缓存命中率不高，以及一些资源时间的浪费。而使用url_hash的话，就可以使得同一个url（也就是同一个资源请求）到达同一台服务器，一旦缓存住了资源，再次收到请求，就可以从缓存中读取。</p>
<pre><code class="line-numbers language-conf">upstream balanceServer {
    url_hash; # 指定负载均衡策略为url_hash
    server 192.168.0.55:8081;
    server 192.168.0.55:8082;
    server 192.168.0.55:8083;
    server 192.168.0.55:8084;
}</code></pre>
<h1 id="最少连接"><a href="#最少连接" class="headerlink" title="最少连接"></a>最少连接</h1><p>这个策略是把请求转发给连接数较少的后端服务器。前面的轮询策略是把请求平均地转发给集群中的每个后台服务器，使得它们的负载大致相同，但是有些请求可能占用的时间会很长，可能导致所在的后端负载过高。这种情况下选用least_conn策略就能达到更好的负载均衡效果。</p>
<pre><code class="line-numbers language-conf">upstream balanceServer {
    least_conn; # 指定负载均衡策略为least_conn
    server 192.168.0.55:8081;
    server 192.168.0.55:8082 backup;
    server 192.168.0.55:8083 max_fails=3 fail_timeout=20s;
    server 192.168.0.55:8084 weight=2;
}</code></pre>
<h1 id="响应时间"><a href="#响应时间" class="headerlink" title="响应时间"></a>响应时间</h1><p>这种策略是按照服务器的响应时间来分配请求，响应时间短的优先分配。</p>
<p>需要安装<a href="/p/72e79b4.html">nginx-upstream-fair</a>才可以</p>
<pre><code class="line-numbers language-conf">upstream balanceServer {
    fair; # 指定负载均衡策略为fair
    server 192.168.0.55:8081;
    server 192.168.0.55:8082;
    server 192.168.0.55:8083;
    server 192.168.0.55:8084;
}</code></pre>
<p>本文参考：<a href="https://www.cnblogs.com/yanggb/p/10895326.html" target="_blank" rel="noopener">https://www.cnblogs.com/yanggb/p/10895326.html</a></p>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Win用CMake编译protobuf</title>
    <url>/p/3be563cd.html</url>
    <content><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li>Windows 10</li>
<li>CMake 3.18.0</li>
<li>VS 2019</li>
</ul>
<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>先去下载protobuf对应的版本 <a href="https://github.com/protocolbuffers/protobuf/releases" target="_blank" rel="noopener">https://github.com/protocolbuffers/protobuf/releases</a></p>
<p>这里以<a href="https://github.com/protocolbuffers/protobuf/releases/download/v3.12.3/protobuf-all-3.12.3.zip" target="_blank" rel="noopener">protobuf-all-3.12.3.zip</a>版本为例。</p>
<h1 id="生成工程"><a href="#生成工程" class="headerlink" title="生成工程"></a>生成工程</h1><p>下载解压后，打开CMake，<code>source code</code>项填入protobuf的cmake目录，build the binaries项为成生的工程目录，这个自己填写一个就可以了。最后点Configure生成<br><img src="//gitee.com/guoke3915/zw/raw/master/p/3be563cd/19826068-e81033044677199d.png" alt></p>
<p>生成页面选择vs的版本<br><img src="//gitee.com/guoke3915/zw/raw/master/p/3be563cd/19826068-c5b566defc40ec7d.png" alt></p>
<p>生成文件如果报错，将<code>protobuf_BUILD_TESTS</code>勾选去掉，这里没有安装gtest<br><img src="//gitee.com/guoke3915/zw/raw/master/p/3be563cd/19826068-25797ceea5daa68b.png" alt></p>
<p>Configure完成后点Generate生成vs工程<br><img src="//gitee.com/guoke3915/zw/raw/master/p/3be563cd/19826068-7fdc8f60e4f1fc7f.png" alt></p>
<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>进入我们配置的out目录中，会看到一个<code>ptotobuf.sln</code>文件<br><img src="//gitee.com/guoke3915/zw/raw/master/p/3be563cd/19826068-043290e033b57972.png" alt></p>
<p>用vs打开，编译模式选择<code>Release</code>，右键<code>protoc</code>项目，生成就可以了。<br><img src="//gitee.com/guoke3915/zw/raw/master/p/3be563cd/19826068-02cf6acf06325377.png" alt></p>
<p>最后在<code>protoc</code>输出目录中，就可以找到我们需要的protoc.exe了<br><img src="//gitee.com/guoke3915/zw/raw/master/p/3be563cd/19826068-7771192db19d9da5.png" alt></p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>从源码可以看出支持的语言<br><img src="//gitee.com/guoke3915/zw/raw/master/p/3be563cd/19826068-1e33ed92a9ae78ff.png" alt></p>
<pre><code class="line-numbers language-bash"># C++
protoc.exe --proto_path=./proto --cpp_opt=./cpp ./proto/text.proto

# Java
protoc.exe --proto_path=./proto --java_out=./java ./proto/text.proto

# Python
protoc.exe --proto_path=./proto --python_out=./py ./proto/text.proto

# PHP
protoc.exe --proto_path=./proto --python_out=./php ./proto/text.proto

# Ruby
protoc.exe --proto_path=./proto --ruby_out=./ruby ./proto/text.proto

# C#
protoc.exe --proto_path=./proto --csharp_out=./cs ./proto/text.proto

# Objective C
protoc.exe --proto_path=./proto --objc_out=./objc ./proto/text.proto

# JavaScript 
protoc.exe --proto_path=./proto --js_out=./js ./proto/text.proto</code></pre>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang：Delve版本太低无法Debug</title>
    <url>/p/b85c6738.html</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>今天把Go从1.12版本升到了1.14，然后发现在Goland进行Debug时就报错了。</p>
<pre><code class="line-numbers language-txt">Version of Delve is too old for this version of Go (maximum supported version 1.12, suppress this error with --check-go-version=false)</code></pre>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/b85c6738/19826068-360fe5d4481a5caa.png" alt></p>
<h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><p>Goland 版本为 2019.2.1</p>
<pre><code class="line-numbers language-bash">go env
set GOARCH=amd64
set GOCACHE=C:\Users\Administrator\AppData\Local\go-build
set GOENV=C:\Users\Administrator\AppData\Roaming\go\env
set GOEXE=.exe
set GOHOSTARCH=amd64
set GOHOSTOS=windows
set GOOS=windows
set GOPATH=F:\Go
set GOPROXY=https://mirrors.aliyun.com/goproxy/
set GOROOT=C:\Go
set GOSUMDB=sum.golang.org
set GOTOOLDIR=C:\Go\pkg\tool\windows_amd64
set GCCGO=gccgo
set AR=ar
set CC=gcc
set CXX=g++
set CGO_ENABLED=1
set CGO_CFLAGS=-g -O2
set CGO_CXXFLAGS=-g -O2
set CGO_FFLAGS=-g -O2
set CGO_LDFLAGS=-g -O2
set PKG_CONFIG=pkg-config
set GOGCCFLAGS=-m64 -mthreads -fmessage-length=0 -fdebug-prefix-map=C:\Users\Administrator\AppData\Local\Temp\go-build054006970=/tmp/go-build -gno-record-gcc-switches</code></pre>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>这是因为本地delve组件版本过低导致的，2019.2.1版本的Goland默认支持go 1.13</p>
<p>查看<code>F:\Go (GOPATH目录)</code>目录下存在<code>github.com/go-delve/delve/cmd/dlv</code>，而且bin目录下也存在<code>dlv.exe</code>文件，用命令行执行 <code>dlv.exe version</code>得到的版本是1.2.1</p>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><h2 id="1-更新dlv"><a href="#1-更新dlv" class="headerlink" title="1. 更新dlv"></a>1. 更新dlv</h2><p>因为本地已经存在，所以，需要用到<code>-u</code>参数，强制更新包以及依赖</p>
<pre><code class="line-numbers language-bash">go get -u github.com/go-delve/delve/cmd/dlv</code></pre>
<p>注：如果get失败，可以直接去github用git下载<a href="https://github.com/go-delve/delve/cmd/dlv" target="_blank" rel="noopener">github.com/go-delve/delve/cmd/dlv</a>。<br>然后命令行进入到下载好的目录，直接<code>go build</code>编译dlv，将编译好的dlv.exe复制到<code>F:/Go/bin/</code>目录下</p>
<h2 id="2-设置Goland"><a href="#2-设置Goland" class="headerlink" title="2. 设置Goland"></a>2. 设置Goland</h2><p>打开 <code>Hele-&gt;Edit Customer Properties</code>,若提示文件不存在，点击创建。然后在新加一行 <code>dlv.path=F:/Go/bin/dlv.exe</code> 重启就可以了<br><img src="//gitee.com/guoke3915/zw/raw/master/p/b85c6738/19826068-292be90d36349577.png" alt></p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx Too many open files</title>
    <url>/p/ca55ae36.html</url>
    <content><![CDATA[<p>在使用Nginx做转发时遇到了连接不上的情况，查看error日志发现一堆的<code>Too many open files</code>报错</p>
<pre><code class="line-numbers language-txt">2020/06/10 12:47:49 [crit] 21453#21453: *77340 open() &quot;/usr/share/nginx/html/50x.html&quot; failed (24: Too many open files), client: 58.244.114.249, server: _, request: &quot;POST /rest/user/version/ HTTP/1.1&quot;, upstream: &quot;http://localhost:6088/rest/version/&quot;, host: &quot;xxx.cn&quot;</code></pre>
<h2 id="一、文件的限制"><a href="#一、文件的限制" class="headerlink" title="一、文件的限制"></a>一、文件的限制</h2><p>首先想到的是linux中的文件限制，因为nginx配置中用的是<code>user nginx</code>，所以需要切换到<code>nginx</code>账号下查看限制</p>
<h3 id="1-切换账号"><a href="#1-切换账号" class="headerlink" title="1. 切换账号"></a>1. 切换账号</h3><pre><code class="line-numbers language-bash">su - nginx</code></pre>
<p>如果出现<code>This account is currently not available</code>错误，是nginx账号不允许登录，使用<code>usermod -s /bin/bash nginx</code>设置一下就行了，详见<a href="/p/3a7c0670.html">This account is currently not available</a></p>
<h3 id="2-查看文件限制"><a href="#2-查看文件限制" class="headerlink" title="2. 查看文件限制"></a>2. 查看文件限制</h3><pre><code class="line-numbers language-bash">ulimit -Hn   # 硬
ulimit -Sn    # 软</code></pre>
<p>结果发现ulimit值都是65535，感觉问题不在这。<br>如果ulimit值不够大时，可以用修改<code>/etc/security/limits.conf</code>配置文件，修改或添加</p>
<pre><code class="line-numbers language-conf"># 配置nginx用户文件限制
nginx soft nofile 65535
nginx hard nofile 65535

# 配置所有用户文件限制
* soft nofile 65535
* hard nofile 65535</code></pre>
<p>这里需要重启nginx才会生效</p>
<h2 id="二、Nginx配置限制"><a href="#二、Nginx配置限制" class="headerlink" title="二、Nginx配置限制"></a>二、Nginx配置限制</h2><p>排除了系统的文件限制，可能就是Nginx自身配置导致的了。</p>
<pre><code class="line-numbers language-conf"># vim /etc/nginx/nginx.conf  这里为nginx配置文件

worker_rlimit_nofile 65535;       //添加  

events {  
    worker_connections 20480;   //修改  
}  </code></pre>
<p>重启nginx或reload重新加载配置就可以了。</p>
<p>参与文章：<a href="https://www.cyberciti.biz/faq/linux-unix-nginx-too-many-open-files/" target="_blank" rel="noopener">https://www.cyberciti.biz/faq/linux-unix-nginx-too-many-open-files/</a></p>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>This account is currently not available</title>
    <url>/p/3a7c0670.html</url>
    <content><![CDATA[<p>在linux中使用su切换到nginx账号的时候出现了<code>This account is currently not available</code>的错误提示。</p>
<p>使用<code>grep nginx /etc/passwd</code>查看用户权限</p>
<pre><code class="line-numbers language-bash">$ grep nginx /etc/passwd
nginx:x:997:995:nginx user:/var/cache/nginx:/sbin/nologin</code></pre>
<p>这里可以看出，nginx是<code>/sbin/nologin</code>禁止登录的。只要修改这个模式就可以了</p>
<pre><code class="line-numbers language-bash">$ usermod -s /bin/bash nginx

# 再次查看状态
$ grep nginx /etc/passwd
nginx:x:997:995:nginx user:/var/cache/nginx:/bin/bash</code></pre>
<p>然后就可以用<code>su - nginx</code>切换了</p>
<p>恢复的话改为<code>/sbin/nologin</code>即可</p>
<pre><code class="line-numbers language-bash">$ usermod -s /sbin/nologin nginx</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7 中安装semanage来设置selinux</title>
    <url>/p/cb8e2633.html</url>
    <content><![CDATA[<p>semanage可以查看和配置selinux，但是，semanage在CentOS上是默认不安装的</p>
<p>直接使用<code>yum install -y  semanage</code>来安装</p>
<pre><code class="line-numbers language-bash">$ yum install semanage
Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
No package semanage available.
Error: Nothing to do</code></pre>
<p>如果出现<code>No package semanage available.</code>说明源中没有这个包，可以用<code>yum provides semanage</code>安装</p>
<pre><code class="line-numbers language-bash">$ yum provides semanage
Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
base/7/x86_64/filelists_db                                                                                                                                                                                  | 7.1 MB  00:00:00     
docker-ce-stable/x86_64/filelists_db                                                                                                                                                                        |  20 kB  00:00:00     
epel/x86_64/filelists_db                                                                                                                                                                                    |  12 MB  00:00:00     
extras/7/x86_64/filelists_db                                                                                                                                                                                | 205 kB  00:00:00     
packages-microsoft-com-prod/filelists_db                                                                                                                                                                    | 3.1 MB  00:00:00     
updates/7/x86_64/filelists_db                                                                                                                                                                               | 1.3 MB  00:00:00     
policycoreutils-python-2.5-34.el7.x86_64 : SELinux policy core python utilities
Repo        : base
Matched from:
Filename    : /usr/sbin/semanage
</code></pre>
<p>如果还不能使用semanage，刚再输入</p>
<pre><code class="line-numbers language-bash">yum -y install policycoreutils-python.x86_64</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS firewall防火墙配置</title>
    <url>/p/9e67033a.html</url>
    <content><![CDATA[<p>CentOS7之后默认使用了firewall防火墙。</p>
<h2 id="一、基本操作"><a href="#一、基本操作" class="headerlink" title="一、基本操作"></a>一、基本操作</h2><pre><code class="line-numbers language-bash"># 查看是否开启
firewall-cmd --state

# 启动
systemctl start firewalld

# 停止
systemctl stop firewalld

# 重启
systemctl restart firewalld.service

# 开机启动
systemctl enable firewalld.service

# 开机禁用
systemctl disable firewalld

# 重新加载防火墙配置
firewall-cmd --reload

# 查看所有状态
firewall-cmd --list-all

# 查看public区域所有打开的端口
firewall-cmd --zone=public --list-ports</code></pre>
<h2 id="二、开放、禁用端口"><a href="#二、开放、禁用端口" class="headerlink" title="二、开放、禁用端口"></a>二、开放、禁用端口</h2><h3 id="1-开放端口"><a href="#1-开放端口" class="headerlink" title="1. 开放端口"></a>1. 开放端口</h3><pre><code class="line-numbers language-bash">firewall-cmd --zone=public --add-port=80/tcp --permanent</code></pre>
<p>80-端口号<br>tcp-协议<br>–permanent -使设置永久生效，不加的话机器重启之后失效</p>
<h3 id="2-禁用端口"><a href="#2-禁用端口" class="headerlink" title="2. 禁用端口"></a>2. 禁用端口</h3><p>防火墙相当于白名单，从列表里删除就可以禁用对应的端口了</p>
<pre><code class="line-numbers language-bash">firewall-cmd --zone=public --remove-port=80/tcp --permanent</code></pre>
<h3 id="3-批量开放或限制端口"><a href="#3-批量开放或限制端口" class="headerlink" title="3. 批量开放或限制端口"></a>3. 批量开放或限制端口</h3><pre><code class="line-numbers language-bash">firewall-cmd --zone=public --add-port=6000-7000/tcp --permanent
firewall-cmd --zone=public --remove-port=6000-7000/tcp --permanent</code></pre>
<h2 id="三、开放或限制IP"><a href="#三、开放或限制IP" class="headerlink" title="三、开放或限制IP"></a>三、开放或限制IP</h2><p>可以针对IP操作，可以指定某ip访问某端口，也能禁用某ip访问某端口。</p>
<h3 id="1-端口针对某ip开放"><a href="#1-端口针对某ip开放" class="headerlink" title="1. 端口针对某ip开放"></a>1. 端口针对某ip开放</h3><pre><code class="line-numbers language-bash">firewall-cmd --permanent --add-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.0.55&quot; port protocol=&quot;tcp&quot; port=&quot;80&quot; accept&quot;</code></pre>
<h3 id="2-限制ip访问端口"><a href="#2-限制ip访问端口" class="headerlink" title="2. 限制ip访问端口"></a>2. 限制ip访问端口</h3><pre><code class="line-numbers language-bash">firewall-cmd --permanent --add-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.0.55&quot; port protocol=&quot;tcp&quot; port=&quot;80&quot; reject&quot;</code></pre>
<h3 id="3-开放或限制IP地址段"><a href="#3-开放或限制IP地址段" class="headerlink" title="3. 开放或限制IP地址段"></a>3. 开放或限制IP地址段</h3><p>这里用子网掩码的表格来表示。如：192.168.0.0~192.168.0.255 用 192.168.0.0/24表示</p>
<pre><code class="line-numbers language-bash"># 允许访问
firewall-cmd --permanent --add-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.0.0/24&quot; port protocol=&quot;tcp&quot; port=&quot;80&quot; accept&quot;

# 限制访问
firewall-cmd --permanent --add-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.0.0/24&quot; port protocol=&quot;tcp&quot; port=&quot;80&quot; reject&quot;</code></pre>
<h2 id="四、配置文件"><a href="#四、配置文件" class="headerlink" title="四、配置文件"></a>四、配置文件</h2><p>firewalld防火墙配置是<code>/etc/firewalld/zones/public.xml</code>，我们也可以通过修改配置文件来设置防火墙</p>
<pre><code class="line-numbers language-bash">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;zone&gt;
  &lt;short&gt;Public&lt;/short&gt;
  &lt;description&gt;For use in public areas. You do not trust the other computers on networks to not harm your computer. Only selected incoming connections are accepted.&lt;/description&gt;
  &lt;service name=&quot;ssh&quot;/&gt;
  &lt;service name=&quot;dhcpv6-client&quot;/&gt;
  &lt;port protocol=&quot;tcp&quot; port=&quot;8080&quot;/&gt;
  &lt;rule family=&quot;ipv4&quot;&gt;
    &lt;source address=&quot;192.168.0.55&quot;/&gt;
    &lt;port protocol=&quot;tcp&quot; port=&quot;80&quot;/&gt;
    &lt;accept/&gt;
  &lt;/rule&gt;
  &lt;rule family=&quot;ipv4&quot;&gt;
    &lt;source address=&quot;192.168.0.0/24&quot;/&gt;
    &lt;port protocol=&quot;tcp&quot; port=&quot;21&quot;/&gt;
    &lt;reject/&gt;
  &lt;/rule&gt;
&lt;/zone&gt;</code></pre>
<h2 id="五、设置区域"><a href="#五、设置区域" class="headerlink" title="五、设置区域"></a>五、设置区域</h2><h3 id="1-常用的区域名称及策略规则"><a href="#1-常用的区域名称及策略规则" class="headerlink" title="1. 常用的区域名称及策略规则"></a>1. 常用的区域名称及策略规则</h3><table>
<thead>
<tr>
<th>区域（noze）</th>
<th>默认策略规则</th>
</tr>
</thead>
<tbody><tr>
<td>trusted</td>
<td>允许所有的数据包进出</td>
</tr>
<tr>
<td>home</td>
<td>拒绝进入的流量，除非与出去的流量相关；而如果流量与ssh、mdns、ipp-client、amba-client与dhcpv6-client服务相关，则允许进入</td>
</tr>
<tr>
<td>Internal</td>
<td>等同于home区域</td>
</tr>
<tr>
<td>work</td>
<td>拒绝进入的流量，除非与出去的流量相关；而如果流量与ssh、ipp-client与dhcpv6-client服务相关，则允许进入</td>
</tr>
<tr>
<td>public</td>
<td>拒绝进入的流量，除非与出去的流量相关；而如果流量与ssh、dhcpv6-client服务相关，则允许进入</td>
</tr>
<tr>
<td>external</td>
<td>拒绝进入的流量，除非与出去的流量相关；而如果流量与ssh服务相关，则允许进入</td>
</tr>
<tr>
<td>dmz</td>
<td>拒绝进入的流量，除非与出去的流量相关；而如果流量与ssh服务相关，则允许进入</td>
</tr>
<tr>
<td>block</td>
<td>拒绝进入的流量，除非与出去的流量相关</td>
</tr>
<tr>
<td>drop</td>
<td>拒绝进入的流量，除非与出去的流量相关</td>
</tr>
</tbody></table>
<h3 id="2-查看网卡及所在区域"><a href="#2-查看网卡及所在区域" class="headerlink" title="2. 查看网卡及所在区域"></a>2. 查看网卡及所在区域</h3><pre><code class="line-numbers language-bash">$ firewall-cmd --list-all
public (active)
  target: default
  icmp-block-inversion: no
  interfaces: eno1
  sources: 
  services: ssh dhcpv6-client
  ports: 
  protocols: 
  masquerade: no
  forward-ports: 
  source-ports: 
  icmp-blocks: </code></pre>
<p>target：目标<br>icmp-block-inversion：ICMP协议类型黑白名单开关（yes/no）<br>interfaces：关联的网卡接口<br>sources：来源，可以是IP地址，也可以是mac地址<br>services：允许的服务<br>ports：允许的目标端口，即本地开放的端口<br>protocols：允许通过的协议<br>masquerade：是否允许伪装（yes/no），可改写来源IP地址及mac地址<br>forward-ports：允许转发的端口<br>source-ports：允许的来源端口<br>icmp-blocks：可添加ICMP类型，当icmp-block-inversion为no时，这些ICMP类型被拒绝；当icmp-block-inversion为yes时，这些ICMP类型被允许。<br>rich rules：富规则，即更细致、更详细的防火墙规则策略，它的优先级在所有的防火墙策略中也是最高的。</p>
<p>可以看到当前激活(active)区域是public，区域下关联的网卡有<code>eno1</code></p>
<h3 id="3-设置区域相关操作"><a href="#3-设置区域相关操作" class="headerlink" title="3. 设置区域相关操作"></a>3. 设置区域相关操作</h3><pre><code class="line-numbers language-bash"># 查看默认当前使用的区域
firewall-cmd --get-default-zone

#查看系统默认活动区域名称、来源地址和关联的网卡
firewall-cmd --get-active-zones

#查看所有可用区域
firewall-cmd --get-zones

#查看指定网卡所在的区域
firewall-cmd --get-zone-of-interface=eno1

# 设置默认区域
firewall-cmd --set-default-zone=public

# 设置区域关联网卡
firewall-cmd --permanent --zone=drop --change-interface=eno1

# 区域中添加关联网卡
firewall-cmd --zone=drop -add-interface=eno1

# 区域中移除关联网卡
firewall-cmd --zone=drop -remove-interface=eno1</code></pre>
<h2 id="六、注意注意！！"><a href="#六、注意注意！！" class="headerlink" title="六、注意注意！！"></a>六、注意注意！！</h2><ol>
<li><p>修改之后记得使用<code>firewall-cmd --reload</code>重新加载配置使之生效。</p>
</li>
<li><p>如果你是用ssh连接上去修改的防火墙，如果之前防火墙未启用，你在启用之前先查看一下配置文件，是否有<code>&lt;service name=&quot;ssh&quot;/&gt;</code>或开放了ssh对应的22端口。否则，当你启动防火墙之后，你将无法再用ssh连接服务器了。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>win查看远程登录信息</title>
    <url>/p/583848dd.html</url>
    <content><![CDATA[<p>在Windows中当我们使用远程桌面登录时会留下登录日志，里面会记录登录者的ip等一些信息</p>
<h2 id="查询远程登录信息"><a href="#查询远程登录信息" class="headerlink" title="查询远程登录信息"></a>查询远程登录信息</h2><ol>
<li>按<code>Win+R</code>打开运行窗口，在里面输入<code>eventvwr.msc</code>回车，打开事件查看器</li>
<li>在事件查看器左侧选择<code>Windows 日志</code> -&gt; <code>安全</code></li>
<li>在右侧选择<code>筛选当前日志</code></li>
<li>在<code>事件ID</code>栏输入<code>4648</code>并确定<br><img src="//gitee.com/guoke3915/zw/raw/master/p/583848dd/19826068-3f37a509dfd54019.png" alt></li>
<li>在中间窗口查看对应时间的<code>审核成功</code>的详细信息，里面就会有登录ip等信息了<br><img src="//gitee.com/guoke3915/zw/raw/master/p/583848dd/19826068-8daa9f00b87100a5.png" alt></li>
</ol>
<h2 id="常用的日志ID"><a href="#常用的日志ID" class="headerlink" title="常用的日志ID"></a>常用的日志ID</h2><h3 id="审计目录服务访问"><a href="#审计目录服务访问" class="headerlink" title="审计目录服务访问"></a>审计目录服务访问</h3><p>　　4934 - Active Directory 对象的属性被复制<br>　　4935 -复制失败开始<br>　　4936 -复制失败结束<br>　　5136 -目录服务对象已修改<br>　　5137 -目录服务对象已创建<br>　　5138 -目录服务对象已删除<br>　　5139 -目录服务对象已经移动<br>　　5141 -目录服务对象已删除<br>　　4932 -命名上下文的AD的副本同步已经开始<br>　　4933 -命名上下文的AD的副本同步已经结束</p>
<h3 id="审计登录事件"><a href="#审计登录事件" class="headerlink" title="审计登录事件"></a>审计登录事件</h3><p>　　4634 - 帐户被注销<br>　　4647 - 用户发起注销<br>　　4624 - 帐户已成功登录<br>　　4625 - 帐户登录失败<br>　　4648 - 试图使用明确的凭证登录<br>　　4675 - SID被过滤<br>　　4649 - 发现重放攻击<br>　　4778 -会话被重新连接到Window Station<br>　　4779 -会话断开连接到Window Station<br>　　4800 – 工作站被锁定<br>　　4801 - 工作站被解锁<br>　　4802 - 屏幕保护程序启用<br>　　4803 -屏幕保护程序被禁用<br>　　5378 所要求的凭证代表是政策所不允许的<br>　　5632 要求对无线网络进行验证<br>　　5633 要求对有线网络进行验证</p>
<h3 id="审计对象访问"><a href="#审计对象访问" class="headerlink" title="审计对象访问"></a>审计对象访问</h3><p>　　5140 - 网络共享对象被访问<br>　　4664 - 试图创建一个硬链接<br>　　4985 - 交易状态已经改变<br>　　5051 - 文件已被虚拟化<br>　　5031 - Windows防火墙服务阻止一个应用程序接收网络中的入站连接<br>　　4698 -计划任务已创建<br>　　4699 -计划任务已删除<br>　　4700 -计划任务已启用<br>　　4701 -计划任务已停用<br>　　4702 -计划任务已更新<br>　　4657 -注册表值被修改<br>　　5039 -注册表项被虚拟化<br>　　4660 -对象已删除<br>　　4663 -试图访问一个对象</p>
<h3 id="审计政策变化"><a href="#审计政策变化" class="headerlink" title="审计政策变化"></a>审计政策变化</h3><p>　　4715 - 对象上的审计政策(SACL)已经更改<br>　　4719 - 系统审计政策已经更改<br>　　4902 - Per-user审核政策表已经创建<br>　　4906 - CrashOnAuditFail值已经变化<br>　　4907 - 对象的审计设置已经更改<br>　　4706 - 创建到域的新信任<br>　　4707 - 到域的信任已经删除<br>　　4713 - Kerberos政策已更改<br>　　4716 - 信任域信息已经修改<br>　　4717 - 系统安全访问授予帐户<br>　　4718 - 系统安全访问从帐户移除<br>　　4864 - 名字空间碰撞被删除<br>　　4865 - 信任森林信息条目已添加<br>　　4866 - 信任森林信息条目已删除<br>　　4867 - 信任森林信息条目已取消<br>　　4704 - 用户权限已分配<br>　　4705 - 用户权限已移除<br>　　4714 - 加密数据复原政策已取消<br>　　4944 - 当开启Windows Firewall时下列政策启用<br>　　4945 - 当开启Windows Firewall时列入一个规则<br>　　4946 - 对Windows防火墙例外列表进行了修改，添加规则<br>　　4947 - 对Windows防火墙例外列表进行了修改，规则已修改<br>　　4948 - 对Windows防火墙例外列表进行了修改，规则已删除<br>　　4949 - Windows防火墙设置已恢复到默认值<br>　　4950 - Windows防火墙设置已更改<br>　　4951 - 因为主要版本号码不被Windows防火墙承认，规则已被忽视<br>　　4952 - 因为主要版本号码不被Windows防火墙承认，部分规则已被忽视，将执行规则的其余部分<br>　　4953 - 因为Windows防火墙不能解析规则，规则被忽略<br>　　4954 - Windows防火墙组政策设置已经更改，将使用新设置<br>　　4956 - Windows防火墙已经更改主动资料<br>　　4957 - Windows防火墙不适用于以下规则<br>　　4958 - 因为该规则涉及的条目没有被配置，Windows防火墙将不适用以下规则：<br>　　6144 - 组策略对象中的安全政策已经成功运用<br>　　6145 - 当处理组策略对象中的安全政策时发生一个或者多个错误<br>　　4670 - 对象的权限已更改</p>
<h3 id="审计特权使用"><a href="#审计特权使用" class="headerlink" title="审计特权使用"></a>审计特权使用</h3><p>　　4672 - 给新登录分配特权<br>　　4673 - 要求特权服务<br>　　4674 - 试图对特权对象尝试操作</p>
<h3 id="审计系统事件"><a href="#审计系统事件" class="headerlink" title="审计系统事件"></a>审计系统事件</h3><p>　　5024 - Windows防火墙服务已成功启动<br>　　5025 - Windows防火墙服务已经被停止<br>　　5027 - Windows防火墙服务无法从本地存储检索安全政策，该服务将继续执行目前的政策<br>　　5028 - Windows防火墙服务无法解析的新的安全政策，这项服务将继续执行目前的政策<br>　　5029 - Windows防火墙服务无法初始化的驱动程序，这项服务将继续执行目前的政策<br>　　5030 - Windows防火墙服务无法启动<br>　　5032 - Windows防火墙无法通知用户它阻止了接收入站连接的应用程序<br>　　5033 - Windows防火墙驱动程序已成功启动<br>　　5034 - Windows防火墙驱动程序已经停止<br>　　5035 - Windows防火墙驱动程序未能启动<br>　　5037 - Windows防火墙驱动程序检测到关键运行错误，终止。<br>　　4608 -Windows正在启动<br>　　4609 - Windows正在关机<br>　　4616 - 系统时间被改变<br>　　4621 - 管理员从CrashOnAuditFail回收系统，非管理员的用户现在可以登录，有些审计活动可能没有被记录<br>　　4697 - 系统中安装服务器<br>　　4618 - 监测安全事件样式已经发生</p>
<h2 id="日志清理"><a href="#日志清理" class="headerlink" title="日志清理"></a>日志清理</h2><h3 id="手动清理"><a href="#手动清理" class="headerlink" title="手动清理"></a>手动清理</h3><p>直接在右侧选择<code>清除日志</code>就可以了<br><img src="//gitee.com/guoke3915/zw/raw/master/p/583848dd/19826068-0c1a77808fd08619.png" alt></p>
<h3 id="自动清理"><a href="#自动清理" class="headerlink" title="自动清理"></a>自动清理</h3><p>为了防止日志过大，这里可以设定日志文件超过多少时会自动清理<br>在右侧选择<code>属性</code>，在弹窗中，可以设置日志文件的大小<br><img src="//gitee.com/guoke3915/zw/raw/master/p/583848dd/19826068-2b5f343ff0e1a332.png" alt></p>
<p>参与文章：<a href="https://blog.csdn.net/C_chuxin/article/details/84974207" target="_blank" rel="noopener">https://blog.csdn.net/C_chuxin/article/details/84974207</a></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx: [emerg] bind() to 0.0.0.0:xxxx failed (13: Permission denied)</title>
    <url>/p/546ba9a6.html</url>
    <content><![CDATA[<p>在CentOS7环境中安装了nginx后，启动的时候报错<code>nginx: [emerg] bind() to 0.0.0.0:6080 failed (13: Permission denied)</code>。从字面意思上来说，这是权限不足。但出现这种错误可能有多种原因导致的。</p>
<h2 id="1-端口小于1024时"><a href="#1-端口小于1024时" class="headerlink" title="1. 端口小于1024时"></a>1. 端口小于1024时</h2><p>当端口小于1024时，且运行的账号不是<code>root</code>就会报这个错误。<br>解决办法是修改nginx的配置文件，以<code>user root;</code>启动</p>
<h2 id="2-端口大于1024时"><a href="#2-端口大于1024时" class="headerlink" title="2. 端口大于1024时"></a>2. 端口大于1024时</h2><p>检查一下<code>selinux</code>是否开启了。如果开启了关闭<code>selinux</code>试试</p>
<pre><code class="line-numbers language-bash">setenforce 0</code></pre>
<p>如果关了<code>selinux</code>能正常说明端口可能与<code>selinux</code>的端口冲突了或<code>http_port_t</code>中没有开放对应的端口</p>
<pre><code class="line-numbers language-bash">[root@ptr ~]# semanage port -l | grep 6080
geneve_port_t                  tcp      6080</code></pre>
<p>发现6080是<code>geneve_port_t</code> 的端口，要么修改自己的端口，要么修改<code>geneve_port_t</code> 的端口，然后再把6080添加到<code>http_port_t</code>。附senamage 端口操作命令</p>
<pre><code class="line-numbers language-bash">senamage 端口 删除 类型 [] 协议 TCP/UDP 端口
semanage port -d -t geneve_port_t  -p tcp 6081

senamage 端口 增加 类型 [] 协议 TCP/UDP 端口
semanage port -a -t http_port_t -p tcp 6080

senamage 端口 修改 类型 [] 协议 TCP/UDP 端口
semanage port -m -t geneve_port_t  -p tcp 6081</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>yum-config-manager:command not found</title>
    <url>/p/2908add4.html</url>
    <content><![CDATA[<p>在新装的CentOS 7 中，安装Docker时设置yum源的时候报错了<code>yum-config-manager:command not found</code><br>这个是因为系统默认没有安装这个命令，这个命令在<code>yum-utils</code>包里，可以通过命令<code>yum -y install yum-utils</code>安装就可以了。</p>
<pre><code class="line-numbers language-bash">yum -y install yum-utils</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux中Cache内存占用过高清理</title>
    <url>/p/9bdd6de0.html</url>
    <content><![CDATA[<p>在Linux中每次用free查看的时候，发现free的空间都只有500M左右。同样的环境32G只剩下这点，64G的也只剩下这么一点。后来发现都被Cache占用了，因为服务器上运行了Kafka环境，每周的日志文件都有一二百G的，估计就是他占用了page cache吧。</p>
<p>Free中的buffer和cache：（它们都是占用内存）：<br>　　buffer : 作为buffer cache的内存，是块设备的读写缓冲区<br>　　cache: 作为page cache的内存, 文件系统的cache<br>　　如果 cache 的值很大，说明cache住的文件数很多。如果频繁访问到的文件都能被cache住，那么磁盘的读IO bi会非常小。</p>
<p>Linux内核会在内存将要耗尽的时候，触发内存回收的工作，以便释放出内存给急需内存的进程使用。也可以用动释放，释放的时候需要对cache中的数据跟对应文件中的数据一致。</p>
<p>释放的方式有下以几种</p>
<pre><code class="line-numbers language-bash">echo 1 &gt; /proc/sys/vm/drop_caches  # 表示清除pagecache
echo 2 &gt; /proc/sys/vm/drop_caches # 表示清除回收slab分配器中的对象（包括目录项缓存和inode缓存）。slab分配器是内核中管理内存的一种机制，其中很多缓存数据实现都是用的pagecache。
echo 3 &gt; /proc/sys/vm/drop_caches  # 表示清除pagecache和slab分配器中的缓存对象。</code></pre>
<p>一般情况下释放pagecache就可以了。这样可以写一个sh脚本来在服务器空闲的时候定时执行</p>
<pre><code class="line-numbers language-bash">#!/bin/bash
echo  &quot;Clean Begin...&quot;

#写入硬盘，防止数据丢失
sync;sync;sync

#延迟10秒,等待磁盘写入
sleep 10

# 开始清理
echo 1 &gt; /proc/sys/vm/drop_caches

echo &quot;Clean Finish !&quot;</code></pre>
<p>使用crontab来设置定时任务，如每天4点开始清理</p>
<pre><code class="line-numbers language-bash">crontab -e

0 0 4 * * ? /root/cleanbuff.sh</code></pre>
<p>本文参考：<a href="https://www.jianshu.com/p/9b9f4917fb2e" target="_blank" rel="noopener">https://www.jianshu.com/p/9b9f4917fb2e</a></p>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>让iOS App通过iTunes共享文件</title>
    <url>/p/5688691.html</url>
    <content><![CDATA[<p>有一些App需要通过使用iTunes让用户上传和下载文档。要让iOS程序支持iTunes文件交换其实很简单，只需要在程序的Info.plist里增加一个键。</p>
<h2 id="一、直接用xcode打开Info-plist文件"><a href="#一、直接用xcode打开Info-plist文件" class="headerlink" title="一、直接用xcode打开Info.plist文件"></a>一、直接用xcode打开Info.plist文件</h2><p>添加<code>Application supports iTunes file sharing</code>键值，并设置为<code>Yes</code><br><img src="//gitee.com/guoke3915/zw/raw/master/p/5688691/19826068-e651876dfbd86fc1.png" alt="image.png"></p>
<h2 id="二、用文本编辑器打开Info-plist文件"><a href="#二、用文本编辑器打开Info-plist文件" class="headerlink" title="二、用文本编辑器打开Info.plist文件"></a>二、用文本编辑器打开Info.plist文件</h2><p>添加<code>UIFileSharingEnabled</code>键值并设定为<code>true</code><br><img src="//gitee.com/guoke3915/zw/raw/master/p/5688691/19826068-b811699eab6acc28.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac下安装Go</title>
    <url>/p/62364687.html</url>
    <content><![CDATA[<h2 id="一、下载"><a href="#一、下载" class="headerlink" title="一、下载"></a>一、下载</h2><p>去<a href="https://golang.org/dl/" target="_blank" rel="noopener">Golang官网</a><br>)下载需要的版本，这里直接下载苹果版的pkg<br><img src="//gitee.com/guoke3915/zw/raw/master/p/62364687/19826068-7ba0e4bf4c0228ff.png" alt></p>
<h2 id="二、-安装"><a href="#二、-安装" class="headerlink" title="二、 安装"></a>二、 安装</h2><p>直接双击运行pkg，在弹出的安装页面直接安装就行了。</p>
<h2 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h2><p>输入<code>go version</code>测试go版本。用<code>go env</code>可以查看go环境的变量<br>默认安装的<br>GOROOT=”/usr/local/go”<br>GOPATH=”/Users/admin/go”</p>
<pre><code class="line-numbers language-shell">&gt; go version
go version go1.14.3 darwin/amd64

&gt;go env
GO111MODULE=&quot;&quot;
GOARCH=&quot;amd64&quot;
GOBIN=&quot;&quot;
GOCACHE=&quot;/Users/admin/Library/Caches/go-build&quot;
GOENV=&quot;/Users/admin/Library/Application Support/go/env&quot;
GOEXE=&quot;&quot;
GOFLAGS=&quot;&quot;
GOHOSTARCH=&quot;amd64&quot;
GOHOSTOS=&quot;darwin&quot;
GOINSECURE=&quot;&quot;
GONOPROXY=&quot;&quot;
GONOSUMDB=&quot;&quot;
GOOS=&quot;darwin&quot;
GOPATH=&quot;/Users/admin/go&quot;
GOPRIVATE=&quot;&quot;
GOPROXY=&quot;https://proxy.golang.org,direct&quot;
GOROOT=&quot;/usr/local/go&quot;
GOSUMDB=&quot;sum.golang.org&quot;
GOTMPDIR=&quot;&quot;
GOTOOLDIR=&quot;/usr/local/go/pkg/tool/darwin_amd64&quot;
GCCGO=&quot;gccgo&quot;
AR=&quot;ar&quot;
CC=&quot;clang&quot;
CXX=&quot;clang++&quot;
CGO_ENABLED=&quot;1&quot;
GOMOD=&quot;&quot;
CGO_CFLAGS=&quot;-g -O2&quot;
CGO_CPPFLAGS=&quot;&quot;
CGO_CXXFLAGS=&quot;-g -O2&quot;
CGO_FFLAGS=&quot;-g -O2&quot;
CGO_LDFLAGS=&quot;-g -O2&quot;
PKG_CONFIG=&quot;pkg-config&quot;
GOGCCFLAGS=&quot;-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/f0/hzbq_2x975d0fq612z4tgy8c0000gn/T/go-build027263215=/tmp/go-build -gno-record-gcc-switches -fno-common&quot;</code></pre>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac下安装Maven</title>
    <url>/p/3a3101a2.html</url>
    <content><![CDATA[<h2 id="一、-下载。"><a href="#一、-下载。" class="headerlink" title="一、 下载。"></a>一、 下载。</h2><p>先去<a href="(https://maven.apache.org/download.cgi">Maven官网</a><br>上下载需要的版本，Mac下<code>tar.gz</code>的包。这里下载的是<a href="https://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz</a><br>并解压到你喜欢的位置。这里解压到<code>/Users/admin/software/apache-maven-3.6.3</code></p>
<h2 id="二、-设置环境变量"><a href="#二、-设置环境变量" class="headerlink" title="二、 设置环境变量"></a>二、 设置环境变量</h2><p>MAC OS X环境配置的加载顺序</p>
<pre><code class="line-numbers language-bash"># 系统级别
/etc/profile
/etc/paths 

# 新系统版本使用了zsh
～/.zshrc

# 旧系统版本用户级别
~/.bash_profile 
~/.bash_login 
~/.profile 
~/.bashrc</code></pre>
<p>这里我们配置用户级别的<code>~/.bash_profile</code>就可以了</p>
<pre><code class="line-numbers language-bash">vi ~/.bash_profile</code></pre>
<p>添加</p>
<pre><code class="line-numbers language-ini">export MVN_HOME=/Users/admin/software/apache-maven-3.6.3
export PATH=$PATH:$MVN_HOME/bin</code></pre>
<p>重新加载配置</p>
<pre><code class="line-numbers language-bash">source ~/.bash_profile</code></pre>
<p>为了兼容新的zsh，需要在<code>~/.zshrc</code>中加一行配置，如果<code>~/.zshrc</code>文件不存在创建就好</p>
<pre><code class="line-numbers language-bash">vim ~/.zshrc

# 在.zshrc最后添加
source ~/.bash_profile </code></pre>
<h2 id="三、-测试"><a href="#三、-测试" class="headerlink" title="三、 测试"></a>三、 测试</h2><pre><code class="line-numbers language-bash">mvn -v</code></pre>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac中使用frp客户端</title>
    <url>/p/a02d24c0.html</url>
    <content><![CDATA[<p>前面写过在win下和linux下的<a href="/p/8426a0a1.html">frp内网穿透搭建远程桌面</a>。今天来讲一下在Mac上使用frp使用vnc和ssh吧，服务端的配置参考之前的吧。</p>
<h2 id="一、下载mac版frp客户端"><a href="#一、下载mac版frp客户端" class="headerlink" title="一、下载mac版frp客户端"></a>一、下载mac版frp客户端</h2><p>进入<a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener">https://github.com/fatedier/frp/releases</a>下载与服务器对应的版本，mac下用的是<code>darwin_amd64.tar.gz</code>的。这里服务器用的是v0.31.1，所以mac也直接下对应的版本就行<a href="https://github.com/fatedier/frp/releases/download/v0.31.1/frp_0.31.1_darwin_amd64.tar.gz" target="_blank" rel="noopener">https://github.com/fatedier/frp/releases/download/v0.31.1/frp_0.31.1_darwin_amd64.tar.gz</a></p>
<h2 id="二、配置frp客户端配置"><a href="#二、配置frp客户端配置" class="headerlink" title="二、配置frp客户端配置"></a>二、配置frp客户端配置</h2><p>解压压缩文件到你喜欢的目录。这里解压到<code>/Users/admin/software/frp_0.31.1_darwin_amd64</code>，并修改目录下的<code>frpc.ini</code>文件</p>
<pre><code class="line-numbers language-ini">[common]
server_addr=frp.zengwu.com.cn
server_port = 5000

[Mac VNC]
type = tcp
local_ip = 0.0.0.0
local_port = 5900
remote_port = 5900

[Mac SSH]
type = tcp
local_ip = 0.0.0.0
local_port = 22
remote_port = 5922</code></pre>
<p>这里的配置和win下的差不多，注意一下端口就行了，ssh是默认是22，vnc默认是5900，都是tcp协议。</p>
<h2 id="三、-配置开机启动"><a href="#三、-配置开机启动" class="headerlink" title="三、 配置开机启动"></a>三、 配置开机启动</h2><ol>
<li>新建<code>frpc.plist</code>文件</li>
</ol>
<pre><code class="line-numbers language-bash">sudo vim ~/Library/LaunchAgents/frpc.plist</code></pre>
<ol start="2">
<li>写入frpc.plist配置</li>
</ol>
<pre><code class="line-numbers language-plist">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE plist PUBLIC -//Apple Computer//DTD PLIST 1.0//EN
http://www.apple.com/DTDs/PropertyList-1.0.dtd &gt;
&lt;plist version=&quot;1.0&quot;&gt;
&lt;dict&gt;
    &lt;key&gt;Label&lt;/key&gt;
    &lt;string&gt;frpc&lt;/string&gt;
    &lt;key&gt;ProgramArguments&lt;/key&gt;
    &lt;array&gt;
         &lt;string&gt;/Users/admin/software/frp_0.31.1_darwin_amd64/frpc&lt;/string&gt;
         &lt;string&gt;-c&lt;/string&gt;
         &lt;string&gt;/Users/admin/software/frp_0.31.1_darwin_amd64/frpc.ini&lt;/string&gt;
    &lt;/array&gt;
    &lt;key&gt;KeepAlive&lt;/key&gt;
    &lt;true/&gt;
    &lt;key&gt;RunAtLoad&lt;/key&gt;
    &lt;true/&gt;
&lt;/dict&gt;
&lt;/plist&gt;</code></pre>
<p>注意修改一下frpc所在的目录和配置文件的地址。</p>
<ol start="3">
<li>加载配置</li>
</ol>
<pre><code class="line-numbers language-bash">sudo chown root ~/Library/LaunchAgents/frpc.plist
sudo launchctl load -w ~/Library/LaunchAgents/frpc.plist</code></pre>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Studio调试夜神模拟器</title>
    <url>/p/f2ceba3a.html</url>
    <content><![CDATA[<p>Android开发中，真机调试还是没有模拟上来的方便，当然，有些还是得需要真机测的。下面介绍一下用Android Studio调试夜神模拟器。</p>
<h2 id="一、运行模拟器"><a href="#一、运行模拟器" class="headerlink" title="一、运行模拟器"></a>一、运行模拟器</h2><h2 id="二、在文件资源管理器中进入夜神模拟器的安装目录（默认安装路径为-C-Program-Files-Nox-bin-）"><a href="#二、在文件资源管理器中进入夜神模拟器的安装目录（默认安装路径为-C-Program-Files-Nox-bin-）" class="headerlink" title="二、在文件资源管理器中进入夜神模拟器的安装目录（默认安装路径为: C:\Program Files\Nox\bin\）"></a>二、在文件资源管理器中进入夜神模拟器的安装目录（默认安装路径为: C:\Program Files\Nox\bin\）</h2><h2 id="三、在资源管理器的地址栏输入cmd并回车，打开命令行窗口。并自动进入到安装目录"><a href="#三、在资源管理器的地址栏输入cmd并回车，打开命令行窗口。并自动进入到安装目录" class="headerlink" title="三、在资源管理器的地址栏输入cmd并回车，打开命令行窗口。并自动进入到安装目录"></a>三、在资源管理器的地址栏输入cmd并回车，打开命令行窗口。并自动进入到安装目录</h2><p><img src="//gitee.com/guoke3915/zw/raw/master/p/f2ceba3a/19826068-8a7ff37f3be6646e.png" alt></p>
<h2 id="四、执行nox-adb的连接命令，连接模拟器"><a href="#四、执行nox-adb的连接命令，连接模拟器" class="headerlink" title="四、执行nox_adb的连接命令，连接模拟器"></a>四、执行nox_adb的连接命令，连接模拟器</h2><pre><code class="line-numbers language-bat">C:\Program Files\Nox\bin&gt;nox_adb connect 127.0.0.1:62001
already connected to 127.0.0.1:62001</code></pre>
<h2 id="五、Android-Studio调试时选择就可以了"><a href="#五、Android-Studio调试时选择就可以了" class="headerlink" title="五、Android Studio调试时选择就可以了"></a>五、Android Studio调试时选择就可以了</h2><p><img src="//gitee.com/guoke3915/zw/raw/master/p/f2ceba3a/19826068-f239196271f26247.png" alt></p>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
      </tags>
  </entry>
  <entry>
    <title>以茶代酒，借酒消愁</title>
    <url>/p/18875298.html</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;来到一座陌生的城市，晚上回到家，又回到了无聊的时空。在这无聊的时间，无聊的空间，加上无聊的人，想起了一些无聊的事。多重无聊的叠加，成了一段忧愁。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;古语，借酒消愁，愁更愁。今曰，以茶代酒，醉似酒。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>顺其自然</title>
    <url>/p/25563531.html</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有一种心情，叫喜怒哀乐；有一种味道，叫酸甜苦辣咸；有一种智慧，叫深谋远虑；有一种缘份，叫天长地久；有一个群体，叫烟火人间，人生如梦，岁月无情，蓦然回首，才发现人活着是一种心情，穷也好、富也好、得也好、失也好，一切都是过眼云烟。想想不管昨天、今天、明天，能豁然开朗就是美好的一天，不管是亲情、友情、爱情，能永远珍惜的就是好心情。所有大事、小事、难事、易事、乐事、苦事，都是一件事，事情总有因有果，人与事、事与人，总有着千丝万缕的联系。当岁月在悠悠然然的钟声里消失，一切将幻化成空气中的那份宁静、淡然。所以，人应该顺其自然，知足常乐。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;风雨坎坷人生路，不经历风雨怎能见彩虹，成功也好，失败也罢，所有的事情都来的很自然，有失败就会有成功，有完美就会有缺陷，且让一切顺其自然，保持顺其自然的心境面对生活，面对人生记忆里或者正在发生的新鲜的事和物。曾经拥有的不要忘记，已经得到的要更加珍惜，属于自己的不要放弃，已经失去的就留作回忆，想要得到的就要更加努力。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;累了把心靠岸，错了不要后悔。苦了才懂得满足，痛了才享受生活，伤了才明白坚强。从中感悟顺其自然的心境，岂不是更美！<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;总有起风的清晨，总有暖和的午后，总有绚烂的黄昏，总有流星的夜晚，所以不如保持顺其自然的心境，把握每一个瞬间，试着去做，去面对每一个昨天、今天和明天。人生中的成败得失，全凭把握，纵使历经所有的艰辛苦难，始终要保持一种心境—顺其自然。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;人生百态；有一种心境，叫顺其自然。</p>
<p>ps:最近有点不淡定,仇恨值有点高,心境需要调整…</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>失去的总是最好的</title>
    <url>/p/aea29f30.html</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;人常常沉醉于曾经拥有的美好,而不珍惜现在拥有的幸福.然而失去的,也就永远不会回来了,你也无须期待什么,心碎也是枉然.也许,它在你心中会留下永恒的美丽,让你难以割舍,可是它已经不再属于你,它有了自己的归属.生活就这样,当你意识到应该珍惜的时候,幸福已经悄悄的溜走,留下的只是丝丝无奈和肆无忌惮的泪水.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;明明知道已无法追悔,可又为何仍要执迷不悟.为了一份曾经拥有而执意要走的感情过分的伤感值得吗?为什么不让那份最美好的记忆停留在我们心中最美好的角落?<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;失去的永远是最美好的,可拥有的也有它美丽的一面,为何仍要凭吊着曾经的空影而不感受现在的幸福呢?也许当你义无返顾追求曾经的美好时,拥有的幸福又将成为你梦里的相思,你又将错过最美好的…</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>忆初</title>
    <url>/p/7f23b241.html</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;夜深了，一切都静下来了，静的让人可怕。无声的夜最容易让人陷入无限的回忆中，看着近几年自己写下的日志，写下的那些话语，写下的心情，写下的点点滴滴。只言片语中，总能感觉到自己对于现实不如意的抱怨或是些许的感伤。想想自己的现状，混混沌沌，突然有一些莫名的忧伤涌上心头。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;总喜欢在一个人静下来无聊的时候，去翻翻曾经写下的日志，如同放电影般回忆一些事情，把大大小小的事情在脑子里过一遍，想到开心的事时，会再度体验那种快乐的感觉，所胃没事偷着乐也不过如此吧；但若想到辛酸处，整个人就像掉进了水坑里去了，怎么爬都爬不上来，越想越纠结，沉于其中。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;或许，忘记是一件好事，没事别乱回忆，别把自己停留在过去。最初的记忆是美好的，但现在不是回忆的时候，记忆多了也会溢出。。。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>SVN UUID 错误</title>
    <url>/p/93a9cd2a.html</url>
    <content><![CDATA[<p>SVN服务器Visual SVN，犹豫迁移到了另一台服务器上后，结果原来的客户端更新就出错了。</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/93a9cd2a/19826068-6b184ff5a1c7fd90.png" alt></p>
<p>可以用svnadmin命令来修改</p>
<p>如：</p>
<ul>
<li>Visual SVN安装路径：<code>C:\Program Files\VisualSVN Server</code></li>
<li>Svn仓库目录：<code>F:\work\Repositories\ly</code></li>
<li>要设置的uuid为：<code>aaf407e0-c358-3540-9481-249ed86d572c</code></li>
</ul>
<p>然后可以用svnadmin修改</p>
<pre><code class="line-numbers language-bash">svnadmin setuuid F:\work\Repositories\ly aaf407e0-c358-3540-9481-249ed86d572c</code></pre>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>人生三境界</title>
    <url>/p/dbfb2d6d.html</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;佛家人云：“看山是山，看水是水；看山不是山，看水不是水；看山还是山，看水还是水。”这短短三句颇富禅机，晦涩难解，却十分恰当的写出了人生随着阅历、年龄的增长而对事物的看法发生改变。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;看山是山，看水是水：涉世之初，纯洁无暇，初识世界，对一切事物都用一种童真的眼光看待，看到什么是什么。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;看山不是山，看水不是沙沙：随着年龄渐长，经历的世事渐多，对这个世界的认识的诱惑，在虚伪的的面具后隐藏着太多的潜规则，看到的并不一定是真实的，一切如雾里看花，似真似幻，似真似假，经常是黑白颠倒，是非混淆，无理走遍天下，有理寸步难行，好人无好，恶心人活长年。人不愿意再轻易地相信什么，易在现实里迷失方向，随之而来的是迷惑、彷徨、痛苦与掐挣扎。有的人就此沉沦在密室的世界里，看山也感慨，看水也叹息，借古讽今，指桑骂槐。山自然不再是单纯的山，水自然不再是单纯的水。一个人若停留在人生的阶段，那就若了这条性命。许多人到了这一境界就到了人生的终点。追求一生，劳碌一生，心高气傲，心高气傲，发现自己并没有达到自己理想，于是抑抱终于。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;看山还是山，看水还是水：这既是一种洞察世事后的反璞归真，也是成竹在胸的体现。人生的经历积累到一定程度，不断的反省，对世事、对自己的追求有了一个清晰的认识，经过长期的知识积累与反思，我们形成了较为深刻的思想观点，思想境界得到了提升，对世界的认识具有了立体感，虽然我们会从不同的角度来看待事物，也会得出不同的结论，但这一阶段我们看得更透，更明晰。有些人通过自己的修练，终于把自己提升到了第三重人生境界。任你红尘滚滚，我自清风朗月。面对芜杂世俗之事，一笑了之…</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>无题</title>
    <url>/p/9b44950b.html</url>
    <content><![CDATA[<p>夜寂，<br>云敛天末，<br>又到月圆时。<br>物似去年，<br>人非昨。<br>举觞醉月，<br>忆伊霓裳羽衣，<br>情切切，<br>吹断相思引！</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>电脑，已成习惯</title>
    <url>/p/e2f6f777.html</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上大学时买电脑到现在已有十个年头了，电脑成了生活中的一部分。有她时并不觉得有什么不一样，有时也只是开在那，放放歌。在家时用电脑学习工作的时间少只又少，也没太多的时候去玩游戏。多是用电脑看看网页，聊聊天看看电视。即使电脑用的不是很多，但她已成为一种习惯。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一开始没电脑时不觉得她会怎么，有无都无所谓，但有她并习惯十多年，习惯后，突然失去她，日子还是这样的过，虽然上网，聊天，看电视这些手机都可以，但还是感觉怪怪的，感觉生活中少了些什么，很不习惯。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;感觉现在不是有无电脑的问题，而是一种习惯的问题。电脑坏了不是买不买电脑，而是改不改拥有电脑这个习惯。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb-driver中使用$cond</title>
    <url>/p/f6719ae9.html</url>
    <content><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>当在游戏金币变动日志中，金币有正有负，需要按玩家分别统计正值和负值的和时。可以使用<code>$cond</code>计算表达式</p>
<a id="more"></a>

<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><code>$cond</code> 计算 boolean 表达式以 return 两个指定的 return 表达式之一。mongodb语法：</p>
<pre><code class="line-numbers language-mongodb">{ $cond: [ &lt;boolean-expression&gt;, &lt;true-case&gt;, &lt;false-case&gt; ] }</code></pre>
<h2 id="mongodb-driver实现"><a href="#mongodb-driver实现" class="headerlink" title="mongodb-driver实现"></a>mongodb-driver实现</h2><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><p> 如有玩家金币变动日志数据</p>
<pre><code class="line-numbers language-json">{ &quot;_id&quot; : 1, &quot;userId&quot; : &quot;12345&quot;, &quot;change&quot;: 300 }
{ &quot;_id&quot; : 2, &quot;userId&quot; : &quot;12345&quot;, &quot;change&quot;: -200 }
{ &quot;_id&quot; : 3, &quot;userId&quot; : &quot;12345&quot;, &quot;change&quot;: 150 }
{ &quot;_id&quot; : 3, &quot;userId&quot; : &quot;12311&quot;, &quot;change&quot;: 250 }</code></pre>
<h3 id="mongodb实现"><a href="#mongodb实现" class="headerlink" title="mongodb实现"></a>mongodb实现</h3><pre><code class="line-numbers language-mongodb">db.getCollection(&#39;CoinLog&#39;).aggregate({
$group: {
    _id: &quot;$userId&quot;,
    win: {
            $sum: {
                    $cond: [{
                            $gt: [&quot;$change&quot;, 0]
                        },&quot;$change&quot;,0]
                }
            }
    }, 
    lose: {
            $sum: {
                    $cond: [{
                            $lt: [&quot;$change&quot;, 0]
                        },&quot;$change&quot;,0]
                }
            }
    }
})</code></pre>
<h3 id="mongodb-driver实现-1"><a href="#mongodb-driver实现-1" class="headerlink" title="mongodb-driver实现"></a>mongodb-driver实现</h3><p>这里用的mongodb-driver版本为3.8.2</p>
<pre><code class="line-numbers language-java">BsonArray filter = new BsonArray();
filter.add(new BsonString(&quot;$change&quot;));
filter.add(new BsonInt64(0));

BsonArray winCond = new BsonArray();
winCond.add(new BsonDocument(&quot;$gt&quot;, filter));
winCond.add(new BsonString(&quot;$change&quot;));
winCond.add(new BsonInt64(0));

BsonArray loseCond = new BsonArray();
loseCond.add(new BsonDocument(&quot;$lt&quot;, filter));
loseCond.add(new BsonString(&quot;$change&quot;));
loseCond.add(new BsonInt64(0));

db.getCollection(&#39;CoinLog&#39;)
    .aggregate(Arrays.asList(
        Aggregates.group($userId,
                    sum(&quot;win&quot;,new BsonDocument(&quot;$cond&quot;,winCond)),
                    sum(&quot;lose&quot;,new BsonDocument(&quot;$cond&quot;,loseCond)))
            )).forEach(new Block&lt;Document&gt;() {
            @Override
            public void apply(Document doc) {
                String userId = doc.getString(&quot;_id&quot;);
                // 这里要注意一下的是，如果累加值过大，
                // 需要先判断类是是int还是long，不然直接getInteger会出错
                int win = doc.getInteger(&quot;win&quot;);
                int lose = doc.getInteger(&quot;lose&quot;);
                // TODO 
            });</code></pre>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>这一刻</title>
    <url>/p/529a06cf.html</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这一刻，回到这工作的城市已经一个月了，回到自己的小宇宙，感觉并不是很好。除了难得的自由，剩下的只有寂寞，少了父母的唠叨，多了丝牵挂和忧伤。</p>
<a id="more"></a>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我工作在离家五百公里的地方，虽然随着时间的推移，工作、生活的压力有时会让人麻木，但刚离开家的这一刻，想起父母的唠叨，想起曾经在父母身边那些快乐简单温暖如春的日子。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;小时候，父母常常唠叨我早睡早起，好好学习，听老师的话… 长大了，终于离开父母，不必在听父母的唠叨了，以为可以耳根清静了，但父母常常电话唠叨我要处处小心，吃好穿暖，好好和同事们相处，不要惦记他们。当然，也忘不了唠叨几句该找女朋友了，带个妹子回家之类的。有时候为了躲避父母的唠叨，没事不爱打电话回去，打电话也匆匆找借口挂断。我知道，他们爱我，可能比他们自己都重要，怕我冷，怕我饿，怕我受欺侮，怕我受委屈… 就是在这简单的重复的唠叨中播种着他们的爱护和温暖。一丝丝话语，一个个关爱，一份份责任都浸透着父母如天高比地博的爱护。即使我离开了他们的怀抱，但牵扯不断的是血脉亲情。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;春节过年回家，父亲在烧火，母亲在炒菜，我站在一旁静静的听母亲告父亲的状，父母亲一会便吵起来，那种说吵架，其时就是快乐的一些鸡毛蒜皮的小事，虽然互不相让，但那种几十年相濡以沫的亲情，其时好温暖。而我静静的听着，看着，五六十岁的父母此刻就好象两个小孩儿，我就如他们的老师，他们的调解员，一会两个人就和好如初了。父母头发多半已白，脸上的皱纹刻印着岁月的沧桑。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这一刻我懂了，其实，听父母唠叨也是一件幸福的事，唠叨里饱含着父母对儿女的浓浓亲情。我会好好珍惜和父母在一起的幸福时光，用心体会，用行动报答…</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>公祭日网页灰色效果</title>
    <url>/p/864686ac.html</url>
    <content><![CDATA[<h2 id="默哀"><a href="#默哀" class="headerlink" title="默哀"></a>默哀</h2><p>向全国各族人民对坑新冠肺炎疫情斗争烈士和逝世同胞的深切哀悼，网络世界虽然是虚拟的，但却无碍我们寄托哀思，在此我们也呼吁亿万网友同心协力、携起手来，共同坑疫。</p>
<a id="more"></a>

<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>找到网站的css中html标签，在里面添加<code>filter</code>过滤器。如果css中没有html，就在css最顶端加入这段代码</p>
<pre><code class="line-numbers language-css">html {
    filter: grayscale(100%);
    -webkit-filter: grayscale(100%);
    -moz-filter: grayscale(100%);
    -ms-filter: grayscale(100%);
    -o-filter: grayscale(100%);
}</code></pre>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="//gitee.com/guoke3915/zw/raw/master/p/864686ac/19826068-8bac69e915f8ecb6.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka日志清理相关设置</title>
    <url>/p/b81c8e33.html</url>
    <content><![CDATA[<p>前几天服务器磁盘被刷爆了（阿里云默认40G硬盘），后面查下来是kafka日志文件写的。</p>
<h2 id="清理策略"><a href="#清理策略" class="headerlink" title="清理策略"></a>清理策略</h2><ul>
<li>log.cleanup.policy=delete : kafka日志的清理策略，默认是<code>delete</code>，就是根据配置的时间空间来清理日志；还可以配置成<code>compact</code>，根据messages中的key，进行删除操作在active segment 被commit 后，会删除掉old duplicate keys无限制的时间与空间的日志保留</li>
</ul>
<h2 id="关于delete的相关配置"><a href="#关于delete的相关配置" class="headerlink" title="关于delete的相关配置"></a>关于delete的相关配置</h2><ul>
<li>log.retention.hours=168 :  日志保留的时间，默认是7天(7*24小时)，超过这个时间的日志都会被清理掉。</li>
<li>log.retention.bytes=1073741824 :  当个日志文件的最大字节数，默认1G。如果文件超出这个大小后，就会新建一个日志文件。</li>
<li>log.roll.hours = 3 : 创建日志文件的周期，默认值是3，如果日志文件大小没有超过1G，就每3个小时会创建一个新的日志文件。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从上面的配置可以看出，如果你数据量不大，按上面的配置，会存在56个日志文件（log.retention.hours/log.roll.hours），且日志总量不会大于56G的硬盘空间。但是如果数据量大，3个小时内数据超过了1G，就会创建很多的日志文件，这个时候的空间就没法预估了，只能通过log.retention.hours来控制日志保留时间来控制日志所占磁盘的大小。</p>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下查看磁盘空间</title>
    <url>/p/63ce0e80.html</url>
    <content><![CDATA[<p>一觉醒来发现服务器磁盘满了，不知道什么情况，设置的报警没起作用。第一件事不是去查磁盘为什么会满，而是很扩容让线上服务正常运行，然后慢慢找原因。</p>
<h2 id="df-命令"><a href="#df-命令" class="headerlink" title="df 命令"></a>df 命令</h2><p>df命令用于显示目前在Linux系统上的文件系统的磁盘使用情况统计，可以查看磁盘各分区大小、已用空间等信息.<br>语法为<code>df [OPTION]... [FILE]...</code>，可以不带参数直接使用，一般会使用<code>-h</code>参数，会显示总大小<code>Size</code></p>
<pre><code class="line-numbers language-shell">$ df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/vda1        20G  2.6G   16G  14% /
devtmpfs        214M     0  214M   0% /dev
tmpfs           224M     0  224M   0% /dev/shm
tmpfs           224M  436K  224M   1% /run
tmpfs           224M     0  224M   0% /sys/fs/cgroup
tmpfs            45M     0   45M   0% /run/user/0</code></pre>
<h2 id="du命令"><a href="#du命令" class="headerlink" title="du命令"></a>du命令</h2><p>确定磁盘信息后，可以用du命令来显示目录或文件所占用的磁盘空间<br>语法为<code>du [OPTION]... [FILE]...</code> 或 <code>du [OPTION]... --files0-from=F</code>。一般会使用<code>-sh</code>参数，会更直观的显示目录或文件的大小。如查看<code>/</code>根目录下所有文件(夹)所占空间</p>
<pre><code class="line-numbers language-shell">$ du -sh /*
0    /bin
132M    /boot
164M    /data
0    /dev
34M    /etc
25M    /home
0    /lib
0    /lib64
8.0K    /logs
16K    /lost+found
4.0K    /media
4.0K    /mnt
4.0K    /opt
du: cannot access ‘/proc/3497/task/3497/fd/4’: No such file or directory
du: cannot access ‘/proc/3497/task/3497/fdinfo/4’: No such file or directory
du: cannot access ‘/proc/3497/fd/4’: No such file or directory
du: cannot access ‘/proc/3497/fdinfo/4’: No such file or directory
0    /proc
16M    /root
436K    /run
0    /sbin
4.0K    /srv
0    /sys
32K    /tmp
1.9G    /usr
338M    /var</code></pre>
<p>这样一级一级的查下去，就会发现哪个文件把磁盘占满了，再去找这个文件是哪生成的。</p>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLite基本操作</title>
    <url>/p/74b91d30.html</url>
    <content><![CDATA[<p>SQLite的基本语法和MySQL的类似。</p>
<a id="more"></a>

<h2 id="1-数据库操作"><a href="#1-数据库操作" class="headerlink" title="1.数据库操作"></a>1.数据库操作</h2><h3 id="1-1-创建-打开数据库"><a href="#1-1-创建-打开数据库" class="headerlink" title="1.1 创建/打开数据库"></a>1.1 创建/打开数据库</h3><p>直接使用<code>sqlite3 DatabaseName.db</code>就可以打开数据库了，如果数据库不存在，则创建。</p>
<ul>
<li><code>.help</code>：查看帮助</li>
<li><code>.databases</code>：显示数据库列表</li>
<li><code>.exit/.quit</code>：退出</li>
<li><code>.header on</code>: 显示表头</li>
<li><code>.mode column</code>: 左对齐的列,长太时会被忽略</li>
</ul>
<p>如例：</p>
<pre><code class="line-numbers language-sql">[root@guoke3915 ~]# sqlite3 guoke.db
SQLite version 3.7.17 2013-05-20 00:56:22
Enter &quot;.help&quot; for instructions
Enter SQL statements terminated with a &quot;;&quot;</code></pre>
<h3 id="1-2-附加数据库"><a href="#1-2-附加数据库" class="headerlink" title="1.2 附加数据库"></a>1.2 附加数据库</h3><p>用时需要用到多库操作的时候，需要附加数据库了。</p>
<pre><code class="line-numbers language-sql">attach database &#39;file_name&#39; as &#39;database_name&#39;;</code></pre>
<p>例如</p>
<pre><code class="line-numbers language-sql">sqlite&gt; attach database &#39;test.db&#39; as &#39;test&#39;;
sqlite&gt; .database
seq  name             file                                                      
---  ---------------  ----------------------------------------------------------
0    main             /root/guoke.db                                            
2    test             /root/test.db    </code></pre>
<h3 id="1-3-分离数据库"><a href="#1-3-分离数据库" class="headerlink" title="1.3 分离数据库"></a>1.3 分离数据库</h3><p>只能分离<code>attach</code>添加的数据库，不能分离<code>main</code>。</p>
<pre><code class="line-numbers language-sql">detach database &#39;name&#39;;</code></pre>
<ul>
<li>name为<code>.satabase</code>时显示的name</li>
</ul>
<p>例如</p>
<pre><code class="line-numbers language-sql">sqlite&gt; detach database &#39;test&#39;;
sqlite&gt; .database
seq  name             file                                                      
---  ---------------  ----------------------------------------------------------
0    main             /root/guoke.db                                            </code></pre>
<h2 id="2-表操作"><a href="#2-表操作" class="headerlink" title="2. 表操作"></a>2. 表操作</h2><h3 id="2-1-创建表"><a href="#2-1-创建表" class="headerlink" title="2.1 创建表"></a>2.1 创建表</h3><p><code>create table</code> 语句用于在任何给定的数据库创建一个新表。创建基本表，涉及到命名表、定义列及每一列的数据类型。</p>
<pre><code class="line-numbers language-sql">create table database_name.table_name(
   column1 datatype  primary key(one or more columns),
   column2 datatype,
   column3 datatype,
   .....
   columnN datatype,
);</code></pre>
<ul>
<li>如果只有一个db时，<code>database_name</code>可以不写，多可以时为<code>.satabase</code>时显示的name</li>
</ul>
<p>例如：</p>
<pre><code class="line-numbers language-sql">sqlite&gt; create table test(
   ...&gt; id int primary key not null,
   ...&gt; name text not null,
   ...&gt; age int not null
   ...&gt; );

sqlite&gt; .tables
test</code></pre>
<h3 id="2-2-删除表"><a href="#2-2-删除表" class="headerlink" title="2.2 删除表"></a>2.2 删除表</h3><p><code>drop table</code> 语句用来删除表定义及其所有相关数据、索引、触发器、约束和该表的权限规范</p>
<pre><code class="line-numbers language-sql">drop table database_name.table_name;</code></pre>
<p>例如：</p>
<pre><code class="line-numbers language-sql">sqlite&gt; drop table test;
sqlite&gt; .tables</code></pre>
<h3 id="2-3-增"><a href="#2-3-增" class="headerlink" title="2.3 增"></a>2.3 增</h3><p><code>insert into</code> 语句用于向数据库的某个表中添加新的数据行。</p>
<pre><code class="line-numbers language-sql">insert into table_name [(column1, column2, column3,...columnn)]  
values (value1, value2, value3,...valuen);</code></pre>
<p>如果是全值添加可以简单化为</p>
<pre><code class="line-numbers language-sql">insert into table_name values (value1,value2,value3,...valueN);</code></pre>
<p>例如：</p>
<pre><code class="line-numbers language-sql">sqlite&gt; insert into test values(1,&#39;guoke&#39;,30);
sqlite&gt; insert into test values(2,&#39;abc&#39;,25);</code></pre>
<h3 id="2-4-查"><a href="#2-4-查" class="headerlink" title="2.4 查"></a>2.4 查</h3><p><code>select</code> 语句用于从 SQLite 数据库表中获取数据，以结果表的形式返回数据。这些结果表也被称为结果集</p>
<pre><code class="line-numbers language-sql">select column1, column2, columnn from table_name;</code></pre>
<p>如果查所有的可以用</p>
<pre><code class="line-numbers language-sql">select * from table_name;</code></pre>
<p>可以在后面使用<code>where</code>显示查询的过滤条件</p>
<p>例如：</p>
<pre><code class="line-numbers language-sql">sqlite&gt; .header on
sqlite&gt; .mode column
sqlite&gt; select * from test;
id          name        age       
----------  ----------  ----------
1           guoke       30        
2           abc         25        

sqlite&gt; select * from test where age&gt;28;
id          name        age       
----------  ----------  ----------
1           guoke       30        </code></pre>
<h3 id="2-5-改"><a href="#2-5-改" class="headerlink" title="2.5 改"></a>2.5 改</h3><p><code>update</code> 查询用于修改表中已有的记录。可以使用带有 <code>where</code> 子句的 <code>update</code> 查询来更新选定行，否则所有的行都会被更新。</p>
<pre><code class="line-numbers language-sql">update table_name
set column1 = value1, column2 = value2...., columnn = valueN
where [condition];</code></pre>
<p>例如:</p>
<pre><code class="line-numbers language-sql">sqlite&gt; update test set age=31 where name=&#39;guoke&#39;;
sqlite&gt; select * from test;
id          name        age       
----------  ----------  ----------
1           guoke       31        
2           abc         25  </code></pre>
<h3 id="2-6-删"><a href="#2-6-删" class="headerlink" title="2.6 删"></a>2.6 删</h3><p><code>delete</code> 查询用于删除表中已有的记录。可以使用带有 <code>where</code> 子句的 <code>delete</code> 查询来删除选定行，否则所有的记录都会被删除。</p>
<pre><code class="line-numbers language-sql">delete from table_name where [condition];</code></pre>
<p>例如：</p>
<pre><code class="line-numbers language-sql">sqlite&gt; delete from test where name=&#39;abc&#39;;
sqlite&gt; select * from test;
id          name        age       
----------  ----------  ----------
1           guoke       31   </code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>VS Code大小写转换快捷键</title>
    <url>/p/463cccb2.html</url>
    <content><![CDATA[<p>VS Code貌似好像没有大小写转换的快捷键，但是可以自已添加</p>
<a id="more"></a>

<h2 id="1-进入快捷键设置页面"><a href="#1-进入快捷键设置页面" class="headerlink" title="1. 进入快捷键设置页面"></a>1. 进入快捷键设置页面</h2><p><strong>文件</strong>-&gt;<strong>首选项</strong>-&gt;<strong>键盘快捷方式</strong> 或直接按<code>ctrl+k</code>+<code>ctrl+s</code><br><img src="//gitee.com/guoke3915/zw/raw/master/p/463cccb2/19826068-49684cfb3cf7455e.png" alt></p>
<h2 id="2-搜索命令"><a href="#2-搜索命令" class="headerlink" title="2. 搜索命令"></a>2. 搜索命令</h2><p>在上面的搜索栏中，输入<code>转换</code>就可以看到有<strong>转换为大写</strong>和<strong>转换为小写</strong>的命令<br><img src="//gitee.com/guoke3915/zw/raw/master/p/463cccb2/19826068-ce8d66d7cd2ea267.png" alt></p>
<h2 id="3-设置快捷键"><a href="#3-设置快捷键" class="headerlink" title="3. 设置快捷键"></a>3. 设置快捷键</h2><p>点<strong>转换为大写</strong>前面的<strong>+</strong>就会弹出设置快捷键页面，直接输入自己想要设定的快捷键，如：<code>ctrl+shift+u</code>。如果提示输入的快捷键被绑定了，可以换一个，也可以把原来绑定的给删了<br><img src="//gitee.com/guoke3915/zw/raw/master/p/463cccb2/19826068-7f8c7e73ff2b1ce6.png" alt></p>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 命令行参数</title>
    <url>/p/5e4da61d.html</url>
    <content><![CDATA[<p>在linux中，很多都程序都习惯用命令行传参。</p>
<a id="more"></a>

<p>如：</p>
<pre><code class="line-numbers language-bash">/usr/local/frp/frps -c /usr/local/frp/frps.ini</code></pre>
<h2 id="1-os-Args"><a href="#1-os-Args" class="headerlink" title="1. os.Args"></a>1. os.Args</h2><p>对于Go，命令行参数是用os.Args这个string的切片来存储的。启动的时候，各参数以空格分割。os.Args的长度到少为1，第一个值就是应用自身的绝对路径，如上面的<code>os.Args</code>为<code>/usr/local/frp/frps</code>, 第二个值是<code>-c</code>,第三个值是<code>/usr/local/frp/frps.ini</code>依次类推。<br>可以根据自己的需求来解析需要的参数。</p>
<h2 id="2-Flag包"><a href="#2-Flag包" class="headerlink" title="2. Flag包"></a>2. Flag包</h2><p>Go 有flag包来解析参数，可以省掉很多麻烦。</p>
<h3 id="2-1-支持参数形式"><a href="#2-1-支持参数形式" class="headerlink" title="2.1 支持参数形式"></a>2.1 支持参数形式</h3><p>flag支持3种格式的参数</p>
<pre><code class="line-numbers language-ini">-flag
-flag=x
-flag x // x不能是bool值</code></pre>
<h3 id="2-1"><a href="#2-1" class="headerlink" title="2.1"></a>2.1</h3><p>提供的接口有：</p>
<pre><code class="line-numbers language-go">func Bool(name string, value bool, usage string) *bool
func Int(name string, value int, usage string) *int
func Int64(name string, value int64, usage string) *int64
func Uint(name string, value uint, usage string) *uint
func Uint64(name string, value uint64, usage string) *uint64
func Float64(name string, value float64, usage string) *float64
func String(name string, value string, usage string) *string</code></pre>
<ul>
<li>name: 获取参数的名字，如：<code>-c</code>中的<code>c</code></li>
<li>value: 默认值，没有对应名字参数时值</li>
<li>usage:  帮助提示值，输入 –help时显示</li>
<li>返回值: 返回值都是指针。</li>
</ul>
<h3 id="2-2-例子"><a href="#2-2-例子" class="headerlink" title="2.2 例子"></a>2.2 例子</h3><p>以前面<code>test -c /usr/local/frp/frps.ini</code>参数为例</p>
<pre><code class="line-numbers language-go">package main

import (
    &quot;flag&quot;
    &quot;fmt&quot;
)

func main() {
    cfgfile := flag.Bool(&quot;c&quot;, &quot;frps.ini&quot;, &quot;输入frps配置文件路径&quot;)

    flag.Parse() //解析输入的参数

    fmt.Println(&quot;配置文件c:&quot;, *cfgfile)
}</code></pre>
<p>输出</p>
<pre><code>配置文件c: /usr/local/frp/frps.ini</code></pre>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Goland 中排序</title>
    <url>/p/63c73dd7.html</url>
    <content><![CDATA[<p>刚接触go的时候，要排个序得重写<code>Len()</code>、<code>Swap()</code>、<code>Less()</code> 三个方法，好蛋疼的感觉。后现1.8版本后更新了<code>sort</code>库，排序用起来就简单多了。</p>
<h2 id="1-基本数据排序"><a href="#1-基本数据排序" class="headerlink" title="1. 基本数据排序"></a>1. 基本数据排序</h2><p>基本数据为int、float64、string。int和float64直接比大小，string则是安顺序比较字符的ASCII码的大小</p>
<h3 id="1-1-升序"><a href="#1-1-升序" class="headerlink" title="1.1 升序"></a>1.1 升序</h3><p>直接使用<code>sort.Ints()</code>、<code>sort.Float64s()</code>、<code>sort.Strings()</code>方法就可以了，默认的排序就是升序的</p>
<pre><code class="line-numbers language-go">package main

import (
    &quot;fmt&quot;
    &quot;sort&quot;
)

func main() {
    ints := [] int {5,6,9,8,7,1,2,5,4,6,3}
    float64s := [] float64 {3.1,4.1,5.9,2.6,5.3,5.8,9.7,9}
    strings := [] string {&quot;g&quot;,&quot;u&quot;,&quot;o&quot;,&quot;k&quot;,&quot;e&quot;,&quot;guo&quot;,&quot;ke&quot;}

    sort.Ints(ints)
    sort.Float64s(float64s)
    sort.Strings(strings)

    fmt.Printf(&quot;%v\n%v\n%v\n&quot;, ints, float64s, strings)
}</code></pre>
<p>运行结果</p>
<pre><code class="line-numbers language-go">[1 2 3 4 5 5 6 6 7 8 9]
[2.6 3.1 4.1 5.3 5.8 5.9 9 9.7]
[e g guo k ke o u]</code></pre>
<h3 id="1-2-降序"><a href="#1-2-降序" class="headerlink" title="1.2 降序"></a>1.2 降序</h3><p>使用 <code>sort.Reverse(slice)</code> 来调换就可以了</p>
<pre><code class="line-numbers language-go">package main

import (
    &quot;fmt&quot;
    &quot;sort&quot;
)

func main() {
    ints := [] int {5,6,9,8,7,1,2,5,4,6,3}
    float64s := [] float64 {3.1,4.1,5.9,2.6,5.3,5.8,9.7,9}
    strings := [] string {&quot;g&quot;,&quot;u&quot;,&quot;o&quot;,&quot;k&quot;,&quot;e&quot;,&quot;guo&quot;,&quot;ke&quot;}

    sort.Sort(sort.Reverse(sort.IntSlice(ints)))
    sort.Sort(sort.Reverse(sort.Float64Slice(float64s)))
    sort.Sort(sort.Reverse(sort.StringSlice(strings)))

    fmt.Printf(&quot;%v\n%v\n%v\n&quot;, ints, float64s, strings)
}</code></pre>
<p>运行结果</p>
<pre><code class="line-numbers language-go">[9 8 7 6 6 5 5 4 3 2 1]
[9.7 9 5.9 5.8 5.3 4.1 3.1 2.6]
[u o ke k guo g e]</code></pre>
<h2 id="2-结构体排序"><a href="#2-结构体排序" class="headerlink" title="2. 结构体排序"></a>2. 结构体排序</h2><p>结构体直接使用<code>sort.Slice(slice interface{}, less func(i, j int) bool)</code>来排序。调整后面less函数的比较就可以得到升序或降序了</p>
<pre><code class="line-numbers language-go">package main

import (
    &quot;fmt&quot;
    &quot;sort&quot;
)

func main() {
    people := []struct {
        Name string
        Age  int
    }{
        {&quot;Gopher&quot;, 7},
        {&quot;Alice&quot;, 55},
        {&quot;Vera&quot;, 24},
        {&quot;Bob&quot;, 75},
    }

    // Name升序
    sort.Slice(people, func(i, j int) bool { return people[i].Name &lt; people[j].Name })
    fmt.Println(&quot;By name:&quot;, people)

    // 年龄降序
    sort.Slice(people, func(i, j int) bool { return people[i].Age &gt; people[j].Age })
    fmt.Println(&quot;By age:&quot;, people)
}</code></pre>
<p>运行结果</p>
<pre><code class="line-numbers language-go">By name: [{Alice 55} {Bob 75} {Gopher 7} {Vera 24}]
By age: [{Bob 75} {Alice 55} {Vera 24} {Gopher 7}]</code></pre>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>npm发布流程</title>
    <url>/p/f0e2fc72.html</url>
    <content><![CDATA[<p>最近在玩hexo，自己写了一个hexo d提交版本库后，ssh连接远程服务器拉取的js包，自己手动放到node_modules的话更新就没有了，于是就想到了发布到npm上。</p>
<a id="more"></a>

<h2 id="1-创建-GitHub-项目"><a href="#1-创建-GitHub-项目" class="headerlink" title="1. 创建 GitHub 项目"></a>1. 创建 GitHub 项目</h2><p>npm创建时依赖于一个git仓库，所以我们先在github上创建一个项目，并克隆到本地<br>如: <a href="https://github.com/zngw/hexo-zngw-sshpull" target="_blank" rel="noopener">https://github.com/zngw/hexo-zngw-sshpull</a></p>
<h2 id="2-npm-初始化"><a href="#2-npm-初始化" class="headerlink" title="2. npm 初始化"></a>2. npm 初始化</h2><p>打开命令行窗口，进入git仓库项目目录</p>
<pre><code class="line-numbers language-powershell">npm init</code></pre>
<p>按照提示完成类似以下内容的输入：</p>
<pre><code class="line-numbers language-powershell">Press ^C at any time to quit.
package name: (hexo-zngw-sshpull)
version: (1.0.0)
description: hexo发布时，通过ssh连接远程服务器自动git pull
entry point: (index.js)
test command: hexo发布时，通过ssh连接远程服务器自动git pull
git repository: (https://github.com/zngw/hexo-zngw-sshpull.git)
keywords: hexo发布时，通过ssh连接远程服务器自动git pull
author: zngw
license: (ISC)</code></pre>
<p>说明：</p>
<table>
<thead>
<tr>
<th>配置项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>package name</td>
<td>项目名称（要求在npm官网具有唯一性，不允许有大写字母，通常由字母，中横线，@符号组成）</td>
</tr>
<tr>
<td>version</td>
<td>版本号（要求每次npm publish前修改，必须大于之前的版本）</td>
</tr>
<tr>
<td>description</td>
<td>项目描述信息（这个可以随便写点关于项目的介绍信息）</td>
</tr>
<tr>
<td>entry point</td>
<td>入口文件，通常用index.js</td>
</tr>
<tr>
<td>test command</td>
<td>测试命令，执行npm run test命令时的输出信息或命令</td>
</tr>
<tr>
<td>git repository</td>
<td>项目的GitHub地址，会在npm官网添加该项目的GitHub链接</td>
</tr>
<tr>
<td>keywords</td>
<td>关键词（在npm官网搜索专用关键词，能够增加搜索效率）</td>
</tr>
<tr>
<td>author</td>
<td>作者（请写上您的大名，让别人认识你）</td>
</tr>
<tr>
<td>license</td>
<td>版权，权限（默认ISO就行）</td>
</tr>
</tbody></table>
<h2 id="3-注册npm账号"><a href="#3-注册npm账号" class="headerlink" title="3. 注册npm账号"></a>3. 注册npm账号</h2><p>用浏览器打开<code>npm</code>官网<a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a>，点击<a href="https://www.npmjs.com/signup" target="_blank" rel="noopener">sign up</a>注册，点击<a href="https://www.npmjs.com/login" target="_blank" rel="noopener">log in</a>登录<br><strong>注意：</strong> 想要发布<code>npm</code>包需要上述注册信息，务必牢记注册名称，密码及邮箱（例如账号：zngw，密码：xxxxxx，邮箱：<a href="mailto:55@mail.zengwu.com.cn">55@mail.zengwu.com.cn</a>）。</p>
<p><strong>PS：</strong> 注册后记得去邮箱里验证一下，不然后面提交的时候会报错的</p>
<pre><code>npm ERR! code E403
npm ERR! 403 Forbidden - PUT https://registry.npmjs.org/hexo-zngw-sshpull - you must verify your email before publishing
 a new package: https://www.npmjs.com/email-edit

npm ERR! A complete log of this run can be found in:
npm ERR!     C:\Users\Administrator\AppData\Roaming\npm-cache\_logs\2020-03-23T17_56_28_029Z-debug.log</code></pre><h2 id="4-命令行登录npm账号"><a href="#4-命令行登录npm账号" class="headerlink" title="4. 命令行登录npm账号"></a>4. 命令行登录npm账号</h2><p>在前面初始化npm的命令窗口中登录</p>
<pre><code class="line-numbers language-powershell">F:\work\MyGithub\hexo-zngw-sshpull&gt;npm login
Username: zngw
Password:
Email: (this IS public) 55@mail.zengwu.com.cn
Logged in as zngw on https://registry.npmjs.org/.</code></pre>
<h2 id="5-准备发布包"><a href="#5-准备发布包" class="headerlink" title="5. 准备发布包"></a>5. 准备发布包</h2><p>这里就是编写你的程序和代码，如果有依赖别的包，可以直接在<code>package.json</code>中添加,如</p>
<pre><code class="line-numbers language-json">  &quot;dependencies&quot;: {
    &quot;ssh2&quot;: &quot;^0.8.9&quot;
  },</code></pre>
<h2 id="6-发布npm包"><a href="#6-发布npm包" class="headerlink" title="6. 发布npm包"></a>6. 发布npm包</h2><p>首次发布命令：</p>
<pre><code class="line-numbers language-powershell">npm publish --access=public</code></pre>
<p>如果项目重名会发不成功，这时候修改<code>package.json</code>里的<code>name</code>保证唯一就可以了</p>
<pre><code class="line-numbers language-powershell">F:\work\MyGithub\hexo-zngw-sshpull&gt;npm publish --access=public
npm notice
npm notice package: hexo-zngw-sshpull@1.0.0
npm notice === Tarball Contents ===
npm notice 639B  package.json
npm notice 72B   index.js
npm notice 83B   README.md
npm notice 1.5kB lib/sshpull.js
npm notice === Tarball Details ===
npm notice name:          hexo-zngw-sshpull
npm notice version:       1.0.0
npm notice package size:  1.1 kB
npm notice unpacked size: 2.3 kB
npm notice shasum:        7d402750ecae49460f4614aff53fb1b215d436b6
npm notice integrity:     sha512-QtFZ3cUjVrGN+[...]+JDMfYySE83wA==
npm notice total files:   4
npm notice
+ hexo-zngw-sshpull@1.0.0</code></pre>
<h2 id="7-npm包版本更新"><a href="#7-npm包版本更新" class="headerlink" title="7. npm包版本更新"></a>7. npm包版本更新</h2><p>需要修改<code>package.json</code>文件中的<code>version</code>信息，只要增加就行了，中间随便怎么跳版本<br>然后<code>npm publish</code>发布</p>
<pre><code class="line-numbers language-powershell">F:\work\MyGithub\hexo-zngw-sshpull&gt;npm publish
npm notice
npm notice package: hexo-zngw-sshpull@1.0.2
npm notice === Tarball Contents ===
npm notice 685B  package.json
npm notice 72B   index.js
npm notice 908B  README.md
npm notice 1.5kB lib/sshpull.js
npm notice === Tarball Details ===
npm notice name:          hexo-zngw-sshpull
npm notice version:       1.0.2
npm notice package size:  1.5 kB
npm notice unpacked size: 3.2 kB
npm notice shasum:        9626b75d94d0422696a00ab2b72277a259e75cc6
npm notice integrity:     sha512-NmT/0Ag13AWcy[...]i8yQ44fPW2AVA==
npm notice total files:   4
npm notice
+ hexo-zngw-sshpull@1.0.2</code></pre>
<h2 id="8-删除包"><a href="#8-删除包" class="headerlink" title="8. 删除包"></a>8. 删除包</h2><pre><code class="line-numbers language-powershell">npm unpublish 依赖包名称 --force</code></pre>
<p>本文参考：<a href="https://github.com/loushengyue/test-projects" target="_blank" rel="noopener">https://github.com/loushengyue/test-projects</a></p>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>使用阿里云Docker镜像仓库</title>
    <url>/p/98baf83f.html</url>
    <content><![CDATA[<p>在部署服务器集群的时候，很多环境都是一样的，如果是用Docker搭建的环境，官网的太慢了，可以使用阿里云的Docker镜像仓库。先在一台服务上部署所有的环境，再push到阿里云的Docker镜像仓库，其他的服务器直接用这边pull取就快多了。</p>
<h2 id="1-进入阿里云镜像服务"><a href="#1-进入阿里云镜像服务" class="headerlink" title="1. 进入阿里云镜像服务"></a>1. 进入阿里云镜像服务</h2><p>登录阿里云账号，在产品与服务中找到<code>容器镜像服务</code><br><img src="//gitee.com/guoke3915/zw/raw/master/p/98baf83f/19826068-716579f118375292.png" alt></p>
<h2 id="2-创建Registry登录密码"><a href="#2-创建Registry登录密码" class="headerlink" title="2. 创建Registry登录密码"></a>2. 创建Registry登录密码</h2><p>第一次进入开通服务后会有一个<code>设置Registry登录密码</code>，点进去自己设置一个密码，后面登录登录的时候需要用到<br><img src="//gitee.com/guoke3915/zw/raw/master/p/98baf83f/19826068-b4b433790a334555.png" alt></p>
<h2 id="3-设置命名空间"><a href="#3-设置命名空间" class="headerlink" title="3. 设置命名空间"></a>3. 设置命名空间</h2><p>在左侧找到<code>命名空间</code>，创建一个<br><img src="//gitee.com/guoke3915/zw/raw/master/p/98baf83f/19826068-862ff8e723ef2ead.png" alt></p>
<h2 id="4-登录"><a href="#4-登录" class="headerlink" title="4. 登录"></a>4. 登录</h2><p>进入到服务器中，使用命令登录</p>
<pre><code class="line-numbers language-shell">$ docker login --username=[你的用户名] registry.cn-hangzhou.aliyuncs.com</code></pre>
<p>用于登录的用户名为阿里云账号全名，之后会让你输入第2步创建的密码。<br>登录成功后会有一个警告，意思你的密码以明文格式记录在<code>/root/.docker/config.json</code>，之生登录不需要密码了，如查要删了自己去找那个json文件就行</p>
<pre><code class="line-numbers language-txt">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credentials-store</code></pre>
<h2 id="5-将镜像推送到Registry"><a href="#5-将镜像推送到Registry" class="headerlink" title="5. 将镜像推送到Registry"></a>5. 将镜像推送到Registry</h2><p>命名空间是前面第4步创建的，repository是仓库名</p>
<pre><code class="line-numbers language-shell"># 先登录，如果已经登录过的就不用管
$ docker login --username=xushichang012 registry.cn-hangzhou.aliyuncs.com
$ docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/[命名空间]/[repository]:[镜像版本号]
$ docker push registry.cn-hangzhou.aliyuncs.com/[命名空间]/[repository]:[镜像版本号]</code></pre>
<p>如我们要将nats 1.3.0版本推送到<code>zngw</code>命名空间中</p>
<pre><code class="line-numbers language-shell"># 查看镜像id
$ docker images
REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE
nats                              1.3.0               40a6f5ca1594        18 months ago       7.76MB

$ docker login --username=xxx registry.cn-hangzhou.aliyuncs.com
$ docker tag 40a6f5ca1594 registry.cn-hangzhou.aliyuncs.com/zngw/nats:1.3.0
$ docker push registry.cn-hangzhou.aliyuncs.com/zngw/nats:1.3.0
The push refers to repository [registry.cn-hangzhou.aliyuncs.com/zngw/nats]
f4d1bc33a08d: Pushed 
38e677270912: Pushed 
1.3.0: digest: sha256:28eb780ab00a512b20c96eff87da342cd8f6319080846352372f461211092c8a size: 735</code></pre>
<h2 id="6-从Registry中拉取镜像"><a href="#6-从Registry中拉取镜像" class="headerlink" title="6. 从Registry中拉取镜像"></a>6. 从Registry中拉取镜像</h2><pre><code class="line-numbers language-shell">$ docker login --username=xushichang012 registry.cn-hangzhou.aliyuncs.com

#外网拉取
$ docker pull registry.cn-hangzhou.aliyuncs.com/[命名空间]/[repository]:[镜像版本号]

# 专有网络拉取
$ docker pull registry-vpc.cn-hangzhou.aliyuncs.com/[命名空间]/[repository]:[镜像版本号]

# 经典网络拉取
$ docker pull registry-internal.cn-hangzhou.aliyuncs.com/[命名空间]/[repository]:[镜像版本号]</code></pre>
<p>如果是同一账号下可以用专有网络或经曲网络，这样不仅不消耗外网流量还快的不要不要的</p>
<p>如果上面的nats镜像</p>
<pre><code class="line-numbers language-shell">$ docker login --username=xxx registry.cn-hangzhou.aliyuncs.com
$  docker pull registry.cn-hangzhou.aliyuncs.com/zngw/nats:1.3.0</code></pre>
<h2 id="7-重命名"><a href="#7-重命名" class="headerlink" title="7. 重命名"></a>7. 重命名</h2><p>下载过来的名字都比较长如<code>registry.cn-hangzhou.aliyuncs.com/zngw/nats</code><br>使用<code>docker images</code>先找到<code>registry.cn-hangzhou.aliyuncs.com/zngw/nats</code>的镜像id，然后按下面操作就可以重命名为<code>nats</code>了</p>
<pre><code class="line-numbers language-bash">docker tag [images] nats:1.3.0
docker rmi registry.cn-hangzhou.aliyuncs.com/zngw/nats:1.3.0</code></pre>
<h2 id="个人阿里云镜像（持续更新）"><a href="#个人阿里云镜像（持续更新）" class="headerlink" title="个人阿里云镜像（持续更新）"></a>个人阿里云镜像（持续更新）</h2><table>
<thead>
<tr>
<th>镜像名称</th>
<th>版本</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>dotnet</td>
<td>2.2.402</td>
<td>registry.cn-hangzhou.aliyuncs.com/zngw/dotnet</td>
</tr>
<tr>
<td>java</td>
<td>8u92-jre-alpine</td>
<td>registry.cn-hangzhou.aliyuncs.com/zngw/java</td>
</tr>
<tr>
<td>kafka</td>
<td>2.3.0</td>
<td>registry.cn-hangzhou.aliyuncs.com/zngw/kafka</td>
</tr>
<tr>
<td>mongo</td>
<td>3.2.8、4.2.5</td>
<td>registry.cn-hangzhou.aliyuncs.com/zngw/mongo</td>
</tr>
<tr>
<td>mysql</td>
<td>8.0.18</td>
<td>registry.cn-hangzhou.aliyuncs.com/zngw/mysql</td>
</tr>
<tr>
<td>nats</td>
<td>1.3.0</td>
<td>registry.cn-hangzhou.aliyuncs.com/zngw/nats</td>
</tr>
<tr>
<td>nginx</td>
<td>1.10.1-alpine</td>
<td>registry.cn-hangzhou.aliyuncs.com/zngw/nginx</td>
</tr>
<tr>
<td>redis</td>
<td>5.0.6</td>
<td>registry.cn-hangzhou.aliyuncs.com/zngw/redis</td>
</tr>
<tr>
<td>zookeeper</td>
<td>3.5.5</td>
<td>registry.cn-hangzhou.aliyuncs.com/zngw/zookeeper</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker查看完整command</title>
    <url>/p/f61d75f.html</url>
    <content><![CDATA[<pre><code class="line-numbers language-shell">docker ps --no-trunc</code></pre>
<p>参考: <a href="https://stackoverflow.com/questions/27380641/see-full-command-of-running-stopped-container-in-docker" target="_blank" rel="noopener">https://stackoverflow.com/questions/27380641/see-full-command-of-running-stopped-container-in-docker</a></p>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10查看热键占用</title>
    <url>/p/732bbb85.html</url>
    <content><![CDATA[<p>今天打开电脑突然发现idea的向后导航<code>ctrl+alt+←</code>键不能用了。<br>微软也不出一个热键设置的接口，还是自己找。<br><code>Windows Hotkey Explorer</code>这个比较暴力而且win10貌似不能用（运行了一下然后死机了）<br>下面用PC hunter来查看，v1.56版本支持Win10(17763)</p>
<h2 id="1-先下载免费版本"><a href="#1-先下载免费版本" class="headerlink" title="1. 先下载免费版本"></a>1. 先下载免费版本</h2><p><a href="http://www.xuetr.com/?p=191" target="_blank" rel="noopener">PC hunter v1.56</a></p>
<h2 id="2-运行"><a href="#2-运行" class="headerlink" title="2. 运行"></a>2. 运行</h2><p>下载的zip包里有32位和64位的，选择适合自己系统版本直接双击运行</p>
<h2 id="3-查看进程热键"><a href="#3-查看进程热键" class="headerlink" title="3. 查看进程热键"></a>3. 查看进程热键</h2><p>随便找个进程，右键查看进程热键<br><img src="//gitee.com/guoke3915/zw/raw/master/p/732bbb85/19826068-6c64c1fb49f70eab.png" alt="image.png"></p>
<h2 id="4-查看所有热键"><a href="#4-查看所有热键" class="headerlink" title="4. 查看所有热键"></a>4. 查看所有热键</h2><p>在进程热键页面中，右键，选择<code>显示所有进程热键</code><br><img src="//gitee.com/guoke3915/zw/raw/master/p/732bbb85/19826068-4d8f56106eef30e9.png" alt="image.png"></p>
<h2 id="5-查看热键信息"><a href="#5-查看热键信息" class="headerlink" title="5. 查看热键信息"></a>5. 查看热键信息</h2><p>点一下标题栏的<code>热键</code>，按热键排序，这样方便查找出你需要的热键，找到热键后面有线程Id和进程名<br><img src="//gitee.com/guoke3915/zw/raw/master/p/732bbb85/19826068-3f6b784dcb8ff93c.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode搜索自动过滤.gitignore中的配置</title>
    <url>/p/587c77b8.html</url>
    <content><![CDATA[<p>用vscode打开了一个nodejs项目，然后<code>ctrl+shift+f</code>全局搜<code>node_modules</code>目录中的东西，结果是找不到。<br>后来在<code>ctrl+shift+p</code>输入setting打开设置文件加入search.exclude之后还是搜不出来。</p>
<pre><code class="line-numbers language-json">&quot;search.exclude&quot;: {
  &quot;**/node_modules&quot;: false
}</code></pre>
<p>最后发现项目中存在<code>.gitignore</code>文件，vscode搜索时会自动过滤<code>.gitignore</code>这个配置。最终在<code>setting.json</code>设置中加入<code>&quot;search.useIgnoreFiles&quot;: false</code>就好了。<br>微软老是加隐藏buf，真让人难找。</p>
<p>解决办法参考：<a href="https://github.com/Microsoft/vscode/issues/43795" target="_blank" rel="noopener">https://github.com/Microsoft/vscode/issues/43795</a></p>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义远程桌面连接名</title>
    <url>/p/bbed5435.html</url>
    <content><![CDATA[<p>当远程桌面多了的时候，下拉列表里全是ip端口，这样都很难分清哪个ip是哪个。远程桌面又没提供自定名的功能。我们可以用本地host来解决这个问题。</p>
<p>先打开本地文件<code>C:\Windows\System32\drivers\etc\hosts</code>。在里面添加远程电脑’ip 自定义域名’，这个随便自己写，满足域名规则的就可以，试了一下貌似暂不支持中文哈.例如</p>
<pre><code class="line-numbers language-hosts">121.40.237.xxx zh.computer
121.40.235.xxx home.computer</code></pre>
<p>然后，在远程桌面中直接输入<code>home.computer</code>域名就能连接上<code>121.40.235.xxx</code>电脑了.<br><img src="//gitee.com/guoke3915/zw/raw/master/p/bbed5435/19826068-67701279aa189961.png" alt></p>
<p>附：删除远程桌面连接记录：<br>打开注册表，找到<code>计算机\HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Default</code>，将右值不需要的值删了就可以了<br><img src="//gitee.com/guoke3915/zw/raw/master/p/bbed5435/19826068-85b90019b4adb336.png" alt></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Win 2012 远程卡在“正在加密远程连接”</title>
    <url>/p/57233631.html</url>
    <content><![CDATA[<p>最近在连Windows Server 2012 R2服务器的时候，有时正常一下就连上了，有时就会出现<code>正在加密远程连接</code>，等很久之后会弹出一个<code>内部错误</code>的连接失几诉提示。</p>
<p>解决办法：<br> 打开远程桌面窗口 -&gt; <code>显示选项</code> -&gt; <code>高级</code> -&gt; 服务器身份验证选择<code>连接且不显示警告</code><br><img src="//gitee.com/guoke3915/zw/raw/master/p/57233631/19826068-8d56b9f8eb3e883b.png" alt></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery中使用jsonp</title>
    <url>/p/2f0a2191.html</url>
    <content><![CDATA[<p>在跨域使用json数据的时候会遇到跨域问题，jQuery中就用jsonp来解决这个跨域。以前用的<code>$.getJSON</code>，后来改成jsonp后一直报错说<code>callback is not defined</code>未定义</p>
<pre><code class="line-numbers language-js">$.getJSON(&quot;http://xxx.com.cn?callback=?&quot;,function (json) {
           console.log( &quot;success&quot; );
});</code></pre>
<p>后来查了一下 <a href="https://api.jquery.com/jQuery.getJSON/#jsonp" target="_blank" rel="noopener">jQuery的官方文档</a>, 1.5之后的版本改了，jsonp的使用参考 <a href="https://api.jquery.com/jQuery.ajax/" target="_blank" rel="noopener">$.ajax()</a></p>
<p>然后直接使用<code>ajax</code>指定<code>callback</code>方法就可以了。</p>
<pre><code class="line-numbers language-js">$.ajax({
        type:&quot;GET&quot;,
        url:&quot;xxx.com.cn&quot;,
        dataType:&quot;jsonp&quot;,
        jsonp:&quot;callback&quot;,
        jsonpCallback:&quot;callback&quot;,
        success:function(json){
            console.log( &quot;success&quot; );
        }
    });</code></pre>
<ul>
<li>jsonp后面的<code>callback</code>值就是前面的<code>http://xxx.com.cn?callback=?</code>中的<code>callback</code>，</li>
<li>jsonpCallback后面的就是服务器json数据前的。</li>
</ul>
<p>在说一下服务器的’jsonp’数所格式吧。不管服务是php、java还是静态的jsonp文件，只要发送的数据用<code>callback(原始json数据)</code>包裹起来就行,这里的<code>callback</code>与请求时的<code>jsonpCallback</code>字段配置的一样就行了。<br>如原始json数据为:</p>
<pre><code class="line-numbers language-json">{
  &quot;id&quot;:1,
  &quot;name&quot;: &quot;过客&quot;
}</code></pre>
<p>jsonp数据为</p>
<pre><code class="line-numbers language-jsonp">callback(
  {
    &quot;id&quot;:1,
    &quot;name&quot;: &quot;过客&quot;
  }
)</code></pre>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo中添加类QQ空间旅游相册</title>
    <url>/p/2a7ceb64.html</url>
    <content><![CDATA[<p>身为一个喜欢拍照的猿，博空中怎么可能少了相册呢。<br>Hexo博客自身没有相册功能，网上找了一些资料都是瀑布流的样式较多，这不是我想要的，于是借鉴了 <a href="https://dp2px.com/2018/09/29/hexophotos/" target="_blank" rel="noopener">水寒写的添加瀑布流相册</a> 自己写了一个。先上几张图看一下效果（ps:css现学现卖拼凑出为的，页面效果有待优化哈，完整效果可以去我博客看<a href="https://zengwu.com.cn/photos/index.html">过愙相册</a>）</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/2a7ceb64/19826068-b151b157d4420d34.png" alt="相册目录页"></p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/2a7ceb64/19826068-6155639a68a1387e.png" alt="单个相册"></p>
<h2 id="1-创建页面和导航栏"><a href="#1-创建页面和导航栏" class="headerlink" title="1. 创建页面和导航栏"></a>1. 创建页面和导航栏</h2><p>进入博客根目录，用命令<code>hexo new page photos</code>新建相册页面 ，这样会在 /source/ 下创建 photos/index.md，在其中添加 type: picture。<br>在主题配置文件<code>themes\next\_config.yml</code>中对应位置 menu 里添加 photos: /photos || camera-retro ，这样生成后就有导航栏菜单了。<br>有了语言，还要到语言对应的目录中修改。</p>
<h2 id="2-json-文件处理图片信息"><a href="#2-json-文件处理图片信息" class="headerlink" title="2. json 文件处理图片信息"></a>2. json 文件处理图片信息</h2><h3 id="2-1-文件分析"><a href="#2-1-文件分析" class="headerlink" title="2.1 文件分析"></a>2.1 文件分析</h3><p>为了生成多级的相册，这里的目录分为二级。</p>
<ul>
<li>第一级目录是相册，目录名就是相册名。</li>
<li>第二级目录是分类目录，可以把同一时间或同一主题的放在一起，类似于QQ空间旅游相册中的地点分类。</li>
<li>如果没有第二级目录，则以相片的日期分类。</li>
<li>二级目录文件名如果带时间，如：2020-02-02.分类1。 拆分时间和目录名；如果不带时间，则用目录创建时间为分类时间，目录名为分类名</li>
</ul>
<p>目录结构如下：</p>
<pre><code class="line-numbers language-powershell"> 相册根目录
 ├─相册1
 │  │  图片1.jpg
 │  │  图片2.jpg
 │  │
 │  └─2020-02-02.分类1
 │          图片3.jpg
 │          图片4.jpg
 │
 └─相册2
         图片5.jpg
         图片6.jpg</code></pre>
<p>我们需要生成的目录json数据为：</p>
<pre><code class="line-numbers language-json">[{
         &quot;mini&quot;: &quot;/min&quot;,
         &quot;dir&quot;: &quot;相册2&quot;,
         &quot;date&quot;: &quot;2020-03-14&quot;,
          &quot;num&quot;: 2,
          &quot;cover&quot;: {
              &quot;url&quot;: &quot;/min/相册2/图片6.jpg&quot;,
              &quot;width&quot;: 1024,
              &quot;height&quot;: 768,
          }
         &quot;photos&quot;: [{
                 &quot;date&quot;: &quot;2020-02-12&quot;,
                 &quot;name&quot;: &quot;&quot;,
                 &quot;photo&quot;: [{
                         &quot;name&quot;: &quot;图片5&quot;,
                         &quot;url&quot;: &quot;/相册2/图片5.jpg&quot;
                     },{
                         &quot;name&quot;: &quot;图片6&quot;,
                         &quot;url&quot;: &quot;/相册2/图片6.jpg&quot;
                     }]
             }]
     },{
         &quot;mini&quot;: &quot;/min&quot;,
         &quot;dir&quot;: &quot;相册1&quot;,
         &quot;date&quot;: &quot;2020-03-14&quot;,
          &quot;num&quot;: 4,
          &quot;cover&quot;: {
              &quot;url&quot;: &quot;/min//相册1/图片2.jpg&quot;,
              &quot;width&quot;: 1024,
              &quot;height&quot;: 768,
          }
         &quot;photos&quot;: [{
                 &quot;date&quot;: &quot;2020-02-02&quot;,
                 &quot;name&quot;: &quot;分类1&quot;,
                 &quot;photo&quot;: [{
                         &quot;name&quot;: &quot;图片3&quot;,
                         &quot;url&quot;: &quot;/相册1/2020-02-02.分类1/图片3.jpg&quot;
                     },{
                         &quot;name&quot;: &quot;图片4&quot;,
                         &quot;url&quot;: &quot;/相册1/2020-02-02.分类1/图片4.jpg&quot;
                     }]
             },{
                 &quot;date&quot;: &quot;2020-02-27&quot;,
                 &quot;name&quot;: &quot;&quot;,
                 &quot;photo&quot;: [{
                         &quot;name&quot;: &quot;图片1&quot;,
                         &quot;url&quot;: &quot;/相册1/图片1.jpg&quot;
                     },{
                         &quot;name&quot;: &quot;图片2&quot;,
                         &quot;url&quot;: &quot;/相册1/图片2.jpg&quot;
                     }]
             }]
     }]</code></pre>
<h3 id="2-2-编写处理脚本"><a href="#2-2-编写处理脚本" class="headerlink" title="2.2 编写处理脚本"></a>2.2 编写处理脚本</h3><p>在博客根目录的 /scripts/ 文件夹下新建一个 photo.js 文件，内容如下</p>
<pre><code class="line-numbers language-js">const fs = require(&#39;fs&#39;)
const path = require(&#39;path&#39;)
const util = require(&#39;util&#39;)
const images = require(&quot;images&quot;);

// 默认相册图片根目录
const defaultRootPath = &#39;/source/photos&#39;;
// 默认是否开启缩略图
const defaultUseMini = true;
// 默认缩略图存放目录
const defaultMiniPath = &#39;/min&#39;

// 是否在hexo g状态
const isInHexo = &quot;undefined&quot; != typeof hexo;

if (isInHexo &amp;&amp; !hexo.config.photo.enable )
    return;

const promisifyReaddir = util.promisify(fs.readdir)
const promisifyStat = util.promisify(fs.stat)

// 图片格式
const photoExtname = [&#39;.jpg&#39;, &#39;.bmp&#39;, &#39;.png&#39;, &#39;.gif&#39;]

// 相册目录相对博客根目录，引用主题里的 photoPath 目录，如果没有则用 /source/photos
const rootPath = ((isInHexo &amp;&amp; hexo.config.photo.path) ? hexo.photo.config.path : defaultRootPath);

// 相册绝对路径
const photoPath = path.resolve(__dirname, &#39;..&#39; + rootPath);

// 是否使用缩略图，主题中存在
const useMini = (isInHexo &amp;&amp; hexo.config.photo.mini.enable) ? hexo.photo.mini.enable : defaultUseMini;
// 缩略图目录
const minPath = useMini ? ((isInHexo &amp;&amp; hexo.config.photo.mini.path) ? hexo.config.photo.mini.path : defaultMiniPath) : &#39;&#39;;

// 相册json数据
var photoArray = new Array();

async function init() {
    // 是否成生缩略图
    if (useMini) {
        deleteFolder(photoPath + minPath);
    }

    // 获取相册数据
    await getPhotoData()

    // 相册内按时间排序
    for (let i = 0; i &lt; photoArray.length; i++) {
        if (photoArray[i].photos == null) {
            continue;
        }

        photoArray[i].photos = photoArray[i].photos.sort(function (a, b) { return a.date &gt; b.date ? 1 : -1 })

        console.log(photoArray[i].date, photoArray[i].photos[0].date);
        // 刷新创建时间，不晚于最早的分类时间
        if (photoArray[i].date &gt; photoArray[i].photos[0].date) {
            photoArray[i].date = photoArray[i].photos[0].date
        }
    }
    photoArray = photoArray.sort(function (a, b) { return a.date &gt; b.date ? -1 : 1 })
    console.log(JSON.stringify(photoArray))

    // 写入jsonp数据
    fs.writeFile(photoPath + path.sep + &#39;photo.jsonp&#39;, &#39;callback(&#39;+JSON.stringify(photoArray)+&#39;)&#39;, function (err) {
        if (err) {
            return console.error(err);
        }
        console.log(&quot;数据写入成功！&quot;);
    });
}

// 获取相册数据
async function getPhotoData(proPath = &#39;&#39;) {
    const dir = await promisifyReaddir(photoPath + proPath)

    // 当前相册数据
    var photoData = null;

    // 相册名使用相册目录名
    var photoName = null;

    // 存在分类目录，
    //    分类目录没带时间，则用目录创建时间为分类时间，目录名为分类名
    //    分类目录存在时间，如：2020-02-02.分类1。 拆分时间和目录名
    // 分类名。
    var categoryName = &quot;&quot;;

    // 分类时间。
    var categoryDate = null;

    // 相册只有一层，非根目录相册直接加入到对应一级目录中
    if (proPath) {
        // 获取最后一级目录名
        let index = proPath.split(path.sep).join(&#39;/&#39;).lastIndexOf(&quot;\/&quot;);  //兼容两个平台 并获取最后位置index
        let lastDir = proPath.substring(index + 1, proPath.length); //截取获得结果

        // 获取第一次目录名，即 相册名
        index = proPath.substring(1).split(path.sep).join(&#39;/&#39;).indexOf(&quot;\/&quot;);
        photoName = index &gt; 0 ? proPath.substring(1, index + 1) : proPath.substring(1);

        // 最后一级目录与相册名相等，说明当前目录是相册目录，否当前目录为分类目录
        if (lastDir != photoName) {
            // 拆分目录名
            var tmp = lastDir.split(&#39;.&#39;);
            if (tmp.length &gt; 1) {
                categoryDate = new Date(tmp[0]).toISOString().substring(0, 10);
                categoryName = lastDir.substring(tmp[0].length + 1);
            }

            // 不存在时间格式或时间格式不对，都认为无效时间，以分类目录创建时间处理
            if (categoryDate == null) {
                categoryName = lastDir;
                const stat = await promisifyStat(`${photoPath}${proPath}`)
                categoryDate = stat.mtime.toISOString().substring(0, 10);
            }
        }

        for (let i = 0; i &lt; photoArray.length; i++) {
            if (photoArray[i].dir === photoName) {
                photoData = photoArray[i];
                if (!photoData.photos) {
                    photoData.photos = new Array()
                }
                break;
            }
        }
    }

    // 遍历目录中文件和文件夹
    for (let i = 0; i &lt; dir.length; i++) {
        const stat = await promisifyStat(path.resolve(photoPath + proPath, dir[i]))

        if (stat.isFile()) {
            // 根目录文件不处理，只处理子级以以下的图片文件
            if (proPath) {

                // 匹配图片后缀
                var ext = path.extname(dir[i]).toLowerCase();
                if (photoExtname.indexOf(ext) != -1) {
                    var name = path.basename(dir[i], ext)
                    var date = stat.mtime.toISOString().substring(0, 10)

                    // 相册分类数据
                    var photoCategory;
                    for (let j = 0; j &lt; photoData.photos.length; j++) {
                        // 根据时间和分类获取现在分类数据
                        if (photoData.photos[j].date == categoryDate &amp;&amp; photoData.photos[j].name == categoryName) {
                            photoCategory = photoData.photos[j];
                            if (!photoCategory.photo) {
                                photoCategory.photo = new Array();
                            }
                            break;
                        }
                    }

                    // 不存分类则创建
                    if (!photoCategory) {
                        photoCategory = {
                            date: categoryDate ? categoryDate : date,
                            name: categoryName ? categoryName : &quot;&quot;,
                            photo: new Array()
                        }
                        photoData.photos.push(photoCategory);
                    }

                     // 插入相片
                    let img = images(photoPath + proPath + path.sep + dir[i]);
                    photoCategory.photo.push({
                        name: name,
                        width: img.width(),
                        height: img.height(),
                        url: proPath + path.sep + dir[i]
                    })

                   // 更新相册信息
                    photoData.num++;
                    photoData.cover={
                        width: img.width(),
                        height: img.height(),
                        url: minPath + proPath + path.sep + dir[i]
                    }

                    if (useMini) {
                        var outPath = path.resolve(photoPath + minPath + path.sep + proPath + path.sep) + path.sep;
                        checkDirExist(outPath);
                        // 宽度小于1024的不缩放，大于1024的以宽度等比缩到1024
                        let width = img.width();
                        let height = img.height();
                        if(width&gt;1024){
                            height = 1024 * height / width;
                            width = 1024;
                        }
                        img.resize(width,height)
                            .save(outPath + path.sep + dir[i],{
                                quality: 50                    //保存图片到文件,图片质量为50
                            });
                    }
                }
            }
        } else if (stat.isDirectory()) {
            // 缩略图目录忽略
            if (path.sep + dir[i] === minPath) {
                continue;
            }

            if (!proPath) {
                // 根目录时创建相册
                var photoData = {
                    mini: minPath,
                    dir: dir[i],
                    date: stat.mtime.toISOString().substring(0, 10),
                    num: 0,
                    photos: new Array()
                }
                photoArray.push(photoData)
            }
            // 递归子目录
            await getPhotoData(proPath + path.sep + dir[i])
        }
    }
}

// 删除目录
function deleteFolder(filePath) {
    const files = []
    if (fs.existsSync(filePath)) {
        const files = fs.readdirSync(filePath)
        files.forEach((file) =&gt; {
            const nextFilePath = filePath + path.sep + file
            const states = fs.statSync(nextFilePath)
            if (states.isDirectory()) {
                //recurse
                deleteFolder(nextFilePath)
            } else {
                //delete file
                fs.unlinkSync(nextFilePath)
            }
        })
        fs.rmdirSync(filePath)
    }
}

// 判断目录是否存在，否存创建
function checkDirExist(folderpath) {
    const pathArr = folderpath.split(path.sep);
    let _path = &#39;&#39;;
    for (let i = 0; i &lt; pathArr.length; i++) {
        if (pathArr[i]) {
            _path += `${pathArr[i]}${path.sep}`;
            if (!fs.existsSync(_path)) {
                fs.mkdirSync(_path);
            }
        }
    }
}

init()</code></pre>
<p>在博客配置<code>_config.yml</code>中添加</p>
<pre><code class="line-numbers language-yml">photo:
  enable: false
  path: /source/photos/
  mini:
    enable: true
    path: /mini</code></pre>
<p>下载图片nodejs的插件</p>
<pre><code class="line-numbers language-powershell">npm install images</code></pre>
<p>配置说明</p>
<ul>
<li>photo.enable: 是否在<code>hexo g</code>时编译， 不是相册不是很次都有更新，也不需要每次遍相册的时候都来编译这个，所以加了一个标志控制使用 <code>hexo g</code>编译时编译相册，<code>false-不编译</code>，<code>true-编译</code></li>
<li>photo.path: 相册图片根目录,  如果不通过hexo编译，可以配置js脚本中的<code>defaultRootPath</code> </li>
<li>photo.mini.enable: 是否开启图片压缩生成缩略图。如果不通过hexo编译，可以配置js脚本中的<code>defaultUseMini</code> 配置</li>
<li>photo.mini.path: 缩略图生成的相对路径。如果开启了缩略图功能，这项不能添空，不然图片会被覆盖。 如果不通过hexo编译，可以配置js脚本中的<code>defaultMiniPath</code></li>
</ul>
<p>开启<code>photo.enable: true</code>直接<code>hexo g</code>，或者在根目录执行<code>node script/photo.js</code>就能生成json数据了，json数据在相册跟目录</p>
<h2 id="3-编写页面处理js脚本"><a href="#3-编写页面处理js脚本" class="headerlink" title="3. 编写页面处理js脚本"></a>3. 编写页面处理js脚本</h2><p>在 <code>/themes/next/source/js/src/</code> 目录下创建一个 <code>photo.js</code>，内容如下：</p>
<pre><code class="line-numbers language-js">const imgRoot = &#39;/photos&#39;
photo = {
    // 当前显示类型、dir-目录,photo-照片
    type: &#39;dir&#39;,

    // 相册索引
    photoIndex: 0,

    // 分类索引
    categoryIndex: 0,

    // 相册数据数组
    photoArray: null,
    //offset 每次加载照片数量，以分类为一个单位
    offset: 10,

    init: function () {
        var that = this;
        if (this.photoArray == null) {
            //这里设置的是刚才生成的 jsonp 文件路径
            // json文件如果用代码仓库做图床会出现跨域问题
            $.ajax({
                type:&quot;GET&quot;,
                url:imgRoot + &quot;/photo.jsonp&quot;,
                dataType:&quot;jsonp&quot;,
                jsonpCallback:&quot;callback&quot;,
                success:function(data){
                    photoArray = data;
                    that.randerDir();
                }
            });
        } else {
            this.randerDir();
        }

    },
    randerDir: function () {
        // 显示相册目录
        let data = photoArray;
        this.type = &#39;dir&#39;;
        $(&quot;.photo-div&quot;).empty();

        let li = &#39;&lt;div class=&quot;photo-box&quot;&gt;&#39;;
        for (let i = 0; i &lt; data.length; i++) {
            let cover = data[i].cover; // 封面
            let width = 275;    // 相册目录定宽
            let height = width * cover.height / cover.width;
            li += &#39;&lt;div class=&quot;photo-box-item&quot; style=&quot;width: &#39; + width + &#39;px&quot;&gt;&#39; +
                        &#39;&lt;div class=&quot;photo-box-item-click&quot; id=&quot;&#39; + i + &#39;&quot; style=&quot;height:&#39; + height + &#39;px&quot;&gt;&#39; +
                            &#39;&lt;img class=&quot;nofancybox&quot; style=&quot;padding: 0; border: none;&quot; src=&quot;&#39; + imgRoot + cover.url + &#39;&quot;/&gt;&#39; +
                        &#39;&lt;/div&gt;&#39; +
                        &#39;&lt;div&gt;&#39; + data[i].dir + &#39;&lt;/div&gt;&#39; +
                    &#39;&lt;/div&gt;&#39;
        }
        li += &#39;&lt;/div&gt;&#39;;
        $(&quot;.photo-div&quot;).append(li);
        this.minigrid();
    },
    render: function (page) {
        if (!photoArray || photoArray.length &lt;= this.photoIndex) {
            return;
        }

        // 相册数据
        var photoData = photoArray[this.photoIndex];
        this.type = &#39;photo&#39;;

        // 插入相册标题
        if (page == 1) {
            let li = &#39;&lt;div class=&quot;photo-title&quot;&gt;&#39; +
                &#39;&lt;div class=&quot;photo-title-text&quot;&gt;&#39; + photoData.dir + 
                &#39;&lt;a href=&quot;&quot; class=&quot;photo-back&quot;&gt;返回相册&lt;/a&gt;&#39;  +&#39;&lt;/div&gt;&#39; +
                &#39;&lt;div class=&quot;photo-title-desc&quot;&gt; 创建于&#39; + photoData.date + &#39;/ 共&#39; + photoData.num +&#39; 张&lt;/div&gt;&#39; +
                &#39;&lt;/div&gt;&#39;
            $(&quot;.photo-div&quot;).append(li);
        }

        let showCount = 0;
        for (let i = 0; i &lt; photoData.photos.length; i++) {
            // 分类
            photoCategory = photoData.photos[i];
            if (i &lt; this.categoryIndex) {
                // 跳过
                continue;
            } else if (page &lt;= i &amp;&amp; showCount&gt;=this.offset) {
                // 结束
                break;
            } else {
                // 加入分类信息
                this.categoryIndex++;
                let li = &#39;&lt;div class=&quot;photo-category-text&quot;&gt;&#39; +photoCategory.date + (photoCategory.name?&#39;| &#39;:&#39;&#39;)+photoCategory.name  + &#39;&lt;/div&gt;&#39; +
                    &#39;&lt;div class=&quot;photo-category photo-category-box-&#39; + this.categoryIndex + &#39;&quot;&gt;&#39;

                    li += &#39;&lt;/div&gt;&#39;
                    $(&quot;.photo-div&quot;).append(li);

                for (let j = 0; j &lt; photoCategory.photo.length; j++) {
                    showCount++;

                    // 相片数据
                    let data = photoCategory.photo[j];
                    let imgNameWithPattern = data.url;
                    let imgName = data.name;
                    let li = &#39;&lt;a data-fancybox=&quot;gallery&quot; href=&quot;&#39; +imgRoot + imgNameWithPattern  + &#39;?raw=true&quot; data-caption=&quot;&#39; + imgName + &#39;&quot;&gt;&#39; +
                    &#39;&lt;img style=&quot;padding: 0; border: none;&quot; src=&quot;&#39; + imgRoot + photoData.mini + imgNameWithPattern + &#39;&quot; alt=&quot;&#39; + imgName + &#39;&quot; title=&quot;&#39; + imgName + &#39;&quot;&gt;&lt;/a&gt;&#39;

                    $(&#39;.photo-category-box-&#39; + this.categoryIndex).append(li);
                    $(&#39;.photo-category-box-&#39; + this.categoryIndex).justifiedGallery({
                            rowHeight: 300,
                            margins: 4,
                            randomize: true
                        });
                }
            }
        }

        $(&quot;.photo-div&quot;).lazyload();
        this.minigrid();
    },
    minigrid: function () {

        // 使用 minigrid动态布局相册
        var grid = null;
        if (this.type == &quot;dir&quot;) {
            grid = new Minigrid({
                container: &#39;.photo-box&#39;,
                item: &#39;.photo-box-item&#39;,
                gutter: 12
            });
            grid.mount();
        }

        var that = this;

        // 监听窗口大小事件
        $(window).resize(function () {
            if (that.type == &quot;dir&quot;) {
                grid.mount();
            } 

            // 计算宽度是否加载新相片
            that.loading();
        });

        // 监听滚动事件
        $(window).on(&#39;scroll&#39;, function () {
            // 计算宽度是否加载新相片
            that.loading();
        });

        // 相册点击事件
        $(&quot;.photo-box-item-click&quot;).bind(&quot;click&quot;, function () {
            if (!photoArray || photoArray.length &lt;= this.id) {
                return;
            }

            $(&quot;.photo-div&quot;).empty();
            that.photoIndex = this.id;
            that.categoryIndex = 0;
            that.render(1)
        });

        // 返回相册事件
        $(&quot;.photo-back&quot;).bind(&quot;click&quot;, function () {
            if (!photoArray || photoArray.length &lt;= this.id) {
                return;
            }

            $(&quot;.photo-div&quot;).empty();
            that.randerDir();
            return false;
        });
    },

    // 判断滚动长度大于时加载新的
    loading: function () {
        if (this.type != &#39;photo&#39;) {
            return;
        }

        var scrollTop = $(window).scrollTop();
        if(scrollTop+$(window).height()&gt;$(&quot;.photo-div&quot;).height()){
            this.render(this.categoryIndex+1);
        }
    }
}
photo.init();</code></pre>
<p>这里imgRoot 配置相册相对网站的相对路径，也可以用图床填写图床的目录。<br>我用的是coding代码仓库为图床，这里可以配置</p>
<pre><code>const imgRoot = &#39;//guoke3915.coding.net/p/guoke3915/d/img/git/raw/master/photos&#39;</code></pre><h2 id="4-配置主题"><a href="#4-配置主题" class="headerlink" title="4. 配置主题"></a>4. 配置主题</h2><p>这里用到了几个第三方的布局js插件，所以在主题中配置一下。这里都引用了cdn的代码，也可以自己下过来放到自己的网站上。</p>
<ul>
<li>minigrid：等宽瀑布布局，用于相册目录布局</li>
<li>justifiedGallery： 画廊式图片布局，用于相册照片显示</li>
<li>fancybox：照片展示插件</li>
</ul>
<h3 id="4-1-引用js文件"><a href="#4-1-引用js文件" class="headerlink" title="4.1 引用js文件"></a>4.1 引用js文件</h3><p>修改<code>/themes/next/layout/_scripts/commons.swig</code>文件，在最后加入代码</p>
<pre><code class="line-numbers language-swig">{% if page.type ===&#39;picture&#39; %}
  &lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.jsdelivr.net/gh/zngw/cdn/minigrid.min.js&quot;&gt;&lt;/script&gt;
  &lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.jsdelivr.net/npm/justifiedGallery@3.7.0/dist/js/jquery.justifiedGallery.min.js&quot;&gt;&lt;/script&gt;
  &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/photo.js&quot;&gt;&lt;/script&gt;
{% endif %}</code></pre>
<h3 id="4-2-引用css文件"><a href="#4-2-引用css文件" class="headerlink" title="4.2 引用css文件"></a>4.2 引用css文件</h3><p>修改<code>themes\next\layout\_partials\head.swig</code>文件，在最后添加代码</p>
<pre><code class="line-numbers language-swig">{% if page.type ===&#39;picture&#39; %}
  &lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/justifiedGallery@3.7.0/dist/css/justifiedGallery.min.css&quot; /&gt;
{% endif %}</code></pre>
<h3 id="4-3-开启fancybox"><a href="#4-3-开启fancybox" class="headerlink" title="4.3 开启fancybox"></a>4.3 开启fancybox</h3><p>打开主题配置文件<code>themes\next\_config.yml</code>，<br>找到<code>fancybox:</code>设置为true<br>找到vendors:添加cdn地址</p>
<pre><code class="line-numbers language-yml">vendors:

  fancybox: //cdn.jsdelivr.net/gh/zngw/cdn/fancybox/jquery.fancybox.min.js
  fancybox_css: //cdn.jsdelivr.net/gh/zngw/cdn/fancybox/jquery.fancybox.min.css</code></pre>
<h2 id="5-修改CSS样式"><a href="#5-修改CSS样式" class="headerlink" title="5 修改CSS样式"></a>5 修改CSS样式</h2><p>找到<code>themes\next\source\css\_custom\custom.styl</code>文件，在后面添加</p>
<pre><code class="line-numbers language-css">.photo-box {
   width: 100%;
   max-width: 1040px;
   margin: 0 auto; 
   text-align: center;
}

.photo-box-item {
   overflow: hidden;
   transition: .3s ease-in-out;
   border-radius: 8px;
   background-color: #ddd;
}

.photo-box-item-img {
}
.photo-box-item-img img {
   transition: opacity 500ms ease-in
}

.photo-box-item .caption {
    visibility: hidden;
    position: absolute;
    bottom: 0;
    padding: 5px;
    background-color: #000000;
    left: 0;
    right: 0;
    margin: 0;
    color: white;
    font-size: 12px;
    font-weight: 300;
    font-family: sans-serif;
    opacity: 0.7;
}

/* 鼠标移动上去后显示提示框 */
.photo-box-item:hover .caption {
    visibility: visible;
}

.photo-box-item-click {
   overflow:hidden;
}
.photo-box-item-click img {
   obj-fit: cover;
   transition: opacity 500ms ease-in;
}

.photo-category-card {
   overflow: hidden;
   transition: .3s ease-in-out;
   border-radius: 8px;
   background-color: #ddd;
}

.photo-category-card-img {
}
.photo-category-card-img img {
   transition: opacity 500ms ease-in
}

.photo-category-card .caption {
    visibility: hidden;
    position: absolute;
    bottom: 0;
    padding: 5px;
    background-color: #000000;
    left: 0;
    right: 0;
    margin: 0;
    color: white;
    font-size: 12px;
    font-weight: 300;
    font-family: sans-serif;
    opacity: 0.7;
}

/* 鼠标移动上去后显示提示框 */
.photo-category-card:hover .caption {
    visibility: visible;
}

.photo-title-text {
   line-height: 54px; 
   background-color: #479ac7;
   color: white;
   font-size: 24px;
}

.photo-title-desc {
   line-height: 20px; 
   background-color: #479ac7;
   color: white;
   font-size: 12px;
}

.photo-back{     
   line-height: 34px; 
   margin-top: 10px;     
   position: absolute;
    display: inline-block;     
    right:10px;
    padding: 10px 10px;     
    border-radius: 4px;     
    background-color: #63b7ff;     
    color: #fff;     
    cursor: pointer;     
  }     
  .photo-back:hover{     
    background-color: #99c6ff;     
  } 

  .photo-category-text {
   line-height: 30px; 
   background-color: #f1fafa;
   color: #336699;;
   font-size: 18px;
}</code></pre>
<h2 id="6-部分图片禁用fancybox"><a href="#6-部分图片禁用fancybox" class="headerlink" title="6. 部分图片禁用fancybox"></a>6. 部分图片禁用fancybox</h2><p>相册目录中的图片需要点击事件，所以，这里的图片需要禁用fancybox。<br>加一个<code>nofancybox</code>类标签，<br>修改一下<code>theme\next\source\js\src\utils.js</code>文件<br>找到<code>wrapImageWithFancyBox: function</code>函数，在循环里加一句<code>if ($(this).hasClass(&#39;nofancybox&#39;)) return;</code></p>
<pre><code class="line-numbers language-js">  wrapImageWithFancyBox: function () {
    $(&#39;.content img&#39;)
      .not(&#39;[hidden]&#39;)
      .not(&#39;.group-picture img, .post-gallery img&#39;)
      .each(function () {
        if ($(this).hasClass(&#39;nofancybox&#39;)) return;     // 就加这一句就可以了
        var $image = $(this);
        var imageTitle = $image.attr(&#39;title&#39;);
        var $imageWrapLink = $image.parent(&#39;a&#39;);</code></pre>
<p>然后在用的时候，img标签中加入 ‘<img class="nofancybox" style="padding: 0; border: none;" src>‘ </p>
<h2 id="7-放入相册"><a href="#7-放入相册" class="headerlink" title="7. 放入相册"></a>7. 放入相册</h2><p>在第一步创建好的 <code>/source/photos/index.md</code> 文档中编辑好自己需要的相册页面内容，在需要放置相册的位置加入以下内容即可</p>
<pre><code class="line-numbers language-md">---
title: 相册
date: 2020-03-14 12:26:45
type: picture
---
&lt;div class=&quot;photo-div&quot;&gt;&lt;/div&gt;</code></pre>
<h2 id="8-编译发布"><a href="#8-编译发布" class="headerlink" title="8. 编译发布"></a>8. 编译发布</h2><p>最后 <code>hexo clean &amp;&amp; hexo deploy -g</code> 就可以把相册页设置好了<br>如果不想编译博客，可以用<code>node script/photo.js</code>直接编译。然后的动将’/source/photos’目录下的所有图片文件夹、缩略图文件夹以及 photo.json数据文件直接上传就可以更新相册了。</p>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
      </tags>
  </entry>
  <entry>
    <title>Echarts世界地图中文名称</title>
    <url>/p/e9b22066.html</url>
    <content><![CDATA[<p>用echarts可以很简单的实现世界地图，但是，官方的js版本中国家的名称都是英文的，所以这里需要自己设定nameMap来实现国家名中文转换。<br>先上效果图，下面是根据腾讯数据自己写的<a href="http://zengwu.com.cn/p/whjy.html">全球疫情现存情况图</a><br><img src="//gitee.com/guoke3915/zw/raw/master/p/e9b22066/19826068-9582379ff1e62455-1583896384485.png" alt></p>
<p>可以不需要安装什么插件，直接引用官方示例中的js链接就可以了。</p>
<pre><code class="line-numbers language-js">&lt;script src=&quot;//cdn.jsdelivr.net/gh/zngw/cdn/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;!-- 引入 echarts.js --&gt;
&lt;script src=&quot;//cdn.jsdelivr.net/gh/zngw/cdn/echarts/echarts.min.js&quot;&gt;&lt;/script&gt;
&lt;!--引入地图数据js文件，引入后会自动注册地图名字和数据--&gt;
&lt;script src=&quot;//cdn.jsdelivr.net/gh/zngw/cdn/echarts/world.min.js&quot;&gt;&lt;/script&gt;

&lt;div class=&quot;container&quot;&gt;
    &lt;!--为echarts准备一个dom容器--&gt;
    &lt;div id=&quot;myEcharts&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;script&gt;
    let nameMap = {
        Afghanistan: &#39;阿富汗&#39;,
        Singapore: &#39;新加坡&#39;,
        Angola: &#39;安哥拉&#39;,
        Albania: &#39;阿尔巴尼亚&#39;,
        &#39;United Arab Emirates&#39;: &#39;阿联酋&#39;,
        Argentina: &#39;阿根廷&#39;,
        Armenia: &#39;亚美尼亚&#39;,
        &#39;French Southern and Antarctic Lands&#39;:
            &#39;法属南半球和南极领地&#39;,
        Australia: &#39;澳大利亚&#39;,
        Austria: &#39;奥地利&#39;,
        Azerbaijan: &#39;阿塞拜疆&#39;,
        Burundi: &#39;布隆迪&#39;,
        Belgium: &#39;比利时&#39;,
        Benin: &#39;贝宁&#39;,
        &#39;Burkina Faso&#39;: &#39;布基纳法索&#39;,
        Bangladesh: &#39;孟加拉国&#39;,
        Bulgaria: &#39;保加利亚&#39;,
        &#39;The Bahamas&#39;: &#39;巴哈马&#39;,
        &#39;Bosnia and Herzegovina&#39;: &#39;波斯尼亚和黑塞哥维那&#39;,
        Belarus: &#39;白俄罗斯&#39;,
        Belize: &#39;伯利兹&#39;,
        Bermuda: &#39;百慕大&#39;,
        Bolivia: &#39;玻利维亚&#39;,
        Brazil: &#39;巴西&#39;,
        Brunei: &#39;文莱&#39;,
        Bhutan: &#39;不丹&#39;,
        Botswana: &#39;博茨瓦纳&#39;,
        &#39;Central African Republic&#39;: &#39;中非共和国&#39;,
        Canada: &#39;加拿大&#39;,
        Switzerland: &#39;瑞士&#39;,
        Chile: &#39;智利&#39;,
        China: &#39;中国&#39;,
        &#39;Ivory Coast&#39;: &#39;象牙海岸&#39;,
        Cameroon: &#39;喀麦隆&#39;,
        &#39;Democratic Republic of the Congo&#39;: &#39;刚果民主共和国&#39;,
        &#39;Republic of the Congo&#39;: &#39;刚果共和国&#39;,
        Colombia: &#39;哥伦比亚&#39;,
        &#39;Costa Rica&#39;: &#39;哥斯达黎加&#39;,
        Cuba: &#39;古巴&#39;,
        &#39;Northern Cyprus&#39;: &#39;北塞浦路斯&#39;,
        Cyprus: &#39;塞浦路斯&#39;,
        &#39;Czech Republic&#39;: &#39;捷克共和国&#39;,
        Germany: &#39;德国&#39;,
        Djibouti: &#39;吉布提&#39;,
        Denmark: &#39;丹麦&#39;,
        &#39;Dominican Republic&#39;: &#39;多明尼加共和国&#39;,
        Algeria: &#39;阿尔及利亚&#39;,
        Ecuador: &#39;厄瓜多尔&#39;,
        Egypt: &#39;埃及&#39;,
        Eritrea: &#39;厄立特里亚&#39;,
        Spain: &#39;西班牙&#39;,
        Estonia: &#39;爱沙尼亚&#39;,
        Ethiopia: &#39;埃塞俄比亚&#39;,
        Finland: &#39;芬兰&#39;,
        Fiji: &#39;斐&#39;,
        &#39;Falkland Islands&#39;: &#39;福克兰群岛&#39;,
        France: &#39;法国&#39;,
        Gabon: &#39;加蓬&#39;,
        &#39;United Kingdom&#39;: &#39;英国&#39;,
        Georgia: &#39;格鲁吉亚&#39;,
        Ghana: &#39;加纳&#39;,
        Guinea: &#39;几内亚&#39;,
        Gambia: &#39;冈比亚&#39;,
        &#39;Guinea Bissau&#39;: &#39;几内亚比绍&#39;,
        Greece: &#39;希腊&#39;,
        Greenland: &#39;格陵兰&#39;,
        Guatemala: &#39;危地马拉&#39;,
        &#39;French Guiana&#39;: &#39;法属圭亚那&#39;,
        Guyana: &#39;圭亚那&#39;,
        Honduras: &#39;洪都拉斯&#39;,
        Croatia: &#39;克罗地亚&#39;,
        Haiti: &#39;海地&#39;,
        Hungary: &#39;匈牙利&#39;,
        Indonesia: &#39;印度尼西亚&#39;,
        India: &#39;印度&#39;,
        Ireland: &#39;爱尔兰&#39;,
        Iran: &#39;伊朗&#39;,
        Iraq: &#39;伊拉克&#39;,
        Iceland: &#39;冰岛&#39;,
        Israel: &#39;以色列&#39;,
        Italy: &#39;意大利&#39;,
        Jamaica: &#39;牙买加&#39;,
        Jordan: &#39;约旦&#39;,
        Japan: &#39;日本&#39;,
        Kazakhstan: &#39;哈萨克斯坦&#39;,
        Kenya: &#39;肯尼亚&#39;,
        Kyrgyzstan: &#39;吉尔吉斯斯坦&#39;,
        Cambodia: &#39;柬埔寨&#39;,
        Kosovo: &#39;科索沃&#39;,
        Kuwait: &#39;科威特&#39;,
        Laos: &#39;老挝&#39;,
        Lebanon: &#39;黎巴嫩&#39;,
        Liberia: &#39;利比里亚&#39;,
        Libya: &#39;利比亚&#39;,
        &#39;Sri Lanka&#39;: &#39;斯里兰卡&#39;,
        Lesotho: &#39;莱索托&#39;,
        Lithuania: &#39;立陶宛&#39;,
        Luxembourg: &#39;卢森堡&#39;,
        Latvia: &#39;拉脱维亚&#39;,
        Morocco: &#39;摩洛哥&#39;,
        Moldova: &#39;摩尔多瓦&#39;,
        Madagascar: &#39;马达加斯加&#39;,
        Mexico: &#39;墨西哥&#39;,
        Macedonia: &#39;马其顿&#39;,
        Mali: &#39;马里&#39;,
        Myanmar: &#39;缅甸&#39;,
        Montenegro: &#39;黑山&#39;,
        Mongolia: &#39;蒙古&#39;,
        Mozambique: &#39;莫桑比克&#39;,
        Mauritania: &#39;毛里塔尼亚&#39;,
        Malawi: &#39;马拉维&#39;,
        Malaysia: &#39;马来西亚&#39;,
        Namibia: &#39;纳米比亚&#39;,
        &#39;New Caledonia&#39;: &#39;新喀里多尼亚&#39;,
        Niger: &#39;尼日尔&#39;,
        Nigeria: &#39;尼日利亚&#39;,
        Nicaragua: &#39;尼加拉瓜&#39;,
        Netherlands: &#39;荷兰&#39;,
        Norway: &#39;挪威&#39;,
        Nepal: &#39;尼泊尔&#39;,
        &#39;New Zealand&#39;: &#39;新西兰&#39;,
        Oman: &#39;阿曼&#39;,
        Pakistan: &#39;巴基斯坦&#39;,
        Panama: &#39;巴拿马&#39;,
        Peru: &#39;秘鲁&#39;,
        Philippines: &#39;菲律宾&#39;,
        &#39;Papua New Guinea&#39;: &#39;巴布亚新几内亚&#39;,
        Poland: &#39;波兰&#39;,
        &#39;Puerto Rico&#39;: &#39;波多黎各&#39;,
        &#39;North Korea&#39;: &#39;北朝鲜&#39;,
        Portugal: &#39;葡萄牙&#39;,
        Paraguay: &#39;巴拉圭&#39;,
        Qatar: &#39;卡塔尔&#39;,
        Romania: &#39;罗马尼亚&#39;,
        Russia: &#39;俄罗斯&#39;,
        Rwanda: &#39;卢旺达&#39;,
        &#39;Western Sahara&#39;: &#39;西撒哈拉&#39;,
        &#39;Saudi Arabia&#39;: &#39;沙特阿拉伯&#39;,
        Sudan: &#39;苏丹&#39;,
        &#39;South Sudan&#39;: &#39;南苏丹&#39;,
        Senegal: &#39;塞内加尔&#39;,
        &#39;Solomon Islands&#39;: &#39;所罗门群岛&#39;,
        &#39;Sierra Leone&#39;: &#39;塞拉利昂&#39;,
        &#39;El Salvador&#39;: &#39;萨尔瓦多&#39;,
        Somaliland: &#39;索马里兰&#39;,
        Somalia: &#39;索马里&#39;,
        &#39;Republic of Serbia&#39;: &#39;塞尔维亚&#39;,
        Suriname: &#39;苏里南&#39;,
        Slovakia: &#39;斯洛伐克&#39;,
        Slovenia: &#39;斯洛文尼亚&#39;,
        Sweden: &#39;瑞典&#39;,
        Swaziland: &#39;斯威士兰&#39;,
        Syria: &#39;叙利亚&#39;,
        Chad: &#39;乍得&#39;,
        Togo: &#39;多哥&#39;,
        Thailand: &#39;泰国&#39;,
        Tajikistan: &#39;塔吉克斯坦&#39;,
        Turkmenistan: &#39;土库曼斯坦&#39;,
        &#39;East Timor&#39;: &#39;东帝汶&#39;,
        &#39;Trinidad and Tobago&#39;: &#39;特里尼达和多巴哥&#39;,
        Tunisia: &#39;突尼斯&#39;,
        Turkey: &#39;土耳其&#39;,
        &#39;United Republic of Tanzania&#39;: &#39;坦桑尼亚&#39;,
        Uganda: &#39;乌干达&#39;,
        Ukraine: &#39;乌克兰&#39;,
        Uruguay: &#39;乌拉圭&#39;,
        &#39;United States&#39;: &#39;美国&#39;,
        Uzbekistan: &#39;乌兹别克斯坦&#39;,
        Venezuela: &#39;委内瑞拉&#39;,
        Vietnam: &#39;越南&#39;,
        Vanuatu: &#39;瓦努阿图&#39;,
        &#39;West Bank&#39;: &#39;西岸&#39;,
        Yemen: &#39;也门&#39;,
        &#39;South Africa&#39;: &#39;南非&#39;,
        Zambia: &#39;赞比亚&#39;,
        Korea: &#39;韩国&#39;,
        Tanzania: &#39;坦桑尼亚&#39;,
        Zimbabwe: &#39;津巴布韦&#39;,
        Congo: &#39;刚果&#39;,
        &#39;Central African Rep.&#39;: &#39;中非&#39;,
        Serbia: &#39;塞尔维亚&#39;,
        &#39;Bosnia and Herz.&#39;: &#39;波黑&#39;,
        &#39;Czech Rep.&#39;: &#39;捷克&#39;,
        &#39;W. Sahara&#39;: &#39;西撒哈拉&#39;,
        &#39;Lao PDR&#39;: &#39;老挝&#39;,
        &#39;Dem.Rep.Korea&#39;: &#39;朝鲜&#39;,
        &#39;Falkland Is.&#39;: &#39;福克兰群岛&#39;,
        &#39;Timor-Leste&#39;: &#39;东帝汶&#39;,
        &#39;Solomon Is.&#39;: &#39;所罗门群岛&#39;,
        Palestine: &#39;巴勒斯坦&#39;,
        &#39;N. Cyprus&#39;: &#39;北塞浦路斯&#39;,
        Aland: &#39;奥兰群岛&#39;,
        &#39;Fr. S. Antarctic Lands&#39;: &#39;法属南半球和南极陆地&#39;,
        Mauritius: &#39;毛里求斯&#39;,
        Comoros: &#39;科摩罗&#39;,
        &#39;Eq. Guinea&#39;: &#39;赤道几内亚&#39;,
        &#39;Guinea-Bissau&#39;: &#39;几内亚比绍&#39;,
        &#39;Dominican Rep.&#39;: &#39;多米尼加&#39;,
        &#39;Saint Lucia&#39;: &#39;圣卢西亚&#39;,
        Dominica: &#39;多米尼克&#39;,
        &#39;Antigua and Barb.&#39;: &#39;安提瓜和巴布达&#39;,
        &#39;U.S. Virgin Is.&#39;: &#39;美国原始岛屿&#39;,
        Montserrat: &#39;蒙塞拉特&#39;,
        Grenada: &#39;格林纳达&#39;,
        Barbados: &#39;巴巴多斯&#39;,
        Samoa: &#39;萨摩亚&#39;,
        Bahamas: &#39;巴哈马&#39;,
        &#39;Cayman Is.&#39;: &#39;开曼群岛&#39;,
        &#39;Faeroe Is.&#39;: &#39;法罗群岛&#39;,
        &#39;IsIe of Man&#39;: &#39;马恩岛&#39;,
        Malta: &#39;马耳他共和国&#39;,
        Jersey: &#39;泽西&#39;,
        &#39;Cape Verde&#39;: &#39;佛得角共和国&#39;,
        &#39;Turks and Caicos Is.&#39;: &#39;特克斯和凯科斯群岛&#39;,
        &#39;St. Vin. and Gren.&#39;: &#39;圣文森特和格林纳丁斯&#39;
    },

        option = {
            title: {
                text: &#39;全球疫情图:现存&#39;,
                left: &#39;center&#39;
            },
            tooltip: {
                trigger: &#39;item&#39;
            },
            visualMap: {
                type: &#39;piecewise&#39;,
                pieces: [
                    { min: 10000, max: 1000000, label: &#39;&gt;=10000&#39;, color: &#39;#550101&#39; },
                    { min: 1000, max: 9999, label: &#39;1000-9999&#39;, color: &#39;#a92919&#39; },
                    { min: 500, max: 999, label: &#39;500-999&#39;, color: &#39;#af4e41&#39; },
                    { min: 100, max: 499, label: &#39;100-499&#39;, color: &#39;#ee7263&#39; },
                    { min: 10, max: 99, label: &#39;10-99&#39;, color: &#39;#f5bba7&#39; },
                    { min: 1, max: 9, label: &#39;1-9&#39;, color: &#39;#fdf2d5&#39; },
                    { min: 0, max: 0, label: &#39;无确证&#39;, color: &#39;#fefefe&#39; },
                ],
                color: [&#39;#E0022B&#39;, &#39;#E09107&#39;, &#39;#A3E00B&#39;]
            },
            nameMap: nameMap,
            toolbox: {
                show: true,
                orient: &#39;vertical&#39;,
                left: &#39;right&#39;,
                top: &#39;center&#39;,
                feature: {
                    mark: { show: true },
                    dataView: { show: true, readOnly: false },
                    restore: { show: true },
                    saveAsImage: { show: true }
                }
            },
            roamController: {
                show: true,
                left: &#39;right&#39;,
                mapTypeControl: {
                    &#39;world&#39;: true
                }
            },
            series: [
                {
                    name: &#39;现存数&#39;,
                    type: &#39;map&#39;,
                    mapType: &#39;world&#39;,
                    roam: false,
                    label: {
                        show: false,   // 这里就不在地图上显示名字了，200多个会晕的
                        color: &#39;rgb(0, 0, 0)&#39;
                    },
                    data: []
                }
            ]
        };

    //获取数据
    function getData() {
        $.ajax({
            url: &quot;https://view.inews.qq.com/g2/getOnsInfo?name=disease_h5&quot;,
            dataType: &quot;jsonp&quot;,
            success: function (data) {
                var res = data.data || &quot;&quot;;
                res = JSON.parse(res);
                var newArr = [];
                if (res) {
                    for (var i = 0; i &lt; res.areaTree.length; i++) {
                        var json = {
                            name: res.areaTree[i].name,
                            value: res.areaTree[i].total.confirm - res.areaTree[i].total.dead - res.areaTree[i].total.heal,
                        }
                        newArr.push(json)
                    }
                    //使用指定的配置项和数据显示图表
                    myChart.setOption({
                        series: [
                            {
                                name: &#39;现存数&#39;,
                                type: &#39;map&#39;,
                                mapType: &#39;world&#39;,
                                roam: false,
                                label: {
                                    fontSize: 8,
                                    show: false,
                                    color: &#39;rgb(0, 0, 0)&#39;
                                },
                                data: newArr
                            }
                        ]
                    });

                }
            }
        })
    }
    //初始化echarts实例
    var myEcharts = document.getElementById(&#39;myEcharts&#39;);
    var myChart = echarts.init(myEcharts);
    myChart.setOption(option);
    getData();
&lt;/script&gt;</code></pre>
<p>要注意的是data 数据国家名字和nameMap映射国家名字保持一致，否则就不会显示了。</p>
<p>nameMap数据来源于: <a href="https://juejin.im/post/5c80cefde51d453552133eed" target="_blank" rel="noopener">https://juejin.im/post/5c80cefde51d453552133eed</a></p>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB重复数据插入性能测试</title>
    <url>/p/e929662a.html</url>
    <content><![CDATA[<p>有些时候我们在多线程或多服务器处理的时候，难免会遇到写相同的数据到数据库中的情况。下面测试三种不同方式来插入数据的耗时。</p>
<a id="more"></a>

<h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1. 环境"></a>1. 环境</h2><ul>
<li>硬件：阿里云 4 vCPU（Intel(R) Xeon(R) Platinum 8269CY CPU @ 2.50GHz） 16 GiB</li>
<li>系统：CentOS 7.6 64位</li>
<li>MongoDB：3.2.8版本，直接安装默认配置，未做任何优化</li>
<li>Java环境：JDB 8u92</li>
<li>MongoDB驱动： mongodb-driver 3.8.2<br>ps: 突然发现环境都好老了，不想更新不想折腾哈。</li>
</ul>
<h2 id="2-生成数据"><a href="#2-生成数据" class="headerlink" title="2. 生成数据"></a>2. 生成数据</h2><p>这里测试插入10万条数据，其中有1万条是重复的。数据包含一个_id、一个随机字符串、一个随机浮点数和一个时间戳。</p>
<pre><code class="line-numbers language-java">    final int count = 100000;   // 10万条 总数据量
    final int repeat = 10000;   // 1万条 重复数据

    // 生成 9万 条随机数据 列表
    List&lt;Document&gt; list = new ArrayList&lt;&gt;();
    for (int i = 0; i &lt; count-repeat; i++){
        Document test = new Document(&quot;_id&quot;,&quot;&quot;+i)
            .append(&quot;data1&quot;, UUID.randomUUID().toString())
            .append(&quot;date2&quot;,Math.random())
            .append(&quot;time&quot;,System.currentTimeMillis());

        list.add(test);
    }

    // 随机抽取 1万 条数据随机插入列表
    for (int i = 0; i &lt; repeat; i++){
        list.add((int)(Math.random()*list.size()),list.get((int)(Math.random()*list.size())));
    }</code></pre>
<h2 id="3-三种插入数据方式"><a href="#3-三种插入数据方式" class="headerlink" title="3. 三种插入数据方式"></a>3. 三种插入数据方式</h2><p>以循环单条插入数据做测试，db连接一次并不释放。</p>
<pre><code class="line-numbers language-java">    // 第一种使用update，直接插入并更新操作
    long time0 = System.currentTimeMillis();
    MongoCollection&lt;Document&gt; test1 = db.getCollection(&quot;test1&quot;);
    for (Document data : list){
        UpdateOptions updateOptions = new UpdateOptions();
        updateOptions.upsert(true);
        test1.replaceOne(eq(&quot;_id&quot;, data.get(&quot;_id&quot;)), data, updateOptions);
    }

    long time1 = System.currentTimeMillis();
    Log.trace(&quot;test1 time=&quot;+(time1-time0));

    // 第二种，先查找，不存在就插入
    MongoCollection&lt;Document&gt; test2 = db.getCollection(&quot;test2&quot;);
    for (Document data : list){
        if(test2.find(eq(&quot;_id&quot;, data.get(&quot;_id&quot;))).first() == null){
            test2.insertOne(data);
        }
    }
    long time2 = System.currentTimeMillis();
    Log.trace(&quot;test2 time=&quot;+(time2-time1));

    // 第三种，直接插入，try catch异常不处理
    MongoCollection&lt;Document&gt; test3 = db.getCollection(&quot;test3&quot;);
    for (Document data : list){
        try{
            test3.insertOne(data);
        }catch (Exception e){
        }
    }
    long time3 = System.currentTimeMillis();
    Log.trace(&quot;test3 time=&quot;+(time3-time2));</code></pre>
<h2 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h2><ul>
<li>10万条其中1万条重复得到耗时为</li>
</ul>
<pre><code class="line-numbers language-text">2020-03-10 01:29:33.046 [TRACE] - test1 time=20055
2020-03-10 01:30:01.720 [TRACE] - test2 time=28674
2020-03-10 01:30:16.502 [TRACE] - test3 time=14782</code></pre>
<ul>
<li><p>如果数据表中已经存在这10万条数据，再插入重复的10万条数据的耗时</p>
<pre><code class="line-numbers language-text">2020-03-10 01:36:17.880 [TRACE] - test1 time=21037
2020-03-10 01:36:32.812 [TRACE] - test2 time=14932
2020-03-10 01:36:50.868 [TRACE] - test3 time=18056</code></pre>
</li>
<li><p>数据理改到100万条数据，其中1万条重复测试</p>
<pre><code class="line-numbers language-text">2020-03-10 01:45:24.889 [TRACE] - test1 time=175464
2020-03-10 01:50:16.116 [TRACE] - test2 time=291226
2020-03-10 01:52:37.650 [TRACE] - test3 time=141535</code></pre>
</li>
</ul>
<h2 id="5-结论"><a href="#5-结论" class="headerlink" title="5. 结论"></a>5. 结论</h2><ul>
<li>第一种：使用update方式插入数据，这个耗时与是否存在当前数据相差不是很大，它是先查找到对应数据，如果存在修改，不存在就插入新数据。</li>
<li>第二种：先查找就更容易理解了，如果数据库里都有了，省了一步骤插入操作，所以会快很多。</li>
<li>第三种：如果数据库存在的量少，就直接插入了。如果存在的量大，多的消耗就是java处理insertOne抛出的异常上了。</li>
<li>综上所述：在确定数据重复存不超过一半的情况下，使用先查找的方法最耗时。而直接插入捕获异常的方式最省时。如果纯重复数据，建议用第三种方法来处理。</li>
</ul>
]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>MongoDB</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo next自适应宽屏</title>
    <url>/p/f008f066.html</url>
    <content><![CDATA[<p>电脑屏幕都1920*1080了，用的next主题配置中只有960，文章只有可怜的700，这样看起来挺别扭的，特别是有代码块的时候，基本上都显示不完要滑动。可以通过修改next主题的文章页面宽度来解决。<br>打开<code>\themes\next\source/css/_schemes/Picses/_layout.styl</code>在文件末尾添加代码</p>
<pre><code class="line-numbers language-css">// 以下为新增代码！！修改post宽度
header{ width: 80% !important; }
header.post-header {
  width: auto !important;
}
.container .main-inner { width: 80%; }
.content-wrap { width: calc(100% - 260px); }

.header {
  +tablet() {
    width: auto !important;
  }
  +mobile() {
    width: auto !important;
  }
}

.container .main-inner {
  +tablet() {
    width: auto !important;
  }
  +mobile() {
    width: auto !important;
  }
}

.content-wrap {
  +tablet() {
    width: 100% !important;
  }
  +mobile() {
    width: 100% !important;
  }
}</code></pre>
<p>文章参考：<a href="https://ihaoming.top/archives/9a935f57.html" target="_blank" rel="noopener">https://ihaoming.top/archives/9a935f57.html</a></p>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
      </tags>
  </entry>
  <entry>
    <title>JS计算两日期相差年月日</title>
    <url>/p/9c7b1943.html</url>
    <content><![CDATA[<p>有时候需要用到二个日期相差几年几月几日，直接把年月日相差的时候会出现负数的情况。这个时间就和我们做数这减法一样，向高位去借。但这里和数字不同的是，借来的值不是固定的，比如一月有31天，正常2月是28天，闰年2月是29天。把这些情况考虑一下得出的代码</p>
<pre><code class="line-numbers language-js">function diffDate(date1, date2) {
    let begin = new Date(date1);
    let end = new Date(date2);

    // 如果开始时间晚于结束时间，交换日期，并记录交换状态
    let swap = false;
    if (begin &gt; end) {
        let tmp = begin;
        begin = end;
        end = tmp;
        swap = true;
    }

    // 分别取二个日期的年、月、日值
    let d1 = begin.getDate();
    let m1 = begin.getMonth() + 1;
    let y1 = begin.getFullYear();
    let d2 = end.getDate();
    let m2 = end.getMonth() + 1;
    let y2 = end.getFullYear();

    // 获取每个月的天数，这里要注意一下闰年的2月
    var getMonthDays = function (y, m) {
        var aMonthDays = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        if (m == 2 &amp;&amp; ((y % 400 == 0) || (y % 4 == 0 &amp;&amp; y % 100 != 0))) {
            return 29;
        }
        return aMonthDays[m];
    };

    let y, m, d
    let tempD = 0
    let tmpM = 0
    let tmpY = 0

    // 计算日，不足时向月份借
    if (d2 &gt;= d1) {
        d = d2 - d1
    } else {
        tmpM = -1
        d = getMonthDays(y1, m1) + d2 - d1
    }

    // 计算月，不足时向年份借
    if (m2 + tmpM &gt;= m1) {
        m = m2 + tmpM - m1
    } else {
        tmpY = -1
        m = 12 + m2 + tmpM - m1
    }

    // 计算年
    y = y2 + tmpY - y1

    // 拼接距离字符串 输出格式如：&quot;5天&quot;， &quot;5月 05天&quot;， &quot;5年 05月 05日&quot;
    let str = &quot;&quot;;
    if (y &gt; 0) {
        str = y + &#39;年 &#39; + (&quot;0&quot; + m).substr(-2) + &quot;月 &quot; + (&quot;0&quot; + d).substr(-2) + &#39;天 &#39;
    } else if (m &gt; 0) {
        str = m + &quot;月 &quot; + (&quot;0&quot; + d).substr(-2) + &#39;天 &#39;
    } else if (d &gt; 0) {
        str = d + &#39;天 &#39;
    }

    // 完整输出
    return date1 + &quot; 比 &quot; + date2 + (swap ? &quot; 晚 &quot; : &quot; 早 &quot;) + str;
}</code></pre>
<p>测试</p>
<pre><code class="line-numbers language-js">// 输出：1988-09-04 比 2020-03-08 早 31年 06月 04天 
console.log(diffDate(&quot;1988-09-04&quot;,&quot;2020-03-08&quot;));

// 输出：2020-02-02 比 2011-11-02 晚 8年 03月 00天 
console.log(diffDate(&quot;2020-02-02&quot;,&quot;2011-11-02&quot;));</code></pre>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>全球新增疫情图</title>
    <url>/p/whjy.html</url>
    <content><![CDATA[  <script src="//cdn.jsdelivr.net/gh/zngw/cdn/jquery.min.js"></script>
  <!-- 引入 echarts.js -->
  <script src="//cdn.jsdelivr.net/gh/zngw/cdn/echarts/echarts.min.js"></script>
  <!--引入中国的地图数据js文件，引入后会自动注册地图名字和数据-->
  <script src="//cdn.jsdelivr.net/gh/zngw/cdn/echarts/china.min.js"></script>
  <script src="//cdn.jsdelivr.net/gh/zngw/cdn/echarts/world.min.js"></script>
  <div class="container">
    <div>数据来源<a href="https://news.qq.com/zt2020/page/feiyan.htm" target="_blank"> 腾讯新闻 </a></div>
    <div id="uptime"></div>
    <button id="btnChinaNew" type="button">中国新增</button>
    <button id="btnChinaNow" type="button">中国现存</button>
    <button id="btnWorldNew" type="button">全球新增</button>
    <button id="btnWorldNow" type="button">全球现存</button>
    <!--为echarts准备一个dom容器-->
    <div id="myEcharts"></div>
    <div id="myList"></div>
    </div>
    <script>
        let nameMap = {
                    Afghanistan: '阿富汗',
                    Singapore: '新加坡',
                    Angola: '安哥拉',
                    Albania: '阿尔巴尼亚',
                    'United Arab Emirates': '阿联酋',
                    Argentina: '阿根廷',
                    Armenia: '亚美尼亚',
                    'French Southern and Antarctic Lands':
                        '法属南半球和南极领地',
                    Australia: '澳大利亚',
                    Austria: '奥地利',
                    Azerbaijan: '阿塞拜疆',
                    Burundi: '布隆迪',
                    Belgium: '比利时',
                    Benin: '贝宁',
                    'Burkina Faso': '布基纳法索',
                    Bangladesh: '孟加拉国',
                    Bulgaria: '保加利亚',
                    'The Bahamas': '巴哈马',
                    'Bosnia and Herzegovina': '波斯尼亚和黑塞哥维那',
                    Belarus: '白俄罗斯',
                    Belize: '伯利兹',
                    Bermuda: '百慕大',
                    Bolivia: '玻利维亚',
                    Brazil: '巴西',
                    Brunei: '文莱',
                    Bhutan: '不丹',
                    Botswana: '博茨瓦纳',
                    'Central African Republic': '中非共和国',
                    Canada: '加拿大',
                    Switzerland: '瑞士',
                    Chile: '智利',
                    China: '中国',
                    'Ivory Coast': '象牙海岸',
                    Cameroon: '喀麦隆',
                    'Democratic Republic of the Congo': '刚果民主共和国',
                    'Republic of the Congo': '刚果共和国',
                    Colombia: '哥伦比亚',
                    'Costa Rica': '哥斯达黎加',
                    Cuba: '古巴',
                    'Northern Cyprus': '北塞浦路斯',
                    Cyprus: '塞浦路斯',
                    'Czech Republic': '捷克共和国',
                    Germany: '德国',
                    Djibouti: '吉布提',
                    Denmark: '丹麦',
                    'Dominican Republic': '多明尼加共和国',
                    Algeria: '阿尔及利亚',
                    Ecuador: '厄瓜多尔',
                    Egypt: '埃及',
                    Eritrea: '厄立特里亚',
                    Spain: '西班牙',
                    Estonia: '爱沙尼亚',
                    Ethiopia: '埃塞俄比亚',
                    Finland: '芬兰',
                    Fiji: '斐',
                    'Falkland Islands': '福克兰群岛',
                    France: '法国',
                    Gabon: '加蓬',
                    'United Kingdom': '英国',
                    Georgia: '格鲁吉亚',
                    Ghana: '加纳',
                    Guinea: '几内亚',
                    Gambia: '冈比亚',
                    'Guinea Bissau': '几内亚比绍',
                    Greece: '希腊',
                    Greenland: '格陵兰',
                    Guatemala: '危地马拉',
                    'French Guiana': '法属圭亚那',
                    Guyana: '圭亚那',
                    Honduras: '洪都拉斯',
                    Croatia: '克罗地亚',
                    Haiti: '海地',
                    Hungary: '匈牙利',
                    Indonesia: '印度尼西亚',
                    India: '印度',
                    Ireland: '爱尔兰',
                    Iran: '伊朗',
                    Iraq: '伊拉克',
                    Iceland: '冰岛',
                    Israel: '以色列',
                    Italy: '意大利',
                    Jamaica: '牙买加',
                    Jordan: '约旦',
                    Japan: '日本',
                    Kazakhstan: '哈萨克斯坦',
                    Kenya: '肯尼亚',
                    Kyrgyzstan: '吉尔吉斯斯坦',
                    Cambodia: '柬埔寨',
                    Kosovo: '科索沃',
                    Kuwait: '科威特',
                    Laos: '老挝',
                    Lebanon: '黎巴嫩',
                    Liberia: '利比里亚',
                    Libya: '利比亚',
                    'Sri Lanka': '斯里兰卡',
                    Lesotho: '莱索托',
                    Lithuania: '立陶宛',
                    Luxembourg: '卢森堡',
                    Latvia: '拉脱维亚',
                    Morocco: '摩洛哥',
                    Moldova: '摩尔多瓦',
                    Madagascar: '马达加斯加',
                    Mexico: '墨西哥',
                    Macedonia: '马其顿',
                    Mali: '马里',
                    Myanmar: '缅甸',
                    Montenegro: '黑山',
                    Mongolia: '蒙古',
                    Mozambique: '莫桑比克',
                    Mauritania: '毛里塔尼亚',
                    Malawi: '马拉维',
                    Malaysia: '马来西亚',
                    Namibia: '纳米比亚',
                    'New Caledonia': '新喀里多尼亚',
                    Niger: '尼日尔',
                    Nigeria: '尼日利亚',
                    Nicaragua: '尼加拉瓜',
                    Netherlands: '荷兰',
                    Norway: '挪威',
                    Nepal: '尼泊尔',
                    'New Zealand': '新西兰',
                    Oman: '阿曼',
                    Pakistan: '巴基斯坦',
                    Panama: '巴拿马',
                    Peru: '秘鲁',
                    Philippines: '菲律宾',
                    'Papua New Guinea': '巴布亚新几内亚',
                    Poland: '波兰',
                    'Puerto Rico': '波多黎各',
                    'North Korea': '北朝鲜',
                    Portugal: '葡萄牙',
                    Paraguay: '巴拉圭',
                    Qatar: '卡塔尔',
                    Romania: '罗马尼亚',
                    Russia: '俄罗斯',
                    Rwanda: '卢旺达',
                    'Western Sahara': '西撒哈拉',
                    'Saudi Arabia': '沙特阿拉伯',
                    Sudan: '苏丹',
                    'South Sudan': '南苏丹',
                    Senegal: '塞内加尔',
                    'Solomon Islands': '所罗门群岛',
                    'Sierra Leone': '塞拉利昂',
                    'El Salvador': '萨尔瓦多',
                    Somaliland: '索马里兰',
                    Somalia: '索马里',
                    'Republic of Serbia': '塞尔维亚',
                    Suriname: '苏里南',
                    Slovakia: '斯洛伐克',
                    Slovenia: '斯洛文尼亚',
                    Sweden: '瑞典',
                    Swaziland: '斯威士兰',
                    Syria: '叙利亚',
                    Chad: '乍得',
                    Togo: '多哥',
                    Thailand: '泰国',
                    Tajikistan: '塔吉克斯坦',
                    Turkmenistan: '土库曼斯坦',
                    'East Timor': '东帝汶',
                    'Trinidad and Tobago': '特里尼达和多巴哥',
                    Tunisia: '突尼斯',
                    Turkey: '土耳其',
                    'United Republic of Tanzania': '坦桑尼亚',
                    Uganda: '乌干达',
                    Ukraine: '乌克兰',
                    Uruguay: '乌拉圭',
                    'United States': '美国',
                    Uzbekistan: '乌兹别克斯坦',
                    Venezuela: '委内瑞拉',
                    Vietnam: '越南',
                    Vanuatu: '瓦努阿图',
                    'West Bank': '西岸',
                    Yemen: '也门',
                    'South Africa': '南非',
                    Zambia: '赞比亚',
                    Korea: '韩国',
                    Tanzania: '坦桑尼亚',
                    Zimbabwe: '津巴布韦',
                    Congo: '刚果',
                    'Central African Rep.': '中非',
                    Serbia: '塞尔维亚',
                    'Bosnia and Herz.': '波黑',
                    'Czech Rep.': '捷克',
                    'W. Sahara': '西撒哈拉',
                    'Lao PDR': '老挝',
                    'Dem.Rep.Korea': '朝鲜',
                    'Falkland Is.': '福克兰群岛',
                    'Timor-Leste': '东帝汶',
                    'Solomon Is.': '所罗门群岛',
                    Palestine: '巴勒斯坦',
                    'N. Cyprus': '北塞浦路斯',
                    Aland: '奥兰群岛',
                    'Fr. S. Antarctic Lands': '法属南半球和南极陆地',
                    Mauritius: '毛里求斯',
                    Comoros: '科摩罗',
                    'Eq. Guinea': '赤道几内亚',
                    'Guinea-Bissau': '几内亚比绍',
                    'Dominican Rep.': '多米尼加',
                    'Saint Lucia' : '圣卢西亚',
                    Dominica: '多米尼克',
                    'Antigua and Barb.': '安提瓜和巴布达',
                    'U.S. Virgin Is.': '美国原始岛屿',
                    Montserrat: '蒙塞拉特',
                    Grenada: '格林纳达',
                    Barbados: '巴巴多斯',
                    Samoa: '萨摩亚',
                    Bahamas: '巴哈马',
                    'Cayman Is.': '开曼群岛',
                    'Faeroe Is.': '法罗群岛',
                    'IsIe of Man': '马恩岛',
                    Malta: '马耳他共和国',
                    Jersey: '泽西',
                    'Cape Verde': '佛得角共和国',
                    'Turks and Caicos Is.': '特克斯和凯科斯群岛',
                    'St. Vin. and Gren.': '圣文森特和格林纳丁斯'
                },
        // 中国新增配置
        optionNew = {
            title: {
                text: '中国疫情图:新增',
                left: 'center'
            },
            tooltip: {
                trigger: 'item'
            },
            legend: {
                orient: 'vertical',
                left: 'left',
                data: ['中国疫情图:新增']
            },
            visualMap: {
                type: 'piecewise',
                pieces: [
                    { min: 50, max: 1000000, label: '>50', color: '#FF0000' },
                    { min: 10, max: 49, label: '10-49', color: '#ee7263' },
                    { min: 5, max: 9, label: '5-9', color: '#f5bba7' },
                    { min: 1, max: 4, label: '1-4', color: '#ffff00' },
                    { min: 0, max: 0, label: '无', color: '#93F89B' },
                    { min: -1, max: -1, label: '未更新', color: '#EEEEEE' },
                ],
                color: ['#E0022B', '#E09107', '#A3E00B']
            },
            toolbox: {
                show: true,
                orient: 'vertical',
                left: 'right',
                top: 'center',
                feature: {
                    mark: { show: true },
                    dataView: { show: true, readOnly: false },
                    restore: { show: true },
                    saveAsImage: { show: true }
                }
            },
            roamController: {
                show: true,
                left: 'right',
                mapTypeControl: {
                    'china': true
                }
            },
            series: [
                {
                    name: '新增数',
                    type: 'map',
                    mapType: 'china',
                    roam: false,
                    label: {
                        show: true,
                        color: 'rgb(249, 249, 249)'
                    },
                    data: []
                }
            ]
        };
        // 中国现存配置
        optionNow = {
            title: {
                text: '中国疫情图:现存',
                left: 'center'
            },
            tooltip: {
                trigger: 'item'
            },
            visualMap: {
                type: 'piecewise',
                pieces: [
                    { min: 1000, max: 1000000, label: '>1000', color: '#a92919' },
                    { min: 500, max: 999, label: '500-999', color: '#af4e41' },
                    { min: 100, max: 499, label: '100-499', color: '#ee7263' },
                    { min: 10, max: 99, label: '10-99', color: '#f5bba7' },
                    { min: 1, max: 9, label: '1-9', color: '#fdf2d5' },
                    { min: 0, max: 0, label: '无确诊', color: '#fefefe' },
                ],
                color: ['#E0022B', '#E09107', '#A3E00B']
            },
            toolbox: {
                show: true,
                orient: 'vertical',
                left: 'right',
                top: 'center',
                feature: {
                    mark: { show: true },
                    dataView: { show: true, readOnly: false },
                    restore: { show: true },
                    saveAsImage: { show: true }
                }
            },
            roamController: {
                show: true,
                left: 'right',
                mapTypeControl: {
                    'china': true
                }
            },
            series: [
                {
                    name: '现存数',
                    type: 'map',
                    mapType: 'china',
                    roam: false,
                    label: {
                        show: true,
                        color: 'rgb(0, 0, 0)'
                    },
                    data: []
                }
            ]
        };
        // 全球新增
        optionWorldNew = {
            title: {
                text: '全球疫情图:新增',
                left: 'center'
            },
            tooltip: {
                trigger: 'item'
            },
            visualMap: {
                type: 'piecewise',
                pieces: [
                    { min: 10000, max: 1000000, label: '>=10000', color: '#FF0000' },
                    { min: 1000, max: 9999, label: '1000-9999', color: '#ee7263' },
                    { min: 100, max: 999, label: '100-999', color: '#f5bba7' },
                    { min: 1, max: 99, label: '1-99', color: '#ffff00' },
                    { min: -1, max: -1, label: '未更新', color: '#EEEEEE' },
                ],
                color: ['#E0022B', '#E09107', '#A3E00B']
            },
            nameMap:nameMap,          
            toolbox: {
                show: true,
                orient: 'vertical',
                left: 'right',
                top: 'center',
                feature: {
                    mark: { show: true },
                    dataView: { show: true, readOnly: false },
                    restore: { show: true },
                    saveAsImage: { show: true }
                }
            },
            roamController: {
                show: true,
                left: 'right',
                mapTypeControl: {
                    'world': true
                }
            },
            series: [
                {
                    name: '新增数',
                    type: 'map',
                    mapType: 'world',
                    roam: false,
                    label: {
                        show: false,
                        color: 'rgb(0, 0, 0)'
                    },
                    data: []
                }
            ]
        };
        // 全球现存
        optionWorldNow = {
            title: {
                text: '全球疫情图:现存',
                left: 'center'
            },
            tooltip: {
                trigger: 'item'
            },
            visualMap: {
                type: 'piecewise',
                pieces: [
                    { min: 100000, max: 10000000, label: '大于10万', color: '#550101' },
                    { min: 1000, max: 99999, label: '10000-99999', color: '#a92919' },
                    { min: 1000, max: 9999, label: '1000-9999', color: '#af4e41' },
                    { min: 100, max: 999, label: '100-9999', color: '#ee7263' },
                    { min: 10, max: 99, label: '10-99', color: '#f5bba7' },
                    { min: 1, max: 9, label: '1-9', color: '#fdf2d5' },
                    { min: 0, max: 0, label: '无确证', color: '#fefefe' },
                ],
                color: ['#E0022B', '#E09107', '#A3E00B']
            },
            nameMap:nameMap,          
            toolbox: {
                show: true,
                orient: 'vertical',
                left: 'right',
                top: 'center',
                feature: {
                    mark: { show: true },
                    dataView: { show: true, readOnly: false },
                    restore: { show: true },
                    saveAsImage: { show: true }
                }
            },
            roamController: {
                show: true,
                left: 'right',
                mapTypeControl: {
                    'world': true
                }
            },
            series: [
                {
                    name: '现存数',
                    type: 'map',
                    mapType: 'world',
                    roam: false,
                    label: {
                        show: false,
                        color: 'rgb(0, 0, 0)'
                    },
                    data: []
                }
            ]
        };
        function getColor(type,num){
            switch(type){
                case TypeChinaNew:{
                    if(num>=50){
                        return '#FF0000'
                    }else if(num>=10){
                        return '#ee7263'
                    }else if(num>=5){
                        return '#f5bba7'
                    }else if(num>=1){
                        return '#d1d116'
                    }else{
                        return '#000000'
                    }
                }
                case TypeChinaNow:{
                    if(num>=1000){
                        return '#ee0000'
                    }else if(num>=500){
                        return '#a92919'
                    }else if(num>=100){
                        return '#af4e41'
                    }else if(num>=10){
                        return '#ee7263'
                    }else if(num>=1){
                        return '#f5bba7'
                    }else{
                        return '#000000'
                    }
                }
                case TypeWorldNew:{
                    if(num>=10000){
                        return '#ee0000'
                    }else if(num>=1000){
                        return '#a92919'
                    }else if(num>=100){
                        return '#af4e41'
                    }else if(num>=10){
                        return '#ee7263'
                    }else if(num>=1){
                        return '#f5bba7'
                    }else{
                        return '#000000'
                    }
                }
                case TypeWorldNow:{
                    if(num>=100000){
                        return '#550101'
                    }else if(num>=10000){
                        return '#a92919'
                    }else if(num>=1000){
                        return '#af4e41'
                    }else if(num>=100){
                        return '#ee7263'
                    }else if(num>=1){
                        return '#f5bba7'
                    }else{
                        return '#000000'
                    }
                }
            }
        }
        var isWidescreen = content.offsetWidth>400;
        var TypeChinaNew = 1;
        var TypeChinaNow = 2;
        var TypeWorldNew = 3;
        var TypeWorldNow = 4;
        var showType = TypeChinaNew;
        var ChinaDataUrl = 'https://view.inews.qq.com/g2/getOnsInfo?name=disease_h5';
        //var WorldDataUrl = 'https://view.inews.qq.com/g2/getOnsInfo?name=disease_foreign';
        var WorldDataUrl='https://api.inews.qq.com/newsqa/v1/automation/foreign/country/ranklist';
        var ChinaData = null;
        var WorldData = null;
        //获取数据
        function getData(url, success) {
            $.ajax({
                url: url,
                dataType: "jsonp",
                success: function (data) {
                    //  console.log(data.data)
                    var res = data.data || "";
                    res = JSON.parse(res);
                    if(success){
                        success(res)
                    }
                }
            })
        }
        function showData(type){
                    var newArr = [];
                    if (ChinaData) {
                        //获取到各个省份的数据
                        if (ChinaData.lastUpdateTime) {
                            var contentHtml = "更新时间：" + ChinaData.lastUpdateTime;
                            contentHtml += "<table>"
                            contentHtml += "<tr><td><span>中国数据</span></td><td><span>当前数据</span></td><td><span>相比昨天</span></td></tr>"
                            contentHtml += "<tr><td><span>现存确诊</span></td><td><span style='color: rgb(247, 76, 49); '>"+ChinaData.chinaTotal.nowConfirm+"</span></td><td><span style='color: rgb(247, 76, 49);'>"+(ChinaData.chinaAdd.nowConfirm>0?"+":"")+ChinaData.chinaAdd.nowConfirm+"</span></td></tr>"
                            contentHtml += "<tr><td><span>累计确诊</span></td><td><span style='color: rgb(174, 33, 44);'>"+ChinaData.chinaTotal.confirm+"</span></td><td><span style='color: rgb(174, 33, 44);'>"+(ChinaData.chinaAdd.confirm>0?"+":"")+ChinaData.chinaAdd.confirm+"</span></td></tr>"
                            contentHtml += "<tr><td><span>现存疑似</span></td><td><span style='color: rgb(247, 130, 7);'>"+ChinaData.chinaTotal.suspect+"</span></td><td><span style='color: rgb(247, 130, 7);'>"+(ChinaData.chinaAdd.suspect>0?"+":"")+ChinaData.chinaAdd.suspect+"</span></td></tr>"
                            contentHtml += "<tr><td><span>现存重症</span></td><td><span style='color: rgb(162, 90, 78);'>"+ChinaData.chinaTotal.nowSevere+"</span></td><td><span style='color: rgb(162, 90, 78);'>"+(ChinaData.chinaAdd.nowSevere>0?"+":"")+ChinaData.chinaAdd.nowSevere+"</span></td></tr>"
                            contentHtml += "<tr><td><span>累计死亡</span></td><td><span style='color: rgb(93, 112, 146);'>"+ChinaData.chinaTotal.dead+"</span></td><td><span style='color: rgb(93, 112, 146);'>"+(ChinaData.chinaAdd.dead>0?"+":"")+ChinaData.chinaAdd.dead+"</span></td></tr>"
                            contentHtml += "<tr><td><span>累计治愈</span></td><td><span style='color: rgb(40, 183, 163);'>"+ChinaData.chinaTotal.heal+"</span></td><td><span style='color: rgb(40, 183, 163);'>"+(ChinaData.chinaAdd.heal>0?"+":"")+ChinaData.chinaAdd.heal+"</span></td></tr>"
                            contentHtml += "</table>"
                            document.getElementById("uptime").innerHTML = contentHtml
                        }
                        var province = ChinaData.areaTree[0].children;
                        if (type == TypeChinaNew) {
                            myChart.setOption(optionNew);
                            for (var i = 0; i < province.length; i++) {
                                var json = {
                                    name: province[i].name,
                                    value: province[i].today.isUpdated ? province[i].today.confirm : "未更新"
                                }
                                newArr.push(json)
                            }
                            //使用指定的配置项和数据显示图表
                            myChart.setOption({
                                series: [
                                    {
                                        name: '新增数',
                                        type: 'map',
                                        mapType: 'china',
                                        roam: false,
                                        label: {
                                            fontSize: 8,
                                            show: true,
                                            color: 'rgb(0, 0, 0)'
                                        },
                                        data: newArr
                                    }
                                ]
                            });
                            var newList = []
                            for (var i = 0; i < province.length; i++) {
                                if(province[i].children.length<=1){
                                    if(province[i].today.isUpdated && province[i].today.confirm>0){
                                        var newData={
                                            name:province[i].name,
                                            num:province[i].today.confirm,
                                        }
                                        newList.push(newData);
                                    }
                                }else{
                                    for(var j = 0; j < province[i].children.length; j++){
                                        var city = province[i].children[j];
                                        if(city.today.isUpdated && city.today.confirm>0){
                                            var newData={
                                                name:province[i].name+"."+city.name,
                                                num:city.today.confirm,
                                            }
                                            newList.push(newData);
                                        }
                                    }
                                }
                            }
                            newList.sort(function(a,b){
                                return b.num-a.num
                            })
                            var newHtml = "<table><thead><tr><td><span>城市</span></td><td><span>今日新增</span></td></tr></thead><tbody>"
                            for(var i = 0; i < newList.length; i++){
                                newHtml += "<tr><td><span>"+newList[i].name+"</span></td><td><span style='color: "+getColor(type,newList[i].num)+"; font='>"+newList[i].num+"</span></td></tr>"
                            }
                            newHtml += "</tbody></table>"
                            document.getElementById("myList").innerHTML = newHtml
                        } else if( type == TypeChinaNow) {
                            myChart.setOption(optionNow);
                            for (var i = 0; i < province.length; i++) {
                                var json = {
                                    name: province[i].name,
                                    value: province[i].total.confirm - province[i].total.dead - province[i].total.heal
                                }
                                newArr.push(json)
                            }
                            //使用指定的配置项和数据显示图表
                            myChart.setOption({
                                series: [
                                    {
                                        name: '现存数',
                                        type: 'map',
                                        mapType: 'china',
                                        roam: false,
                                        label: {
                                            fontSize: 8,
                                            show: true,
                                            color: 'rgb(0, 0, 0)'
                                        },
                                        data: newArr
                                    }
                                ]
                            });
                            var newList = []
                            for (var i = 0; i < province.length; i++) {
                                var newData={
                                    name:province[i].name,
                                    num:province[i].total.confirm - province[i].total.dead - province[i].total.heal,
                                    confirm:province[i].total.confirm,
                                    heal:province[i].total.heal,
                                    dead:province[i].total.dead,
                                }
                                if(newData.num>0){
                                    newList.push(newData);
                                }
                            }
                            newList.sort(function(a,b){
                                return b.num-a.num
                            })
                            var newHtml = '<table style="font-size: 12px;"><thead><tr>'+(isWidescreen?'<td><span>中国数据</span></td>':'')+'<td><span>省</span></td><td><span>当前现存</span></td><td><span>累计确证</span></td><td><span>累计治愈</span></td><td><span>累计死亡</span></td></tr></thead><tbody>'
                            for(var i = 0; i < newList.length; i++){
                                newHtml += "<tr>"+(isWidescreen?"<td><span>"+(i+1)+"</span></td>":"")
                                +"<td><span>"+newList[i].name+"</span></td>"
                                +"<td><span style='color: "+getColor(type,newList[i].num)+";'>"+newList[i].num+"</span></td>"
                                +"<td><span style='color: rgb(174, 33, 44);'>"+newList[i].confirm+"</span></td>"
                                +"<td><span style='color: rgb(40, 183, 163);'>"+newList[i].heal+"</span></td>"
                                +"<td><span style='color: rgb(93, 112, 146);'>"+newList[i].dead+"</span></td></tr>"
                            }
                            newHtml += "</tbody></table>"
                            document.getElementById("myList").innerHTML = newHtml
                        }
                    }
                    if(WorldData){
                        if(type == TypeWorldNew){
                            myChart.setOption(optionWorldNew);
                            var newList = []
                            for (var i = 0; i < WorldData.length; i++) {
                                let c = WorldData[i]
                                var json = {
                                    name: c.name,
                                    value: c.confirmAdd 
                                }
                                newArr.push(json)
                            }
                            if(ChinaData){
                                var json = {
                                    name: '中国',
                                    value: ChinaData.chinaAdd.confirm
                                }
                                newArr.push(json)
                            }
                            //使用指定的配置项和数据显示图表
                            myChart.setOption({
                                series: [
                                    {
                                        name: '新增数',
                                        type: 'map',
                                        mapType: 'world',
                                        roam: false,
                                        label: {
                                            fontSize: 8,
                                            show: false,
                                            color: 'rgb(0, 0, 0)'
                                        },
                                        data: newArr
                                    }
                                ]
                            });
                        }else if(type == TypeWorldNow){
                            myChart.setOption(optionWorldNow);
                            if(ChinaData){
                                var json = {
                                    name: '中国',
                                    value: ChinaData.chinaTotal.nowConfirm
                                }
                                newArr.push(json)
                            }
                            for (var i = 0; i < WorldData.length; i++) {
                                let c = WorldData[i]
                                var json = {
                                    name: c.name,
                                    value: c.nowConfirm,
                                }
                                newArr.push(json)
                            }
                            //使用指定的配置项和数据显示图表
                            myChart.setOption({
                                series: [
                                    {
                                        name: '现存数',
                                        type: 'map',
                                        mapType: 'world',
                                        roam: false,
                                        label: {
                                            fontSize: 8,
                                            show: false,
                                            color: 'rgb(0, 0, 0)'
                                        },
                                        data: newArr
                                    }
                                ]
                            });
                        }
                        if(type == TypeWorldNew || type == TypeWorldNow){
                            var newList = []
                            if(ChinaData){
                                var newData={
                                    date:ChinaData.lastUpdateTime.substring(5,10).replace('-','.'),
                                    name:'中国',
                                    num:ChinaData.chinaTotal.nowConfirm,
                                    confirm: ChinaData.chinaTotal.confirm,
                                    heal: ChinaData.chinaTotal.heal,
                                    dead: ChinaData.chinaTotal.dead,
                                    add:ChinaData.chinaAdd.confirm
                                }
                                newList.push(newData);
                            }
                            for (var i = 0; i < WorldData.length; i++) {
                                let c = WorldData[i]
                                var newData={
                                    date:c.date,
                                    name: c.name,
                                    num: c.nowConfirm,
                                    confirm: c.confirm,
                                    heal: c.heal,
                                    dead: c.dead,
                                    add: c.confirmAdd
                                }
                                newList.push(newData);
                            }
                            if(type == TypeWorldNow){
                                newList.sort(function(a,b){
                                    return b.num-a.num
                                })
                            }else if(type == TypeWorldNew ){
                                newList.sort(function(a,b){
                                     if(a.add=='-')
                                        return 1;
                                    else if(b.add=='-')
                                        return -1;
                                    return b.add-a.add
                                })
                            }
                            var newHtml ='<table   style="font-size: 12px;"><thead><tr>'+(isWidescreen?'<td style="padding:1px"><span>全球</span></td><td style="padding:1px"><span>更新日期</span></td>':'')+'<td style="padding:1px"><span>国家</span></td><td style="padding:1px"><span>新增</span></td><td style="padding:1px"><span>现存</span></td><td style="padding:1px"><span>确证</span></td><td style="padding:1px"><span>治愈</span></td><td style="padding:1px"><span>死亡</span></td></tr></thead><tbody>'
                            for(var i = 0; i < newList.length; i++){
                                newHtml += "<tr>"+(isWidescreen?"<td><span>"+(i+1)+"</span></td><td><span>"+newList[i].date+"</span></td>":"")
                                +"<td style='padding:1px'><span>"+newList[i].name+"</span></td>"
                                +"<td style='padding:1px'><span style='color: "+getColor(TypeWorldNew,newList[i].add)+";'>"+newList[i].add+"</span></td>"
                                +"<td style='padding:1px'><span style='color: "+getColor(TypeWorldNow,newList[i].num)+";'>"+newList[i].num+"</span></td>"
                                +"<td style='padding:1px'><span style='color: rgb(174, 33, 44);'>"+newList[i].confirm+"</span></td>"
                                +"<td style='padding:1px'><span style='color: rgb(40, 183, 163);'>"+newList[i].heal+"</span></td>"
                                +"<td style='padding:1px'><span style='color: rgb(93, 112, 146);'>"+newList[i].dead+"</span></td></tr>"
                            }
                            newHtml += "</tbody></table>"
                            document.getElementById("myList").innerHTML = newHtml
                        }
                    }
        }
        //初始化echarts实例
        var myEcharts = document.getElementById('myEcharts');
        var resizeWorldMapContainer = function () {
            //用于使chart自适应高度和宽度,通过窗体高宽计算容器高宽
            isWidescreen = content.offsetWidth>400;
            if(isWidescreen){
                myEcharts.style.width = content.offsetWidth+'px';
                myEcharts.style.height = content.offsetWidth*3/4+'px';
            }else{
                myEcharts.style.left = -40+'px'
                myEcharts.style.width = (content.offsetWidth+40)+'px';
                myEcharts.style.height = (content.offsetWidth+40)*3/4+'px';
            }
        };
        resizeWorldMapContainer ();
        var myChart = echarts.init(myEcharts);
        myChart.setOption(optionNew);
        let param = window.location.hash;
        if(param && param.length>1){
            param= decodeURIComponent(param.substring(1));
        }
       $.getJSON(WorldDataUrl,function(data){
            WorldData=data.data;
            if(param=='global-new'){
                showData(TypeWorldNew);
            }else if(param=='global-now'){
                showData(TypeWorldNow);
            }
        });
        // getData(WorldDataUrl, function(data){
        //     WorldData=data;
        //     if(param=='global-new'){
        //         showData(TypeWorldNew);
        //     }else if(param=='global-now'){
        //         showData(TypeWorldNow);
        //     }
        // });      
        getData(ChinaDataUrl, function(data){
            ChinaData=data;
            if(param==null ){
                showData(TypeChinaNew);
            }else if(param!='china-new'){
                showData(TypeChinaNew);
            }else if(param!='china-now'){
                showData(TypeChinaNow);
            }
        });      
        // 事件
        $(function () {
          window.onresize = function () {
            resizeWorldMapContainer();
            myChart.resize();
          };
          $("#btnChinaNew").click(function () {
            showData(TypeChinaNew);
            window.location.replace('#china-new');
          });
          $("#btnChinaNow").click(function () {
            showData(TypeChinaNow);
            window.location.replace('#china-now');
          });
          $("#btnWorldNew").click(function () {
            showData(TypeWorldNew);
            window.location.replace('#global-new');
          });
          $("#btnWorldNow").click(function () {
            showData(TypeWorldNow);
            window.location.replace('#global-now');
          });
        })
    </script>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>懒or迟钝</title>
    <url>/p/d0d8c84b.html</url>
    <content><![CDATA[<p>越来越懒了，已经在家躺了一个半月了，除了抱着电脑瞎折腾一会，懒的连自己的心情也不想去打理。<br>很久都没有写发自内心的声音了，也不想去想自己的在想什么。<br>也许这叫麻木不仁，也许在逃避，不愿想一些复杂伤感的事情。<br>都觉得自己的脑子都秀逗了，笨了。<br>在逐渐想起那一段时期事情的时候，也许我就开始学会遗忘了，不再去想起那些痛苦。<br>慢慢习惯只记得美好的事物，忘记忧伤。<br>也不愿更深刻的想问题，害怕把记忆深处的东西又拉扯出来。<br>有人说，自从Ta的事件之后，我就变了很多。<br>我一直都没有察觉，原来我现在的态度，是因为Ta。<br>一直也以为自己会不懂得爱情，所以对之处于迷茫的态度，或者对之不自信。<br>有人说，我看起来很坚强。可是谁又知道在坚强的外壳下是藏着软弱的心，<br>坚强只是怕被伤害。<br>有人说，有时的你像个小孩。<br>是的，我希望自己能成熟些，希望这样才能更好的保护自己。<br>因为觉得只有自己才能帮自己，别人，谁我又靠的住？<br>说来，发现自己一直是一个太理性的人，都快忘了什么叫做感性。<br>有时候，也很想任性的做自己想做的，可是理性总是在脑海里打转。<br>然后矛盾的放弃。<br>觉得好累，想改变这样的状况。<br>可是，除了这样我还能变成什么样，<br>近些日子，觉得自己在改变，开始任性的做一些自己的事情，看淡一些周围的事。<br>也不去想那些纠结的事情，感觉脑袋好轻。<br>只是，我真的就能这样简单的下去么？<br>处女座的我，何时能摆脱那些复杂的纠结，不去深思那些问题，不去本能精细的分析。<br>我该怎么办，我该怎么选择。<br>真的要好好想想。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>axios 超时设置</title>
    <url>/p/e898cd53.html</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>最近写了个大数据后台日志流统计数据，在本地测试的时候老是出现timeout，发现是机器太破，计算时间太长超出了axios的默认超时时间。</p>
<a id="more"></a>

<h2 id="1-全局设置网络超时"><a href="#1-全局设置网络超时" class="headerlink" title="1. 全局设置网络超时"></a>1. 全局设置网络超时</h2><pre><code class="line-numbers language-js">axios.defaults.timeout = 30000;</code></pre>
<h2 id="2-单独对某个请求设置网络超时"><a href="#2-单独对某个请求设置网络超时" class="headerlink" title="2. 单独对某个请求设置网络超时"></a>2. 单独对某个请求设置网络超时</h2><pre><code class="line-numbers language-js">axios.post(url, postInfo,{timeout:300000})
    .then((resp: any) =&gt; {
        console.log(resp.data);
    })
    .catch((error: any) =&gt; {
         console.error(error);
     })</code></pre>
<h2 id="3-看axios原码，axios-post第三个参数AxiosRequestConfig可以配置其他"><a href="#3-看axios原码，axios-post第三个参数AxiosRequestConfig可以配置其他" class="headerlink" title="3. 看axios原码，axios.post第三个参数AxiosRequestConfig可以配置其他"></a>3. 看axios原码，axios.post第三个参数<code>AxiosRequestConfig</code>可以配置其他</h2><pre><code class="line-numbers language-typescript">export interface AxiosRequestConfig {
  url?: string;
  method?: Method;
  baseURL?: string;
  transformRequest?: AxiosTransformer | AxiosTransformer[];
  transformResponse?: AxiosTransformer | AxiosTransformer[];
  headers?: any;
  params?: any;
  paramsSerializer?: (params: any) =&gt; string;
  data?: any;
  timeout?: number;
  withCredentials?: boolean;
  adapter?: AxiosAdapter;
  auth?: AxiosBasicCredentials;
  responseType?: ResponseType;
  xsrfCookieName?: string;
  xsrfHeaderName?: string;
  onUploadProgress?: (progressEvent: any) =&gt; void;
  onDownloadProgress?: (progressEvent: any) =&gt; void;
  maxContentLength?: number;
  validateStatus?: (status: number) =&gt; boolean;
  maxRedirects?: number;
  socketPath?: string | null;
  httpAgent?: any;
  httpsAgent?: any;
  proxy?: AxiosProxyConfig | false;
  cancelToken?: CancelToken;
}</code></pre>
<h2 id="本文参考"><a href="#本文参考" class="headerlink" title="本文参考"></a>本文参考</h2><ul>
<li><a href="https://blog.csdn.net/daipianpian/article/details/90714461" target="_blank" rel="noopener">https://blog.csdn.net/daipianpian/article/details/90714461</a></li>
</ul>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>Win中修改文件系统属性</title>
    <url>/p/70eb6c81.html</url>
    <content><![CDATA[<p>在Win中右键操作只能修改<code>只读</code>和<code>隐藏</code>属性，不能操作<code>系统</code>属性</p>
<a id="more"></a>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/70eb6c81/19826068-7639e719967561ed.png" alt></p>
<p>如果要修改系统属性，就要借助<code>attrib</code>属性了。下面写了一个批处理来操作。<br>新建一个 <code>改属性.bat</code>文件，写入下面内容：</p>
<pre><code class="line-numbers language-powershell">@echo off
setlocal enabledelayedexpansion
title 修改系统属性和隐藏属性
color f0 
mode con: cols=50 lines=25
if &quot;%~1&quot;==&quot;&quot; (
echo 你没有拖入任何磁盘或文件或文件夹
echo 请把要处理的磁盘或文件或文件夹拖到批处理文件图标
echo 不要双击启动批处理
pause
)
:loop
cls
if &quot;%~1&quot;==&quot;&quot; goto :eof
if not exist &quot;%~1&quot; (echo 路径不存在)&amp;pause&amp;shift&amp;goto loop
echo 当前处理的磁盘或文件或文件夹:
echo %~1
echo.
echo 请选择要进行的操作，然后按回车
echo.
echo 加系统和隐藏属性……………………………1
echo 减系统和隐藏属性……………………………2
echo 不处理…………………………………………3
echo.
set /p &quot;c1=选择 (1,2,3) (不输入为!c1!,默认为2):&quot;
if &quot;!c1!&quot;==&quot;1&quot; (set &quot;d=+&quot;) else if &quot;!c1!&quot;==&quot;3&quot; (pause&amp;shift&amp;goto loop) else set &quot;d=-&quot;
set &quot;a=%~a1&quot;
if /i &quot;!a:~0,1!&quot;==&quot;d&quot; (
echo.
echo 这是一个文件夹，请选择要进行的操作，然后按回车
echo.
echo 只对该文件夹本身……………………………1
echo 只对该文件夹中的文件夹和文件……………2
echo 对该目录下的一切的文件夹和文件…………3
echo.
set /p &quot;c2=选择 (1,2,3) (不输入为!c2!,默认为1):&quot;
if &quot;!c2!&quot;==&quot;2&quot; (
pushd &quot;%~1&quot;
for /f &quot;delims=&quot; %%i in (&#39;dir /a /b &quot;%~1&quot;&#39;) do attrib.exe !d!s !d!h &quot;%%i&quot;
popd
) else if &quot;!c2!&quot;==&quot;3&quot; (
for /f &quot;delims=&quot; %%i in (&#39;dir /a /b /s &quot;%~1&quot;&#39;) do attrib.exe !d!s !d!h &quot;%%i&quot;
) else (
attrib.exe !d!s !d!h &quot;%~1&quot;
)
) else (
attrib.exe !d!s !d!h &quot;%~1&quot;
)
pause&amp;shift&amp;goto loop </code></pre>
<p>使用的时候直接要将修改的文件或文件夹拖到<code>改属性.bat</code>上就会弹出操作窗口，再根据需要选择<code>增加属性</code>还是<code>减少属性</code>。如果是文件夹要选择是针对文件夹或子文件夹之类的。之后就等处理就行了。</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/70eb6c81/19826068-4494501c4f86d3c0.png" alt></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo使用自定义排行阅读次数</title>
    <url>/p/7b5001f2.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在Hexo博客的时候，用到阅读排行榜的时候，用的网上的LeanCloud有时获取的数据为空的bug，于是自己写了一个简单的计数器和排行的后台服务。后台服务源码见 <a href="https://github.com/zngw/count/" target="_blank" rel="noopener">https://github.com/zngw/count/</a></p>
<h2 id="Hexo-next配置"><a href="#Hexo-next配置" class="headerlink" title="Hexo next配置"></a>Hexo next配置</h2><h3 id="1-修改主题配置"><a href="#1-修改主题配置" class="headerlink" title="1. 修改主题配置"></a>1. 修改主题配置</h3><p>在配置文件<code>themes/next/_config.yml</code>中添加配置</p>
<pre><code class="line-numbers language-yaml"># zngw页面统计及排行功能
# zngw统计服务器参见： https://github.com/zngw/count
# 统计服务器用GO编写，基于SQLite数据库
# url: 服务器接口地址
# key: 用户key,服务器中配置
# visitors： 页面统计
#   enable： 是不开启文章统计
#   total:   是不开启站点统计
#   pv，uv：  统计描述
# top_posts: 左侧栏热门推荐
#   enable： 启用
#   title： 标题
#   icon: 图标
#   num： 显示条数
zngw:
  enable: true
  url: //count.zengwu.com.cn/count
  key: zngw
  visitors:
    enable: true
    total: true
    uv_header: 我的第 
    uv_footer: 位朋友，
    pv_header: 历经
    pv_footer: 次回眸才与你相遇
  top_posts:
    enable: true
    title: 热门推荐
    icon: signal
    num: 5</code></pre>
<h3 id="2-编写zngw统计文件"><a href="#2-编写zngw统计文件" class="headerlink" title="2. 编写zngw统计文件"></a>2. 编写zngw统计文件</h3><p>创建<code>themes/next/layout/_third-party/analytics/zngw-analytics.swig</code>文件</p>
<pre><code class="line-numbers language-swig">{% if theme.zngw.enable %}
  &lt;script src=&quot;//cdn.jsdelivr.net/npm/axios@0.19.2/dist/axios.min.js&quot;&gt;&lt;/script&gt;
  &lt;script&gt;
    function post(url, postInfo, success, fail) {
      axios.post(url, postInfo)
        .then((resp) =&gt; {
          if (success) {
            success(resp.data)
          }
        })
        .catch((error) =&gt; {
          console.error(error);
          if (fail) {
            fail(error)
          }
        })
    }

    function showTime() {
      var entries = [];
      var $visitors = $(&quot;.zngw_visitors&quot;);

      $visitors.each(function () {
        entries.push( $(this).attr(&quot;id&quot;).trim() );
      });
      if(entries.length == 0){
        return
      }

      let postData = {
        user: &#39;{{ theme.zngw.key }}&#39;,
        url: entries
      }

      post(&#39;{{ theme.zngw.url }}&#39;+&#39;/get&#39;, postData, function(results){
        var COUNT_CONTAINER_REF = &#39;.zngw-visitors-count&#39;;
        if (results==null || results.length === 0) {
          $visitors.find(COUNT_CONTAINER_REF).text(0);
          return;
        }

        for (var i = 0; i &lt; results.length; i++) {
          var item = results[i];
          var element = document.getElementById(item.url);

          $(element).find(COUNT_CONTAINER_REF).text(item.time);
        }
        for(var i = 0; i &lt; entries.length; i++) {
          var url = entries[i];
          var element = document.getElementById(url);
          var countSpan = $(element).find(COUNT_CONTAINER_REF);
          if( countSpan.text() == &#39;&#39;) {
            countSpan.text(0);
          }
        }
      },function(err){
        console.log(err);        //=&gt;3
      })
    }

    function addCount() {
      var $visitors = $(&quot;.zngw_visitors&quot;);
      var url = $visitors.attr(&#39;id&#39;).trim();
      var title = $visitors.attr(&#39;data-flag-title&#39;).trim();

      let postData = {
        user: &#39;{{ theme.zngw.key }}&#39;,
        url: url,
        title: title
      }

      post(&#39;{{ theme.zngw.url }}&#39;+&#39;/add&#39;, postData, function(results){
        var COUNT_CONTAINER_REF = &#39;.zngw-visitors-count&#39;;
        var $element = $(document.getElementById(url));
        $element.find(COUNT_CONTAINER_REF).text(results.time);
      },function(err){
        console.log(err);        //=&gt;3
      })
    }

    function addTotals() {
      var $visitors = $(&quot;.zngw_totals&quot;);
      var url = $visitors.attr(&#39;id&#39;).trim();
      var title = $visitors.attr(&#39;data-flag-title&#39;).trim();

      let postData = {
        user: &#39;{{ theme.zngw.key }}&#39;,
        url: url,
        title: title
      }

      post(&#39;{{ theme.zngw.url }}&#39;+&#39;/add&#39;, postData, function(results){
        var $element = $(document.getElementById(url));
        $element.find(&#39;.gk-totals-count&#39;).text(results.time);
        $element.find(&#39;.gk-uv-count&#39;).text(results.uv);
      },function(err){
        console.log(err);        //=&gt;3
      })
    }

    function showTop() {
      var $visitors = $(&quot;.zngw_top&quot;);
      var url = $visitors.attr(&#39;id&#39;).trim();

      let postData = {
        user: &#39;{{ theme.zngw.key }}&#39;,
        limit: {{ theme.zngw.top_posts.num + 1}}
      }

      post(&#39;{{ theme.zngw.url }}&#39;+&#39;/top&#39;, postData,function(results){
        var index = 0;
        for (var i = 0; i &lt; results.length; i++) {
          var item = results[i];
          if(item.url!==&#39;/&#39;){
            index++;
            var content=&quot;&lt;li class=&#39;pull-left&#39; style=&#39;white-space:nowrap&#39;&gt;&lt;font color=&#39;#EE0000&#39;&gt;&quot;+index+&quot;&lt;/font&gt;&lt;a href=&#39;..&quot;+item.url+&quot;&#39; rel=&#39;section&#39; title=&#39;&quot; +item.title+ &quot;&#39;&gt;&quot;+item.title+&quot;&lt;/a&gt;&lt;/li&gt;&lt;li class=&#39;pull-right&#39;&gt;&lt;font color=&#39;#519ABA&#39;&gt;&quot;+item.time+&quot;&lt;/font&gt;&lt;/li&gt;&lt;br&gt;&quot;

            document.getElementById(url).innerHTML+=content
          }
        }
      }, function(err){
        console.error(error);
      })
    }

    $(function() {
      if ($(&#39;.zngw_top&#39;).length == 1) {
        showTop();
      }

      if ($(&#39;.zngw_totals&#39;).length == 1) {
        addTotals();
      }

      if ($(&#39;.zngw_visitors&#39;).length == 1) {
        addCount();
      } else if ($(&#39;.post-title-link&#39;).length &gt; 1) {
        showTime();
      }
    });
  &lt;/script&gt;

{% endif %}</code></pre>
<h3 id="3-加入引用文件"><a href="#3-加入引用文件" class="headerlink" title="3. 加入引用文件"></a>3. 加入引用文件</h3><p>打开<code>themes/next/layout/_layout.swig</code>文件加入<code>zngw-analytics.swig</code></p>
<pre><code class="line-numbers language-swig">{% include &#39;_third-party/analytics/zngw-analytics.swig&#39; %}</code></pre>
<h3 id="4-在文章标题下添加阅读次数"><a href="#4-在文章标题下添加阅读次数" class="headerlink" title="4. 在文章标题下添加阅读次数"></a>4. 在文章标题下添加阅读次数</h3><p>打开<code>themes/next/layout/_macro/post.swig</code>，找到<code>{# LeanCould PageView #}</code>处，在之前添加以下代码</p>
<pre><code class="line-numbers language-swig">{# Zngw PageView #}
{% if theme.zngw.enable and theme.zngw.visitors.enable %}
  &lt;span id=&quot;{{ url_for(post.path) }}&quot; class=&quot;zngw_visitors&quot; data-flag-title=&quot;{{ post.title }}&quot;&gt;
    &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;post-meta-item-icon&quot;&gt;
      &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt;
    &lt;/span&gt;
    {% if theme.post_meta.item_text %}
      &lt;span class=&quot;post-meta-item-text&quot;&gt;{{__(&#39;post.visitors&#39;)}}&amp;#58;&lt;/span&gt;
    {% endif %}
    &lt;span class=&quot;zngw-visitors-count&quot;&gt;&lt;/span&gt;
  &lt;/span&gt;
{% endif %}</code></pre>
<p>显示效果</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/7b5001f2/1583162849497.png" alt></p>
<h3 id="5-在网站底层配置浏览次数和uv次数"><a href="#5-在网站底层配置浏览次数和uv次数" class="headerlink" title="5. 在网站底层配置浏览次数和uv次数"></a>5. 在网站底层配置浏览次数和uv次数</h3><p>打开<code>themes/next/layout/_partials/footer.swig</code>文件，找到<code>theme.leancloud_visitors.enable</code> 在之前添加下面代码</p>
<pre><code class="line-numbers language-swig">  {% if theme.zngw.enable and theme.zngw.visitors.total %}
    &lt;span id=&quot;/&quot; class=&quot;zngw_totals&quot; data-flag-title=&quot;{{ config.title }}&quot;&gt;
      &lt;span class=&quot;post-meta-divider&quot;&gt;{{ theme.zngw.visitors.uv_header }}&lt;/span&gt;
      &lt;span class=&quot;gk-uv-count&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;post-meta-divider&quot;&gt;{{ theme.zngw.visitors.uv_footer }}&lt;/span&gt;

      &lt;span class=&quot;post-meta-divider&quot;&gt;{{ theme.zngw.visitors.pv_header }}&lt;/span&gt;
      &lt;span class=&quot;gk-totals-count&quot;&gt;&lt;/span&gt;
      &lt;span class=&quot;post-meta-divider&quot;&gt;{{ theme.zngw.visitors.pv_footer }}&lt;/span&gt;
    &lt;/span&gt;
  {% endif %}</code></pre>
<p>显示效果</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/7b5001f2/1583163462863.png" alt></p>
<h3 id="6-添加热度排行"><a href="#6-添加热度排行" class="headerlink" title="6. 添加热度排行"></a>6. 添加热度排行</h3><p>添加top页面</p>
<pre><code class="line-numbers language-bash">hexo new page top</code></pre>
<p>修改<code>top/index.md</code>文件</p>
<pre><code class="line-numbers language-js">---
title: 热度排行
---
&lt;div id=&quot;top&quot;&gt;&lt;/div&gt;
&lt;script src=&quot;//unpkg.com/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    axios.post(&quot;//count.zengwu.com.cn/count/top&quot;, {user: &#39;zngw&#39;,limit: 25})
      .then((results) =&gt; {
        var index = 0;
        for (var i = 0; i &lt; results.data.length; i++) {
          var item = results.data[i];
          if(item.url!==&#39;/&#39;){
            index++;
            var content=&quot;&lt;div&gt;&lt;span class=&#39;pull-left&#39;&gt;&lt;font color=&#39;#EE0000&#39;&gt;&quot;+index+&quot;    &lt;/font&gt;&quot;+&quot;&lt;a href=&#39;&quot;+&quot;..&quot;+item.url+&quot;&#39; rel=&#39;section&#39;&gt;&quot;+item.title+&quot;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;pull-right&#39;&gt;&lt;font color=&#39;#519ABA&#39;&gt;&quot;+item.time+&quot;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&quot;
            document.getElementById(&quot;top&quot;).innerHTML+=content
          }
        }
      })
      .catch((error) =&gt; {
        console.error(error);
      })
&lt;/script&gt;</code></pre>
<p>显示效果</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/7b5001f2/1583163753332.png" alt></p>
<h3 id="7-在左侧加入热门文章"><a href="#7-在左侧加入热门文章" class="headerlink" title="7. 在左侧加入热门文章"></a>7. 在左侧加入热门文章</h3><p>打开<code>themes/next/layout/_macro/sidebar.swig</code>文件，找到<code>theme.links</code>在之前添加</p>
<pre><code class="line-numbers language-swig">{% if theme.zngw.top_posts.enable %}
  &lt;div class=&quot;links-of-blogroll motion-element {{ &quot;links-of-blogroll-&quot; + theme.zngw.top_posts.layout  }}&quot;&gt;
    &lt;div class=&quot;links-of-blogroll-title&quot;&gt;
      &lt;i class=&quot;fa fa-{{ theme.zngw.top_posts.icon }}&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;
      &lt;a href=&quot;/top/index.html&quot; target=&#39;inline&#39;&gt;{{ theme.zngw.top_posts.title }}&lt;/a&gt;
    &lt;/div&gt;
    &lt;ul id=&quot;zngw_top&quot; class=&quot;zngw_top links-of-blogroll-list&quot;&gt;&lt;/ul&gt;
  &lt;/div&gt;
{% endif %}</code></pre>
<p>显示效果</p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/7b5001f2/1583164030827.png" alt></p>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Golang</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>复制内容自动加入版权信息</title>
    <url>/p/518018d1.html</url>
    <content><![CDATA[<p>在自己的blog中实现复制文章内容加入版本信息时，在网上找了很多版本，结果在复制带html格式原代码的时候回出错。后来参考了一下csdn的代码自己写了一个版本</p>
<h2 id="1-查看CSDN中的复制代码"><a href="#1-查看CSDN中的复制代码" class="headerlink" title="1. 查看CSDN中的复制代码"></a>1. 查看CSDN中的复制代码</h2><p>打开csdn的一片文章，右键查看网页源代码，搜索<code>copyright.js</code><br><img src="//gitee.com/guoke3915/zw/raw/master/p/518018d1/19826068-eb53332f8a2b9c43.png" alt></p>
<p>点击打开查看</p>
<pre><code class="line-numbers language-js">!function() {
    function t() {
        this.textData = null,
        this.htmlData = null,
        a = this
    }
    function e(t) {
        if (window.getSelection().getRangeAt(0).toString().length &gt; 140) {
            t.preventDefault();
            var e;
            e = window.getSelection() + a.textData;
            window.getSelection(),
            a.htmlData;
            if (t.clipboardData)
                t.clipboardData.setData(&quot;text/plain&quot;, e);
            else {
                if (window.clipboardData)
                    return window.clipboardData.setData(&quot;text&quot;, e);
                n(e)
            }
        }
    }
    function n(t) {
        var e = document.createElement(&quot;textarea&quot;);
        e.style.cssText = &quot;position: fixed;z-index: -10;top: -50px;left: -50px;&quot;,
        e.innerHTML = t,
        document.getElementsByTagName(&quot;body&quot;)[0].appendChild(e),
        e.select(),
        document.execCommand(&quot;copy&quot;)
    }
    var a = null
      , i = function(t, e, n) {
        t.addEventListener ? t.addEventListener(e, n, !1) : t.attachEvent ? t.attachEvent(&quot;on&quot; + e, n) : t[&quot;on&quot; + e] = n
    };
    t.prototype.init = function(t, n, a) {
        this.textData = n,
        this.htmlData = a,
        i(t, &quot;copy&quot;, e)
    }
    ,
    window.csdn = window.csdn ? window.csdn : {},
    csdn.copyright = new t
}();</code></pre>
<h2 id="2-编写自己的代码"><a href="#2-编写自己的代码" class="headerlink" title="2. 编写自己的代码"></a>2. 编写自己的代码</h2><p>参考上面function e 和 n 完成自己的代码，编写一个自己的copyright.js文件</p>
<pre><code class="line-numbers language-js">jQuery(document).on(&#39;copy&#39;, function(t) {
    var selected = window.getSelection();
    var selectedText = selected.toString();

    // 复制长度大于140字符串才会触发版权信息
    // 由于冒泡调用问题，oncopy会被调用二次，暂时没找到好的解决办法，临时存在家地址判断是否已经添加了
    if(selectedText.length&gt;140 &amp;&amp; selectedText.search(document.location.href) == -1){

        // 这里取网页中 &lt;meta property=&quot;article:author&quot; content=&quot;过客&quot;&gt; 作者的属性，可以根据自己网页取需要的
        var copyFooter = &#39;\r\n————————————————\r\n&#39;+
        &#39;版权声明：本文为「&#39;+$(&quot;meta[property=&#39;article:author&#39;]&quot;).attr(&quot;content&quot;)+&#39;」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\r\n&#39;+
        &#39;原文链接：&#39; + document.location.href;

        if (t.clipboardData) {
            t.clipboardData.setData(&quot;text/plain&quot;, selected + copyFooter);
        } else {
            if (window.clipboardData) {
                return window.clipboardData.setData(&quot;text&quot;, selected + copyFooter);
            }
            (a = document.createElement(&quot;textarea&quot;)).style.cssText = &quot;position: fixed;z-index: -100;top: -500px;left: -500px;&quot;,
            a.innerHTML = selected + copyFooter,
            document.getElementsByTagName(&#39;body&#39;)[0].appendChild(a),
            a.select(),
            setTimeout(function() {
                document.execCommand(&#39;copy&#39;);
            }, 0);
        }
    }
});</code></pre>
<h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h2><p>直接在自己的文章中引用copyright.js就可以了</p>
<pre><code class="line-numbers language-js">&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.jsdelivr.net/gh/zngw/cdn/copyright.min.js&quot;&gt;&lt;/script&gt;</code></pre>
<p>然后复制之后就会带版权信息了。效果如下</p>
<pre><code class="line-numbers language-txt">{% if page.comments &amp;&amp; theme.gitalk.enable %}
  &lt;link rel=&quot;stylesheet&quot; href=&quot;//unpkg.com/gitalk/dist/gitalk.css&quot;/&gt;
  &lt;script src=&quot;//unpkg.com/gitalk/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;  
  &lt;script type=&quot;text/javascript&quot;&gt;  
    var gitalk = new Gitalk({
      clientID: &#39;{{ theme.gitalk.ClientID }}&#39;,
      clientSecret: &#39;{{ theme.gitalk.ClientSecret }}&#39;,
      repo: &#39;{{ theme.gitalk.repo }}&#39;,
      owner: &#39;{{ theme.gitalk.githubID }}&#39;,
      admin: [&#39;{{ theme.gitalk.adminUser }}&#39;],
      id: location.pathname,
      distractionFreeMode: &#39;{{ theme.gitalk.distractionFreeMode }}&#39;
    })
    gitalk.render(&#39;gitalk-container&#39;)           
  &lt;/script&gt;
{% endif %}
————————————————
版权声明：本文为「过客」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
原文链接：https://zengwu.com.cn/p/2fe3da.html#more</code></pre>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>免费jsDeliver CDN使用</title>
    <url>/p/2456a806.html</url>
    <content><![CDATA[<p>很多时候，我们网站在引用 第三方js代码的时候加载比较慢，第一种办法是把js代码下载过来放到自己的慢站中加载，这样会消耗自己网站的带宽，还有一个就是可以使用jsDeliver的免费CDN。</p>
<a id="more"></a>

<h3 id="1-新建Github仓库"><a href="#1-新建Github仓库" class="headerlink" title="1. 新建Github仓库"></a>1. 新建Github仓库</h3><p><img src="//gitee.com/guoke3915/zw/raw/master/p/2456a806/19826068-7957068d2d280118.png" alt></p>
<h3 id="2-上传资源"><a href="#2-上传资源" class="headerlink" title="2. 上传资源"></a>2. 上传资源</h3><p><img src="//gitee.com/guoke3915/zw/raw/master/p/2456a806/19826068-9bec081813a9c888.png" alt></p>
<h3 id="3-点击release发布仓库"><a href="#3-点击release发布仓库" class="headerlink" title="3. 点击release发布仓库"></a>3. 点击release发布仓库</h3><p><img src="//gitee.com/guoke3915/zw/raw/master/p/2456a806/19826068-1bbbd99b96c467c2.png" alt></p>
<h3 id="4-通过jsDeliver引用资源"><a href="#4-通过jsDeliver引用资源" class="headerlink" title="4. 通过jsDeliver引用资源"></a>4. 通过jsDeliver引用资源</h3><p>直接引用使用方法：<a href="https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径</a><br>如：</p>
<pre><code class="line-numbers language-js">https://cdn.jsdelivr.net/gh/zngw/cdn@1.0/copyright.min.js</code></pre>
<h3 id="5-加载其他版本的"><a href="#5-加载其他版本的" class="headerlink" title="5. 加载其他版本的"></a>5. 加载其他版本的</h3><p>版本号不是必需的，是为了区分新旧资源，如果不使用版本号，将会直接引用最新资源，除此之外还可以使用某个范围内的版本，查看所有资源等，具体使用方法如下</p>
<pre><code>// 加载任何Github发布、提交或分支
https://cdn.jsdelivr.net/gh/user/repo@version/file

// 使用版本范围而不是特定版本
https://cdn.jsdelivr.net/gh/zngw/cdn@1.0/copyright.js   

// 完全省略该版本以获取最新版本
https://cdn.jsdelivr.net/gh/zngw/cdn/copyright.js

// 将“.min”添加到任何JS/CSS文件中以获取缩小版本，如果不存在，将为会自动生成
https://cdn.jsdelivr.net/gh/zngw/cdn@1.0/copyright.min.js

// 在末尾添加 / 以获取资源目录列表
https://cdn.jsdelivr.net/gh/zngw/cdn/</code></pre>]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo部署到阿里云OSS上</title>
    <url>/p/dd7e8a7b.html</url>
    <content><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><pre><code class="line-numbers language-yml">hexo-next: 5.1.4
hexo: 4.2.0
hexo-cli: 3.1.0
os: Windows_NT 10.0.17763 win32 x64
http_parser: 2.8.0
node: 10.16.3
v8: 6.8.275.32-node.54
uv: 1.28.0
zlib: 1.2.11
brotli: 1.0.7
ares: 1.15.0
modules: 64
nghttp2: 1.39.2
napi: 4
openssl: 1.1.1c
icu: 64.2
unicode: 12.1
cldr: 35.1
tz: 2019a</code></pre>
<h2 id="1-修改hexo适配oss访问规则"><a href="#1-修改hexo适配oss访问规则" class="headerlink" title="1. 修改hexo适配oss访问规则"></a>1. 修改hexo适配oss访问规则</h2><p>hexo生成的静态博客很多都是以文件夹形式的，然后默认省略了index.html。而对于阿里云的OSS来说，并不会默认访问文件夹下的index.html，所以，生成的时候需要做调整</p>
<h3 id="1-1-文章链接修改"><a href="#1-1-文章链接修改" class="headerlink" title="1.1 文章链接修改"></a>1.1 文章链接修改</h3><p>文章的连接直接修改根目录下_config.yml中permalink: p/:abbrlink.html的生成规则，详细可以参考之前写的文章<a href="https://www.jianshu.com/p/920894191281" target="_blank" rel="noopener">链接持久化</a></p>
<h3 id="1-2-归档、标签、分类修改"><a href="#1-2-归档、标签、分类修改" class="headerlink" title="1.2 归档、标签、分类修改"></a>1.2 归档、标签、分类修改</h3><p>修改主题目录下_config.yml中的menu:加入index.html</p>
<pre><code class="line-numbers language-yml">menu:
  home: /|| home
  #about: /about/|| user
  top: /top/index.html|| signal
  tags: /tags/index.html|| tags
  categories: /categories/index.html|| th
  archives: /archives/index.html|| archive
# Enable/Disable menu icons.
menu_icons:
  enable: true</code></pre>
<h3 id="1-3-文章翻页跳转"><a href="#1-3-文章翻页跳转" class="headerlink" title="1.3 文章翻页跳转"></a>1.3 文章翻页跳转</h3><p>打开<code>themes\next\layout\_partials\pagination.swig</code>文件，添加format文件路径</p>
<pre><code class="line-numbers language-swig">paginator({
       prev_text: &#39;&lt;i class=&quot;fa fa-angle-left&quot; aria-label=&quot;&#39;+__(&#39;accessibility.prev_page&#39;)+&#39;&quot;&gt;&lt;/i&gt;&#39;,
       next_text: &#39;&lt;i class=&quot;fa fa-angle-right&quot; aria-label=&quot;&#39;+__(&#39;accessibility.next_page&#39;)+&#39;&quot;&gt;&lt;/i&gt;&#39;,
       mid_size: 1,
       format: &#39;page/%d/index.html&#39;,
       escape: false
     })</code></pre>
<h3 id="1-4-目录分类页中链接修改"><a href="#1-4-目录分类页中链接修改" class="headerlink" title="1.4 目录分类页中链接修改"></a>1.4 目录分类页中链接修改</h3><p>打开<code>themes\next\layout\page.swig</code>文件修改<code>list_categories</code></p>
<pre><code class="line-numbers language-swig">修改前：      {{ list_categories() }}
修改后：      {{ list_categories({suffix: &#39;index.html&#39;}) }}</code></pre>
<h3 id="1-5-标签页中链接修改"><a href="#1-5-标签页中链接修改" class="headerlink" title="1.5 标签页中链接修改"></a>1.5 标签页中链接修改</h3><p>next中标签用到了<code>tagcloud</code>而不是<code>list_tags</code>,而<code>tagclud</code>并没有suffix配置，所以，可以仿照list_tags修改一下。<br>打开<code>node_modules\hexo\lib\plugins\helper\tagcloud.js</code>, 加入suffix配置</p>
<pre><code class="line-numbers language-swig">修改前：const { transform } = options; 
修改后：const { transform , suffix = &#39;&#39;} = options;</code></pre>
<p>在<code>result.push</code>的超链接中加入<code>${suffix}</code></p>
<pre><code class="line-numbers language-swig">result.push(
      `&lt;a href=&quot;${this.url_for(tag.path)}${suffix}&quot; style=&quot;${style}&quot;&gt;${transform ? transform(tag.name) : tag.name}&lt;/a&gt;`
    );</code></pre>
<p>修改<code>tagcloud</code>调用。打开<code>themes\next\layout\page.swig</code>文件修改<code>tagcloud</code></p>
<pre><code class="line-numbers language-swig">修改前：{{ tagcloud({min_font: 12, max_font: 30, amount: 300, color: true, start_color: &#39;#ccc&#39;, end_color: &#39;#111&#39;}) }}
修改后：{{ tagcloud({min_font: 12, max_font: 30, amount: 300, color: true, start_color: &#39;#ccc&#39;, end_color: &#39;#111&#39;,suffix: &#39;index.html&#39;}) }}</code></pre>
<h3 id="1-6-文章内的目录和标签连接"><a href="#1-6-文章内的目录和标签连接" class="headerlink" title="1.6 文章内的目录和标签连接"></a>1.6 文章内的目录和标签连接</h3><p>打开<code>themes\next\layout\_macro\post.swig</code>文件</p>
<ul>
<li>找到<code>for cat in post.categories</code>在href中添加<code>index.html</code></li>
</ul>
<pre><code class="line-numbers language-swig">  {% for cat in post.categories %}
    &lt;span itemprop=&quot;about&quot; itemscope itemtype=&quot;http://schema.org/Thing&quot;&gt;
      &lt;a href=&quot;{{ url_for(cat.path) }}index.html&quot; itemprop=&quot;url&quot; rel=&quot;index&quot;&gt;
        &lt;span itemprop=&quot;name&quot;&gt;{{ cat.name }}&lt;/span&gt;
      &lt;/a&gt;
    &lt;/span&gt;</code></pre>
<ul>
<li>找到<code>for tag in post.tags</code>在href中添加<code>index.html</code></li>
</ul>
<pre><code class="line-numbers language-swig">  {% for tag in post.tags %}
    &lt;a href=&quot;{{ url_for(tag.path) }}index.html&quot; rel=&quot;tag&quot;&gt;&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; {{ tag.name }}&lt;/a&gt;
  {% endfor %}</code></pre>
<h3 id="1-7-左侧状态栏日志链接"><a href="#1-7-左侧状态栏日志链接" class="headerlink" title="1.7 左侧状态栏日志链接"></a>1.7 左侧状态栏日志链接</h3><p>修改<code>themes\next\layout\_macro\sidebar.swig</code>文件</p>
<pre><code class="line-numbers language-swig">修改前：&lt;a href=&quot;{{ url_for(config.archive_dir) }}&quot;&gt;
修改后：&lt;a href=&quot;{{ url_for(theme.menu.archives.split(&#39;||&#39;)[0]) }}&quot;&gt;</code></pre>
<h2 id="2-部署到阿里云OSS"><a href="#2-部署到阿里云OSS" class="headerlink" title="2. 部署到阿里云OSS"></a>2. 部署到阿里云OSS</h2><p>阿里云OSS国内站点需要绑定备案的域名才可以当静态网站范围。</p>
<h3 id="2-1-登录阿里云账号进入OSS"><a href="#2-1-登录阿里云账号进入OSS" class="headerlink" title="2.1 登录阿里云账号进入OSS"></a>2.1 登录阿里云账号进入OSS</h3><h3 id="2-2-新建Bucket"><a href="#2-2-新建Bucket" class="headerlink" title="2.2 新建Bucket"></a>2.2 新建Bucket</h3><p><img src="//gitee.com/guoke3915/zw/raw/master/p/dd7e8a7b/19826068-c5928e09d0027087.png" alt></p>
<h3 id="2-3-设置静态页面"><a href="#2-3-设置静态页面" class="headerlink" title="2.3 设置静态页面"></a>2.3 设置静态页面</h3><p>设置根目录下index.html为静态页面<br><img src="//gitee.com/guoke3915/zw/raw/master/p/dd7e8a7b/19826068-261719256c03f0b0.png" alt></p>
<h3 id="2-4-配置域名"><a href="#2-4-配置域名" class="headerlink" title="2.4 配置域名"></a>2.4 配置域名</h3><p><img src="//gitee.com/guoke3915/zw/raw/master/p/dd7e8a7b/19826068-b6cb86c104fe4717.png" alt></p>
<h3 id="2-5-上传文件"><a href="#2-5-上传文件" class="headerlink" title="2.5 上传文件"></a>2.5 上传文件</h3><p>清理编译</p>
<pre><code class="line-numbers language-bash">hexo clean &amp;&amp; hexo g</code></pre>
<p>将博客目录下的public目录上传到OSS根目录下</p>
<h3 id="2-6-脚本自动提交"><a href="#2-6-脚本自动提交" class="headerlink" title="2.6 脚本自动提交"></a>2.6 脚本自动提交</h3><p>安装阿里oss脚本</p>
<pre><code class="line-numbers language-bash">npm install ali-oss</code></pre>
<p>在跟目录下创建<code>depoly-to-oss.js</code>文件</p>
<pre><code class="line-numbers language-js">const fs = require(&#39;fs&#39;)
const path = require(&#39;path&#39;)
const util = require(&#39;util&#39;)
const OSS = require(&#39;ali-oss&#39;).Wrapper

const promisifyReaddir = util.promisify(fs.readdir)
const promisifyStat = util.promisify(fs.stat)

const client = new OSS({
  region: &#39;&lt;oss region&gt;&#39;,
  //云账号AccessKey有所有API访问权限，建议遵循阿里云安全最佳实践，部署在服务端使用RAM子账号或STS，部署在客户端使用STS。
  accessKeyId: &#39;&lt;Your accessKeyId&gt;&#39;,
  accessKeySecret: &#39;&lt;Your accessKeySecret&gt;&#39;,
  bucket: &#39;&lt;Your bucket name&gt;&#39;
})

// 上传的目录
const publicPath = path.resolve(__dirname, &#39;./public&#39;)

// 同步上传文件
async function put(proPath = &#39;&#39;) {
  const dir = await promisifyReaddir(`${publicPath}${proPath}`)

  for (let i = 0; i &lt; dir.length; i++) {
    const stat = await promisifyStat(path.resolve(`${publicPath}${proPath}`, dir[i]))

    if (stat.isFile()) {
      const fileStream = fs.createReadStream(path.resolve(`${publicPath}${proPath}`, dir[i]))
      console.log(`上传文件: ${proPath}/${dir[i]}`)
      const result = await client.putStream(`${proPath}/${dir[i]}`, fileStream)
      console.log(result)
    } else if (stat.isDirectory()) {
      // 递归子目录
      await put(`${proPath}/${dir[i]}`)
    }
  }
}

put()</code></pre>
<p>编译之后，直接使用上传</p>
<pre><code class="line-numbers language-bash">node depoly-to-oss.js</code></pre>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Golang</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Go中使用 SQLite 数据库</title>
    <url>/p/86c3fe0e.html</url>
    <content><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>SQLite 是一个开源的嵌入式关系数据库，实现自包容、零配置、支持事务的 SQL 数据库引擎。其特点是高度便携、使用方便、结构紧凑、高效、可靠。 </p>
<a id="more"></a>
<p>与其他数据库管理系统不同，SQLite 的安装和运行非常简单，在大多数情况下，只要确保 SQLite 的二进制文件存在即可开始创建、连接和使用数据库。</p>
<h2 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h2><p>Go 支持 sqlite 的库也比较多，下面介绍<a href="https://github.com/mattn/go-sqlite3" target="_blank" rel="noopener">github.com/mattn/go-sqlite3</a>库来对SQLite3数库存</p>
<ul>
<li>mattn/go-sqlite3基于cgo，<a href="https://www.jianshu.com/p/9aefe801b5a9" target="_blank" rel="noopener">Windows中cgo环境安装</a></li>
</ul>
<h3 id="1-引用库"><a href="#1-引用库" class="headerlink" title="1. 引用库"></a>1. 引用库</h3><p>需要引用sqlite3时前面加个<code>_</code>，不然会编译出错。语法基本上和MySQL类似</p>
<pre><code class="line-numbers language-go">import (
    &quot;database/sql&quot;

    _ &quot;github.com/mattn/go-sqlite3&quot;
)</code></pre>
<h3 id="2-打开-创建数据库"><a href="#2-打开-创建数据库" class="headerlink" title="2. 打开/创建数据库"></a>2. 打开/创建数据库</h3><p>在当前目录打开my.db数据库，如果不存在，则创建一个</p>
<pre><code class="line-numbers language-go">// 打开/创建
db, err := sql.Open(&quot;sqlite3&quot;, &quot;./my.db&quot;)

// 关闭
db.Close()</code></pre>
<h3 id="3-创建表"><a href="#3-创建表" class="headerlink" title="3. 创建表"></a>3. 创建表</h3><pre><code class="line-numbers language-go">table := `
    CREATE TABLE IF NOT EXISTS user (
        uid INTEGER PRIMARY KEY AUTOINCREMENT,
        name VARCHAR(128) NULL,
        created DATE NULL
    );
    `
_, err = db.Exec(table)</code></pre>
<ul>
<li>创建一个user表，</li>
<li>表中有一个自增长的uid，</li>
<li>一个128位字符串的name</li>
<li>日期类型的创建时间</li>
</ul>
<h3 id="4-插入数据"><a href="#4-插入数据" class="headerlink" title="4. 插入数据"></a>4. 插入数据</h3><pre><code class="line-numbers language-go">    stmt, err := db.Prepare(&quot;INSERT INTO user(name,  created) values(?,?)&quot;)
    if err != nil {
        panic(err)
    }
    // res 为返回结果
    res, err := stmt.Exec(&quot;guoke&quot;, &quot;2012-12-09&quot;)
    if err != nil {
        panic(err)
    }

    // 可以通过res取自动生成的id
    id, err := res.LastInsertId()
    if err != nil {
        panic(err)
    }</code></pre>
<h3 id="5-删除数据"><a href="#5-删除数据" class="headerlink" title="5. 删除数据"></a>5. 删除数据</h3><pre><code class="line-numbers language-go">    stmt, err = db.Prepare(&quot;delete from user where uid=?&quot;)
     if err != nil {
        panic(err)
    }

    res, err = stmt.Exec(id)
     if err != nil {
        panic(err)
    }</code></pre>
<h3 id="6-更新数据"><a href="#6-更新数据" class="headerlink" title="6. 更新数据"></a>6. 更新数据</h3><pre><code class="line-numbers language-go">     stmt, err := db.Prepare(&quot;update %s set name=? where uid=?&quot;)
     if stmt == nil || err != nil {
          panic(err)
      }
     _, err = stmt.Exec(&quot;guoke3915&quot;, 1)
     if err != nil {
          panic(err)
     }</code></pre>
<h3 id="7-查询数据"><a href="#7-查询数据" class="headerlink" title="7.查询数据"></a>7.查询数据</h3><pre><code class="line-numbers language-go">    rows, err := db.Query(&quot;SELECT * FROM user&quot;)
    if err != nil {
          panic(err)
     }
    defer rows.Close()

    for rows.Next() {
        var uid int
        var name string
        var created time.Time
        err = rows.Scan(&amp;uid, &amp;name,  &amp;created)
        if err != nil {
          panic(err)
        }

        fmt.Println(uid)
        fmt.Println(name)
        fmt.Println(created)
    }</code></pre>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go中使用sync.Map</title>
    <url>/p/582b4054.html</url>
    <content><![CDATA[<h2 id="1-前提"><a href="#1-前提" class="headerlink" title="1. 前提"></a>1. 前提</h2><p>Go语言中的 map 在并发情况下，只读是线程安全的，同时读写是线程不安全的。</p>
<h2 id="2-map并发读写测试"><a href="#2-map并发读写测试" class="headerlink" title="2. map并发读写测试"></a>2. map并发读写测试</h2><pre><code class="line-numbers language-go">package main

import (
    &quot;os/signal&quot;
    &quot;runtime&quot;
    &quot;syscall&quot;
)

func main()  {
    // 创建一个int到int的映射
    m := make(map[int]int)
    // 开启一段并发代码
    go func() {
        // 不停地对map进行写入
        for {
            m[1] = 1
        }
    }()
    // 开启一段并发代码
    go func() {
        // 不停地对map进行读取
        for {
            _ = m[1]
        }
    }()

    signal.Ignore(syscall.SIGHUP)
    runtime.Goexit()
}</code></pre>
<p>运行时报错<br><code>fatal error: concurrent map read and map write</code></p>
<h2 id="3-接下来用并发安全的sync-Map来测试"><a href="#3-接下来用并发安全的sync-Map来测试" class="headerlink" title="3. 接下来用并发安全的sync.Map来测试"></a>3. 接下来用并发安全的sync.Map来测试</h2><pre><code class="line-numbers language-go">package main

import (
    &quot;fmt&quot;
    &quot;os/signal&quot;
    &quot;runtime&quot;
    &quot;sync&quot;
    &quot;syscall&quot;
)

func main()  {
    // 创建一个int到int的映射
    m := sync.Map{}
    // 开启一段并发代码
    go func() {
        // 不停地对map进行写入
        for {
            m.Store(1,1)
        }
    }()
    // 开启一段并发代码
    go func() {
        // 不停地对map进行读取
        for {
            if v, ok := m.Load(1); ok{
                fmt.Println(v)
            }
        }
    }()

    signal.Ignore(syscall.SIGHUP)
    runtime.Goexit()
}</code></pre>
<p>运行时会一直输出1而不会报错</p>
<h2 id="4-sync-Map基本操作"><a href="#4-sync-Map基本操作" class="headerlink" title="4. sync.Map基本操作"></a>4. sync.Map基本操作</h2><h3 id="4-1-创建"><a href="#4-1-创建" class="headerlink" title="4.1 创建"></a>4.1 创建</h3><p>直接声明，不需要make<br><code>var m sync.Map</code></p>
<h3 id="4-2-插入、修改"><a href="#4-2-插入、修改" class="headerlink" title="4.2 插入、修改"></a>4.2 插入、修改</h3><ul>
<li>如果key不存在，插入value；</li>
<li>如果key存在则修改其值</li>
</ul>
<pre><code class="line-numbers language-go">m.Store(key,value)</code></pre>
<h3 id="4-3-插入或查找"><a href="#4-3-插入或查找" class="headerlink" title="4.3 插入或查找"></a>4.3 插入或查找</h3><ul>
<li>如果key不存在，插入value，返回插入value的值，ok为false</li>
<li>如果key存在，返回原map中value的值，ok为true</li>
</ul>
<pre><code class="line-numbers language-go">value,ok := m.LoadOrStore(key,value)</code></pre>
<h3 id="4-4-删除"><a href="#4-4-删除" class="headerlink" title="4.4 删除"></a>4.4 删除</h3><pre><code class="line-numbers language-go">m.Delete(key)</code></pre>
<h3 id="4-5-查找"><a href="#4-5-查找" class="headerlink" title="4.5 查找"></a>4.5 查找</h3><pre><code class="line-numbers language-go">v,ok := m.Load(key)</code></pre>
<h3 id="4-6-遍历"><a href="#4-6-遍历" class="headerlink" title="4.6 遍历"></a>4.6 遍历</h3><pre><code class="line-numbers language-go">m.Range(func(k, v interface{}) bool {
  fmt.Println(&quot;interate:&quot;,k,v)
  return true
})</code></pre>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>凤栖梧</title>
    <url>/p/2d4f36f7.html</url>
    <content><![CDATA[<p>夜来读书思量著。<br>帘外听雨，滴滴离人泪。<br>把镜忍叹华发生，搔首但觉愁丝长。</p>
<p>三十日我情我愿。<br>浮梦一场，柔肠寸寸断。<br>悔来此处伤情地，半夜难教人入眠。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Win远程桌面文件传输</title>
    <url>/p/37a24aa7.html</url>
    <content><![CDATA[<p>在远程桌面操作的时候，为了方便文件传输，可以将本地驱动映射到远程电脑上，之后在远程随意进行文件传输了</p>
<a id="more"></a>
<ol>
<li>运行<code>mstsc</code>打开远程桌面<br><img src="//gitee.com/guoke3915/zw/raw/master/p/37a24aa7/19826068-8e2d2dddfe290b4b.png" alt></li>
<li>进入远程桌面连接详细选项，并在本地设备和资源中进入详细信息<br><img src="//gitee.com/guoke3915/zw/raw/master/p/37a24aa7/19826068-e4fc15cbee47fd76.png" alt></li>
<li>勾选上需要挂载到远程电脑的磁盘驱动<br><img src="//gitee.com/guoke3915/zw/raw/master/p/37a24aa7/19826068-3a96f61f37e52dda.png" alt></li>
<li>连接远程电脑后，在远程电脑里，会发现前面勾选的磁盘了，然后就和网络映射磁盘一样的操作就可以了<br><img src="//gitee.com/guoke3915/zw/raw/master/p/37a24aa7/19826068-19e952a9ca56e4fa.png" alt></li>
</ol>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>git基本命令</title>
    <url>/p/d9b9df12.html</url>
    <content><![CDATA[<p>使用Git的时候，基本上都是用TortoiseGit窗口操作，但最近在linux上部署了一个项目发现只能用命令行了。这里只用几个超级简单的命令就行了</p>
<a id="more"></a>
<h2 id="1-下载项目"><a href="#1-下载项目" class="headerlink" title="1. 下载项目"></a>1. 下载项目</h2><pre><code class="line-numbers language-bash">git clone [url]</code></pre>
<h2 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2. 配置文件"></a>2. 配置文件</h2><p>配置文件在项目目录的.git/config文件</p>
<pre><code class="line-numbers language-bash">cat .git/config
[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
[remote &quot;origin&quot;]
    url = https://e.coding.net/guoke3915/guoke3915.git
    fetch = +refs/heads/*:refs/remotes/origin/*
[branch &quot;master&quot;]
    remote = origin
    merge = refs/heads/master
[credential]
    helper = store</code></pre>
<h2 id="3-设置用户信息"><a href="#3-设置用户信息" class="headerlink" title="3. 设置用户信息"></a>3. 设置用户信息</h2><p>提交代码前需要先设置用户信息</p>
<pre><code class="line-numbers language-bash">git config user.name &quot;name&quot;
git config user.email &quot;email address&quot;</code></pre>
<h2 id="4-增删文件"><a href="#4-增删文件" class="headerlink" title="4. 增删文件"></a>4. 增删文件</h2><pre><code class="line-numbers language-bash"># 添加指定文件到暂存区
git add file1 file2 ...
# 添加所有文件
git add --all

# 删除工作区文件，并且将这次删除放入暂存区
git rm file1 file2 ...

# 停止追踪指定文件，但该文件会保留在工作区
git rm --cached file</code></pre>
<h2 id="5-提交到本地"><a href="#5-提交到本地" class="headerlink" title="5. 提交到本地"></a>5. 提交到本地</h2><pre><code class="line-numbers language-bash">git commit -m message</code></pre>
<h2 id="6-提交到远程仓库"><a href="#6-提交到远程仓库" class="headerlink" title="6. 提交到远程仓库"></a>6. 提交到远程仓库</h2><pre><code class="line-numbers language-bash">git push</code></pre>
<h2 id="7-从远程仓库更新"><a href="#7-从远程仓库更新" class="headerlink" title="7. 从远程仓库更新"></a>7. 从远程仓库更新</h2><pre><code class="line-numbers language-bash"># 清除本地修改
git reset --hard

# 更新
git pull</code></pre>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>软件使用</tag>
        <tag>Ubuntu</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>只想静静的</title>
    <url>/p/7528df7e.html</url>
    <content><![CDATA[<p>有时候，莫名的心情不好<br>不想和任何人说话，只想一个人静静的发呆<br>有时候，夜深人静，突然觉得不是睡不着<br>而是固执地不想睡</p>
<a id="more"></a>
<p>有时候，听到一首歌，就会突然想起一个人<br>有时候，别人突然对你说，我觉得你变了<br>然后自己开始百感交集<br>不同的情歌，却总是演绎着相同的哀伤<br>这些天，总是听这些歌，看着这些词<br>回忆曾经的点点滴滴<br>看着窗外雨一阵一阵降落，听着哗啦啦的雨声<br>就像此时的心情，时起时落漂浮不定</p>
<p>好象突然发现了什么<br>未曾经意从几时起总是喜欢一个人静静地凝视着发呆傻傻的看一件东西、一些事物<br>好像能吸取其中的奥妙<br><img src="//gitee.com/guoke3915/zw/raw/master/p/7528df7e/19826068-c79afbae0b0920bb.jpg" alt></p>
<p>寂寞的人<br>寂寞的心<br>寂寞的夜<br>有些失落<br>有些悲伤<br>也许是我想太多</p>
<p>我只能像现在这样<br>不吵不闹<br>不悲不喜<br>安安静静的<br>静静的<br>… …</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10 移动屏幕外的窗口返回屏幕</title>
    <url>/p/4f8d4bb3.html</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>双屏用习惯了，现在远程办公只有单屏了，原来打开的Cocos Creator不在屏幕内，打开后就找不到了。</p>
<a id="more"></a>
<ul>
<li>系统：Win10</li>
<li>软件：Cocos Creator<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ol>
<li>在下边任务栏中确认软件运行状态</li>
<li>在桌面上随便打开一个窗口</li>
<li>按Win+方向左键<br>激活的软件会在左侧，其他运行的软件的缩略图会出现在右侧<br><img src="//gitee.com/guoke3915/zw/raw/master/p/4f8d4bb3/19826068-1239bf9518c3392a-1581851916986.png" alt></li>
</ol>
</li>
</ul>
<ol start="4">
<li>选择Cocos Creator就可以在屏幕上显示需要的窗口了</li>
</ol>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 发送QQ邮件</title>
    <url>/p/cef164ca.html</url>
    <content><![CDATA[<h2 id="1-开启SMTP服务"><a href="#1-开启SMTP服务" class="headerlink" title="1. 开启SMTP服务"></a>1. 开启SMTP服务</h2><p>1.1 在QQ邮箱的 <strong>设置-&gt;账户</strong> 里开启 SMTP 服务</p>
<a id="more"></a>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/cef164ca/1581753992690.png" alt></p>
<p>1.2 QQ邮箱不能直接用QQ密码，而是使用 <strong>授权码</strong> ，点击 <strong>生成授权码</strong></p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/cef164ca/1581754348008.png" alt></p>
<h2 id="2-编写代码"><a href="#2-编写代码" class="headerlink" title="2. 编写代码"></a>2. 编写代码</h2><p>2.1 添加依赖的jar包<br>maven中在直接添加</p>
<pre><code class="line-numbers language-xml">&lt;dependency&gt;
   &lt;groupId&gt;com.sun.mail&lt;/groupId&gt;
   &lt;artifactId&gt;javax.mail&lt;/artifactId&gt;
   &lt;version&gt;1.5.1&lt;/version&gt;
&lt;/dependency&gt;</code></pre>
<p>或去官方下载地址 <a href="http://www.oracle.com/technetwork/java/javasebusiness/downloads/java-archive-downloads-eeplat-419426.html#javamail-1.4.7-oth-JPR。" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javasebusiness/downloads/java-archive-downloads-eeplat-419426.html#javamail-1.4.7-oth-JPR。</a><br>解压完之后，通常我们只需要其中的mail.jar，把它加到我们 java 工程的依赖包中。<br>2.2 添加代码</p>
<pre><code class="line-numbers language-java">import java.util.Properties;
import javax.mail.*;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import com.moxiang.arch.log.Log;
import com.sun.mail.util.MailSSLSocketFactory;

public class SendQQMail {

     /**
     * 发送邮件
     * @param title 邮件标题
     * @param text 邮件内容
     * @param to  接收人邮箱地址
     * @param from 发件人邮箱地址
     * @param pwd 授权码
     * @return
     */
    public static void Send(String title, String text, String to, String from, String pwd){
        Properties props = new Properties();

        // 开启debug调试
        props.setProperty(&quot;mail.debug&quot;, &quot;true&quot;);
        // 发送服务器需要身份验证
        props.setProperty(&quot;mail.smtp.auth&quot;, &quot;true&quot;);
        // 设置邮件服务器主机名
        props.setProperty(&quot;mail.host&quot;, &quot;smtp.qq.com&quot;);
        // 发送邮件协议名称
        props.setProperty(&quot;mail.transport.protocol&quot;, &quot;smtp&quot;);

        try {
            MailSSLSocketFactory sf = new MailSSLSocketFactory();
            sf.setTrustAllHosts(true);
            props.put(&quot;mail.smtp.ssl.enable&quot;, &quot;true&quot;);
            props.put(&quot;mail.smtp.ssl.socketFactory&quot;, sf);

            Session session = Session.getInstance(props);

            Message msg = new MimeMessage(session);
            msg.setSubject(title);
            StringBuilder builder = new StringBuilder();
            builder.append(text);
            msg.setText(builder.toString());
            msg.setFrom(new InternetAddress(from));

            Transport transport = session.getTransport();
            transport.connect(&quot;smtp.qq.com&quot;, from, pwd);

            transport.sendMessage(msg, new Address[] { new InternetAddress(to) });
            transport.close();
        }catch (Exception e) {
            Log.error(e);
        }
    }
}</code></pre>
<p>2.3 测试<br>编写测试代码</p>
<pre><code class="line-numbers language-java">SendQQMail.SendEmail(&quot;QQMail 测试&quot;,&quot;这是 Java 发送 QQMail 测试代码！&quot;, &quot;接收邮箱&quot;,&quot;发送的QQ邮箱&quot;,&quot;发送邮箱对应授权码&quot;);</code></pre>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/cef164ca/1581755694497.png" alt="1581755694497"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>何去何从</title>
    <url>/p/db7fe348.html</url>
    <content><![CDATA[<p>​        在魔都已经呆过九个年头，又在妖都呆了一年。今年又因疫情，现在还呆在家没有出门，感觉有种无形的压力压的好心累，在家远程上班也心不在焉。面对着未知的前程和迷茫的人生，我该何去何从？</p>
<a id="more"></a>

<p>​        今天也和很多朋友谈起了未来的路怎么走。在游戏行业，基本上一路迷茫，游戏公司挂掉的在90%以上，赚钱的游戏少之又少。在这个行业做了近十年了，经历过端游、页游及手游也有四五六款了，但是没一款成功上线的游戏，不是开发过程中断了就是到内测封测时各种原因无法上线。别看网上数据某某游戏流水过千万之类的，这需要天时地利人和等各种客观条件才能达到，否则比彩票中奖的概率还低。</p>
<p>​        是否要考虑转职，这也是一个箭在弦上不得不思考的问题。玩的好的哥们儿除了学计算机的就是弄金融的，曾经也买过一些金融方面的资料来学习，有朋友说会编程的可以做一些私募做量化投资的，还有互联网金融肯定是未来的发展方向，如果能用好计算机技能肯定很吃香。这也是一个可以考虑的方向。。。</p>
<p>​        在哪儿活不是活对吧，魔都可以是积累第一桶金和人脉的地方，但是因为各种偶然或必然的因素没有做好资本的原始积累，离开了魔都来到妖都，换个地方、换个环境，也希望疫情过后换个新的方式重新开始。别人说的永远是建议无论再选择哪里、什么行业、什么职位，都只有自己为自己的选择买单。没有不喜欢，只有适合不适合。没有不想怎么样，只有怎么样能让我更好的发展就怎么样。</p>
<p>​        已不是一个小孩子了。得为自己的人生做一份详细的规划了，一份包括财务、健康、亲情、爱情、友情、成长等方面都要考虑进去的规划。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>最孤独的代码</title>
    <url>/p/3b6f45f6.html</url>
    <content><![CDATA[<p><img src="//gitee.com/guoke3915/zw/raw/master/p/3b6f45f6/1581852769139.png" alt></p>
<pre><code class="line-numbers language-c++">#include&lt;stdio.h&gt;
int main() 
{
    double world;
    unsigned letter;
    short stay;
    long memories;
    printf(&quot;I miss you.\n&quot;);
}</code></pre>
<p>两个世界，<br>一封失信，<br>短暂相陪，<br>长久回忆。<br>唯留心头一句：“想你！”倏然打印。<br>进程却已抹去。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>一片伤心画不成</title>
    <url>/p/cb1d4911.html</url>
    <content><![CDATA[<p>夜阑人静，月满小楼西。<br>小窗幽灯，眸对半阙残词，正恁凝愁。<br>恨堂前斜目，瞥见惊鸿，<br>笑靥粉面，秋水娇横。<br>薶蔓衰草低迷，闲愁知几许？</p>
<a id="more"></a>
<p>欲笺心事付瑶琴，人不知，书成谁与？<br>纵使梅子黄时，满城飞絮，乱鸦啼，不及我愁。<br>轻启舍闩，学园曲径，独徘徊。<br>翠湖柳下，月影浮动，<br>几多鸳鸯，不畏三冬寒。<br>当识趣，<br>恐惊月下缠绵人，和羞走。<br>但愿此身化石桥。<br>五百年，雨打风蚀，<br>换一回，香履凌波步。<br>一片伤心，却又道画不成。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>长相思</title>
    <url>/p/acc2262c.html</url>
    <content><![CDATA[<p>相思苦，苦相思<br>相思苦苦苦无期，相思相见时<br>相思苦，苦相思<br>相思树下恨相思，相思人不知</p>
<a id="more"></a>
<p>明知相思苦，无奈苦相思<br>相思的尽头，念着你的电话号码，始终没有将它拨通<br>一个人不孤寂，念一个人才孤寂<br>时间，一步一步地在走<br>时钟，滴答滴答地响着<br>夜，又一次深了，一天就这么的过去了<br>美好总是虚幻的，可，我却无法选择<br>只能文字来流露内心的感受<br>一种淡淡的，哀伤的，寂寞的，无奈的…</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Xshell 设置窗口透明</title>
    <url>/p/1562be49.html</url>
    <content><![CDATA[<ol>
<li>打开<code>工具</code>-&gt;<code>选 项</code><a id="more"></a>
<img src="//gitee.com/guoke3915/zw/raw/master/p/1562be49/19826068-ecf7d472741121a9.png" alt></li>
<li>切换到查看页签，勾选<code>使窗口透明</code><br><img src="//gitee.com/guoke3915/zw/raw/master/p/1562be49/19826068-49fb55b073b232d3.png" alt></li>
<li>然后窗口就透明了<br><img src="//gitee.com/guoke3915/zw/raw/master/p/1562be49/19826068-6ad827c8f1a9e157.png" alt></li>
</ol>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux中周期任务</title>
    <url>/p/e2daa99b.html</url>
    <content><![CDATA[<p>在Linux下可以用crontab命来设置周期任务</p>
<h3 id="1-crontab文件"><a href="#1-crontab文件" class="headerlink" title="1. crontab文件"></a>1. crontab文件</h3><a id="more"></a>
<pre><code class="line-numbers language-bash">[root@guoke3915 ~]# cat /etc/crontab
SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root

# For details see man 4 crontabs

# Example of job definition:
# .---------------- minute (0 - 59)
# |  .------------- hour (0 - 23)
# |  |  .---------- day of month (1 - 31)
# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
# |  |  |  |  |
# *  *  *  *  * user-name  command to be executed</code></pre>
<h3 id="2-查看当前任务"><a href="#2-查看当前任务" class="headerlink" title="2. 查看当前任务"></a>2. 查看当前任务</h3><pre><code class="line-numbers language-bash">[root@guoke3915 ~]# crontab -l
0 * * * * /data/test.sh</code></pre>
<h3 id="3-解析"><a href="#3-解析" class="headerlink" title="3. 解析"></a>3. 解析</h3><table>
<thead>
<tr>
<th>参数</th>
<th>字段名称</th>
<th>说明</th>
<th>取值范围</th>
</tr>
</thead>
<tbody><tr>
<td>第一位</td>
<td>分钟</td>
<td>每小时的第几分钟执行</td>
<td>0-59</td>
</tr>
<tr>
<td>第二位</td>
<td>小时</td>
<td>每日的第几个小时执行</td>
<td>0-23</td>
</tr>
<tr>
<td>第三位</td>
<td>日期</td>
<td>每月的第几天执行</td>
<td>1-31</td>
</tr>
<tr>
<td>第四位</td>
<td>月历</td>
<td>每年的第几月执行</td>
<td>1-12</td>
</tr>
<tr>
<td>第五位</td>
<td>星期</td>
<td>每周的第几天执行</td>
<td>0-6</td>
</tr>
<tr>
<td>第六位</td>
<td>命令名称</td>
<td>欲执行的命令及参数</td>
<td>若是sh文件需要绝对路径</td>
</tr>
</tbody></table>
<h3 id="4-特殊符号"><a href="#4-特殊符号" class="headerlink" title="4. 特殊符号"></a>4. 特殊符号</h3><table>
<thead>
<tr>
<th>符号</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>表示任何时刻</td>
</tr>
<tr>
<td>,</td>
<td>表示分割</td>
</tr>
<tr>
<td>－</td>
<td>表示一个段，如第二段里： 1-5，就表示1到5点</td>
</tr>
<tr>
<td>/n</td>
<td>表示每个n的单位执行一次，如第二段里，*/1, 就表示每隔1个小时执行一次命令。也可以写成1-23/1.</td>
</tr>
</tbody></table>
<h3 id="5-编辑"><a href="#5-编辑" class="headerlink" title="5. 编辑"></a>5. 编辑</h3><p>输入<code>crontab -e</code>直接编辑</p>
<h3 id="6-启动、停止、重启服务和重新加载配置"><a href="#6-启动、停止、重启服务和重新加载配置" class="headerlink" title="6. 启动、停止、重启服务和重新加载配置"></a>6. 启动、停止、重启服务和重新加载配置</h3><pre><code class="line-numbers language-bash">/sbin/service crond start
/sbin/service crond stop
/sbin/service crond restart
/sbin/service crond reload</code></pre>
<h3 id="7-举例"><a href="#7-举例" class="headerlink" title="7. 举例"></a>7. 举例</h3><pre><code class="line-numbers language-bash">0 * * * * /data/test.sh   # 每分钟0秒执行
*/10 * * * * /data/test.sh # 每10分钟秒执行
55 5 * * * /data/test.sh   # 每天05:55执行
5 8-20/3 * * *　/data/test.sh  #　　　　　8:05,11:05,14:05,17:05,20:05 执行</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>git保存账号密码</title>
    <url>/p/cf319f1d.html</url>
    <content><![CDATA[<ol>
<li>进入项目目录的.git目录</li>
<li>使用git config –list查询当前配置<a id="more"></a>
<pre><code class="line-numbers language-bash">git config --list
core.repositoryformatversion=0
core.filemode=true
core.bare=false
core.logallrefupdates=true
remote.origin.url=https://e.coding.net/guoke3915/coding-demo/guoke3915.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.master.remote=origin
branch.master.merge=refs/heads/master</code></pre>
</li>
<li>发现没有<code>credential.helper=store</code></li>
<li>所以打开./git/config文件最后加入<pre><code class="line-numbers language-ini">[credential]
 helper = store</code></pre>
</li>
<li>然后在项目中使用git pull，会输入账号密码，之后直接就不需要输入了</li>
<li>如果不想保存，则删除即可</li>
</ol>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js环境搭建</title>
    <url>/p/20164ccf.html</url>
    <content><![CDATA[<h2 id="1-Windows-环境安装"><a href="#1-Windows-环境安装" class="headerlink" title="1. Windows 环境安装"></a>1. Windows 环境安装</h2><h3 id="1-1-下载"><a href="#1-1-下载" class="headerlink" title="1.1 下载"></a>1.1 下载</h3><a id="more"></a>
<p>先进入Node.js官网下载对应的安装包：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a><br><img src="//gitee.com/guoke3915/zw/raw/master/p/20164ccf/19826068-4b0a578e0323677d.png" alt></p>
<h3 id="1-2-安装"><a href="#1-2-安装" class="headerlink" title="1.2 安装"></a>1.2 安装</h3><p>直接运行 node的msi安装文件安装，并等待安装完成<br><img src="//gitee.com/guoke3915/zw/raw/master/p/20164ccf/19826068-2c6e92b3358872f0.png" alt></p>
<h3 id="1-3-测试"><a href="#1-3-测试" class="headerlink" title="1.3 测试"></a>1.3 测试</h3><p>在命令行中输入<code>node --version</code></p>
<pre><code class="line-numbers language-powershell">C:\Users\Administrator&gt;node --version
v12.15.0</code></pre>
<h2 id="2-Linux环境安装"><a href="#2-Linux环境安装" class="headerlink" title="2. Linux环境安装"></a>2. Linux环境安装</h2><h3 id="2-1-获取下载地址"><a href="#2-1-获取下载地址" class="headerlink" title="2.1 获取下载地址"></a>2.1 获取下载地址</h3><p>先进入Node.js官网获取对应的安装包的地下载址：[<a href="https://nodejs.org/en/download/]" target="_blank" rel="noopener">https://nodejs.org/en/download/]</a><br>这里用Linux x64的版本 <code>https://nodejs.org/dist/v12.15.0/node-v12.15.0-linux-x64.tar.xz</code></p>
<h3 id="2-2-下载安装"><a href="#2-2-下载安装" class="headerlink" title="2.2 下载安装"></a>2.2 下载安装</h3><p>这里下载到/data目录下</p>
<pre><code class="line-numbers language-bash">wget https://nodejs.org/dist/v12.15.0/node-v12.15.0-linux-x64.tar.xz    # 下载
tar xf  node-v12.15.0-linux-x64.tar.xz        # 解压
cd node-v12.15.0-linux-x64/                       # 进入解压目录
./bin/node -v                                                  # 执行node命令 查看版本</code></pre>
<h3 id="2-3-配置环境"><a href="#2-3-配置环境" class="headerlink" title="2.3 配置环境"></a>2.3 配置环境</h3><pre><code class="line-numbers language-bash">ln -s /data/node-v12.15.0-linux-x64/bin/npm   /usr/local/bin/ 
ln -s /data/node-v12.15.0-linux-x64/bin/node   /usr/local/bin/
node -v    # 测试</code></pre>
<h3 id="2-4-配置全局环境"><a href="#2-4-配置全局环境" class="headerlink" title="2.4 配置全局环境"></a>2.4 配置全局环境</h3><pre><code class="line-numbers language-bash">vim ~/.bash_profile

# 修改最后PATH的值，加入 /home/node-v12.15.0-linux-x64/bin
PATH=$PATH:$HOME/bin:/home/node-v12.15.0-linux-x64/bin

# 执行生效
source .bash_profile</code></pre>
<h2 id="3-Mac-环境安装"><a href="#3-Mac-环境安装" class="headerlink" title="3. Mac 环境安装"></a>3. Mac 环境安装</h2><h3 id="3-1-下载"><a href="#3-1-下载" class="headerlink" title="3.1 下载"></a>3.1 下载</h3><p>先进入Node.js官网下载对应的pkg安装包：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></p>
<h3 id="3-2-安装"><a href="#3-2-安装" class="headerlink" title="3.2 安装"></a>3.2 安装</h3><p>直接双击pkg包安装<br><img src="//gitee.com/guoke3915/zw/raw/master/p/20164ccf/19826068-dd4d4ceee20bbe9b.png" alt></p>
<h3 id="3-3-测试"><a href="#3-3-测试" class="headerlink" title="3.3 测试"></a>3.3 测试</h3><pre><code class="line-numbers language-bash">node --v
v12.15.0
</code></pre>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>软件使用</tag>
        <tag>Window</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客</title>
    <url>/p/2fe3da.html</url>
    <content><![CDATA[<h1 id="一、博客搭建"><a href="#一、博客搭建" class="headerlink" title="一、博客搭建"></a>一、博客搭建</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br>中文文档：<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">https://hexo.io/zh-cn/</a></p>
<a id="more"></a>

<h2 id="2-环境安装"><a href="#2-环境安装" class="headerlink" title="2. 环境安装"></a>2. 环境安装</h2><p><a href="/p/20164ccf.html">Node.js环境搭建</a>：Hexo需要依赖node环境<br>git：需要部署到GithubPage，就要用到git</p>
<h2 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3. 安装Hexo"></a>3. 安装Hexo</h2><pre><code class="line-numbers language-bash">npm install hexo-cli -g</code></pre>
<h2 id="4-初始化Hexo"><a href="#4-初始化Hexo" class="headerlink" title="4. 初始化Hexo"></a>4. 初始化Hexo</h2><pre><code class="line-numbers language-bash"># blog为hexo博客的根目录，可以是相对路径也可以是绝对路径
hexo init blog
cd blog
npm install</code></pre>
<h2 id="5-本地启动"><a href="#5-本地启动" class="headerlink" title="5. 本地启动"></a>5. 本地启动</h2><pre><code class="line-numbers language-bash">hexo s</code></pre>
<p>在浏览器中打开 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 浏览</p>
<h2 id="6-成静态网页"><a href="#6-成静态网页" class="headerlink" title="6. 成静态网页"></a>6. 成静态网页</h2><pre><code class="line-numbers language-bash">hexo g</code></pre>
<p>会在博客根目录中生成public静态网页目录</p>
<h2 id="7-部署到GithubPages"><a href="#7-部署到GithubPages" class="headerlink" title="7. 部署到GithubPages"></a>7. 部署到GithubPages</h2><p>7.1 创建<a href="https://github.com/" target="_blank" rel="noopener">Github</a>账号<br>7.2 创建仓库， 仓库名为：&lt;Github账号名称&gt;.github.io<br>7.3 将本地Hexo博客推送到GithubPages<br>7.4 安装hexo-deployer-git插件</p>
<pre><code class="line-numbers language-bash">npm install hexo-deployer-git --save</code></pre>
<p>7.5 添加SSH key</p>
<ul>
<li>创建一个 SSH key 。</li>
</ul>
<pre><code class="line-numbers language-bash">ssh-keygen -t rsa -C &quot;邮箱地址&quot;</code></pre>
<ul>
<li>添加到 github。 复制密钥文件内容（路径形如<code>C:\Users\Administrator\.ssh\id_rsa.pub</code>），粘贴到<a href="https://github.com/settings/keys" target="_blank" rel="noopener">New SSH Key</a>即可。</li>
<li>测试是否添加成功。</li>
</ul>
<pre><code class="line-numbers language-powershell">C:\Users\Administrator&gt;ssh -T git@github.com
Hi zngw! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></pre>
<p>7.6 修改博客根目录下的 _config.yml文件，在末尾修改为：</p>
<pre><code class="line-numbers language-yaml"># Deployment
## Docs: https://hexo.io/docs/deployment.html
deploy:
  type: git
  repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git
  branch: master</code></pre>
<p>7.7 推送到GithubPages</p>
<pre><code class="line-numbers language-bash">hexo d</code></pre>
<p>浏览器访问网址： https://&lt;Github账号名称&gt;.github.io<br>7.8 绑定自定义域名<br>参考之前的文章：<a href="/p/582348ec.html">为简书绑定自己的域名</a></p>
<h2 id="8-部署到CodingPages"><a href="#8-部署到CodingPages" class="headerlink" title="8. 部署到CodingPages"></a>8. 部署到CodingPages</h2><p>GithubPages 在国内较慢，百度不收录，而CodingPages 在国外较快。<br>8.1 创建<a href="https://github.com/" target="_blank" rel="noopener">Github</a>账号<br>8.2 创建一个项目或直接进入示例项目，在项目中创建仓库， 仓库名为随意<br>8.3 获取项目的SSH地址<br><img src="//gitee.com/guoke3915/zw/raw/master/p/2fe3da/19826068-b48e4f9cbc860003.png" alt><br>8.4 如前面 github一样。 复制密钥文件内容（路径形如<code>C:\Users\Administrator\.ssh\id_rsa.pub</code>），粘贴到个人账户里的SSH公钥中<br><img src="//gitee.com/guoke3915/zw/raw/master/p/2fe3da/19826068-3fea048081d8d6de.png" alt><br>8.5  测试是否添加成功。</p>
<pre><code class="line-numbers language-bash">ssh -T git@e.coding.net
Coding 提示: Hello xx, You&#39;ve connected to Coding.net via SSH. This is a personal key.
xx，你好，你已经通过 SSH 协议认证 Coding.net 服务，这是一个个人公钥</code></pre>
<p>8.6 修改博客根目录下的 _config.yml文件，在末尾添加：</p>
<pre><code class="line-numbers language-yaml">deploy:
- type: git
  repo: git@github.com:zngw/zngw.github.io.git
  branch: master
- type: git
  repo: git@e.coding.net:guoke3915/coding-demo/guoke3915.git # 前面获取的SSH地址
  branch: master</code></pre>
<p>8.7 推送到CodingPages</p>
<pre><code class="line-numbers language-bash">hexo d</code></pre>
<p>8.8. 开通静站网站<br>进入项目 中，新建静态网站<br><img src="//gitee.com/guoke3915/zw/raw/master/p/2fe3da/19826068-1068d412e6939066.png" alt><br>8.9 绑定域名</p>
<ul>
<li>将域名用CNAME解析到CodingPages提供的*.coding-pages.com域名上</li>
<li>填写域名并绑定<br><img src="//gitee.com/guoke3915/zw/raw/master/p/2fe3da/19826068-fb71dcbc93ac6a3b.jpg" alt></li>
</ul>
<h1 id="二、添加分类及标签"><a href="#二、添加分类及标签" class="headerlink" title="二、添加分类及标签"></a>二、添加分类及标签</h1><h2 id="1-文章分类"><a href="#1-文章分类" class="headerlink" title="1. 文章分类"></a>1. 文章分类</h2><h3 id="1-1-生成分类目录"><a href="#1-1-生成分类目录" class="headerlink" title="1.1 生成分类目录"></a>1.1 生成分类目录</h3><pre><code class="line-numbers language-bash">hexo new page categories</code></pre>
<p>生成目录之后，会在根目录的source目录中多出一个categories目录。</p>
<h3 id="1-2-分类配置"><a href="#1-2-分类配置" class="headerlink" title="1.2 分类配置"></a>1.2 分类配置</h3><p>在categories目录中有一个index.md文件，在文件中添加<code>type: categories</code></p>
<pre><code class="line-numbers language-markdown">---
title: 分类
date: 2020-02-10 14:47:40
type: categories
---</code></pre>
<h3 id="1-3-增加多个分类"><a href="#1-3-增加多个分类" class="headerlink" title="1.3 增加多个分类"></a>1.3 增加多个分类</h3><p>在categories目录中有一个index.md文件，复制多份就可以了</p>
<pre><code class="line-numbers language-markdown">---
title: 分类一
date: 2020-02-10 14:47:40
type: categories
---

---
title: 分类二
date: 2020-02-10 14:47:40
type: categories
---</code></pre>
<h3 id="1-4-给文章添加”分类”属性"><a href="#1-4-给文章添加”分类”属性" class="headerlink" title="1.4 给文章添加”分类”属性"></a>1.4 给文章添加”分类”属性</h3><pre><code class="line-numbers language-markdown">---
title: 文章标题
date: 2020-02-10 14:47:40
categories: 分类
---</code></pre>
<p>文章分类属性只能存在一个，如果写了多个，只有第一个会启效果</p>
<h2 id="2-文章标签"><a href="#2-文章标签" class="headerlink" title="2. 文章标签"></a>2. 文章标签</h2><h3 id="2-1-生成标签目录"><a href="#2-1-生成标签目录" class="headerlink" title="2.1 生成标签目录"></a>2.1 生成标签目录</h3><pre><code class="line-numbers language-bash">hexo new page tags</code></pre>
<p>生成目录之后，会在根目录的source目录中多出一个tags目录。</p>
<h3 id="2-2-标签配置"><a href="#2-2-标签配置" class="headerlink" title="2.2 标签配置"></a>2.2 标签配置</h3><p>在tags目录中有一个index.md文件，在文件中添加<code>type: tags</code></p>
<pre><code class="line-numbers language-markdown">---
title: 标签
date: 2020-02-10 14:47:40
type: tags
---</code></pre>
<h3 id="2-3-增加多个标签"><a href="#2-3-增加多个标签" class="headerlink" title="2.3 增加多个标签"></a>2.3 增加多个标签</h3><p>在tags目录中有一个index.md文件，复制多份就可以了</p>
<pre><code class="line-numbers language-markdown">---
title: 标签一
date: 2020-02-10 14:47:40
type: tags
---

---
title: 标签二
date: 2020-02-10 14:47:40
type: tags
---</code></pre>
<h3 id="2-4-给文章添加”标签”属性"><a href="#2-4-给文章添加”标签”属性" class="headerlink" title="2.4 给文章添加”标签”属性"></a>2.4 给文章添加”标签”属性</h3><pre><code class="line-numbers language-markdown">---
title: 文章标题
date: 2020-02-10 14:47:40
categories: 分类
tags:
  - 标签一
  - 标签二
---</code></pre>
<p>文章标签属性可存在多个</p>
<h1 id="三、链接持久化"><a href="#三、链接持久化" class="headerlink" title="三、链接持久化"></a>三、链接持久化</h1><h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h2><p>使用Hexo后，默认的链接是 <a href="http://url/2020/02/10/hello-world" target="_blank" rel="noopener">http://url/2020/02/10/hello-world</a> 这种类型的，这是由年/月/日/标题组成。如果调整过日期会变化，还有就是标题是中文或存在特殊符号的时候这样的链接可能就有问题。</p>
<h2 id="2-安装hexo-abbrlink插件"><a href="#2-安装hexo-abbrlink插件" class="headerlink" title="2. 安装hexo-abbrlink插件"></a>2. 安装<code>hexo-abbrlink</code>插件</h2><pre><code class="line-numbers language-bash">npm install hexo-abbrlink --save</code></pre>
<h2 id="3-配置"><a href="#3-配置" class="headerlink" title="3. 配置"></a>3. 配置</h2><p>在根目录下的配置_config.yml里的配置:permalink </p>
<pre><code class="line-numbers language-yaml">permalink: p/:abbrlink.html
abbrlink:
  alg: crc32  # 算法：crc16(default) and crc32
  rep: hex    # 进制：dec(default) and hex</code></pre>
<p>生成之后的效果是这样的了<a href="http://url/p/2fe3da.html" target="_blank" rel="noopener">http://url/p/2fe3da.html</a></p>
<h2 id="4-说明"><a href="#4-说明" class="headerlink" title="4. 说明"></a>4. 说明</h2><ul>
<li>如果文章头中存在<code>abbrlink</code>，则不会做任何处理。</li>
<li>如查文章头中不存在<code>abbrlink</code>，则会et <code>title</code>根据配置的alg算法来成生abbrlink字符串</li>
<li>当然，你也可以自己手动为特殊的文章写链接地址。只要在文章中配置好<code>abbrlink</code>就可以了</li>
</ul>
<pre><code class="line-numbers language-yaml">title: Hexo博客
categories: 
  - 软件使用
tags:
  - 博客
abbrlink: hexo-blog
date: 2020-02-09 15:55:55</code></pre>
<h1 id="四、本地图片"><a href="#四、本地图片" class="headerlink" title="四、本地图片"></a>四、本地图片</h1><h2 id="1-前提"><a href="#1-前提" class="headerlink" title="1. 前提"></a>1. 前提</h2><p>在Hexo插入本地图片的时候，生成静态页面的时候不会将图片复制到发布目录下，这样发布出去后就不会显示出图片了。</p>
<h2 id="2-安装转换插件"><a href="#2-安装转换插件" class="headerlink" title="2. 安装转换插件"></a>2. 安装转换插件</h2><p>安装<code>hexo-zngw-asset-image</code>插件</p>
<pre><code class="line-numbers language-bash">npm install hexo-zngw-asset-image --save</code></pre>
<h2 id="3-修改配置"><a href="#3-修改配置" class="headerlink" title="3. 修改配置"></a>3. 修改配置</h2><p>打开根目录下_config.yml配置文件，修改</p>
<pre><code class="line-numbers language-yaml">post_asset_folder: true</code></pre>
<p>添加</p>
<pre><code class="line-numbers language-yaml">imgroot: /  #如查有第三方图片存储添写，如果用本地用`/`</code></pre>
<h2 id="4-使用"><a href="#4-使用" class="headerlink" title="4. 使用"></a>4. 使用</h2><ul>
<li>在<code>*.md</code>文件所在的目录下，创建与<code>*.md</code>文件同名的文件夹。如 在<code>hello-world.md</code>文件新建<code>hello-world</code>目录</li>
<li>然后将需要的图片放到<code>hello-world</code>目录中</li>
<li>引用的时候使用<code>![](hello-world/19826068-331999cfa433e146.jpg)</code><h2 id="5-Typora-MarkDown编辑使用"><a href="#5-Typora-MarkDown编辑使用" class="headerlink" title="5. Typora MarkDown编辑使用"></a>5. Typora MarkDown编辑使用</h2>用Typora编辑文件时，可以调整一下图片插入配置，直接拖入本地图片或远程图片自动直接保存为<code>*.md</code>同名文件夹目录<br><img src="//gitee.com/guoke3915/zw/raw/master/p/2fe3da/19826068-2d57fbc9de01ab45.png" alt></li>
</ul>
<h1 id="五、使用next主题"><a href="#五、使用next主题" class="headerlink" title="五、使用next主题"></a>五、使用next主题</h1><h2 id="1-安装next主题"><a href="#1-安装next主题" class="headerlink" title="1. 安装next主题"></a>1. 安装next主题</h2><p>进入Blog目录文件下，通过git直接下载</p>
<pre><code class="line-numbers language-bash">git clone https://github.com/iissnan/hexo-theme-next themes/next</code></pre>
<h2 id="2-使用next主题"><a href="#2-使用next主题" class="headerlink" title="2. 使用next主题"></a>2. 使用next主题</h2><p>打开Blog目录下的_config.yml文件，修改<code>theme: next</code></p>
<h2 id="3-修改语言"><a href="#3-修改语言" class="headerlink" title="3. 修改语言"></a>3. 修改语言</h2><p>next主题的中文语言是<code>zh-Hans</code><br>打开Blog目录下的_config.yml文件，修改<code>language: zh-Hans</code></p>
<h2 id="4-切换子主题"><a href="#4-切换子主题" class="headerlink" title="4. 切换子主题"></a>4. 切换子主题</h2><p>在themes/next/_config.yml文件中，有四个主题，选择一个喜欢的主题</p>
<pre><code class="line-numbers language-yaml"># Schemes
#scheme: Muse      # 菜单在上边
#scheme: Mist        # 菜单在上边
scheme: Pisces        # 菜单在左边
#scheme: Gemini   # 菜单在左边</code></pre>
<h2 id="5-设置菜单"><a href="#5-设置菜单" class="headerlink" title="5. 设置菜单"></a>5. 设置菜单</h2><p>打开themes/next/_config.yml配置文件，找到<strong>menu</strong>，也可以自己添加</p>
<pre><code class="line-numbers language-yaml">menu:
  home: /|| home                          # 首页
  #about: /about/|| user             #  关于
  tags: /tags/|| tags                      # 标签
  categories: /categories/|| th   # 分类
  archives: /archives/|| archive # 归档
# Enable/Disable menu icons.
menu_icons:
  enable: true</code></pre>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/2fe3da/19826068-8f98f816fad24558.png" alt></p>
<h2 id="6-添加分类和标签"><a href="#6-添加分类和标签" class="headerlink" title="6. 添加分类和标签"></a>6. 添加分类和标签</h2><pre><code class="line-numbers language-bash">hexo new page &quot;categories&quot;
hexo new page &quot;tags&quot;</code></pre>
<p>详细见：<a href="#二、添加分类及标签">二、添加分类及标签</a></p>
<h2 id="7-修改图标"><a href="#7-修改图标" class="headerlink" title="7. 修改图标"></a>7. 修改图标</h2><p>打开themes/next/_config.yml配置文件，找到<code>favicon</code>，修改自己的图标</p>
<pre><code class="line-numbers language-yaml">favicon:
  small: /images/favicon-16x16-next.png
  medium: /images/favicon-32x32-next.png
  apple_touch_icon: /images/apple-touch-icon-next.png
  safari_pinned_tab: /images/logo.svg
  #android_manifest: /images/manifest.json
  #ms_browserconfig: /images/browserconfig.xml</code></pre>
<h2 id="8-添加添加RSS"><a href="#8-添加添加RSS" class="headerlink" title="8. 添加添加RSS"></a>8. 添加添加RSS</h2><p>安装Hexo插件</p>
<pre><code class="line-numbers language-bash">npm install --save hexo-generator-feed</code></pre>
<p>打开themes/next/_config.yml配置文件, 添加</p>
<pre><code class="line-numbers language-yaml">rss: /atom.xml</code></pre>
<h2 id="9-隐藏底部Hexo强力驱动、主题–NexT-Mist"><a href="#9-隐藏底部Hexo强力驱动、主题–NexT-Mist" class="headerlink" title="9. 隐藏底部Hexo强力驱动、主题–NexT.Mist"></a>9. 隐藏底部Hexo强力驱动、主题–NexT.Mist</h2><p>打开themes/next/_config.yml配置文件，修改</p>
<pre><code class="line-numbers language-yaml">  powered: false
  theme:
    enable: false
    version: false</code></pre>
<h2 id="10-设置社交小图标设置"><a href="#10-设置社交小图标设置" class="headerlink" title="10. 设置社交小图标设置"></a>10. 设置社交小图标设置</h2><p>打开themes/next/_config.yml配置文件，修改<br>[社交平台名]: [社交地址] || <a href="http://www.fontawesome.com.cn/faicons/" target="_blank" rel="noopener">[图标名称]</a></p>
<pre><code class="line-numbers language-yaml">social:
  GitHub: https://github.com/zngw || github
  简书: https://www.jianshu.com/u/a51cd2236c13 || heartbeat
  E-Mail: mailto:55@mail.zengwu.com.cn || envelope
  微博: https://weibo.com/21592355 || weibo
  Google: https://plus.google.com/guoke3915 || google
  乐乎: https://zengwu3915.lofter.com || camera-retro</code></pre>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/2fe3da/19826068-f12334447df366e9.png" alt></p>
<h2 id="11-设置推荐阅读"><a href="#11-设置推荐阅读" class="headerlink" title="11. 设置推荐阅读"></a>11. 设置推荐阅读</h2><p>打开themes/next/_config.yml配置文件，修改</p>
<pre><code class="line-numbers language-yaml"># Blog rolls
links_icon: link
links_title: 推荐阅读
#links_layout: block
links_layout: inline
links:
  Hexo官网: https://hexo.io/</code></pre>
<h2 id="12-修改文章内链接文本样式"><a href="#12-修改文章内链接文本样式" class="headerlink" title="12. 修改文章内链接文本样式"></a>12. 修改文章内链接文本样式</h2><p>默认文章内链接没有特殊颜色，修改一下就和正常网页一下，默认是蓝色，鼠标移动上去成橘色<br>修改<code>themes/next/source/css/_common/components/post/post.styl</code>，在末尾添加CSS样式：</p>
<pre><code class="line-numbers language-css">// 文章内链接文本样式
.post-body p a{
  color: #0593d3; //原始链接颜色
  border-bottom: none;
  border-bottom: 1px solid #0593d3; //底部分割线颜色
  &amp;:hover {
    color: #fc6423; //鼠标经过颜色
    border-bottom: none;
    border-bottom: 1px solid #fc6423; //底部分割线颜色
  }
}</code></pre>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/2fe3da/19826068-7ead79ff0c0f8324.png" alt></p>
<h2 id="13-修改底部标签样式"><a href="#13-修改底部标签样式" class="headerlink" title="13. 修改底部标签样式"></a>13. 修改底部标签样式</h2><p>修改<code>\themes\next\layout\_macro\post.swig</code>中文件，<code>command+f</code>搜索<code>rel=&quot;tag&quot;&gt;#</code>，将<code>#</code>替换成<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code>。<br><img src="//gitee.com/guoke3915/zw/raw/master/p/2fe3da/19826068-3e5fca5c19ad0df2.png" alt></p>
<h2 id="14-设置头像并设置动画效果"><a href="#14-设置头像并设置动画效果" class="headerlink" title="14. 设置头像并设置动画效果"></a>14. 设置头像并设置动画效果</h2><p>设置头像圆角并旋转，打开<code>/themes/next/source/css/_common/components/sidebar/sidebar-author.styl</code>，添加以下代码：</p>
<pre><code class="line-numbers language-css">.site-author-image {
  display: block;
  margin: 0 auto;
  padding: $site-author-image-padding;
  max-width: $site-author-image-width;
  height: $site-author-image-height;
  border: $site-author-image-border-width solid $site-author-image-border-color;
  /* 头像圆形 */
  border-radius: 80px;
  -webkit-border-radius: 80px;
  -moz-border-radius: 80px;
  box-shadow: inset 0 -1px 0 #333sf;
  /* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 
    (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/

  /* 鼠标经过头像旋转360度 */
  -webkit-transition: -webkit-transform 1.0s ease-out;
  -moz-transition: -moz-transform 1.0s ease-out;
  transition: transform 1.0s ease-out;
}
img:hover {
  /* 鼠标经过停止头像旋转 
  -webkit-animation-play-state:paused;
  animation-play-state:paused;*/
  /* 鼠标经过头像旋转360度 */
  -webkit-transform: rotateZ(360deg);
  -moz-transform: rotateZ(360deg);
  transform: rotateZ(360deg);
}
/* Z 轴旋转动画 */
@-webkit-keyframes play {
  0% {
    -webkit-transform: rotateZ(0deg);
  }
  100% {
    -webkit-transform: rotateZ(-360deg);
  }
}
@-moz-keyframes play {
  0% {
    -moz-transform: rotateZ(0deg);
  }
  100% {
    -moz-transform: rotateZ(-360deg);
  }
}
@keyframes play {
  0% {
    transform: rotateZ(0deg);
  }
  100% {
    transform: rotateZ(-360deg);
  }
}</code></pre>
<h2 id="14-主页文章添加阴影效果"><a href="#14-主页文章添加阴影效果" class="headerlink" title="14. 主页文章添加阴影效果"></a>14. 主页文章添加阴影效果</h2><p>打开<code>themes\next\source\css\_custom\custom.styl</code>，添加以下代码：</p>
<pre><code class="line-numbers language-css">// 主页文章添加阴影效果
 .post {
   margin-top: 60px;
   margin-bottom: 60px;
   padding: 25px;
   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);
   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);
  }</code></pre>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/2fe3da/19826068-f2f9db203f78ee5c.png" alt></p>
<h2 id="15-网站底部加上不蒜子访问量"><a href="#15-网站底部加上不蒜子访问量" class="headerlink" title="15. 网站底部加上不蒜子访问量"></a>15. 网站底部加上不蒜子访问量</h2><p>因为不蒜子域名改了，next 5.1.4版本还没有更新，所以，打开<code>themes/next/layout/_third-party/analytics/busuanzi-counter.swig</code></p>
<pre><code class="line-numbers language-JavaScript">&lt;script async src=&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</code></pre>
<p>打开<code>themes/next/_config.yml</code>配置文件，修改</p>
<pre><code class="line-numbers language-yaml">busuanzi_count:
  # count values only if the other configs are false
  enable: true    # 开启统计
  # custom uv span for the whole site
  site_uv: true  # 开始uv总访问量
  site_uv_header: 您是第 # 数字前显示
  site_uv_footer:  位访客 # 数字后显示
  # custom pv span for the whole site
  site_pv: true  # 开始pv总访问量
  site_pv_header: 总访问量 # 数字前显示
  site_pv_footer:  # 数字后显示
  # custom pv span for one page only
  page_pv: false # 文章统计
  page_pv_header: &lt;i class=&quot;fa fa-file-o&quot;&gt;&lt;/i&gt; # 数字前显示
  page_pv_footer: # 数字后显示</code></pre>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/2fe3da/19826068-3684fcc1cb5aa7a9.png" alt></p>
<h2 id="16-添加LeanCloud文章统计"><a href="#16-添加LeanCloud文章统计" class="headerlink" title="16. 添加LeanCloud文章统计"></a>16. 添加LeanCloud文章统计</h2><p>先去LeanCloud官网注册一个账号，创建一个应用，进入<strong>存储</strong>，创建名为<code>Counter</code>的Class<br>打开<code>themes/next/_config.yml</code>配置文件，修改</p>
<pre><code class="line-numbers language-yaml"># Show number of visitors to each article.
# You can visit https://leancloud.cn get AppID and AppKey.
leancloud_visitors:
  enable: ture
  app_id: app_id
  app_key: app_key</code></pre>
<h2 id="17-统计网站和文章字数"><a href="#17-统计网站和文章字数" class="headerlink" title="17. 统计网站和文章字数"></a>17. 统计网站和文章字数</h2><p>安装hexo插件</p>
<pre><code class="line-numbers language-bash">npm install hexo-wordcount --save</code></pre>
<p>打开<code>themes/next/_config.yml</code>配置文件，修改</p>
<pre><code class="line-numbers language-yaml"># Post wordcount display settings
# Dependencies: https://github.com/willin/hexo-wordcount
post_wordcount:
  item_text: true
  wordcount: true
  min2read: true
  totalcount: true
  separated_meta: true</code></pre>
<p>找到语言文件<code>themes\next\languages\zh-Hans.yml</code>,修改<code>totalcount: 全站字数</code><br><img src="//gitee.com/guoke3915/zw/raw/master/p/2fe3da/19826068-caebed690959ae88.png" alt></p>
<h2 id="18-添加站内搜索"><a href="#18-添加站内搜索" class="headerlink" title="18. 添加站内搜索"></a>18. 添加站内搜索</h2><p>安装插件</p>
<pre><code class="line-numbers language-bash">npm install hexo-generator-search --save
npm install hexo-generator-searchdb --save</code></pre>
<p>打开<code>themes/next/_config.yml</code>配置文件，修改</p>
<pre><code class="line-numbers language-yaml"># Local search
# Dependencies: https://github.com/flashlab/hexo-generator-search
local_search:
  enable: true
  # if auto, trigger search by changing input
  # if manual, trigger search by pressing enter key or search button
  trigger: auto
  # show top n results per article, show all results by setting to -1
  top_n_per_article: 1</code></pre>
<h2 id="19-在文章底部增加版权信息"><a href="#19-在文章底部增加版权信息" class="headerlink" title="19. 在文章底部增加版权信息"></a>19. 在文章底部增加版权信息</h2><p>打开<code>themes/next/_config.yml</code>配置文件，修改为true</p>
<pre><code class="line-numbers language-yaml"># Declare license on posts
post_copyright:
  enable: true
  license: CC BY-NC-SA 3.0
  license_url: https://creativecommons.org/licenses/by-nc-sa/3.0/</code></pre>
<p>如果要修改内容，找到语言文件<code>themes\next\languages\zh-Hans.yml</code>,修改</p>
<pre><code class="line-numbers language-yaml">  copyright:
    author: 本文作者
    link: 本文链接
    license_title: 版权声明
    license_content: &#39;本博客所有文章除特别声明外，均采用
      &lt;a href=&quot;%s&quot; rel=&quot;external nofollow&quot; target=&quot;_blank&quot;&gt;%s&lt;/a&gt; 许可协议。转载请注明出处！&#39;</code></pre>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/2fe3da/19826068-496601d10f6b8a7f.png" alt></p>
<h1 id="六、prism代码高亮"><a href="#六、prism代码高亮" class="headerlink" title="六、prism代码高亮"></a>六、prism代码高亮</h1><p>hexo 默认的代码高亮插件为 highlight.js，highlight在代码不标明语言的时候，好像不会自识别，然后在网上找到一个prism的高亮</p>
<h2 id="1-禁用highlight"><a href="#1-禁用highlight" class="headerlink" title="1. 禁用highlight"></a>1. 禁用highlight</h2><p>打开根目录下的<code>_config.yml</code>文件，修改配置</p>
<pre><code class="line-numbers language-yaml">highlight:
  enable: false
  line_number: false
  auto_detect: false
  tab_replace:</code></pre>
<h2 id="2-获取prism"><a href="#2-获取prism" class="headerlink" title="2. 获取prism"></a>2. 获取prism</h2><p>下载页面：<a href="https://prismjs.com/download.html" target="_blank" rel="noopener">https://prismjs.com/download.html</a>；选择 theme 主题、language 支持的语言（不要选太多，够用就好）、plugin 插件（可以选Line Numbers、Copyto Clipboard Button，其他的看自己需求）；然后点击下载按钮就行了；下载到本地之后，将它们重命名为 <code>prism.js</code>、<code>prism.css</code>，然后将它们放置到 <code>$HEXO/themes/next/source/js/prism/</code> 目录下（prism 文件夹需要自己新建），即它们的路径分别是：</p>
<pre><code class="line-numbers language-bash">/themes/next/source/js/prism/prism.js
/themes/next/source/js/prism/prism.css</code></pre>
<h2 id="3-配置-prism"><a href="#3-配置-prism" class="headerlink" title="3. 配置 prism"></a>3. 配置 prism</h2><ul>
<li>修改 <code>themes/next/layout/_partials/head.swig</code>，在尾部添加以下代码：</li>
</ul>
<pre><code class="line-numbers language-JavaScript">&lt;link rel=&quot;stylesheet&quot; href=&quot;/js/prism/prism.css&quot;&gt;</code></pre>
<ul>
<li>修改 <code>themes/next/layout/_partials/footer.swig</code>，在尾部添加以下代码</li>
</ul>
<pre><code class="line-numbers language-JavaScript">&lt;script src=&quot;/js/prism/prism.js&quot; async&gt;&lt;/script&gt;</code></pre>
<h2 id="4-修改博客配置"><a href="#4-修改博客配置" class="headerlink" title="4. 修改博客配置"></a>4. 修改博客配置</h2><p>打开根目录下的<code>_config.yml</code>文件，添加下面代码</p>
<pre><code class="line-numbers language-yaml">marked:
  langPrefix: line-numbers language-</code></pre>
<h2 id="4-测试prism"><a href="#4-测试prism" class="headerlink" title="4. 测试prism"></a>4. 测试prism</h2><p>清理后，重新运行直接测试</p>
<pre><code class="line-numbers language-bash">hexo clean &amp;&amp; hexo s</code></pre>
<h1 id="七、gitalk评论系统"><a href="#七、gitalk评论系统" class="headerlink" title="七、gitalk评论系统"></a>七、gitalk评论系统</h1><p>gitalk：一个基于 Github Issue 和 Preact 开发的评论插件</p>
<h2 id="1-优缺点"><a href="#1-优缺点" class="headerlink" title="1. 优缺点"></a>1. 优缺点</h2><ul>
<li>优点：页面简洁好看，可以去Github后台查看管理</li>
<li>缺点：需要github登录后才可以评论，国内访问比较慢</li>
</ul>
<h2 id="2-注册Github应用"><a href="#2-注册Github应用" class="headerlink" title="2. 注册Github应用"></a>2. 注册Github应用</h2><p>在GitHub上注册新应用，链接：<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">https://github.com/settings/applications/new</a><br><img src="//gitee.com/guoke3915/zw/raw/master/p/2fe3da/19826068-3428c09a7a0d6429.png" alt><br>参数说明：</p>
<ul>
<li>Application name： # 应用名称，随意guoke3915</li>
<li>Homepage URL： # 网站URL，如<a href="https://guoke3915.icu" target="_blank" rel="noopener">https://guoke3915.icu</a></li>
<li>Application description # 描述，随意</li>
<li>Authorization callback URL：# 网站URL，<a href="https://guoke3915.icu" target="_blank" rel="noopener">https://guoke3915.icu</a> ,好像只有指定网页的请求可以访问，其他网页进入时会出现验证错误<br>点击注册后，页面跳转如下，其中Client ID和Client Secret在后面的配置中需要用到，到时复制粘贴即可：<br><img src="//gitee.com/guoke3915/zw/raw/master/p/2fe3da/19826068-5d93e42b821e890f.png" alt></li>
</ul>
<h2 id="3-创建gitalk-swig"><a href="#3-创建gitalk-swig" class="headerlink" title="3. 创建gitalk.swig"></a>3. 创建gitalk.swig</h2><p>新建/layout/_third-party/comments/gitalk.swig文件，并添加内容  </p>
<pre><code class="line-numbers language-swig">{% if page.comments &amp;&amp; theme.gitalk.enable %}
  &lt;link rel=&quot;stylesheet&quot; href=&quot;//unpkg.com/gitalk/dist/gitalk.css&quot;/&gt;
  &lt;script src=&quot;//unpkg.com/gitalk/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;  
  &lt;script type=&quot;text/javascript&quot;&gt;  
    var gitalk = new Gitalk({
      clientID: &#39;{{ theme.gitalk.ClientID }}&#39;,
      clientSecret: &#39;{{ theme.gitalk.ClientSecret }}&#39;,
      repo: &#39;{{ theme.gitalk.repo }}&#39;,
      owner: &#39;{{ theme.gitalk.githubID }}&#39;,
      admin: [&#39;{{ theme.gitalk.adminUser }}&#39;],
      id: location.pathname,
      distractionFreeMode: &#39;{{ theme.gitalk.distractionFreeMode }}&#39;
    })
    gitalk.render(&#39;gitalk-container&#39;)           
  &lt;/script&gt;
{% endif %}</code></pre>
<h2 id="4-修改comments-swig"><a href="#4-修改comments-swig" class="headerlink" title="4. 修改comments.swig"></a>4. 修改comments.swig</h2><p>修改/layout/_partials/comments.swig，添加内容如下，与前面的elseif同一级别上</p>
<pre><code class="line-numbers language-JavaScript">{% elseif theme.gitalk.enable %}
 &lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt;</code></pre>
<h2 id="5-修改index-swig"><a href="#5-修改index-swig" class="headerlink" title="5. 修改index.swig"></a>5. 修改index.swig</h2><p>修改layout/_third-party/comments/index.swig，在最后一行添加内容</p>
<pre><code class="line-numbers language-JavaScript">{% include &#39;gitalk.swig&#39; %}</code></pre>
<h2 id="6-新建gitalk-styl"><a href="#6-新建gitalk-styl" class="headerlink" title="6. 新建gitalk.styl"></a>6. 新建gitalk.styl</h2><p>新建/source/css/_common/components/third-party/gitalk.styl文件，添加内容</p>
<pre><code class="line-numbers language-css">.gt-header a, .gt-comments a, .gt-popup a
  border-bottom: none;
.gt-container .gt-popup .gt-action.is--active:before
  top: 0.7em;</code></pre>
<h2 id="7-修改third-party-styl"><a href="#7-修改third-party-styl" class="headerlink" title="7. 修改third-party.styl"></a>7. 修改third-party.styl</h2><p>修改/source/css/_common/components/third-party/third-party.styl，在最后一行上添加内容，引入样式</p>
<pre><code class="line-numbers language-css">@import &quot;gitalk&quot;;</code></pre>
<h2 id="8-config-yml"><a href="#8-config-yml" class="headerlink" title="8. _config.yml"></a>8. _config.yml</h2><p>在主题配置文件next/_config.yml中添加如下内容</p>
<pre><code class="line-numbers language-yaml">gitalk:
  enable: true
  githubID: github帐号  # 例：guoke3915   
  repo: 仓库名称   # 例：guoke3915.github.io
  ClientID: Client ID
  ClientSecret: Client Secret
  adminUser: github帐号 #指定可初始化评论账户
  distractionFreeMode: true</code></pre>
<h1 id="八、ShareSDK分享功能"><a href="#八、ShareSDK分享功能" class="headerlink" title="八、ShareSDK分享功能"></a>八、ShareSDK分享功能</h1><h2 id="1-注册"><a href="#1-注册" class="headerlink" title="1. 注册"></a>1. 注册</h2><p>先要去<a href="http://sharesdk.mob.com/" target="_blank" rel="noopener">ShareSDK</a>注册账号和项目，然后得到项目的<code>appkey</code>， 获取<a href="http://www.mob.com/wiki/detailed?wiki=ShareSDK_title_webshare&id=14" target="_blank" rel="noopener">网页分享代码</a>，也可以根据文档自己写分享页面</p>
<pre><code class="line-numbers language-html">&lt;!--MOB SHARE BEGIN--&gt;
&lt;div class=&quot;-mob-share-ui-button -mob-share-open&quot;&gt;分享&lt;/div&gt;
&lt;div class=&quot;-mob-share-ui&quot; style=&quot;display: none&quot;&gt;
    &lt;ul class=&quot;-mob-share-list&quot;&gt;
        &lt;li class=&quot;-mob-share-weibo&quot;&gt;&lt;p&gt;新浪微博&lt;/p&gt;&lt;/li&gt;
        &lt;li class=&quot;-mob-share-qzone&quot;&gt;&lt;p&gt;QQ空间&lt;/p&gt;&lt;/li&gt;
        &lt;li class=&quot;-mob-share-qq&quot;&gt;&lt;p&gt;QQ好友&lt;/p&gt;&lt;/li&gt;
        &lt;li class=&quot;-mob-share-douban&quot;&gt;&lt;p&gt;豆瓣&lt;/p&gt;&lt;/li&gt;
        &lt;li class=&quot;-mob-share-facebook&quot;&gt;&lt;p&gt;Facebook&lt;/p&gt;&lt;/li&gt;
        &lt;li class=&quot;-mob-share-twitter&quot;&gt;&lt;p&gt;Twitter&lt;/p&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;div class=&quot;-mob-share-close&quot;&gt;取消&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;-mob-share-ui-bg&quot;&gt;&lt;/div&gt;
&lt;script id=&quot;-mob-share&quot; src=&quot;//f1.webshare.mob.com/code/mob-share.js?appkey=你的appkey&quot;&gt;&lt;/script&gt;
&lt;!--MOB SHARE END--&gt;</code></pre>
<h2 id="2-创建文件"><a href="#2-创建文件" class="headerlink" title="2. 创建文件"></a>2. 创建文件</h2><p>创建文件themes/next/layout/_partials/share/sharesdk.swig的文件。将上面的分享代码复制过来，并修改appkey的值</p>
<pre><code class="line-numbers language-JavaScript">&lt;script id=&quot;-mob-share&quot; src=&quot;http://f1.webshare.mob.com/code/mob-share.js?appkey={{ theme.sharesdk.appkey }}&quot;&gt;&lt;/script&gt;</code></pre>
<h2 id="3-添加可选配置"><a href="#3-添加可选配置" class="headerlink" title="3. 添加可选配置"></a>3. 添加可选配置</h2><p>虽然我们添加了sharesdk的分享的按钮了，但是如果有一天我们不想使用了呢。当然，很简单。只需要修改配置文件就可以了。那么如何实现呢？<br>首先，找到主题文件夹下的layout文件夹下的post.swig<br>找到分享代码段</p>
<pre><code class="line-numbers language-JavaScript">&lt;div class=&quot;post-spread&quot;&gt;
      {% if theme.jiathis %}
        {% include &#39;_partials/share/jiathis.swig&#39; %}
      {% elseif theme.baidushare %}
        {% include &#39;_partials/share/baidushare.swig&#39; %}
      {% elseif theme.add_this_id %}
        {% include &#39;_partials/share/add-this.swig&#39; %}
      {% elseif theme.duoshuo_shortname and theme.duoshuo_share %}
        {% include &#39;_partials/share/duoshuo_share.swig&#39; %}
        {% elseif theme.sharesdk %}
        {% include &#39;_partials/share/sharesdk.swig&#39; %}
      {% endif %}
    &lt;/div&gt;</code></pre>
<p>添加了代码</p>
<pre><code class="line-numbers language-JavaScript">{% elseif theme.sharesdk %}
        {% include &#39;_partials/share/sharesdk.swig&#39; %}</code></pre>
<p>这段代码就是根据主题文件的配置，来为文档添加相应的swig文件。要想实现在配置文件中选择性的使用分享功能，只需要在配置文件中修改即可。</p>
<h2 id="4-修改-config-yml"><a href="#4-修改-config-yml" class="headerlink" title="4. 修改_config.yml"></a>4. 修改_config.yml</h2><p>接下来就是修改项目的配置文件了。在主题的配置文件中添加：</p>
<pre><code class="line-numbers language-yaml">#Share
sharesdk: true
shareSDKappkey: appkey</code></pre>
<h1 id="九、-添加近期文章板块"><a href="#九、-添加近期文章板块" class="headerlink" title="九、 添加近期文章板块"></a>九、 添加近期文章板块</h1><p>在Hexo博客左侧导航栏中友情链接上面加入近期文章模块</p>
<h2 id="1-修改sidebar-swig文件"><a href="#1-修改sidebar-swig文件" class="headerlink" title="1. 修改sidebar.swig文件"></a>1. 修改sidebar.swig文件</h2><p>打开 next/layout/_macro/sidebar.swig 中的 if theme.links 对应的 endif 上面插入代码</p>
<pre><code class="line-numbers language-swig">{# Blogroll #}
{% if theme.recent_posts %}
  &lt;div class=&quot;links-of-blogroll motion-element {{ &quot;links-of-blogroll-&quot; + theme.recent_posts_layout  }}&quot;&gt;
  &lt;div class=&quot;links-of-blogroll-title&quot;&gt;
  &lt;!-- modify icon to fire by szw --&gt;
  &lt;i class=&quot;fa fa-history fa-{{ theme.recent_posts_icon | lower }}&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;
  {{ theme.recent_posts_title }}
  &lt;/div&gt;
    &lt;ul class=&quot;links-of-blogroll-list&quot;&gt;
      {% set posts = site.posts.sort(&#39;-date&#39;) %}
      {% for post in posts.slice(&#39;0&#39;, &#39;5&#39;) %}
          &lt;li class=&#39;pull-left&#39; style=&quot;white-space:nowrap&quot; &gt;
            &lt;time title=&quot;{{ __(&#39;post.created&#39;) }}&quot; itemprop=&quot;dateCreated datePublished&quot; datetime=&quot;{{ moment(post.date).format() }}&quot;&gt;
              {{ date(post.date, config.mmdd_format) }}
            &lt;/time&gt;
            &lt;a href=&quot;{{ url_for(post.path) }}&quot; title=&quot;{{ post.title }}&quot;&gt;{{ post.title }}&lt;/a&gt;
            &lt;br&gt;
          &lt;/li&gt;
        {% endfor %}
      &lt;/ul&gt;
    &lt;/div&gt;
  {% endif %}
{# Blogroll #}
{% if theme.links %}</code></pre>
<h2 id="2-设置主题配置文件"><a href="#2-设置主题配置文件" class="headerlink" title="2. 设置主题配置文件"></a>2. 设置主题配置文件</h2><p>打开 next/_config.yml添加</p>
<pre><code class="line-numbers language-yaml">recent_posts_title: 近期文章
recent_posts_layout: block
recent_posts: true</code></pre>
<h2 id="3-设置时间格式"><a href="#3-设置时间格式" class="headerlink" title="3. 设置时间格式"></a>3. 设置时间格式</h2><p>打开 _config.yml添加</p>
<pre><code class="line-numbers language-yaml">mmdd_format: MM-DD</code></pre>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="//gitee.com/guoke3915/zw/raw/master/p/2fe3da/19826068-d2d68515b43564c1.png" alt></p>
<h1 id="十、新增阅读排行页面"><a href="#十、新增阅读排行页面" class="headerlink" title="十、新增阅读排行页面"></a>十、新增阅读排行页面</h1><p>next中有一个firestore的排行，但是这个是基于Google的，所以国内很难访问，下面加一个用 leancloud 来实现的。首先要开启<code>leancloud_visitors</code>文章统计功能</p>
<h2 id="1-新建排行页面"><a href="#1-新建排行页面" class="headerlink" title="1. 新建排行页面"></a>1. 新建排行页面</h2><p><code>hexo n page top</code> 新建页面，会生成 top 目录，编辑其中自动生成的 index.md 文件，将其中的代码替换如下：</p>
<pre><code class="line-numbers language-JavaScript">---
title: 热度排行
---
&lt;div id=&quot;top&quot;&gt;&lt;/div&gt;
&lt;script src=&quot;http://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;AV.initialize(&quot;leancloud_appid&quot;, &quot;leancloud_appkey&quot;);&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
var showTop = function(){
  var showCount=25
  var time=0
  var index = 0;
  var title=&quot;&quot;
  var url=&quot;&quot;
  var query = new AV.Query(&#39;Counter&#39;);
  query.notEqualTo(&#39;id&#39;,0);
  query.descending(&#39;time&#39;);
  query.limit(showCount);
  query.find()
    .done(function (todo) {
      for (var i=0;i&lt;showCount; i++){
        var result=todo[i].attributes;
        time=result.time;
        title=result.title;
        url=result.url;
        if(url===&#39;url&#39;){
          // 如果网络延迟导致获取数据失败，1秒后重试
          setTimeout(showTop,1000)
          return
        }else {
          index++;
          var content=&quot;&lt;div&gt;&lt;span class=&#39;pull-left&#39;&gt;&lt;font color=&#39;#EE0000&#39;&gt;&quot;+index+&quot;    &lt;/font&gt;&quot;+&quot;&lt;a href=&#39;&quot;+&quot;..&quot;+url+&quot;&#39; rel=&#39;section&#39;&gt;&quot;+title+&quot;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;pull-right&#39;&gt;&lt;font color=&#39;#519ABA&#39;&gt;&quot;+time+&quot;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&quot;
          document.getElementById(&quot;top&quot;).innerHTML+=content
        }
      }
    })
    .fail(function (object, error) {
      console.log(&quot;Error: &quot; + error.code + &quot; &quot; + error.message);
    });
  }
setTimeout(showTop,1000)
&lt;/script&gt;</code></pre>
<p>并将其中的 <code>leancloud_appid</code>、<code>leancloud_appkey</code>替换成你自己的。<br>##2. 配置菜单显示<br>编辑主题配置文件<code>themes\next\_config.yml</code>，添加 top：</p>
<pre><code class="line-numbers language-yaml">menu:
  home: / || home
  top: /top/ || signal</code></pre>
<h2 id="3-新增菜单栏的显示名称"><a href="#3-新增菜单栏的显示名称" class="headerlink" title="3. 新增菜单栏的显示名称"></a>3. 新增菜单栏的显示名称</h2><p><code>hexo/theme/next/languages/zh-Hans.yml</code>，同样新增 top 对应的中文：</p>
<pre><code class="line-numbers language-yaml">menu:
  home: 首页
  archives: 归档
  categories: 分类
  tags: 标签
  about: 关于
  search: 搜索
  schedule: 日程表
  sitemap: 站点地图
  commonweal: 公益404
  top: 热度</code></pre>
<h2 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h2><p><code>hexo clean &amp;&amp; hexo s</code><br><img src="//gitee.com/guoke3915/zw/raw/master/p/2fe3da/19826068-cc558d3075bd01ee.png" alt></p>
<h1 id="十一、文章置顶"><a href="#十一、文章置顶" class="headerlink" title="十一、文章置顶"></a>十一、文章置顶</h1><h2 id="1-安装插件"><a href="#1-安装插件" class="headerlink" title="1. 安装插件"></a>1. 安装插件</h2><pre><code class="line-numbers language-bash">npm uninstall hexo-generator-index --save
npm install hexo-generator-index-pin-top --save</code></pre>
<h2 id="2-修改置顶标签"><a href="#2-修改置顶标签" class="headerlink" title="2. 修改置顶标签"></a>2. 修改置顶标签</h2><p>然后在需要置顶的文章的Front-matter中加上top: 10即可。比如下面这篇文章：</p>
<pre><code class="line-numbers language-md">---
title: Hexo博客
categories: 软件使用
tags:
  - 软件使用
abbrlink: 2fe3da
date: 2020-02-09 15:55:55
top: 10
---</code></pre>
<p>说明： 可以多个文章置顶，top值越大，文章排最前</p>
<h2 id="3-设置置顶标志"><a href="#3-设置置顶标志" class="headerlink" title="3. 设置置顶标志"></a>3. 设置置顶标志</h2><p>打开：/themes/next/layout/_macro 目录下的post.swig文件，定位到<div class="post-meta">标签下，插入如下代码：</div></p>
<pre><code class="line-numbers language-swig">{% if post.top %}
  &lt;i class=&quot;fa fa-thumb-tack&quot;&gt;&lt;/i&gt;
  &lt;font color=7D26CD&gt;置顶&lt;/font&gt;
  &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;
{% endif %}</code></pre>
<h2 id="4-效果"><a href="#4-效果" class="headerlink" title="4. 效果"></a>4. 效果</h2><p><img src="//gitee.com/guoke3915/zw/raw/master/p/2fe3da/19826068-4c468ac2abcbd189.png" alt></p>
<h1 id="十二、发布时通过ssh使用远程服务器自动拉取"><a href="#十二、发布时通过ssh使用远程服务器自动拉取" class="headerlink" title="十二、发布时通过ssh使用远程服务器自动拉取"></a>十二、发布时通过ssh使用远程服务器自动拉取</h1><p>最近把服务器改成了阿里云的ECS，每次发布的时候还得手动去服务器上pull一下代码，感觉挺麻烦的，于是写了一个插件可以自己拉取。</p>
<h2 id="1-安装插件-1"><a href="#1-安装插件-1" class="headerlink" title="1. 安装插件"></a>1. 安装插件</h2><pre><code class="line-numbers language-bash">npm install hexo-zngw-asset-image</code></pre>
<h2 id="2-配置服务器信息"><a href="#2-配置服务器信息" class="headerlink" title="2. 配置服务器信息"></a>2. 配置服务器信息</h2><p>打开博客目录下的_config.yml配置添加：</p>
<pre><code class="line-numbers language-yml">zngw_sshpull:
    host: zengwu.com.cn   ## 需要更新的服务器地址，可以是ip也可以是域名 
    port: 22              ## 服务器ssh连接端口
    username: root        ## ssh连接用户名
    # password:           ## ssh连接密码，如果填了密码，则私钥无效
    key: ./zngw.pem          ## ssh私钥文件，相对博客根目录路径或绝对路径
    dir: /data/web/blog   ## 博客在服务上的目录，不填写刚不进行目录移动
    exec: git pull        ## 执行的更新命令，也可以在服务器上编写批处理用这个调用</code></pre>
<h2 id="3-配置发布信息"><a href="#3-配置发布信息" class="headerlink" title="3. 配置发布信息"></a>3. 配置发布信息</h2><p>打开博客目录下的_config.yml配置在deploy提交git后添加</p>
<pre><code class="line-numbers language-yml">deploy:
- type: git
  repo: git@github.com:zngw/zngw.github.io.git
  branch: master
- type: zngw-sshpull  # 添加上传配置</code></pre>
<h2 id="4-发布"><a href="#4-发布" class="headerlink" title="4. 发布"></a>4. 发布</h2><p>先在服务器上下载并配置好git，使git记住密码可使用密钥。然后这边发布的时候直接<code>hexo d</code>就可以了，先会提交到git上，结束之后就会ssh连接到服务器执行git pull拉取操作。也可以在服务器上写个批处理，处理自己想要的。</p>
<h1 id="遇到的一些问题"><a href="#遇到的一些问题" class="headerlink" title="遇到的一些问题"></a>遇到的一些问题</h1><h2 id="1-分页显示问题"><a href="#1-分页显示问题" class="headerlink" title="1. 分页显示问题"></a>1. 分页显示问题</h2><p>问题： 切换成next主题后，分页会显示乱码<br><img src="//gitee.com/guoke3915/zw/raw/master/p/2fe3da/19826068-722437ec2532a722.png" alt><br>参考：<a href="https://github.com/hexojs/hexo/issues/3794" target="_blank" rel="noopener">https://github.com/hexojs/hexo/issues/3794</a><br>解决办法：<br>打开<code>themes/next/layout/_partials/pagination.swig</code>文件修改</p>
<pre><code class="line-numbers language-swig">{%- if page.prev or page.next %}
 &lt;nav class=&quot;pagination&quot;&gt;
   {{
     paginator({
       prev_text: &#39;&lt;i class=&quot;fa fa-angle-left&quot; aria-label=&quot;&#39;+__(&#39;accessibility.prev_page&#39;)+&#39;&quot;&gt;&lt;/i&gt;&#39;,
       next_text: &#39;&lt;i class=&quot;fa fa-angle-right&quot; aria-label=&quot;&#39;+__(&#39;accessibility.next_page&#39;)+&#39;&quot;&gt;&lt;/i&gt;&#39;,
       mid_size: 1,
       escape: false
     })
   }}
 &lt;/nav&gt;
{%- endif %}</code></pre>
<h2 id="关闭-highlight-后，代码块swig语法显示问题"><a href="#关闭-highlight-后，代码块swig语法显示问题" class="headerlink" title="关闭 highlight 后，代码块swig语法显示问题"></a>关闭 highlight 后，代码块swig语法显示问题</h2><p>问题，如：swig语法代码</p>
<pre><code class="line-numbers language-swig">{% if page.comments &amp;&amp; theme.gitalk.enable %}
  &lt;link rel=&quot;stylesheet&quot; href=&quot;//unpkg.com/gitalk/dist/gitalk.css&quot;/&gt;
  &lt;script src=&quot;//unpkg.com/gitalk/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;  
  &lt;script type=&quot;text/javascript&quot;&gt;  
    var gitalk = new Gitalk({
      clientID: &#39;{{ theme.gitalk.ClientID }}&#39;,
      clientSecret: &#39;{{ theme.gitalk.ClientSecret }}&#39;,
      repo: &#39;{{ theme.gitalk.repo }}&#39;,
      owner: &#39;{{ theme.gitalk.githubID }}&#39;,
      admin: [&#39;{{ theme.gitalk.adminUser }}&#39;],
      id: location.pathname,
      distractionFreeMode: &#39;{{ theme.gitalk.distractionFreeMode }}&#39;
    })
    gitalk.render(&#39;gitalk-container&#39;)           
  &lt;/script&gt;
{% endif %}</code></pre>
<p>关闭highlight后，显示的结果为<br><img src="//gitee.com/guoke3915/zw/raw/master/p/2fe3da/19826068-2dafe95501d082ca.png" alt><br>解决办法：<br>网上找了很多资料都没有看到相应的解决办法，后来自己跟踪配置文件的<code>highlight</code>变量，找到<code>node_modules\hexo\lib\hexo\post.js</code>文件的<code>cacheObj.escapeAllSwigTags(data.content);</code>解析导致的。<br>我这里的解决办法是，md格式文章内容不做这个解析。搜索到<code>cacheObj.escapeAllSwigTags(data.content);</code>代码，加入 <code>&amp;&amp; ext！==&#39;.md&#39;</code></p>
<pre><code class="line-numbers language-js">      // Escape all Swig tags
      if (!disableNunjucks &amp;&amp; ext !== &#39;.md&#39;) {
        data.content = cacheObj.escapeAllSwigTags(data.content);
      }</code></pre>
<p>这样就该后，结果为：<br><img src="//gitee.com/guoke3915/zw/raw/master/p/2fe3da/19826068-bb8360ed377bcada.png" alt></p>
<h1 id="需要注意的"><a href="#需要注意的" class="headerlink" title="需要注意的"></a>需要注意的</h1><p>在MD写文章的时候，在非代码块位置不能出现swig的语法字符串。否则编译就会报错。所以如果代码，就用”```”包含代码块中，即使”`”都不行</p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ul>
<li><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">https://hexo.io/zh-cn/</a></li>
<li><a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="noopener">http://theme-next.iissnan.com/theme-settings.html</a></li>
<li><a href="https://www.jianshu.com/p/9f0e90cc32c2" target="_blank" rel="noopener">https://www.jianshu.com/p/9f0e90cc32c2</a></li>
<li><a href="https://www.zfl9.com/hexo-code.html" target="_blank" rel="noopener">https://www.zfl9.com/hexo-code.html</a></li>
<li><a href="https://introspelliam.github.io/2018/07/09/hexo/NexT主题中集成gitalk评论系统/" target="_blank" rel="noopener">https://introspelliam.github.io/2018/07/09/hexo/NexT主题中集成gitalk评论系统/</a></li>
<li><a href="https://www.cnblogs.com/ldnh/p/7675704.html" target="_blank" rel="noopener">https://www.cnblogs.com/ldnh/p/7675704.html</a></li>
<li><a href="https://postgres.fun/20190116150800.html" target="_blank" rel="noopener">https://postgres.fun/20190116150800.html</a></li>
<li><a href="https://hoxis.github.io/hexo-next-read-rank.html" target="_blank" rel="noopener">https://hoxis.github.io/hexo-next-read-rank.html</a></li>
<li><a href="http://wangwlj.com/2018/01/09/blog_pin_post/" target="_blank" rel="noopener">http://wangwlj.com/2018/01/09/blog_pin_post/</a></li>
</ul>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
      </tags>
  </entry>
  <entry>
    <title>3D立体动态相册</title>
    <url>/p/5938519a.html</url>
    <content><![CDATA[<p>直接用css做的3D立体动态相册，直接上代码吧</p>
<a id="more"></a>

<p>01.png - 06.png 大小为100<em>100px,<br>1.png - 6.png 大小为400</em>400px</p>
<pre><code class="line-numbers language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
&lt;meta charset=&quot;UTF-8&quot;&gt;
&lt;title&gt;3D立体动态相册&lt;/title&gt;
&lt;style&gt;
*{
    margin:0;
    padding:0;
}
body{
    max-width: 100%;
    min-width: 100%;
    height: 100%;
    background-size: cover;
    background-repeat: no-repeat;
    background-attachment: fixed;
    background-size:100% 100%;
    position: absolute;
    margin-left: auto;
    margin-right: auto;
}
li{
    list-style: none;
}
.box{
    width:200px;
    height:200px;
    background-size: cover;
    background-repeat: no-repeat;
    background-attachment: fixed;
    background-size:100% 100%;
    position: absolute;
    margin-left: 42%;
    margin-top: 22%;
    -webkit-transform-style:preserve-3d;
    -webkit-transform:rotateX(13deg);
    -webkit-animation:move 5s linear infinite;
}
.minbox{
    width:100px;
    height:100px;
    position: absolute;
    left:50px;
    top:30px;
    -webkit-transform-style:preserve-3d;
}
.minbox li{
    width:100px;
    height:100px;
    position: absolute;
    left:0;
    top:0;
}
.minbox li:nth-child(1){
    background: url(../img/01.png) no-repeat 0 0;
    -webkit-transform:translateZ(50px);
}
.minbox li:nth-child(2){
    background: url(../img/02.png) no-repeat 0 0;
    -webkit-transform:rotateX(180deg) translateZ(50px);
}
.minbox li:nth-child(3){
    background: url(../img/03.png) no-repeat 0 0;
    -webkit-transform:rotateX(-90deg) translateZ(50px);
}
.minbox li:nth-child(4){
    background: url(../img/04.png) no-repeat 0 0;
    -webkit-transform:rotateX(90deg) translateZ(50px);
}
.minbox li:nth-child(5){
    background: url(../img/05.png) no-repeat 0 0;
    -webkit-transform:rotateY(-90deg) translateZ(50px);
}
.minbox li:nth-child(6){
    background: url(../img/06.png) no-repeat 0 0;
    -webkit-transform:rotateY(90deg) translateZ(50px);
}
.maxbox li:nth-child(1){
    background: url(../img/1.png) no-repeat 0 0;
    -webkit-transform:translateZ(50px);
}
.maxbox li:nth-child(2){
    background: url(../img/2.png) no-repeat 0 0;
    -webkit-transform:translateZ(50px);
}
.maxbox li:nth-child(3){
    background: url(../img/3.png) no-repeat 0 0;
    -webkit-transform:rotateX(-90deg) translateZ(50px);
}
.maxbox li:nth-child(4){
    background: url(../img/4.png) no-repeat 0 0;
    -webkit-transform:rotateX(90deg) translateZ(50px);
}
.maxbox li:nth-child(5){
    background: url(../img/5.png) no-repeat 0 0;
    -webkit-transform:rotateY(-90deg) translateZ(50px);
}
.maxbox li:nth-child(6){
    background: url(../img/6.png) no-repeat 0 0;
    -webkit-transform:rotateY(90deg) translateZ(50px);
}
.maxbox{
    width: 800px;
    height: 400px;
    position: absolute;
    left: 0;
    top: -20px;
    -webkit-transform-style: preserve-3d;

}
.maxbox li{
    width: 200px;
    height: 200px;
    background: #fff;
    border:1px solid #ccc;
    position: absolute;
    left: 0;
    top: 0;
    opacity: 0.2;
    -webkit-transition:all 1s ease;
}
.maxbox li:nth-child(1){
    -webkit-transform:translateZ(100px);
}
.maxbox li:nth-child(2){
    -webkit-transform:rotateX(180deg) translateZ(100px);
}
.maxbox li:nth-child(3){
    -webkit-transform:rotateX(-90deg) translateZ(100px);
}
.maxbox li:nth-child(4){
    -webkit-transform:rotateX(90deg) translateZ(100px);
}
.maxbox li:nth-child(5){
    -webkit-transform:rotateY(-90deg) translateZ(100px);
}
.maxbox li:nth-child(6){
    -webkit-transform:rotateY(90deg) translateZ(100px);
}
.box:hover ol li:nth-child(1){
    -webkit-transform:translateZ(300px);
    width: 400px;
    height: 400px;
    opacity: 0.8;
    left: -100px;
    top: -100px;
}
.box:hover ol li:nth-child(2){
    -webkit-transform:rotateX(180deg) translateZ(300px);
    width: 400px;
    height: 400px;
    opacity: 0.8;
    left: -100px;
    top: -100px;
}
.box:hover ol li:nth-child(3){
    -webkit-transform:rotateX(-90deg) translateZ(300px);
    width: 400px;
    height: 400px;
    opacity: 0.8;
    left: -100px;
    top: -100px;
}
.box:hover ol li:nth-child(4){
    -webkit-transform:rotateX(90deg) translateZ(300px);
    width: 400px;
    height: 400px;
    opacity: 0.8;
    left: -100px;
    top: -100px;
}
.box:hover ol li:nth-child(5){
    -webkit-transform:rotateY(-90deg) translateZ(300px);
    width: 400px;
    height: 400px;
    opacity: 0.8;
    left: -100px;
    top: -100px;
}
.box:hover ol li:nth-child(6){
    -webkit-transform:rotateY(90deg) translateZ(300px);
    width: 400px;
    height: 400px;
    opacity: 0.8;
    left: -100px;
    top: -100px;
}
@keyframes move{
    0%{
        -webkit-transform: rotateX(13deg) rotateY(0deg);
    }
    100%{
        -webkit-transform:rotateX(13deg) rotateY(360deg);
    }
}
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div class=&quot;box&quot;&gt;
    &lt;ul class=&quot;minbox&quot;&gt;
        &lt;li&gt;&lt;/li&gt;
        &lt;li&gt;&lt;/li&gt;
        &lt;li&gt;&lt;/li&gt;
        &lt;li&gt;&lt;/li&gt;
        &lt;li&gt;&lt;/li&gt;
        &lt;li&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ol class=&quot;maxbox&quot;&gt;
        &lt;li&gt;&lt;/li&gt;
        &lt;li&gt;&lt;/li&gt;
        &lt;li&gt;&lt;/li&gt;
        &lt;li&gt;&lt;/li&gt;
        &lt;li&gt;&lt;/li&gt;
        &lt;li&gt;&lt;/li&gt;
    &lt;/ol&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<style>
*{
    margin:0;
    padding:0;
}
body{
    max-width: 100%;
    min-width: 100%;
    height: 100%;
    background-size: cover;
    background-repeat: no-repeat;
    background-attachment: fixed;
    background-size:100% 100%;
    position: absolute;
    margin-left: auto;
    margin-right: auto;
}
li{
    list-style: none;
}
.box{
    width:200px;
    height:200px;
    background-size: cover;
    background-repeat: no-repeat;
    background-attachment: fixed;
    background-size:100% 100%;
    position: absolute;
    margin-left: 42%;
    margin-top: 22%;
    -webkit-transform-style:preserve-3d;
    -webkit-transform:rotateX(13deg);
    -webkit-animation:move 5s linear infinite;
}
.minbox{
    width:100px;
    height:100px;
    position: absolute;
    left:50px;
    top:30px;
    -webkit-transform-style:preserve-3d;
}
.minbox li{
    width:100px;
    height:100px;
    position: absolute;
    left:0;
    top:0;
}
.minbox li:nth-child(1){
    background: url(/p/5938519a/01.jpg) no-repeat 0 0;
    -webkit-transform:translateZ(50px);
}
.minbox li:nth-child(2){
    background: url(/p/5938519a/02.jpg) no-repeat 0 0;
    -webkit-transform:rotateX(180deg) translateZ(50px);
}
.minbox li:nth-child(3){
    background: url(/p/5938519a/03.jpg) no-repeat 0 0;
    -webkit-transform:rotateX(-90deg) translateZ(50px);
}
.minbox li:nth-child(4){
    background: url(/p/5938519a/04.jpg) no-repeat 0 0;
    -webkit-transform:rotateX(90deg) translateZ(50px);
}
.minbox li:nth-child(5){
    background: url(/p/5938519a/05.jpg) no-repeat 0 0;
    -webkit-transform:rotateY(-90deg) translateZ(50px);
}
.minbox li:nth-child(6){
    background: url(/p/5938519a/06.jpg) no-repeat 0 0;
    -webkit-transform:rotateY(90deg) translateZ(50px);
}
.maxbox li:nth-child(1){
    background: url(/p/5938519a/1.jpg) no-repeat 0 0;
    -webkit-transform:translateZ(50px);
}
.maxbox li:nth-child(2){
    background: url(/p/5938519a/2.jpg) no-repeat 0 0;
    -webkit-transform:translateZ(50px);
}
.maxbox li:nth-child(3){
    background: url(/p/5938519a/3.jpg) no-repeat 0 0;
    -webkit-transform:rotateX(-90deg) translateZ(50px);
}
.maxbox li:nth-child(4){
    background: url(/p/5938519a/4.jpg) no-repeat 0 0;
    -webkit-transform:rotateX(90deg) translateZ(50px);
}
.maxbox li:nth-child(5){
    background: url(/p/5938519a/5.jpg) no-repeat 0 0;
    -webkit-transform:rotateY(-90deg) translateZ(50px);
}
.maxbox li:nth-child(6){
    background: url(/p/5938519a/6.jpg) no-repeat 0 0;
    -webkit-transform:rotateY(90deg) translateZ(50px);
}
.maxbox{
    width: 800px;
    height: 400px;
    position: absolute;
    left: 0;
    top: -20px;
    -webkit-transform-style: preserve-3d;
}
.maxbox li{
    width: 200px;
    height: 200px;
    background: #fff;
    border:1px solid #ccc;
    position: absolute;
    left: 0;
    top: 0;
    opacity: 0.2;
    -webkit-transition:all 1s ease;
}
.maxbox li:nth-child(1){
    -webkit-transform:translateZ(100px);
}
.maxbox li:nth-child(2){
    -webkit-transform:rotateX(180deg) translateZ(100px);
}
.maxbox li:nth-child(3){
    -webkit-transform:rotateX(-90deg) translateZ(100px);
}
.maxbox li:nth-child(4){
    -webkit-transform:rotateX(90deg) translateZ(100px);
}
.maxbox li:nth-child(5){
    -webkit-transform:rotateY(-90deg) translateZ(100px);
}
.maxbox li:nth-child(6){
    -webkit-transform:rotateY(90deg) translateZ(100px);
}
.box:hover ol li:nth-child(1){
    -webkit-transform:translateZ(300px);
    width: 400px;
    height: 400px;
    opacity: 0.8;
    left: -100px;
    top: -100px;
}
.box:hover ol li:nth-child(2){
    -webkit-transform:rotateX(180deg) translateZ(300px);
    width: 400px;
    height: 400px;
    opacity: 0.8;
    left: -100px;
    top: -100px;
}
.box:hover ol li:nth-child(3){
    -webkit-transform:rotateX(-90deg) translateZ(300px);
    width: 400px;
    height: 400px;
    opacity: 0.8;
    left: -100px;
    top: -100px;
}
.box:hover ol li:nth-child(4){
    -webkit-transform:rotateX(90deg) translateZ(300px);
    width: 400px;
    height: 400px;
    opacity: 0.8;
    left: -100px;
    top: -100px;
}
.box:hover ol li:nth-child(5){
    -webkit-transform:rotateY(-90deg) translateZ(300px);
    width: 400px;
    height: 400px;
    opacity: 0.8;
    left: -100px;
    top: -100px;
}
.box:hover ol li:nth-child(6){
    -webkit-transform:rotateY(90deg) translateZ(300px);
    width: 400px;
    height: 400px;
    opacity: 0.8;
    left: -100px;
    top: -100px;
}
@keyframes move{
    0%{
        -webkit-transform: rotateX(13deg) rotateY(0deg);
    }
    100%{
        -webkit-transform:rotateX(13deg) rotateY(360deg);
    }
}
</style>

<div>
<div class="box">
    <ul class="minbox">
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
    </ul>
    <ol class="maxbox">
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
        <li></li>
    </ol>
</div>
下面来看一下效果：  
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
本文参考：https://www.jianshu.com/p/13cbeaafa0c5</div>]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>为简书绑定自己的域名</title>
    <url>/p/582348ec.html</url>
    <content><![CDATA[<h2 id="一、有已备案的域名"><a href="#一、有已备案的域名" class="headerlink" title="一、有已备案的域名"></a>一、有已备案的域名</h2><p>以阿里云域名为例，直接添加 显性URL 解析到自己的简述主页地址就行</p>
<a id="more"></a>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/582348ec/19826068-4ffaed0207bd01f0.png" alt></p>
<h2 id="二、没有备案的域名"><a href="#二、没有备案的域名" class="headerlink" title="二、没有备案的域名"></a>二、没有备案的域名</h2><p>通过Github Pages来跳转</p>
<h3 id="1-注册一个github-com账号"><a href="#1-注册一个github-com账号" class="headerlink" title="1. 注册一个github.com账号"></a>1. 注册一个github.com账号</h3><h3 id="2-创建仓库，仓库名为-账号名-github-io。这里的账号名和Owner一样，否则会访问不了"><a href="#2-创建仓库，仓库名为-账号名-github-io。这里的账号名和Owner一样，否则会访问不了" class="headerlink" title="2. 创建仓库，仓库名为 账号名.github.io。这里的账号名和Owner一样，否则会访问不了"></a>2. 创建仓库，仓库名为 <code>账号名.github.io</code>。这里的账号名和Owner一样，否则会访问不了</h3><p><img src="//gitee.com/guoke3915/zw/raw/master/p/582348ec/19826068-f1fd22f5da398fa6.png" alt></p>
<h3 id="3-在仓库里添加二个文件-index-html-和-CNAME"><a href="#3-在仓库里添加二个文件-index-html-和-CNAME" class="headerlink" title="3. 在仓库里添加二个文件 index.html 和 CNAME"></a>3. 在仓库里添加二个文件 <code>index.html</code> 和 <code>CNAME</code></h3><p><img src="//gitee.com/guoke3915/zw/raw/master/p/582348ec/19826068-0ae3b51a3c4533c6.png" alt></p>
<h3 id="4-index-html文件内容为跳转的简述网址"><a href="#4-index-html文件内容为跳转的简述网址" class="headerlink" title="4. index.html文件内容为跳转的简述网址"></a>4. index.html文件内容为跳转的简述网址</h3><pre><code class="line-numbers language-js">&lt;script&gt;
window.location.href=&quot;https://www.jianshu.com/u/a51cd2236c13&quot;
&lt;/script&gt;</code></pre>
<h3 id="5-CNAME文件内容为解析的域名"><a href="#5-CNAME文件内容为解析的域名" class="headerlink" title="5. CNAME文件内容为解析的域名"></a>5. CNAME文件内容为解析的域名</h3><pre><code class="line-numbers language-CNAME">js.zengwu.com.cn</code></pre>
<h3 id="5-修改域名解析"><a href="#5-修改域名解析" class="headerlink" title="5. 修改域名解析"></a>5. 修改域名解析</h3><p>登录域名管理，修改<code>js.zengwu.com.cn</code>的解析为<code>CNAME</code>值为<code>账号名.github.io</code></p>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows远程桌面双屏设置</title>
    <url>/p/3cdc6683.html</url>
    <content><![CDATA[<p>最近都在远程办公，用的是Windows自带的mstsc远程桌面，连接内网远程桌面可以参考之前写的文章<a href="/p/8426a0a1">frp内网穿透搭建远程桌面</a><br>在公司习惯了双屏开发，所以，本地有双屏的时候，需要设置一下远程连接</p>
<a id="more"></a>
<ol>
<li>打开远程桌面页面</li>
<li>显示选项详情</li>
<li>切换到显示页签</li>
<li>勾选<code>将我的所有监视器用于远程会话(U)</code><br><img src="//gitee.com/guoke3915/zw/raw/master/p/3cdc6683/19826068-2510fe2ec4e5e9a6.png" alt></li>
</ol>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Goland 编译出现：exec: &quot;gcc&quot;: executable file not found in %PATH%</title>
    <url>/p/15f3dbb6.html</url>
    <content><![CDATA[<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>在项目中引用 了cgo库，需要gcd编译c代码</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p><a href="/p/20472bc9.html">在window中，安装mingw-w64</a></p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Window中安装MinGW-W64</title>
    <url>/p/20472bc9.html</url>
    <content><![CDATA[<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><pre><code>    MinGW分为较早开发的MinGW32和之后为编译64位程序开发的MinGW-w64，MinGW32只能编译32位的程序，而mingw64不仅能编译64位程序，也能编译32位程序，还能进行交叉编译，即在32位主机上编译64位程序，在64位主机上编译32位程序。</code></pre><a id="more"></a>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>去官网下载：<a href="https://sourceforge.net/projects/mingw-w64/" target="_blank" rel="noopener">https://sourceforge.net/projects/mingw-w64/</a><br>下载mingw-w64-install.exe</p>
<h3 id="在线安装"><a href="#在线安装" class="headerlink" title="在线安装"></a>在线安装</h3><ol>
<li>直接运行程序，进入安装页面时，选择对应系统设置<br><img src="//gitee.com/guoke3915/zw/raw/master/p/20472bc9/19826068-f786c19fc262ef11.png" alt></li>
<li>设置安装路径，等待下载安装完成<br>不过这个安装过程太慢太慢，还是用离线吧<h3 id="离线安装"><a href="#离线安装" class="headerlink" title="离线安装"></a>离线安装</h3>直接下载mingw-w64文件包（公司电脑是直接把家里的mingw-w64文件夹打包复制过来的，网上也有离线文件下载）<br>解压到安装目录，这里用C:\Program Files\mingw-w64<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3>在Path中加入<pre><code class="line-numbers language-powershell">C:\Program Files\mingw-w64\x86_64-8.1.0-posix-seh-rt_v6-rev0\mingw64\bin</code></pre>
<img src="//gitee.com/guoke3915/zw/raw/master/p/20472bc9/19826068-729cd81a6b466439.png" alt><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3>在运行CMD窗口中输入gcc -v<pre><code class="line-numbers language-powershell">C:\Users\Administrator&gt;gcc -v
Using built-in specs.
COLLECT_GCC=gcc
COLLECT_LTO_WRAPPER=C:/Program\ Files/mingw-w64/x86_64-8.1.0-posix-seh-rt_v6-rev0/mingw64/bin/../libexec/gcc/x86_64-w64-mingw32/8.1.0/lto-wrapper.exe
Target: x86_64-w64-mingw32
Configured with: ../../../src/gcc-8.1.0/configure --host=x86_64-w64-mingw32 --build=x86_64-w64-mingw32 --target=x86_64-w64-mingw32 --prefix=/mingw64 --with-sysroot=/c/mingw810/x86_64-810-posix-seh-rt_v6-rev0/mingw64 --enable-shared --enable-static --disable-multilib --enable-languages=c,c++,fortran,lto --enable-libstdcxx-time=yes --enable-threads=posix --enable-libgomp --enable-libatomic --enable-lto --enable-graphite --enable-checking=release --enable-fully-dynamic-string --enable-version-specific-runtime-libs --disable-libstdcxx-pch --disable-libstdcxx-debug --enable-bootstrap --disable-rpath --disable-win32-registry --disable-nls --disable-werror --disable-symvers --with-gnu-as --with-gnu-ld --with-arch=nocona --with-tune=core2 --with-libiconv --with-system-zlib --with-gmp=/c/mingw810/prerequisites/x86_64-w64-mingw32-static --with-mpfr=/c/mingw810/prerequisites/x86_64-w64-mingw32-static --with-mpc=/c/mingw810/prerequisites/x86_64-w64-mingw32-static --with-isl=/c/mingw810/prerequisites/x86_64-w64-mingw32-static --with-pkgversion=&#39;x86_64-posix-seh-rev0, Built by MinGW-W64 project&#39; --with-bugurl=https://sourceforge.net/projects/mingw-w64 CFLAGS=&#39;-O2 -pipe -fno-ident -I/c/mingw810/x86_64-810-posix-seh-rt_v6-rev0/mingw64/opt/include -I/c/mingw810/prerequisites/x86_64-zlib-static/include -I/c/mingw810/prerequisites/x86_64-w64-mingw32-static/include&#39; CXXFLAGS=&#39;-O2 -pipe -fno-ident -I/c/mingw810/x86_64-810-posix-seh-rt_v6-rev0/mingw64/opt/include -I/c/mingw810/prerequisites/x86_64-zlib-static/include -I/c/mingw810/prerequisites/x86_64-w64-mingw32-static/include&#39; CPPFLAGS=&#39; -I/c/mingw810/x86_64-810-posix-seh-rt_v6-rev0/mingw64/opt/include -I/c/mingw810/prerequisites/x86_64-zlib-static/include -I/c/mingw810/prerequisites/x86_64-w64-mingw32-static/include&#39; LDFLAGS=&#39;-pipe -fno-ident -L/c/mingw810/x86_64-810-posix-seh-rt_v6-rev0/mingw64/opt/lib -L/c/mingw810/prerequisites/x86_64-zlib-static/lib -L/c/mingw810/prerequisites/x86_64-w64-mingw32-static/lib &#39;
Thread model: posix
gcc version 8.1.0 (x86_64-posix-seh-rev0, Built by MinGW-W64 project)</code></pre>
</li>
</ol>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS提审总结</title>
    <url>/p/9540bd95.html</url>
    <content><![CDATA[<h2 id="—–-步骤-—–"><a href="#—–-步骤-—–" class="headerlink" title="—– 步骤 —–"></a>—– 步骤 —–</h2><h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3><ol>
<li>策划：开发者账号，生成Dis证书，BundleId，策划文档，配置表，音乐音效</li>
<li>sdk：根据新包的命名重新混淆sdk，比如：NewProject</li>
<li>美术：效果图，图片，动效，icon</li>
<li>程序：根据策划文档开发提审小游戏<a id="more"></a>

</li>
</ol>
<h3 id="二、创建工程"><a href="#二、创建工程" class="headerlink" title="二、创建工程"></a>二、创建工程</h3><ol>
<li>cd到目录：_tool<br> 执行：appstore.py -n NewProject<br> 执行结果：会生成一个新工程NewProject，里面Demo相关的命名都会替换成NewProject</li>
<li>替换新的sdk</li>
<li>替换新的src，res</li>
<li>替换新的icon</li>
</ol>
<h3 id="三、混淆工程"><a href="#三、混淆工程" class="headerlink" title="三、混淆工程"></a>三、混淆工程</h3><ol>
<li>cd到目录：runtime-src<br> 执行：python iosMixTools/addNativeCode.py –oc_folder proj.ios-NewProject –replace<br> 执行结果：</li>
</ol>
<ul>
<li>给oc文件添加随机方法，并随机调用.  注意：NewProjectSdk.mm 286行会有个报错，需要手动删除处理</li>
<li>会生成随机混淆文件 (NewProject文件夹、NewProject.h).  注意：需要手动把混淆文件添加到工程</li>
</ul>
<ol start="2">
<li>由于加密lua可能导致2.3.1隐藏内容被拒，这一步可选<br> cd到目录：proj.ios-NewProject<br> 执行：python z_compile.py<br> 执行结果：混淆加密src，res</li>
</ol>
<h3 id="四、打包测试"><a href="#四、打包测试" class="headerlink" title="四、打包测试"></a>四、打包测试</h3><ol>
<li>不需要Dev证书，不需要Dev描述文件，不需要添加测试设备</li>
<li>直接用旧的证书和BundleId打包测试，防止账号关联</li>
</ol>
<h3 id="五、打包上传"><a href="#五、打包上传" class="headerlink" title="五、打包上传"></a>五、打包上传</h3><ol>
<li>换电脑：新电脑/黑苹果，防止账号关联</li>
<li>换ip：VPN/无线网卡/4G，防止账号关联</li>
</ol>
<h2 id="—–-说明-—–"><a href="#—–-说明-—–" class="headerlink" title="—– 说明 —–"></a>—– 说明 —–</h2><h3 id="一、开关机制"><a href="#一、开关机制" class="headerlink" title="一、开关机制"></a>一、开关机制</h3><ol>
<li>检测时间戳：设置15天的审核期，15天内进小游戏，15天后下一步</li>
<li>检测ip地址：<a href="https://api.ip.la/en?json" target="_blank" rel="noopener">https://api.ip.la/en?json</a><br> 美国ip：以”17.”开头 或 country_code是”US”<br> 如果是美国ip进小游戏，非美国ip下一步</li>
<li>下载整包</li>
</ol>
<h3 id="二、热更机制"><a href="#二、热更机制" class="headerlink" title="二、热更机制"></a>二、热更机制</h3><ol>
<li>舍弃之前的小游戏热更到捕鱼的形式</li>
<li>整包下载地址：<a href="http://client.fish.poker3a.com/cdn_host/xgame/all.dat" target="_blank" rel="noopener">http://client.fish.poker3a.com/cdn_host/xgame/all.dat</a><br> 整包下载好处：代码资源框架不受限，只用保留自身小游戏的代码即可</li>
<li>整包下载完成后，检测并执行 mainentry.luac，进入捕鱼</li>
</ol>
<h2 id="—–-问题及解决方案-—–"><a href="#—–-问题及解决方案-—–" class="headerlink" title="—– 问题及解决方案 —–"></a>—– 问题及解决方案 —–</h2><h3 id="一、账号调查，注册开发者的要求"><a href="#一、账号调查，注册开发者的要求" class="headerlink" title="一、账号调查，注册开发者的要求"></a>一、账号调查，注册开发者的要求</h3><ol>
<li>注册身份信息唯一，注册人信息为中国有效的个人身份证且唯一</li>
<li>注册手机号码唯一，保证每个账号使用的注册号码是中国境内的手机号码且唯一</li>
<li>注册使用邮箱唯一，邮箱能通过网易邮箱大师等邮箱工具登陆，便于统一管理</li>
<li>注册的网络IP唯一，每个账号注册时登陆的IP随机</li>
<li>激活手机设备唯一，使用全新手机激活APPID</li>
</ol>
<h3 id="二、苹果卡审初步分析"><a href="#二、苹果卡审初步分析" class="headerlink" title="二、苹果卡审初步分析"></a>二、苹果卡审初步分析</h3><ol>
<li>什么叫卡审：卡审就是苹果审核团队对你的应用进行的一种冷处理，即不再审核你的应用，或者延长审核时间<br> 卡审的时间：卡审分级别，根据你犯的错来分级，当前卡审的时间一般有：3天，一周，二周，一个半月，两个月<br> 卡审的种类：<br> a. 提交新包，卡等待审核<br> b. 提交新包，进入InReview，长时间不审核<br> c. 后台回复，进入InReview，长时间不审核<br> d. 后台回复，苹果什么操作都不做，不处理</li>
<li>引起卡审的原因：<br> a. 被拒4.3.0：被苹果判定为马甲包，再提新包，会被卡审，根据出现4.3的次数不同，卡审时间不同，第一次一般：3-7天<br> b. 被拒1.1.6：虚假信息，苹果认为你故意欺骗和误导用户，会被卡审，第一次一般：3-7天<br> c. 资料协议相同：如后台的内购资料，银行协议，收款银行卡，这些被查出相同，这种卡审时间一般：1-2个月</li>
<li>卡审解决办法：<br> a. 资料协议相同：后台填写的协议资料，尤其是收款银行卡，尽量不要相同<br> b. 卡审3个工作日以上，可以尝试撤销版本重新提交<br> c. 被拒4.3.0：这个已经卡审了完全没有办法，只能更换BundleId重新提审<br> d. 被拒1.1.6：尽量减少一些版权，虚假信息（如：真人美女陪玩，万人在线陪玩，彩票，不要侵占他人版权等）</li>
</ol>
<h3 id="三、关于苹果审核人员工作的猜测"><a href="#三、关于苹果审核人员工作的猜测" class="headerlink" title="三、关于苹果审核人员工作的猜测"></a>三、关于苹果审核人员工作的猜测</h3><ol>
<li>苹果审核人员上班时间：<br> 美国审核人员时间：周一到周五，09：00-18：00（不含加班）<br> 对应北京时区时间：周二到周六，22：00-07：00（不含加班）<br> 正常上班时间应该占据70%的比例左右</li>
<li>苹果审核人员加班时间：<br> 估计约有20%的审核人员，会在平时晚上加班2个小时左右<br> 周六周日会有10%左右的审核人员安排加班，主要处理一些加急应用，如果加急应用不多，则会处理正常其他非加急应用</li>
<li>苹果审核人员工作地点：<br> 估计90%左右在美国，其次有一部分会在全球各地</li>
<li>苹果审核一个包的时间：<br> 50%的包会在24小时内审核<br> 90%的包会在48小时内审核<br> 10%的包，会进行大量卡审</li>
<li>苹果审核包的顺序：<br> 苹果审核包的顺序应该是由机器按照一定的策略统一进行分配，当前猜测策略如下：<br> a. 公司账号的权重 &gt; 个人账号的权重<br> b. 苹果榜单的权重 &gt; 未上榜单的权重<br> c. 通过加急的应用 &gt; 未通过加急的应用<br> d. 账号通过良好的 &gt; 账号上有大量拒绝记录的<br>以上猜测都是我胡说八道的</li>
</ol>
<h3 id="四、关于加急审核"><a href="#四、关于加急审核" class="headerlink" title="四、关于加急审核"></a>四、关于加急审核</h3><p>​       加急通道：<a href="https://developer.apple.com/contact/app-store/?topic=expedite" target="_blank" rel="noopener">https://developer.apple.com/contact/app-store/?topic=expedite</a><br>​       加急理由：</p>
<ol>
<li><p>重大事件（Time-Sensitive Event）<br>​      如果你的app是第一次提交审核，那么只能选择Time-Sensitive Event，Explanation(解释)这个就需要写严重点才行，模版文案为：<br>中文：<br>​     这个app我们花了大量的人力成本，时间成本来进行开发，所有的人员都在等待着app上线，延迟一天将对我们造成不可估量的损失，希望贵公司能加速审核我们的app，万分感谢!<br>英文（首选）：<br>​     This app we spend a lot of labor costs, time cost to develop, all the people are waiting for the app to go online, delaying one day will cause us an incalculable loss, I hope your company can accelerate the review of our app, thank you very much!<br>​     当然可以根据你们自己的文采适当发挥，除此之外，Time-SensitiveEvent 选项也可以使用在重要节日或大型活动<br>可以尝试着重说明这个节日或活动跟你App的关系，并详细描述重要性和经济程度，争取优先完成审核流程。</p>
</li>
<li><p>修复Bug（Critical Bug Fix）<br>​      如果你的app是更新，那么这个就更简单了，选Critical Bug Fix, Explanation(解释)写上修复了某某闪退的问题，模版文案为：</p>
</li>
</ol>
<p>中文：<br>    我们发现一个严重的问题，我们的应用程序存在崩溃现象，给用户带来较差体验。在新版本中，我们解决了这个严重的问题。所以我们需要一个快速的回复，以保证用户信息的安全，请帮助我们，非常感谢你！</p>
<p>英文（首选）：<br>      We found a serious problem，our application crashes，giving users a poor experience. In the new version，we solved this serious problem. So we need a quick reply to ensure the security of the user information，please help us，thank you very much!</p>
<p>在解释中最好加上修复闪退这两个字，或者写上app放款有bug，造成了公司上百万的损失，记得一定要写严重的</p>
<p>如果每次更新你都想加急的话，加急原因切记不要重复。</p>
<p>加急之后一半情况当晚就会审核，曾经见过最快的一次从提交到加急再到审核通过是11分钟，接下来就是如何处理被拒了。</p>
<ol start="3">
<li>被拒之后如何加急？  </li>
</ol>
<p>​       如果你们配置了一个24小时关注审核的人，看到被拒信息立马回复审核人员，基本几分钟内可以再次得到他们的消息<br>如果已经回复了审核人员，却迟迟没有再次收到审核人员的回复，这种情况下很可能被他们忽略了，或者是看到了忘记回复了<br>​       这个时候就不能再从之前的加急通道去加急了，需要在之前提到的加急审核页面重新选择。<br>​       具体选项是: I would like to，选择第一个，get the status of my app，剩下的信息照常填写，Comments这一栏填写:<br>中文：<br>​    我们app被拒之后及时的回复了你们审核人员，为什么我们却一直未收到你们的回复，希望贵公司看到这条消息能及时的回复我们，非常感谢!  这封邮件最慢也会在12小时内收到回复的。<br>英文（首选）：<br>​    After our app was rejected，we replied to your reviewers in a timely manner. Why have we not received your reply，I hope that your company can reply to us in time，thank you very much!</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>内网穿透搭建SVN服务器</title>
    <url>/p/e54be481.html</url>
    <content><![CDATA[<p>最近犹豫疫情问题，公司推迟上班了，但是要远程办公。很多小伙伴家里有电脑但是公司没人公司电脑开不了机，所以为了方便，就把公司内网的svn服务器用frp内网穿透映射到外网来，这样就可以开始干活了。</p>
<a id="more"></a>

<ol>
<li>这里用frp内网穿透，服务器和客户端的搭建参考之前写的文件<a href="/p/8426a0a1.html">frp内网穿透搭建远程桌面</a></li>
<li>为了安全，使用https协议<br>先准备一个域名，然后可以去阿里云申请一个免费的ssl证书。这里需要证书的<em>.key和</em>_public.crt文件，重命名为server.key和server.crt放到frp客户端目录下</li>
<li>服务器配置，加入https端口配置 <code>vhost_https_port = 443</code><pre><code class="line-numbers language-ini">[common]
bind_port = 7000
vhost_http_port = 80
vhost_https_port = 443</code></pre>
</li>
<li>客户端配置<br>客户端用frp的https2http插件启用https</li>
</ol>
<pre><code class="line-numbers language-ini">[common]
server_addr=服务器的IP
server_port=7000

[SVN]
type = https
custom_domains = xxx.com

plugin = https2http
plugin_local_addr = 127.0.0.1:80

# HTTPS 证书相关的配置
plugin_crt_path = ./server.crt
plugin_key_path = ./server.key
plugin_host_header_rewrite = 127.0.0.1
plugin_header_X-From-Where = frp</code></pre>
<ol start="5">
<li>测试<br>重新frp服务器和客户端。然后在电脑上用svn直接clone地址是 <a href="https://xxx.com/原内网的svn地址" target="_blank" rel="noopener">https://xxx.com/原内网的svn地址</a></li>
</ol>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>TortoiseSVN修改服务器地址</title>
    <url>/p/f9ba457.html</url>
    <content><![CDATA[<p>在开发过程中，有时会遇到SVN服务器地址的修改</p>
<ol>
<li><p>右键点击项目目录</p>
<a id="more"></a>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/f9ba457/19826068-71c356dd27fc2b24.png" alt></p>
</li>
<li><p>找到svn-&gt;Relocate，真接修改里面的地址就可以了<br><img src="//gitee.com/guoke3915/zw/raw/master/p/f9ba457/19826068-a2755c60bc62e00e.png" alt></p>
</li>
</ol>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
      </tags>
  </entry>
  <entry>
    <title>新型冠状病毒传播途径和预防指南</title>
    <url>/p/9b7f02ff.html</url>
    <content><![CDATA[<p><img src="//gitee.com/guoke3915/zw/raw/master/p/9b7f02ff/19826068-a0a40bd34e09f312.jpg" alt></p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/9b7f02ff/19826068-ec07f2124ea6c64b.jpg" alt></p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/9b7f02ff/19826068-9be167d75c334d11.jpg" alt></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Intellij IDE 代码太长解决</title>
    <url>/p/57c8a47b.html</url>
    <content><![CDATA[<p>可以尝试修改intellij IDE安装目录下的bin/idea.properties, 将其中的</p>
<a id="more"></a>
<pre><code class="line-numbers language-ini">idea.max.intellisense.filesize=2500</code></pre>
<p>改成大一些，比如</p>
<pre><code class="line-numbers language-ini">idea.max.intellisense.filesize=99999</code></pre>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows-SSH--Permissions-for-&#39;private-key&#39;-are-too-open</title>
    <url>/p/2bd1bc5.html</url>
    <content><![CDATA[<ol>
<li>在Win中OpenSSH使用密钥登录时全出现权限错误<a id="more"></a>

</li>
</ol>
<pre><code class="line-numbers language-powershell">C:\&gt;ssh root@192.168.1.55 -i key.pem
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Permissions for &#39;key.pem&#39; are too open.
It is required that your private key files are NOT accessible by others.
This private key will be ignored.
Load key &quot;key.pem&quot;: bad permissions
root@192.168.1.55: Permission denied (publickey).</code></pre>
<ol start="2">
<li>这是权限问题，如果在linux或mac系统中，直接用<code>chmod 600 key.pem</code></li>
<li>在Win中用icacls命令，下面写个bat脚本</li>
</ol>
<pre><code class="line-numbers language-powershell">:: # Set Variable ::
Set Key=%1

:: # Remove Inheritance ::
Cmd /c Icacls %Key% /c /t /Inheritance:d

:: # Set Ownership to Owner ::
Cmd /c Icacls %Key% /c /t /Grant %UserName%:F

:: # Remove All Users, except for Owner ::
Cmd /c Icacls %Key% /c /t /Remove Administrator &quot;Authenticated Users&quot; BUILTIN\Administrators BUILTIN Everyone System Users

:: # Verify ::
Cmd /c Icacls %Key%</code></pre>
<ol start="4">
<li>将key.pem直接托到bat脚本上运行就行了</li>
</ol>
<p>本文参考：<a href="https://superuser.com/questions/1296024/windows-ssh-permissions-for-private-key-are-too-open" target="_blank" rel="noopener">https://superuser.com/questions/1296024/windows-ssh-permissions-for-private-key-are-too-open</a></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Window</tag>
        <tag>ERROR</tag>
      </tags>
  </entry>
  <entry>
    <title>frp内网穿透搭建远程桌面</title>
    <url>/p/8426a0a1.html</url>
    <content><![CDATA[<h3 id="一、-前提"><a href="#一、-前提" class="headerlink" title="一、 前提"></a>一、 前提</h3><p>有一台远程服务器，然后用Win的远程桌面连接到公司内网电脑中</p>
<a id="more"></a>
<h3 id="二、环境"><a href="#二、环境" class="headerlink" title="二、环境"></a>二、环境</h3><ol>
<li>公网服务器1台，CentOS 7</li>
<li>内网客户端1台，Win10<h3 id="三、服务器安装frp"><a href="#三、服务器安装frp" class="headerlink" title="三、服务器安装frp"></a>三、服务器安装frp</h3></li>
<li>下载地址<a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener">https://github.com/fatedier/frp/releases</a>下载linux版本</li>
</ol>
<pre><code class="line-numbers language-bash">wget https://github.com/fatedier/frp/releases/download/v0.31.1/frp_0.31.1_linux_amd64.tar.gz</code></pre>
<ol start="2">
<li>解压到/usr/local/frp目录</li>
</ol>
<pre><code class="line-numbers language-bash">tar zxf frp_0.31.1_linux_amd64.tar.gz
mv frp_0.31.1_linux_amd64 /usr/local/frp</code></pre>
<ol start="3">
<li>配置服务端frps.ini</li>
</ol>
<pre><code class="line-numbers language-ini">[common]
bind_port = 7000
vhost_http_port = 8080</code></pre>
<ol>
<li>启动</li>
</ol>
<pre><code class="line-numbers language-bash">./frps -c ./frps.ini</code></pre>
<h3 id="四、客户端配置"><a href="#四、客户端配置" class="headerlink" title="四、客户端配置"></a>四、客户端配置</h3><ol>
<li>下载地址<a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener">https://github.com/fatedier/frp/releases</a>下载win版本</li>
<li>解压到C:\Program Files\frp目录</li>
<li>配置frpc.ini</li>
</ol>
<pre><code class="line-numbers language-ini">[common]
server_addr = xxx.xxx.xxx.xxx
server_port = 7000

[RDP]
type = tcp
local_ip = 0.0.0.0
local_port = 3389
remote_port = 6666</code></pre>
<ol>
<li>在命令行中启动frp客户端</li>
</ol>
<pre><code class="line-numbers language-powershell">C:\Program Files\frp\frpc.exe -c C:\Program Files\frp\frpc.ini</code></pre>
<p>等待启动完成</p>
<pre><code class="line-numbers language-powershell">2020/01/11 13:18:22 [I] [service.go:250] [e126185cb2716a8e] login to server success, get run id [e126185cb2716a8e], server udp port [0]
2020/01/11 13:18:22 [I] [proxy_manager.go:144] [e126185cb2716a8e] proxy added: [RDP]
2020/01/11 13:18:22 [I] [control.go:164] [e126185cb2716a8e] [RDP] start proxy success</code></pre>
<ol start="5">
<li>连接测试<br><img src="//gitee.com/guoke3915/zw/raw/master/p/8426a0a1/19826068-856dbc7070919cd9.png" alt><h3 id="五、-配置服务开机启动"><a href="#五、-配置服务开机启动" class="headerlink" title="五、 配置服务开机启动"></a>五、 配置服务开机启动</h3></li>
<li>linux下配置服务<br>编辑<code>/etc/systemd/system/frps.service</code></li>
</ol>
<pre><code class="line-numbers language-ini">[Unit]
Description=frps daemon
After=syslog.target  network.target
Wants=network.target

[Service]
Type=simple
ExecStart=/usr/local/frp/frps -c /usr/local/frp/frps.ini
Restart= always
RestartSec=1min

[Install]
WantedBy=multi-user.target</code></pre>
<p>启动frps</p>
<pre><code class="line-numbers language-bash">systemctl start frps</code></pre>
<ol start="2">
<li>win下配置服务<br>借助 <a href="https://github.com/kohsuke/winsw/releases/tag/winsw-v2.1.2" target="_blank" rel="noopener">winsw</a> 工具可以将frpc注册为windows系统中的服务<br>将下载的winsw.exe放到frpc.exe同目录下，并填写winsw.xml配置文件</li>
</ol>
<pre><code class="line-numbers language-xml">&lt;service&gt;
    &lt;id&gt;frp&lt;/id&gt;
    &lt;name&gt;frp&lt;/name&gt;
    &lt;description&gt;用frp发布本地电脑网站到外网&lt;/description&gt;
    &lt;executable&gt;frpc&lt;/executable&gt;
    &lt;arguments&gt;-c frpc.ini&lt;/arguments&gt;
    &lt;logmode&gt;reset&lt;/logmode&gt;
&lt;/service&gt;</code></pre>
<p>然后使用winsw install将frpc安装为系统服务。<br>win+r后通过services.msc进入到服务列表页面找到frp服务。<br><img src="//gitee.com/guoke3915/zw/raw/master/p/8426a0a1/19826068-bd11d01e3da6aafe.png" alt><br>为了确保frpc在连接失败后自动尝试重新连接，在恢复tap页进行如下设置<br><img src="//gitee.com/guoke3915/zw/raw/master/p/8426a0a1/19826068-a08c05267693963b.png" alt></p>
<h3 id="六、-扩展配置"><a href="#六、-扩展配置" class="headerlink" title="六、 扩展配置"></a>六、 扩展配置</h3><p>frpc的web、ssh配置</p>
<pre><code class="line-numbers language-ini">[common]
server_addr = xxx.xxx.xxx.xxx
server_port = 7000

[ssh]
type = tcp
local_ip = 0.0.0.0
local_port = 22
remote_port = 2222

[web]
type = http
local_port = 80
custom_domains = js.zengwu.com.cn</code></pre>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Win 2008 r2 安装SSH服务器</title>
    <url>/p/8257a63e.html</url>
    <content><![CDATA[<ol>
<li>下载微软开源的openssh<br>下载最新的二进制版本: <a href="https://github.com/PowerShell/Win32-OpenSSH/releases" target="_blank" rel="noopener">https://github.com/PowerShell/Win32-OpenSSH/releases</a><a id="more"></a></li>
<li>解压到<code>C:\Program Files</code>并重命名为<code>OpenSSH</code></li>
<li>启动Window PowerShell 并进入C:\Program Files\OpenSSH目录</li>
<li>输入命令安装sshd和ssh-agent服务<pre><code class="line-numbers language-powershell">powershell -ExecutionPolicy Bypass -File install-sshd.ps1</code></pre>
<img src="//gitee.com/guoke3915/zw/raw/master/p/8257a63e/19826068-2bc0e28d086aaab1.png" alt></li>
<li>打开防火墙，开启22端口<pre><code class="line-numbers language-powershell">netsh advfirewall firewall add rule name=sshd dir=in action=allow protocol=TCP localport=22</code></pre>
<img src="//gitee.com/guoke3915/zw/raw/master/p/8257a63e/19826068-1d2cd83d3131dda3.png" alt></li>
<li>设置开机启动<pre><code class="line-numbers language-powershell">Set-Service sshd -StartupType Automatic
Set-Service ssh-agent -StartupType Automatic</code></pre>
</li>
<li>启动服务<pre><code class="line-numbers language-powershell">Start-Service sshd
Start-Service ssh-agent</code></pre>
</li>
<li>连接测试<br>使用xshell输入ip，用户名密码为Win 2008 r2登录的用户名和密码<br><img src="//gitee.com/guoke3915/zw/raw/master/p/8257a63e/19826068-c35d11060cfaeb68.png" alt></li>
</ol>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Win 2008 r2 安装Nginx</title>
    <url>/p/d3256703.html</url>
    <content><![CDATA[<ol>
<li>先去<a href="http://nginx.org/" target="_blank" rel="noopener">官网</a>下载最新稳定版本的Nginx: <a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">http://nginx.org/en/download.html</a><a id="more"></a>
<img src="//gitee.com/guoke3915/zw/raw/master/p/d3256703/19826068-34a1df0f21ca12f5.png" alt></li>
<li>先去<a href="https://github.com/kohsuke/winsw/" target="_blank" rel="noopener">官网</a>下载最新版本的Windows Service Wrapper: <a href="http://repo.jenkins-ci.org/releases/com/sun/winsw/winsw/" target="_blank" rel="noopener">http://repo.jenkins-ci.org/releases/com/sun/winsw/winsw/</a><br><img src="//gitee.com/guoke3915/zw/raw/master/p/d3256703/19826068-2ded3395d03ef4ee.png" alt></li>
<li>解压Nginx压缩包到C盘目录，并重命名为nginx</li>
<li>将winsw-2.3.0-bin.exe解压到nginx目录下，并重命名为nginx-service.exe<br><img src="//gitee.com/guoke3915/zw/raw/master/p/d3256703/19826068-df5f6aada690cb6c.png" alt></li>
<li>在nginx根目录创建nginx-service.xml文件<pre><code class="line-numbers language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;service&gt;
&lt;id&gt;Nginx&lt;/id&gt;
&lt;name&gt;Nginx&lt;/name&gt;
&lt;description&gt;本服务用于加载Nginx服务，请确保开机启动。&lt;/description&gt;
&lt;logpath&gt;C:\nginx\logs&lt;/logpath&gt;
&lt;executable&gt;nginx.exe&lt;/executable&gt;
&lt;stopexecutable&gt;nginx.exe&lt;/stopexecutable&gt;
&lt;stopargument&gt;-s&lt;/stopargument&gt; 
&lt;stopargument&gt;stop&lt;/stopargument&gt;
&lt;logmode&gt;rotate&lt;/logmode&gt;
&lt;/service&gt;</code></pre>
</li>
<li>安装Nginx系统服务<pre><code class="line-numbers language-powershell">C:\nginx\nginx-service.exe install</code></pre>
</li>
<li>卸载Nginx系统服务<pre><code class="line-numbers language-powershell">C:\nginx\nginx-service.exe uninstall</code></pre>
</li>
<li>启动Nginx服务<pre><code class="line-numbers language-powershell">net start nginx</code></pre>
</li>
<li>关闭Nginx服务<pre><code class="line-numbers language-powershell">net stop nginx</code></pre>
</li>
<li>配置文件在<br>C:\nginx\conf\nginx.conf</li>
<li>记得打开防火墙<br>防火墙中直接允许 C:\nginx\nginx.exe<br><img src="//gitee.com/guoke3915/zw/raw/master/p/d3256703/19826068-af0ccfa144b03559.png" alt></li>
</ol>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Win 远程桌面多个用户同时使用Chrome浏览器</title>
    <url>/p/da3d515b.html</url>
    <content><![CDATA[<p>最近在玩Windows Server 2008r2，发现一个很奇怪的问题，就是在用Chrome浏览器的时候，一个用户开了，其他的用户点击是没有任何反应的。</p>
<a id="more"></a>
<ol>
<li>为Chrome另外创建一个新的快捷方式</li>
<li>右击打开新创建的快捷方式</li>
<li>在目标栏中的chrome.exe后面添加参数<pre><code class="line-numbers language-powershell">&quot;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&quot;  --user-data-dir=&quot;C:\Program Files (x86)\Google\MyTemp&quot;</code></pre>
<img src="//gitee.com/guoke3915/zw/raw/master/p/da3d515b/19826068-6284c98cb1e894f9.png" alt></li>
</ol>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Go使用阿里云代理仓库</title>
    <url>/p/a2ffae43.html</url>
    <content><![CDATA[<h2 id="win中"><a href="#win中" class="headerlink" title="win中"></a>win中</h2><p>打开环境变量，配置GOPROXY=<a href="https://mirrors.aliyun.com/goproxy/" target="_blank" rel="noopener">https://mirrors.aliyun.com/goproxy/</a></p>
<a id="more"></a>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/a2ffae43/19826068-73bf96a65343c38c.png" alt></p>
<h2 id="linux中"><a href="#linux中" class="headerlink" title="linux中"></a>linux中</h2><p>将export GOPROXY=<a href="https://mirrors.aliyun.com/goproxy/写入环境变量中" target="_blank" rel="noopener">https://mirrors.aliyun.com/goproxy/写入环境变量中</a></p>
<pre><code class="line-numbers language-bash">cat &gt;&gt; /etc/profile &lt;&lt;EOF
&gt;
&gt;export GOPROXY=https://mirrors.aliyun.com/goproxy/
&gt;EOF
source /etc/profile</code></pre>
<h2 id="go命令设置"><a href="#go命令设置" class="headerlink" title="go命令设置"></a>go命令设置</h2><p>在go版本大于1.13后，可以用<code>go env -w</code>来设置环境变量</p>
<pre><code class="line-numbers language-bash">go env -w GOPROXY=https://mirrors.aliyun.com/goproxy/</code></pre>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7 中安装Go开发环境</title>
    <url>/p/1392725d.html</url>
    <content><![CDATA[<ol>
<li>下载<br>去<a href="https://golang.org/dl/" target="_blank" rel="noopener">go官网</a>找到最新的版本（或需要的版本）下载<a id="more"></a>

</li>
</ol>
<pre><code class="line-numbers language-bash">wget https://dl.google.com/go/go1.13.5.linux-amd64.tar.gz</code></pre>
<ol start="2">
<li>解压  </li>
</ol>
<pre><code class="line-numbers language-bash">tar -C /usr/local -xzf go1.13.5.linux-amd64.tar.gz</code></pre>
<ol start="3">
<li>加入环境变量配置  </li>
</ol>
<pre><code class="line-numbers language-bash">cat &gt;&gt; /etc/profile &lt;&lt;EOF
&gt; 
&gt; export GOROOT=/usr/local/go
&gt; export GOPATH=/home/gopath
&gt; export PATH=\$PATH:\$GOROOT/bin
&gt; EOF

source /etc/profile</code></pre>
<ol start="4">
<li>查看版本及是否生效  </li>
</ol>
<pre><code class="line-numbers language-bash">go version</code></pre>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 中安装 Redis</title>
    <url>/p/50ee71d2.html</url>
    <content><![CDATA[<h2 id="创建Redis配置文件"><a href="#创建Redis配置文件" class="headerlink" title="创建Redis配置文件"></a>创建Redis配置文件</h2><pre><code class="line-numbers language-bash">mkdir -p /data/redis
vim /data/redis/redis.conf</code></pre>
<a id="more"></a>
<h2 id="redis配置"><a href="#redis配置" class="headerlink" title="redis配置"></a>redis配置</h2><pre><code class="line-numbers language-ini"># Redis configuration file example

# Note on units: when memory size is needed, it is possible to specify
# it in the usual form of 1k 5GB 4M and so forth:
#
# 1k =&gt; 1000 bytes
# 1kb =&gt; 1024 bytes
# 1m =&gt; 1000000 bytes
# 1mb =&gt; 1024*1024 bytes
# 1g =&gt; 1000000000 bytes
# 1gb =&gt; 1024*1024*1024 bytes
#
# units are case insensitive so 1GB 1Gb 1gB are all the same.

################################## INCLUDES ###################################

# Include one or more other config files here.  This is useful if you
# have a standard template that goes to all Redis servers but also need
# to customize a few per-server settings.  Include files can include
# other files, so use this wisely.
#
# Notice option &quot;include&quot; won&#39;t be rewritten by command &quot;CONFIG REWRITE&quot;
# from admin or Redis Sentinel. Since Redis always uses the last processed
# line as value of a configuration directive, you&#39;d better put includes
# at the beginning of this file to avoid overwriting config change at runtime.
#
# If instead you are interested in using includes to override configuration
# options, it is better to use include as the last line.
#
# include /path/to/local.conf
# include /path/to/other.conf

################################ GENERAL  #####################################

# By default Redis does not run as a daemon. Use &#39;yes&#39; if you need it.
# Note that Redis will write a pid file in /var/run/redis.pid when daemonized.
daemonize no

# When running daemonized, Redis writes a pid file in /var/run/redis.pid by
# default. You can specify a custom pid file location here.
pidfile /var/run/redis.pid

# Accept connections on the specified port, default is 6379.
# If port 0 is specified Redis will not listen on a TCP socket.
port 6379

# TCP listen() backlog.
#
# In high requests-per-second environments you need an high backlog in order
# to avoid slow clients connections issues. Note that the Linux kernel
# will silently truncate it to the value of /proc/sys/net/core/somaxconn so
# make sure to raise both the value of somaxconn and tcp_max_syn_backlog
# in order to get the desired effect.
tcp-backlog 511

# By default Redis listens for connections from all the network interfaces
# available on the server. It is possible to listen to just one or multiple
# interfaces using the &quot;bind&quot; configuration directive, followed by one or
# more IP addresses.
#
# Examples:
#
# bind 192.168.1.100 10.0.0.1
# bind 127.0.0.1

# Specify the path for the Unix socket that will be used to listen for
# incoming connections. There is no default, so Redis will not listen
# on a unix socket when not specified.
#
# unixsocket /tmp/redis.sock
# unixsocketperm 700

# Close the connection after a client is idle for N seconds (0 to disable)
timeout 0

# TCP keepalive.
#
# If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence
# of communication. This is useful for two reasons:
#
# 1) Detect dead peers.
# 2) Take the connection alive from the point of view of network
#    equipment in the middle.
#
# On Linux, the specified value (in seconds) is the period used to send ACKs.
# Note that to close the connection the double of the time is needed.
# On other kernels the period depends on the kernel configuration.
#
# A reasonable value for this option is 60 seconds.
tcp-keepalive 0

# Specify the server verbosity level.
# This can be one of:
# debug (a lot of information, useful for development/testing)
# verbose (many rarely useful info, but not a mess like the debug level)
# notice (moderately verbose, what you want in production probably)
# warning (only very important / critical messages are logged)
loglevel notice

# Specify the log file name. Also the empty string can be used to force
# Redis to log on the standard output. Note that if you use standard
# output for logging but daemonize, logs will be sent to /dev/null
logfile &quot;&quot;

# To enable logging to the system logger, just set &#39;syslog-enabled&#39; to yes,
# and optionally update the other syslog parameters to suit your needs.
# syslog-enabled no

# Specify the syslog identity.
# syslog-ident redis

# Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.
# syslog-facility local0

# Set the number of databases. The default database is DB 0, you can select
# a different one on a per-connection basis using SELECT &lt;dbid&gt; where
# dbid is a number between 0 and &#39;databases&#39;-1
databases 16

################################ SNAPSHOTTING  ################################
#
# Save the DB on disk:
#
#   save &lt;seconds&gt; &lt;changes&gt;
#
#   Will save the DB if both the given number of seconds and the given
#   number of write operations against the DB occurred.
#
#   In the example below the behaviour will be to save:
#   after 900 sec (15 min) if at least 1 key changed
#   after 300 sec (5 min) if at least 10 keys changed
#   after 60 sec if at least 10000 keys changed
#
#   Note: you can disable saving completely by commenting out all &quot;save&quot; lines.
#
#   It is also possible to remove all the previously configured save
#   points by adding a save directive with a single empty string argument
#   like in the following example:
#
#   save &quot;&quot;

save 900 1
save 300 10
#save 60 10000

# By default Redis will stop accepting writes if RDB snapshots are enabled
# (at least one save point) and the latest background save failed.
# This will make the user aware (in a hard way) that data is not persisting
# on disk properly, otherwise chances are that no one will notice and some
# disaster will happen.
#
# If the background saving process will start working again Redis will
# automatically allow writes again.
#
# However if you have setup your proper monitoring of the Redis server
# and persistence, you may want to disable this feature so that Redis will
# continue to work as usual even if there are problems with disk,
# permissions, and so forth.
stop-writes-on-bgsave-error yes

# Compress string objects using LZF when dump .rdb databases?
# For default that&#39;s set to &#39;yes&#39; as it&#39;s almost always a win.
# If you want to save some CPU in the saving child set it to &#39;no&#39; but
# the dataset will likely be bigger if you have compressible values or keys.
rdbcompression yes

# Since version 5 of RDB a CRC64 checksum is placed at the end of the file.
# This makes the format more resistant to corruption but there is a performance
# hit to pay (around 10%) when saving and loading RDB files, so you can disable it
# for maximum performances.
#
# RDB files created with checksum disabled have a checksum of zero that will
# tell the loading code to skip the check.
rdbchecksum yes

# The filename where to dump the DB
dbfilename dump.rdb

# The working directory.
#
# The DB will be written inside this directory, with the filename specified
# above using the &#39;dbfilename&#39; configuration directive.
#
# The Append Only File will also be created inside this directory.
#
# Note that you must specify a directory here, not a file name.
dir ./

################################# REPLICATION #################################

# Master-Slave replication. Use slaveof to make a Redis instance a copy of
# another Redis server. A few things to understand ASAP about Redis replication.
#
# 1) Redis replication is asynchronous, but you can configure a master to
#    stop accepting writes if it appears to be not connected with at least
#    a given number of slaves.
# 2) Redis slaves are able to perform a partial resynchronization with the
#    master if the replication link is lost for a relatively small amount of
#    time. You may want to configure the replication backlog size (see the next
#    sections of this file) with a sensible value depending on your needs.
# 3) Replication is automatic and does not need user intervention. After a
#    network partition slaves automatically try to reconnect to masters
#    and resynchronize with them.
#
# slaveof &lt;masterip&gt; &lt;masterport&gt;

# If the master is password protected (using the &quot;requirepass&quot; configuration
# directive below) it is possible to tell the slave to authenticate before
# starting the replication synchronization process, otherwise the master will
# refuse the slave request.
#
# masterauth &lt;master-password&gt;

# When a slave loses its connection with the master, or when the replication
# is still in progress, the slave can act in two different ways:
#
# 1) if slave-serve-stale-data is set to &#39;yes&#39; (the default) the slave will
#    still reply to client requests, possibly with out of date data, or the
#    data set may just be empty if this is the first synchronization.
#
# 2) if slave-serve-stale-data is set to &#39;no&#39; the slave will reply with
#    an error &quot;SYNC with master in progress&quot; to all the kind of commands
#    but to INFO and SLAVEOF.
#
slave-serve-stale-data yes

# You can configure a slave instance to accept writes or not. Writing against
# a slave instance may be useful to store some ephemeral data (because data
# written on a slave will be easily deleted after resync with the master) but
# may also cause problems if clients are writing to it because of a
# misconfiguration.
#
# Since Redis 2.6 by default slaves are read-only.
#
# Note: read only slaves are not designed to be exposed to untrusted clients
# on the internet. It&#39;s just a protection layer against misuse of the instance.
# Still a read only slave exports by default all the administrative commands
# such as CONFIG, DEBUG, and so forth. To a limited extent you can improve
# security of read only slaves using &#39;rename-command&#39; to shadow all the
# administrative / dangerous commands.
slave-read-only yes

# Replication SYNC strategy: disk or socket.
#
# -------------------------------------------------------
# WARNING: DISKLESS REPLICATION IS EXPERIMENTAL CURRENTLY
# -------------------------------------------------------
#
# New slaves and reconnecting slaves that are not able to continue the replication
# process just receiving differences, need to do what is called a &quot;full
# synchronization&quot;. An RDB file is transmitted from the master to the slaves.
# The transmission can happen in two different ways:
#
# 1) Disk-backed: The Redis master creates a new process that writes the RDB
#                 file on disk. Later the file is transferred by the parent
#                 process to the slaves incrementally.
# 2) Diskless: The Redis master creates a new process that directly writes the
#              RDB file to slave sockets, without touching the disk at all.
#
# With disk-backed replication, while the RDB file is generated, more slaves
# can be queued and served with the RDB file as soon as the current child producing
# the RDB file finishes its work. With diskless replication instead once
# the transfer starts, new slaves arriving will be queued and a new transfer
# will start when the current one terminates.
#
# When diskless replication is used, the master waits a configurable amount of
# time (in seconds) before starting the transfer in the hope that multiple slaves
# will arrive and the transfer can be parallelized.
#
# With slow disks and fast (large bandwidth) networks, diskless replication
# works better.
repl-diskless-sync no

# When diskless replication is enabled, it is possible to configure the delay
# the server waits in order to spawn the child that transfers the RDB via socket
# to the slaves.
#
# This is important since once the transfer starts, it is not possible to serve
# new slaves arriving, that will be queued for the next RDB transfer, so the server
# waits a delay in order to let more slaves arrive.
#
# The delay is specified in seconds, and by default is 5 seconds. To disable
# it entirely just set it to 0 seconds and the transfer will start ASAP.
repl-diskless-sync-delay 5

# Slaves send PINGs to server in a predefined interval. It&#39;s possible to change
# this interval with the repl_ping_slave_period option. The default value is 10
# seconds.
#
# repl-ping-slave-period 10

# The following option sets the replication timeout for:
#
# 1) Bulk transfer I/O during SYNC, from the point of view of slave.
# 2) Master timeout from the point of view of slaves (data, pings).
# 3) Slave timeout from the point of view of masters (REPLCONF ACK pings).
#
# It is important to make sure that this value is greater than the value
# specified for repl-ping-slave-period otherwise a timeout will be detected
# every time there is low traffic between the master and the slave.
#
# repl-timeout 60

# Disable TCP_NODELAY on the slave socket after SYNC?
#
# If you select &quot;yes&quot; Redis will use a smaller number of TCP packets and
# less bandwidth to send data to slaves. But this can add a delay for
# the data to appear on the slave side, up to 40 milliseconds with
# Linux kernels using a default configuration.
#
# If you select &quot;no&quot; the delay for data to appear on the slave side will
# be reduced but more bandwidth will be used for replication.
#
# By default we optimize for low latency, but in very high traffic conditions
# or when the master and slaves are many hops away, turning this to &quot;yes&quot; may
# be a good idea.
repl-disable-tcp-nodelay no

# Set the replication backlog size. The backlog is a buffer that accumulates
# slave data when slaves are disconnected for some time, so that when a slave
# wants to reconnect again, often a full resync is not needed, but a partial
# resync is enough, just passing the portion of data the slave missed while
# disconnected.
#
# The bigger the replication backlog, the longer the time the slave can be
# disconnected and later be able to perform a partial resynchronization.
#
# The backlog is only allocated once there is at least a slave connected.
#
# repl-backlog-size 1mb

# After a master has no longer connected slaves for some time, the backlog
# will be freed. The following option configures the amount of seconds that
# need to elapse, starting from the time the last slave disconnected, for
# the backlog buffer to be freed.
#
# A value of 0 means to never release the backlog.
#
# repl-backlog-ttl 3600

# The slave priority is an integer number published by Redis in the INFO output.
# It is used by Redis Sentinel in order to select a slave to promote into a
# master if the master is no longer working correctly.
#
# A slave with a low priority number is considered better for promotion, so
# for instance if there are three slaves with priority 10, 100, 25 Sentinel will
# pick the one with priority 10, that is the lowest.
#
# However a special priority of 0 marks the slave as not able to perform the
# role of master, so a slave with priority of 0 will never be selected by
# Redis Sentinel for promotion.
#
# By default the priority is 100.
slave-priority 100

# It is possible for a master to stop accepting writes if there are less than
# N slaves connected, having a lag less or equal than M seconds.
#
# The N slaves need to be in &quot;online&quot; state.
#
# The lag in seconds, that must be &lt;= the specified value, is calculated from
# the last ping received from the slave, that is usually sent every second.
#
# This option does not GUARANTEE that N replicas will accept the write, but
# will limit the window of exposure for lost writes in case not enough slaves
# are available, to the specified number of seconds.
#
# For example to require at least 3 slaves with a lag &lt;= 10 seconds use:
#
# min-slaves-to-write 3
# min-slaves-max-lag 10
#
# Setting one or the other to 0 disables the feature.
#
# By default min-slaves-to-write is set to 0 (feature disabled) and
# min-slaves-max-lag is set to 10.

################################## SECURITY ###################################

# Require clients to issue AUTH &lt;PASSWORD&gt; before processing any other
# commands.  This might be useful in environments in which you do not trust
# others with access to the host running redis-server.
#
# This should stay commented out for backward compatibility and because most
# people do not need auth (e.g. they run their own servers).
#
# Warning: since Redis is pretty fast an outside user can try up to
# 150k passwords per second against a good box. This means that you should
# use a very strong password otherwise it will be very easy to break.
#
requirepass gk123455

# Command renaming.
#
# It is possible to change the name of dangerous commands in a shared
# environment. For instance the CONFIG command may be renamed into something
# hard to guess so that it will still be available for internal-use tools
# but not available for general clients.
#
# Example:
#
# rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52
#
# It is also possible to completely kill a command by renaming it into
# an empty string:
#
# rename-command CONFIG &quot;&quot;
#
# Please note that changing the name of commands that are logged into the
# AOF file or transmitted to slaves may cause problems.

################################### LIMITS ####################################

# Set the max number of connected clients at the same time. By default
# this limit is set to 10000 clients, however if the Redis server is not
# able to configure the process file limit to allow for the specified limit
# the max number of allowed clients is set to the current file limit
# minus 32 (as Redis reserves a few file descriptors for internal uses).
#
# Once the limit is reached Redis will close all the new connections sending
# an error &#39;max number of clients reached&#39;.
#
# maxclients 10000

# Don&#39;t use more memory than the specified amount of bytes.
# When the memory limit is reached Redis will try to remove keys
# according to the eviction policy selected (see maxmemory-policy).
#
# If Redis can&#39;t remove keys according to the policy, or if the policy is
# set to &#39;noeviction&#39;, Redis will start to reply with errors to commands
# that would use more memory, like SET, LPUSH, and so on, and will continue
# to reply to read-only commands like GET.
#
# This option is usually useful when using Redis as an LRU cache, or to set
# a hard memory limit for an instance (using the &#39;noeviction&#39; policy).
#
# WARNING: If you have slaves attached to an instance with maxmemory on,
# the size of the output buffers needed to feed the slaves are subtracted
# from the used memory count, so that network problems / resyncs will
# not trigger a loop where keys are evicted, and in turn the output
# buffer of slaves is full with DELs of keys evicted triggering the deletion
# of more keys, and so forth until the database is completely emptied.
#
# In short... if you have slaves attached it is suggested that you set a lower
# limit for maxmemory so that there is some free RAM on the system for slave
# output buffers (but this is not needed if the policy is &#39;noeviction&#39;).
#
# maxmemory &lt;bytes&gt;

# MAXMEMORY POLICY: how Redis will select what to remove when maxmemory
# is reached. You can select among five behaviors:
#
# volatile-lru -&gt; remove the key with an expire set using an LRU algorithm
# allkeys-lru -&gt; remove any key according to the LRU algorithm
# volatile-random -&gt; remove a random key with an expire set
# allkeys-random -&gt; remove a random key, any key
# volatile-ttl -&gt; remove the key with the nearest expire time (minor TTL)
# noeviction -&gt; don&#39;t expire at all, just return an error on write operations
#
# Note: with any of the above policies, Redis will return an error on write
#       operations, when there are no suitable keys for eviction.
#
#       At the date of writing these commands are: set setnx setex append
#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd
#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby
#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby
#       getset mset msetnx exec sort
#
# The default is:
#
# maxmemory-policy noeviction

# LRU and minimal TTL algorithms are not precise algorithms but approximated
# algorithms (in order to save memory), so you can tune it for speed or
# accuracy. For default Redis will check five keys and pick the one that was
# used less recently, you can change the sample size using the following
# configuration directive.
#
# The default of 5 produces good enough results. 10 Approximates very closely
# true LRU but costs a bit more CPU. 3 is very fast but not very accurate.
#
# maxmemory-samples 5

############################## APPEND ONLY MODE ###############################

# By default Redis asynchronously dumps the dataset on disk. This mode is
# good enough in many applications, but an issue with the Redis process or
# a power outage may result into a few minutes of writes lost (depending on
# the configured save points).
#
# The Append Only File is an alternative persistence mode that provides
# much better durability. For instance using the default data fsync policy
# (see later in the config file) Redis can lose just one second of writes in a
# dramatic event like a server power outage, or a single write if something
# wrong with the Redis process itself happens, but the operating system is
# still running correctly.
#
# AOF and RDB persistence can be enabled at the same time without problems.
# If the AOF is enabled on startup Redis will load the AOF, that is the file
# with the better durability guarantees.
#
# Please check http://redis.io/topics/persistence for more information.

appendonly no

# The name of the append only file (default: &quot;appendonly.aof&quot;)

appendfilename &quot;appendonly.aof&quot;

# The fsync() call tells the Operating System to actually write data on disk
# instead of waiting for more data in the output buffer. Some OS will really flush
# data on disk, some other OS will just try to do it ASAP.
#
# Redis supports three different modes:
#
# no: don&#39;t fsync, just let the OS flush the data when it wants. Faster.
# always: fsync after every write to the append only log. Slow, Safest.
# everysec: fsync only one time every second. Compromise.
#
# The default is &quot;everysec&quot;, as that&#39;s usually the right compromise between
# speed and data safety. It&#39;s up to you to understand if you can relax this to
# &quot;no&quot; that will let the operating system flush the output buffer when
# it wants, for better performances (but if you can live with the idea of
# some data loss consider the default persistence mode that&#39;s snapshotting),
# or on the contrary, use &quot;always&quot; that&#39;s very slow but a bit safer than
# everysec.
#
# More details please check the following article:
# http://antirez.com/post/redis-persistence-demystified.html
#
# If unsure, use &quot;everysec&quot;.

# appendfsync always
appendfsync everysec
# appendfsync no

# When the AOF fsync policy is set to always or everysec, and a background
# saving process (a background save or AOF log background rewriting) is
# performing a lot of I/O against the disk, in some Linux configurations
# Redis may block too long on the fsync() call. Note that there is no fix for
# this currently, as even performing fsync in a different thread will block
# our synchronous write(2) call.
#
# In order to mitigate this problem it&#39;s possible to use the following option
# that will prevent fsync() from being called in the main process while a
# BGSAVE or BGREWRITEAOF is in progress.
#
# This means that while another child is saving, the durability of Redis is
# the same as &quot;appendfsync none&quot;. In practical terms, this means that it is
# possible to lose up to 30 seconds of log in the worst scenario (with the
# default Linux settings).
#
# If you have latency problems turn this to &quot;yes&quot;. Otherwise leave it as
# &quot;no&quot; that is the safest pick from the point of view of durability.

no-appendfsync-on-rewrite no

# Automatic rewrite of the append only file.
# Redis is able to automatically rewrite the log file implicitly calling
# BGREWRITEAOF when the AOF log size grows by the specified percentage.
#
# This is how it works: Redis remembers the size of the AOF file after the
# latest rewrite (if no rewrite has happened since the restart, the size of
# the AOF at startup is used).
#
# This base size is compared to the current size. If the current size is
# bigger than the specified percentage, the rewrite is triggered. Also
# you need to specify a minimal size for the AOF file to be rewritten, this
# is useful to avoid rewriting the AOF file even if the percentage increase
# is reached but it is still pretty small.
#
# Specify a percentage of zero in order to disable the automatic AOF
# rewrite feature.

auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb

# An AOF file may be found to be truncated at the end during the Redis
# startup process, when the AOF data gets loaded back into memory.
# This may happen when the system where Redis is running
# crashes, especially when an ext4 filesystem is mounted without the
# data=ordered option (however this can&#39;t happen when Redis itself
# crashes or aborts but the operating system still works correctly).
#
# Redis can either exit with an error when this happens, or load as much
# data as possible (the default now) and start if the AOF file is found
# to be truncated at the end. The following option controls this behavior.
#
# If aof-load-truncated is set to yes, a truncated AOF file is loaded and
# the Redis server starts emitting a log to inform the user of the event.
# Otherwise if the option is set to no, the server aborts with an error
# and refuses to start. When the option is set to no, the user requires
# to fix the AOF file using the &quot;redis-check-aof&quot; utility before to restart
# the server.
#
# Note that if the AOF file will be found to be corrupted in the middle
# the server will still exit with an error. This option only applies when
# Redis will try to read more data from the AOF file but not enough bytes
# will be found.
aof-load-truncated yes

################################ LUA SCRIPTING  ###############################

# Max execution time of a Lua script in milliseconds.
#
# If the maximum execution time is reached Redis will log that a script is
# still in execution after the maximum allowed time and will start to
# reply to queries with an error.
#
# When a long running script exceeds the maximum execution time only the
# SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be
# used to stop a script that did not yet called write commands. The second
# is the only way to shut down the server in the case a write command was
# already issued by the script but the user doesn&#39;t want to wait for the natural
# termination of the script.
#
# Set it to 0 or a negative value for unlimited execution without warnings.
lua-time-limit 5000

################################ REDIS CLUSTER  ###############################
#
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# WARNING EXPERIMENTAL: Redis Cluster is considered to be stable code, however
# in order to mark it as &quot;mature&quot; we need to wait for a non trivial percentage
# of users to deploy it in production.
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#
# Normal Redis instances can&#39;t be part of a Redis Cluster; only nodes that are
# started as cluster nodes can. In order to start a Redis instance as a
# cluster node enable the cluster support uncommenting the following:
#
# cluster-enabled yes

# Every cluster node has a cluster configuration file. This file is not
# intended to be edited by hand. It is created and updated by Redis nodes.
# Every Redis Cluster node requires a different cluster configuration file.
# Make sure that instances running in the same system do not have
# overlapping cluster configuration file names.
#
# cluster-config-file nodes-6379.conf

# Cluster node timeout is the amount of milliseconds a node must be unreachable
# for it to be considered in failure state.
# Most other internal time limits are multiple of the node timeout.
#
# cluster-node-timeout 15000

# A slave of a failing master will avoid to start a failover if its data
# looks too old.
#
# There is no simple way for a slave to actually have a exact measure of
# its &quot;data age&quot;, so the following two checks are performed:
#
# 1) If there are multiple slaves able to failover, they exchange messages
#    in order to try to give an advantage to the slave with the best
#    replication offset (more data from the master processed).
#    Slaves will try to get their rank by offset, and apply to the start
#    of the failover a delay proportional to their rank.
#
# 2) Every single slave computes the time of the last interaction with
#    its master. This can be the last ping or command received (if the master
#    is still in the &quot;connected&quot; state), or the time that elapsed since the
#    disconnection with the master (if the replication link is currently down).
#    If the last interaction is too old, the slave will not try to failover
#    at all.
#
# The point &quot;2&quot; can be tuned by user. Specifically a slave will not perform
# the failover if, since the last interaction with the master, the time
# elapsed is greater than:
#
#   (node-timeout * slave-validity-factor) + repl-ping-slave-period
#
# So for example if node-timeout is 30 seconds, and the slave-validity-factor
# is 10, and assuming a default repl-ping-slave-period of 10 seconds, the
# slave will not try to failover if it was not able to talk with the master
# for longer than 310 seconds.
#
# A large slave-validity-factor may allow slaves with too old data to failover
# a master, while a too small value may prevent the cluster from being able to
# elect a slave at all.
#
# For maximum availability, it is possible to set the slave-validity-factor
# to a value of 0, which means, that slaves will always try to failover the
# master regardless of the last time they interacted with the master.
# (However they&#39;ll always try to apply a delay proportional to their
# offset rank).
#
# Zero is the only value able to guarantee that when all the partitions heal
# the cluster will always be able to continue.
#
# cluster-slave-validity-factor 10

# Cluster slaves are able to migrate to orphaned masters, that are masters
# that are left without working slaves. This improves the cluster ability
# to resist to failures as otherwise an orphaned master can&#39;t be failed over
# in case of failure if it has no working slaves.
#
# Slaves migrate to orphaned masters only if there are still at least a
# given number of other working slaves for their old master. This number
# is the &quot;migration barrier&quot;. A migration barrier of 1 means that a slave
# will migrate only if there is at least 1 other working slave for its master
# and so forth. It usually reflects the number of slaves you want for every
# master in your cluster.
#
# Default is 1 (slaves migrate only if their masters remain with at least
# one slave). To disable migration just set it to a very large value.
# A value of 0 can be set but is useful only for debugging and dangerous
# in production.
#
# cluster-migration-barrier 1

# By default Redis Cluster nodes stop accepting queries if they detect there
# is at least an hash slot uncovered (no available node is serving it).
# This way if the cluster is partially down (for example a range of hash slots
# are no longer covered) all the cluster becomes, eventually, unavailable.
# It automatically returns available as soon as all the slots are covered again.
#
# However sometimes you want the subset of the cluster which is working,
# to continue to accept queries for the part of the key space that is still
# covered. In order to do so, just set the cluster-require-full-coverage
# option to no.
#
# cluster-require-full-coverage yes

# In order to setup your cluster make sure to read the documentation
# available at http://redis.io web site.

################################## SLOW LOG ###################################

# The Redis Slow Log is a system to log queries that exceeded a specified
# execution time. The execution time does not include the I/O operations
# like talking with the client, sending the reply and so forth,
# but just the time needed to actually execute the command (this is the only
# stage of command execution where the thread is blocked and can not serve
# other requests in the meantime).
#
# You can configure the slow log with two parameters: one tells Redis
# what is the execution time, in microseconds, to exceed in order for the
# command to get logged, and the other parameter is the length of the
# slow log. When a new command is logged the oldest one is removed from the
# queue of logged commands.

# The following time is expressed in microseconds, so 1000000 is equivalent
# to one second. Note that a negative number disables the slow log, while
# a value of zero forces the logging of every command.
slowlog-log-slower-than 10000

# There is no limit to this length. Just be aware that it will consume memory.
# You can reclaim memory used by the slow log with SLOWLOG RESET.
slowlog-max-len 128

################################ LATENCY MONITOR ##############################

# The Redis latency monitoring subsystem samples different operations
# at runtime in order to collect data related to possible sources of
# latency of a Redis instance.
#
# Via the LATENCY command this information is available to the user that can
# print graphs and obtain reports.
#
# The system only logs operations that were performed in a time equal or
# greater than the amount of milliseconds specified via the
# latency-monitor-threshold configuration directive. When its value is set
# to zero, the latency monitor is turned off.
#
# By default latency monitoring is disabled since it is mostly not needed
# if you don&#39;t have latency issues, and collecting data has a performance
# impact, that while very small, can be measured under big load. Latency
# monitoring can easily be enabled at runtime using the command
# &quot;CONFIG SET latency-monitor-threshold &lt;milliseconds&gt;&quot; if needed.
latency-monitor-threshold 0

############################# EVENT NOTIFICATION ##############################

# Redis can notify Pub/Sub clients about events happening in the key space.
# This feature is documented at http://redis.io/topics/notifications
#
# For instance if keyspace events notification is enabled, and a client
# performs a DEL operation on key &quot;foo&quot; stored in the Database 0, two
# messages will be published via Pub/Sub:
#
# PUBLISH __keyspace@0__:foo del
# PUBLISH __keyevent@0__:del foo
#
# It is possible to select the events that Redis will notify among a set
# of classes. Every class is identified by a single character:
#
#  K     Keyspace events, published with __keyspace@&lt;db&gt;__ prefix.
#  E     Keyevent events, published with __keyevent@&lt;db&gt;__ prefix.
#  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...
#  $     String commands
#  l     List commands
#  s     Set commands
#  h     Hash commands
#  z     Sorted set commands
#  x     Expired events (events generated every time a key expires)
#  e     Evicted events (events generated when a key is evicted for maxmemory)
#  A     Alias for g$lshzxe, so that the &quot;AKE&quot; string means all the events.
#
#  The &quot;notify-keyspace-events&quot; takes as argument a string that is composed
#  of zero or multiple characters. The empty string means that notifications
#  are disabled.
#
#  Example: to enable list and generic events, from the point of view of the
#           event name, use:
#
#  notify-keyspace-events Elg
#
#  Example 2: to get the stream of the expired keys subscribing to channel
#             name __keyevent@0__:expired use:
#
#  notify-keyspace-events Ex
#
#  By default all notifications are disabled because most users don&#39;t need
#  this feature and the feature has some overhead. Note that if you don&#39;t
#  specify at least one of K or E, no events will be delivered.
notify-keyspace-events &quot;&quot;

############################### ADVANCED CONFIG ###############################

# Hashes are encoded using a memory efficient data structure when they have a
# small number of entries, and the biggest entry does not exceed a given
# threshold. These thresholds can be configured using the following directives.
hash-max-ziplist-entries 512
hash-max-ziplist-value 64

# Similarly to hashes, small lists are also encoded in a special way in order
# to save a lot of space. The special representation is only used when
# you are under the following limits:
list-max-ziplist-entries 512
list-max-ziplist-value 64

# Sets have a special encoding in just one case: when a set is composed
# of just strings that happen to be integers in radix 10 in the range
# of 64 bit signed integers.
# The following configuration setting sets the limit in the size of the
# set in order to use this special memory saving encoding.
set-max-intset-entries 512

# Similarly to hashes and lists, sorted sets are also specially encoded in
# order to save a lot of space. This encoding is only used when the length and
# elements of a sorted set are below the following limits:
zset-max-ziplist-entries 128
zset-max-ziplist-value 64

# HyperLogLog sparse representation bytes limit. The limit includes the
# 16 bytes header. When an HyperLogLog using the sparse representation crosses
# this limit, it is converted into the dense representation.
#
# A value greater than 16000 is totally useless, since at that point the
# dense representation is more memory efficient.
#
# The suggested value is ~ 3000 in order to have the benefits of
# the space efficient encoding without slowing down too much PFADD,
# which is O(N) with the sparse encoding. The value can be raised to
# ~ 10000 when CPU is not a concern, but space is, and the data set is
# composed of many HyperLogLogs with cardinality in the 0 - 15000 range.
hll-sparse-max-bytes 3000

# Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in
# order to help rehashing the main Redis hash table (the one mapping top-level
# keys to values). The hash table implementation Redis uses (see dict.c)
# performs a lazy rehashing: the more operation you run into a hash table
# that is rehashing, the more rehashing &quot;steps&quot; are performed, so if the
# server is idle the rehashing is never complete and some more memory is used
# by the hash table.
#
# The default is to use this millisecond 10 times every second in order to
# actively rehash the main dictionaries, freeing memory when possible.
#
# If unsure:
# use &quot;activerehashing no&quot; if you have hard latency requirements and it is
# not a good thing in your environment that Redis can reply from time to time
# to queries with 2 milliseconds delay.
#
# use &quot;activerehashing yes&quot; if you don&#39;t have such hard requirements but
# want to free memory asap when possible.
activerehashing yes

# The client output buffer limits can be used to force disconnection of clients
# that are not reading data from the server fast enough for some reason (a
# common reason is that a Pub/Sub client can&#39;t consume messages as fast as the
# publisher can produce them).
#
# The limit can be set differently for the three different classes of clients:
#
# normal -&gt; normal clients including MONITOR clients
# slave  -&gt; slave clients
# pubsub -&gt; clients subscribed to at least one pubsub channel or pattern
#
# The syntax of every client-output-buffer-limit directive is the following:
#
# client-output-buffer-limit &lt;class&gt; &lt;hard limit&gt; &lt;soft limit&gt; &lt;soft seconds&gt;
#
# A client is immediately disconnected once the hard limit is reached, or if
# the soft limit is reached and remains reached for the specified number of
# seconds (continuously).
# So for instance if the hard limit is 32 megabytes and the soft limit is
# 16 megabytes / 10 seconds, the client will get disconnected immediately
# if the size of the output buffers reach 32 megabytes, but will also get
# disconnected if the client reaches 16 megabytes and continuously overcomes
# the limit for 10 seconds.
#
# By default normal clients are not limited because they don&#39;t receive data
# without asking (in a push way), but just after a request, so only
# asynchronous clients may create a scenario where data is requested faster
# than it can read.
#
# Instead there is a default limit for pubsub and slave clients, since
# subscribers and slaves receive data in a push fashion.
#
# Both the hard or the soft limit can be disabled by setting them to zero.
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit slave 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60

# Redis calls an internal function to perform many background tasks, like
# closing connections of clients in timeout, purging expired keys that are
# never requested, and so forth.
#
# Not all tasks are performed with the same frequency, but Redis checks for
# tasks to perform according to the specified &quot;hz&quot; value.
#
# By default &quot;hz&quot; is set to 10. Raising the value will use more CPU when
# Redis is idle, but at the same time will make Redis more responsive when
# there are many keys expiring at the same time, and timeouts may be
# handled with more precision.
#
# The range is between 1 and 500, however a value over 100 is usually not
# a good idea. Most users should use the default of 10 and raise this up to
# 100 only in environments where very low latency is required.
hz 10

# When a child rewrites the AOF file, if the following option is enabled
# the file will be fsync-ed every 32 MB of data generated. This is useful
# in order to commit the file to the disk more incrementally and avoid
# big latency spikes.
aof-rewrite-incremental-fsync yes</code></pre>
<h2 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h2><ol>
<li>daemonize no    Redis 默认不是以守护进程的方式运行，可以通过该配置项修改，使用 yes 启用守护进程（Windows 不支持守护线程的配置为 no ）</li>
<li>pidfile /var/run/redis.pid    当 Redis 以守护进程方式运行时，Redis 默认会把 pid 写入 /var/run/redis.pid 文件，可以通过 pidfile 指定</li>
<li>port 6379    指定 Redis 监听端口，默认端口为 6379，作者在自己的一篇博文中解释了为什么选用 6379 作为默认端口，因为 6379 在手机按键上 MERZ 对应的号码，而 MERZ 取自意大利歌女 Alessia Merz 的名字</li>
<li>bind 127.0.0.1    绑定的主机地址</li>
<li>timeout 300    当客户端闲置多长时间后关闭连接，如果指定为 0，表示关闭该功能</li>
<li>loglevel notice    指定日志记录级别，Redis 总共支持四个级别：debug、verbose、notice、warning，默认为 notice</li>
<li>logfile stdout    日志记录方式，默认为标准输出，如果配置 Redis 为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给 /dev/null</li>
<li>databases 16    设置数据库的数量，默认数据库为0，可以使用SELECT 命令在连接上指定数据库id</li>
<li>save <seconds> <changes><br>Redis 默认配置文件中提供了三个条件：<br>save 900 1<br>save 300 10<br>save 60 10000</changes></seconds></li>
</ol>
<p>分别表示 900 秒（15 分钟）内有 1 个更改，300 秒（5 分钟）内有 10 个更改以及 60 秒内有 10000 个更改。<br>指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合<br>10. rdbcompression yes    指定存储至本地数据库时是否压缩数据，默认为 yes，Redis 采用 LZF 压缩，如果为了节省 CPU 时间，可以关闭该选项，但会导致数据库文件变的巨大<br>11. dbfilename dump.rdb    指定本地数据库文件名，默认值为 dump.rdb<br>12. dir ./    指定本地数据库存放目录<br>13. slaveof <masterip> <masterport>    设置当本机为 slav 服务时，设置 master 服务的 IP 地址及端口，在 Redis 启动时，它会自动从 master 进行数据同步<br>14. masterauth <master-password>    当 master 服务设置了密码保护时，slav 服务连接 master 的密码<br>15. requirepass foobared    设置 Redis 连接密码，如果配置了连接密码，客户端在连接 Redis 时需要通过 AUTH <password> 命令提供密码，默认关闭<br>16. maxclients 128    设置同一时间最大客户端连接数，默认无限制，Redis 可以同时打开的客户端连接数为 Redis 进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis 会关闭新的连接并向客户端返回 max number of clients reached 错误信息<br>17. maxmemory <bytes>    指定 Redis 最大内存限制，Redis 在启动时会把数据加载到内存中，达到最大内存后，Redis 会先尝试清除已到期或即将到期的 Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis 新的 vm 机制，会把 Key 存放内存，Value 会存放在 swap 区<br>18. appendonly no    指定是否在每次更新操作后进行日志记录，Redis 在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis 本身同步数据文件是按上面 save 条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为 no<br>19. appendfilename appendonly.aof    指定更新日志文件名，默认为 appendonly.aof<br>20. appendfsync everysec<br>指定更新日志条件，共有 3 个可选值：<br>no：表示等操作系统进行数据缓存同步到磁盘（快）<br>always：表示每次更新操作后手动调用 fsync() 将数据写到磁盘（慢，安全）<br>everysec：表示每秒同步一次（折中，默认值）<br>21. vm-enabled no    指定是否启用虚拟内存机制，默认值为 no，简单的介绍一下，VM 机制将数据分页存放，由 Redis 将访问量较少的页即冷数据 swap 到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析 Redis 的 VM 机制）<br>22. vm-swap-file /tmp/redis.swap    虚拟内存文件路径，默认值为 /tmp/redis.swap，不可多个 Redis 实例共享<br>23. vm-max-memory 0    将所有大于 vm-max-memory 的数据存入虚拟内存，无论 vm-max-memory 设置多小，所有索引数据都是内存存储的(Redis 的索引数据 就是 keys)，也就是说，当 vm-max-memory 设置为 0 的时候，其实是所有 value 都存在于磁盘。默认值为 0<br>24. vm-page-size 32    Redis swap 文件分成了很多的 page，一个对象可以保存在多个 page 上面，但一个 page 上不能被多个对象共享，vm-page-size 是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page 大小最好设置为 32 或者 64bytes；如果存储很大大对象，则可以使用更大的 page，如果不确定，就使用默认值<br>25. vm-pages 134217728    设置 swap 文件中的 page 数量，由于页表（一种表示页面空闲或使用的 bitmap）是在放在内存中的，，在磁盘上每 8 个 pages 将消耗 1byte 的内存。<br>26. vm-max-threads 4    设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4<br>27. glueoutputbuf yes    设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启<br>28. hash-max-zipmap-entries 64<br>    hash-max-zipmap-value 512    指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法<br>29. activerehashing yes    指定是否激活重置哈希，默认为开启（后面在介绍 Redis 的哈希算法时具体介绍）<br>30. include /path/to/local.conf    指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</bytes></password></master-password></masterport></masterip></p>
<h2 id="下载并运行"><a href="#下载并运行" class="headerlink" title="下载并运行"></a>下载并运行</h2><pre><code class="line-numbers language-bash">docker run -d --name redis -p 6379:6379 -v  /data/redis/redis.conf:/etc/redis.conf redis</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>查看端口占用</title>
    <url>/p/7cce4c73.html</url>
    <content><![CDATA[<h2 id="Windows-环境中"><a href="#Windows-环境中" class="headerlink" title="Windows 环境中"></a>Windows 环境中</h2><ol>
<li>开始—-&gt;运行—-&gt;cmd,或者是window+R组合键,调出命令窗口</li>
<li>netstat -ano | findstr <code>端口号</code><a id="more"></a>
<pre><code class="line-numbers language-powershell">C:\Users\Administrator&gt;netstat -ano | findstr 18388
TCP    0.0.0.0:18388          0.0.0.0:0              LISTENING       1984
UDP    0.0.0.0:18388          *:*                                    1984</code></pre>
</li>
<li>tasklist|findstr <code>PID</code>,查看是哪个进程或者<pre><code class="line-numbers language-powershell">C:\Users\Administrator&gt;tasklist|findstr 1984
node.exe                      1984                            2     26,024 K</code></pre>
</li>
<li>taskkill /f /t /pid <code>PID</code> 结束进程<pre><code class="line-numbers language-powershell">C:\Users\Administrator&gt;taskkill /f /t /pid 1984
成功: 已终止 PID 1984 (属于 PID 2916 子进程)的进程。</code></pre>
<h2 id="Linux-环境中"><a href="#Linux-环境中" class="headerlink" title="Linux 环境中"></a>Linux 环境中</h2></li>
<li>netstat -ano | grep <code>端口号</code><pre><code class="line-numbers language-bash">[root@guoke3915 ~]# netstat -anp | grep 80
tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      1370/nginx: master  </code></pre>
后面1370就是端口号，nginx:master是进程名</li>
<li>ps -ef | grep PID 查看进程详情<pre><code class="line-numbers language-bash">[root@guoke3915 ~]# ps -ef | grep 1370
root      1370     1  0 Feb09 ?        00:00:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf
nginx     1373  1370  0 Feb09 ?        00:00:00 nginx: worker process
root     20707 20681  0 17:41 pts/0    00:00:00 grep --color=auto 1370</code></pre>
</li>
<li>kill -9 PID 结束进程<pre><code class="line-numbers language-bash">kill -9 1370</code></pre>
</li>
</ol>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Ubuntu</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云CentOS使用密钥免密登录</title>
    <url>/p/d0e7807e.html</url>
    <content><![CDATA[<ol>
<li>前提<br>有阿里云服务器A（192.168.1.177）、服务器B（192.168.1.180）组成内网，现需要配置服务器A可以免密ssh连接服务器B<a id="more"></a></li>
<li>获取密钥对<br>直接在阿里云控制台创建密钥对，并绑定到服务器B上。<br><img src="//gitee.com/guoke3915/zw/raw/master/p/d0e7807e/19826068-b858f41ba83186cd.png" alt></li>
<li>配置服务器A<br>从后台下载密钥对的私钥文件(.pem后缀)，并上传到服务器A的 /root/.ssh目录下</li>
<li>进入服务器A，修改私钥文件名为 id_rsa</li>
</ol>
<pre><code class="line-numbers language-bash">cd ~/.ssh
mv guoke.pem id_rsa</code></pre>
<ol start="5">
<li>修改私钥文件权限</li>
</ol>
<pre><code class="line-numbers language-bash">chmod 600 id_rsa</code></pre>
<ol start="6">
<li>直接ssh连接服务器B</li>
</ol>
<pre><code class="line-numbers language-bash">[root@iZbp10ebr6tsvhae7nwfmvZ .ssh]# ssh 192.168.1.180
The authenticity of host &#39;192.168.1.180 (192.168.1.180)&#39; can&#39;t be established.
ECDSA key fingerprint is SHA256:hesen9D/4OD39Ehp10nZ60StoV5NTavQ3WHUQNdu94g.
ECDSA key fingerprint is MD5:32:3e:2d:75:1c:c0:0c:11:97:82:28:25:a0:1b:dc:0c.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &#39;192.168.1.180&#39; (ECDSA) to the list of known hosts.
Last login: Thu Dec 26 23:47:27 2019 from 119.32.73.182

Welcome to Alibaba Cloud Elastic Compute Service !

[root@guoke ~]# </code></pre>
<p>第一次登录需要输入yes确认，之后可以直接连了。<br>7. 扩展</p>
<ul>
<li>注意id_rsa文件需要修改权限，不然连接时会报‘bad permissions’错误</li>
<li>如果存在一个内网服务器组，将所有服务器都绑定同一个密钥对，然后把所有服务器都安上述方法添加私钥，这样服务器组中所有服务器之间的访问都是免密的。</li>
<li>ssh免密之后，基于ssh的所有协议（如：scp）都将免密</li>
</ul>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>国内加速访问Github的办法</title>
    <url>/p/a976745d.html</url>
    <content><![CDATA[<p>国内的GitHub的分发加速网络的域名遭到dns污染，修改本地hosts文件，绕过国内dns解析，直接访问GitHub的CDN节点，从而达到加速的目的。</p>
<a id="more"></a>

<h3 id="一、打开http-IPAddress-com网站，查询下面3个网址对应的IP地址"><a href="#一、打开http-IPAddress-com网站，查询下面3个网址对应的IP地址" class="headerlink" title="一、打开http://IPAddress.com网站，查询下面3个网址对应的IP地址"></a>一、打开<a href="http://IPAddress.com" target="_blank" rel="noopener">http://IPAddress.com</a>网站，查询下面3个网址对应的IP地址</h3><ol>
<li>github.com</li>
<li>assets-cdn.github.com</li>
<li>github.global.ssl.fastly.net</li>
</ol>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/a976745d/19826068-95155ca7233b240d.png" alt></p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/a976745d/19826068-63699e7c0b6d6e32.png" alt></p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/a976745d/19826068-710299ec0f2af586.png" alt></p>
<h3 id="二、修改本地电脑系统hosts文件"><a href="#二、修改本地电脑系统hosts文件" class="headerlink" title="二、修改本地电脑系统hosts文件"></a>二、修改本地电脑系统hosts文件</h3><ol>
<li>Windows中：<br>路径 C:\Windows\System32\drivers\etc\hosts</li>
<li>Linux中<br>路径 /etc/hosts</li>
<li>Mac 中<br>路径 </li>
</ol>
<p>直接在最后加入以下代码,如果hosts文件是只读的，先要修改文件属性<br>注：ip可能根据时间而变化，所以，发现慢的时候建议重新再获取一次ip进行修改</p>
<pre><code class="line-numbers language-ini">192.30.253.112 github.com
185.199.109.153 assets-cdn.github.com
199.232.5.194 github.global.ssl.fastly.net</code></pre>
<h3 id="三、刷新系统dns缓存"><a href="#三、刷新系统dns缓存" class="headerlink" title="三、刷新系统dns缓存"></a>三、刷新系统dns缓存</h3><p>修改后会直接生效，如未生效重起或用命令刷新</p>
<ol>
<li>Windows 中<br>用WIN+R打开命令行。输入<code>ipconfig /flushdns</code></li>
<li>Linux中<br><code>systemctl restart nscd</code></li>
<li>Mac中<br><code>sudo dscacheutil -flushcache</code>或<code>sudo killall -HUP mDNSResponder</code></li>
</ol>
<p>本文参考：<br><a href="https://zhuanlan.zhihu.com/p/65154116" target="_blank" rel="noopener">知乎 https://zhuanlan.zhihu.com/p/65154116</a></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>软件使用</tag>
        <tag>Ubuntu</tag>
        <tag>Window</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 中安装 Kafka</title>
    <url>/p/7077d4d2.html</url>
    <content><![CDATA[<h3 id="Docker-Compose安装"><a href="#Docker-Compose安装" class="headerlink" title="Docker-Compose安装"></a>Docker-Compose安装</h3><ol>
<li>这里使用Docker-Compose来安装<a id="more"></a>
Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。详见官方代码 <a href="https://github.com/docker/compose" target="_blank" rel="noopener">https://github.com/docker/compose</a></li>
<li>安装Docker-Compose<br>最新发行的版本地址：<a href="https://github.com/docker/compose/releases" target="_blank" rel="noopener">https://github.com/docker/compose/releases</a><br>这里安装1.25.0版本,如果要安装其他版本直接替换1.25.0就行了<pre><code class="line-numbers language-bash">curl -L https://github.com/docker/compose/releases/download/1.25.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</code></pre>
</li>
<li>赋于Docker-Compose可执行权限<pre><code class="line-numbers language-bash">chmod +x /usr/local/bin/docker-compose</code></pre>
</li>
<li>测试 Docker-Compose是否安装成功<pre><code class="line-numbers language-bash">docker-compose --version
docker-compose version 1.25.0, build 0a186604</code></pre>
<h3 id="Kafka安装"><a href="#Kafka安装" class="headerlink" title="Kafka安装"></a>Kafka安装</h3></li>
<li>创建docker-compose.yml文件<pre><code class="line-numbers language-bash">mkdir -p /data/kafka
vim /data/kafka/docker-compose.yml</code></pre>
</li>
<li>编写docker-compose.yml文件内容</li>
</ol>
<pre><code class="line-numbers language-yml">version: &#39;2&#39;
services:
  zookeeper:
    image: zookeeper
    container_name: dk-zk
    ports:
      - &quot;2181:2181&quot;
  kafka:
    image: wurstmeister/kafka
    container_name: dk-kafka
    ports:
      - &quot;9092:9092&quot;
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 192.168.55.55
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_JVM_PERFORMANCE_OPTS: &quot; -Xms1g -Xmx6g&quot;
      KAFKA_LOG_RETENTION_HOURS: 48
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock</code></pre>
<ul>
<li>KAFKA_ADVERTISED_HOST_NAME： 配置主机的ip，可以用ifconfig查询得到</li>
<li>KAFKA_ZOOKEEPER_CONNECT：zookeeper的端口</li>
<li>KAFKA_JVM_PERFORMANCE_OPTS：配置java虚拟机中应用程序可用内存范围</li>
<li>KAFKA_LOG_RETENTION_HOURS：kafka日志保留时间（小时）</li>
</ul>
<ol start="3">
<li>进入到docker-compose.yml所在目录，安装<pre><code class="line-numbers language-bash">cd /data/kafka
docker-compose up -d</code></pre>
</li>
<li>设置随Docker启动而启动<pre><code class="line-numbers language-bash">docker update --restart=always dk-zk
docker update --restart=always dk-kafka</code></pre>
</li>
</ol>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 中安装 Mongodb</title>
    <url>/p/f8a6f036.html</url>
    <content><![CDATA[<ol>
<li>为了方便，我们可以将MongoDB的数据目录映射到主机上来<br>创建数据目录<a id="more"></a>
<pre><code class="line-numbers language-bash">mkdir -p /data/mongodata</code></pre>
</li>
<li>直接下载启动MongoDB<pre><code class="line-numbers language-bash">docker run -d --name mongo --volume /data/mongodata:/data/db -p 27017:27017 mongo --auth</code></pre>
解析：</li>
</ol>
<ul>
<li>–name mongo docker启动名</li>
<li>–volume /data/mongodata:/data/db 映射数据目录</li>
<li>-p 27017:27017 端口映射，前面的是主机端口，后面的是docker中的端口</li>
<li>mongo –auth 以账号验证模式启动</li>
</ul>
<ol start="3">
<li>创建账号<br>创建root用户、密码为guoke3915，所有数据库读写权限<pre><code class="line-numbers language-bash">docker exec -it mongo mongo admin --eval &quot;db.createUser({ user: &#39;root&#39;, pwd: &#39;guoke3915&#39;, roles: [ { role: &#39;root&#39;, db: &#39;admin&#39; } , &#39;readWriteAnyDatabase&#39;] })&quot;</code></pre>
</li>
<li>设置随Docker启动<pre><code class="line-numbers language-bash">docker update --restart=always mongo</code></pre>
</li>
</ol>
]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 中安装 Nginx</title>
    <url>/p/8fbc1fc6.html</url>
    <content><![CDATA[<ol>
<li>在/data目录下新建一个html目录，用于网站的根目录<pre><code class="line-numbers language-bash">mkdir -p /data/html</code></pre>
<a id="more"></a></li>
<li>为了配置方便，我们把docker中的nginx配置文件映射出来<br>在本地创建一个nginx.conf文件<pre><code class="line-numbers language-bash">mkdir -p /data/nginx
vim /data/nginx/nginx.conf</code></pre>
</li>
<li>输入简单的配置</li>
</ol>
<pre><code class="line-numbers language-ini">#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;
    #                  &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;
    #                  &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  1800;

    gzip            on;
    gzip_min_length 1000;
    gzip_proxied    off;
    gzip_types      text/plain text/css text/js application/javascript;

    server {
       # 监听80端口
        listen       80;
        server_name  localhost;
        index   index.html;

        location / {
            # 根目录为docker中的目录，这个在启动时配置参数映射到主机上
            root   /usr/local/html/;
            add_header &#39;Cache-Control&#39; &#39;no-store&#39;;
        }
    }
}</code></pre>
<ol start="4">
<li>在docker中启动nginx<pre><code class="line-numbers language-bash">docker run --name nginx -v /data/html:/usr/local/html -v /data/nginx/nginx.conf:/etc/nginx/nginx.conf:ro --net=host -d nginx:1.10.1-alpine</code></pre>
</li>
<li>查看状态<pre><code class="line-numbers language-bash">docker ps
CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS               NAMES
4f7e11811ae6        nginx:1.10.1-alpine   &quot;nginx -g &#39;daemon of…&quot;   48 seconds ago      Up 47 seconds                           nginx</code></pre>
</li>
<li>等待下载完成后，设置随docker启动而启动<pre><code class="line-numbers language-bash">docker update --restart=always nginx</code></pre>
</li>
</ol>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云CentOS7中安装Docker</title>
    <url>/p/1fd9e49.html</url>
    <content><![CDATA[<p>前面说了<a href="/p/39d97234.html">CentOS 7 安装Docker</a>，但用的是docker的镜像，国内下起来有点慢，以面讲一下阿里云中使用阿里的镜像来安装</p>
<a id="more"></a>
<pre><code class="line-numbers language-bash">## 确保 yum 包更新到最新。
sudo yum -y update

## 卸载旧版本
sudo yum remove docker  docker-common docker-selinux docker-engine

## 安装需要的软件包
sudo yum install -y yum-utils device-mapper-persistent-data lvm2 

## 设置阿里云源
sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo

## 更新并安装Docker-CE
sudo yum makecache fast
sudo yum -y install docker-ce

## 设置开机启动
sudo systemctl enable docker

## 启动docker
sudo systemctl start docker

## 显示版本
docker version</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>win10开机默认开启小键盘</title>
    <url>/p/98fa4bbc.html</url>
    <content><![CDATA[<ol>
<li>Ctrl+Win键打开‘运行’窗口，输入<code>regedit</code>打开注册表<a id="more"></a></li>
<li>定位到<code>计算机\HKEY_USERS\.DEFAULT\Control Panel\Keyboard</code></li>
<li>双击InitialKeyboardIndicators，把原数值数据2147483648修改为80000002<br><img src="//gitee.com/guoke3915/zw/raw/master/p/98fa4bbc/19826068-49c285814f3c6a9e.png" alt></li>
<li>重启电脑</li>
</ol>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>win10开机默认开启小键盘</title>
    <url>/p/98fa4bbc.html</url>
    <content><![CDATA[<ol>
<li>Ctrl+Win键打开‘运行’窗口，输入<code>regedit</code>打开注册表<a id="more"></a></li>
<li>定位到<code>计算机\HKEY_USERS\.DEFAULT\Control Panel\Keyboard</code></li>
<li>双击InitialKeyboardIndicators，把原数值数据2147483648修改为80000002<br><img src="//gitee.com/guoke3915/zw/raw/master/p/98fa4bbc/19826068-49c285814f3c6a9e.png" alt></li>
<li>重启电脑</li>
</ol>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>net::ERR_BLOCKED_BY_CLIENT</title>
    <url>/p/f5716ba8.html</url>
    <content><![CDATA[<p>做了一个Web项目，本地测试都正常，然后用户那边测下来各种超时不正常。后来发现用户的浏览器装了 AdblockPlus广告过滤插件</p>
<a id="more"></a>
<p>自己安装这个插件后，问题就暴露了，一些地址就出现了<code>net::ERR_BLOCKED_BY_CLIENT</code>错误，然后发现是被AdblockPlus直接拦截了。<br>按F12打开控制台输出，找到AdblockPlus的输出，发现地址代ad的都被拦截了。<br><img src="//gitee.com/guoke3915/zw/raw/master/p/f5716ba8/19826068-a541a1c93026a58c.png" alt><br>这也太简单粗暴了吧，惹不起，我绕着走，改一个路由名就行了</p>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>ERROR</tag>
      </tags>
  </entry>
  <entry>
    <title>WPS 表格设置输入限制</title>
    <url>/p/ceb38000.html</url>
    <content><![CDATA[<ol>
<li>打开wps表格，选择要限制输入的内容。选择菜单栏上的‘数据’-&gt;‘有效性’<a id="more"></a>
<img src="//gitee.com/guoke3915/zw/raw/master/p/ceb38000/19826068-6b653fd6f83cd542.png" alt></li>
<li>在有效性页面选择‘序列’，在来源框中输入可选择的内容，以‘,’号分隔不同的选择项<br><img src="//gitee.com/guoke3915/zw/raw/master/p/ceb38000/19826068-1c4d70367b0f46a9.png" alt></li>
<li>完成后，输入只能从填写的内容里面做选择了<br><img src="//gitee.com/guoke3915/zw/raw/master/p/ceb38000/19826068-046d04f663513b49.png" alt></li>
<li>这里的有效性还可以对时间、数值、字符串做很多的限制，根据自己的需要设置就行了<br><img src="//gitee.com/guoke3915/zw/raw/master/p/ceb38000/19826068-08967947ed5ffe82.png" alt></li>
</ol>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>分享几个IP获取地理位置的API</title>
    <url>/p/9f838c2b.html</url>
    <content><![CDATA[<h2 id="淘宝"><a href="#淘宝" class="headerlink" title="淘宝"></a>淘宝</h2><h3 id="1-请求接口（GET）："><a href="#1-请求接口（GET）：" class="headerlink" title="1. 请求接口（GET）："></a>1. 请求接口（GET）：</h3><a id="more"></a>

<p><a href="http://ip.taobao.com/service/getIpInfo.php?ip=119.35.6.120" target="_blank" rel="noopener">http://ip.taobao.com/service/getIpInfo.php?ip=<code>ip地址字串</code></a></p>
<h3 id="2-返回数据格式："><a href="#2-返回数据格式：" class="headerlink" title="2.  返回数据格式："></a>2.  返回数据格式：</h3><pre><code class="line-numbers language-json">{
    &quot;code&quot;: 0,
    &quot;data&quot;: {
        &quot;ip&quot;: &quot;119.35.6.120&quot;,
        &quot;country&quot;: &quot;中国&quot;,
        &quot;area&quot;: &quot;&quot;,
        &quot;region&quot;: &quot;广东&quot;,
        &quot;city&quot;: &quot;广州&quot;,
        &quot;county&quot;: &quot;XX&quot;,
        &quot;isp&quot;: &quot;珠江宽频&quot;,
        &quot;country_id&quot;: &quot;CN&quot;,
        &quot;area_id&quot;: &quot;&quot;,
        &quot;region_id&quot;: &quot;440000&quot;,
        &quot;city_id&quot;: &quot;440100&quot;,
        &quot;county_id&quot;: &quot;xx&quot;,
        &quot;isp_id&quot;: &quot;1000331&quot;
    }
}</code></pre>
<h3 id="3-频次限制："><a href="#3-频次限制：" class="headerlink" title="3. 频次限制："></a>3. 频次限制：</h3><p>每个用户的访问频率需小于1qps</p>
<h3 id="4-文档说明："><a href="#4-文档说明：" class="headerlink" title="4. 文档说明："></a>4. 文档说明：</h3><p><a href="http://ip.taobao.com/instructions.html" target="_blank" rel="noopener">http://ip.taobao.com/instructions.html</a></p>
<h2 id="ip-api"><a href="#ip-api" class="headerlink" title="ip-api"></a>ip-api</h2><h3 id="1-请求接口（GET）：-1"><a href="#1-请求接口（GET）：-1" class="headerlink" title="1. 请求接口（GET）："></a>1. 请求接口（GET）：</h3><p><a href="http://ip-api.com/json/119.35.6.120?lang=zh-CN" target="_blank" rel="noopener">http://ip-api.com/json/<code>ip地址字串</code>?lang=zh-CN</a></p>
<h3 id="2-返回数据格式：-1"><a href="#2-返回数据格式：-1" class="headerlink" title="2.  返回数据格式："></a>2.  返回数据格式：</h3><pre><code class="line-numbers language-json">{
    &quot;status&quot;: &quot;success&quot;,
    &quot;country&quot;: &quot;中国&quot;,
    &quot;countryCode&quot;: &quot;CN&quot;,
    &quot;region&quot;: &quot;GD&quot;,
    &quot;regionName&quot;: &quot;广东&quot;,
    &quot;city&quot;: &quot;广州&quot;,
    &quot;zip&quot;: &quot;&quot;,
    &quot;lat&quot;: 23.1167,
    &quot;lon&quot;: 113.25,
    &quot;timezone&quot;: &quot;Asia/Shanghai&quot;,
    &quot;isp&quot;: &quot;China Unicom Guangzhou network&quot;,
    &quot;org&quot;: &quot;GuangZhou Radio \u0026 Television network Co., LTD.&quot;,
    &quot;as&quot;: &quot;AS17622 China Unicom Guangzhou network&quot;,
    &quot;query&quot;: &quot;119.35.6.120&quot;
}</code></pre>
<h3 id="3-频次限制：-1"><a href="#3-频次限制：-1" class="headerlink" title="3. 频次限制："></a>3. 频次限制：</h3><p>不详</p>
<h3 id="4-文档说明：-1"><a href="#4-文档说明：-1" class="headerlink" title="4. 文档说明："></a>4. 文档说明：</h3><p><a href="https://ip-api.com/docs" target="_blank" rel="noopener">https://ip-api.com/docs</a></p>
<h2 id="IPIP"><a href="#IPIP" class="headerlink" title="IPIP"></a>IPIP</h2><h3 id="1-请求接口（GET）：-2"><a href="#1-请求接口（GET）：-2" class="headerlink" title="1. 请求接口（GET）："></a>1. 请求接口（GET）：</h3><p><a href="http://freeapi.ipip.net/119.35.6.120" target="_blank" rel="noopener">http://freeapi.ipip.net/<code>ip地址字串</code></a></p>
<h3 id="2-返回数据格式：-2"><a href="#2-返回数据格式：-2" class="headerlink" title="2.  返回数据格式："></a>2.  返回数据格式：</h3><pre><code class="line-numbers language-json">[&quot;中国&quot;,&quot;广东&quot;,&quot;广州&quot;,&quot;&quot;,&quot;珠江宽频/联通&quot;]</code></pre>
<h3 id="3-频次限制：-2"><a href="#3-频次限制：-2" class="headerlink" title="3. 频次限制："></a>3. 频次限制：</h3><p>每天1000次</p>
<h3 id="4-文档说明：-2"><a href="#4-文档说明：-2" class="headerlink" title="4. 文档说明："></a>4. 文档说明：</h3><p><a href="https://www.ipip.net/support/api.html" target="_blank" rel="noopener">https://www.ipip.net/support/api.html</a></p>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
      </tags>
  </entry>
  <entry>
    <title>VS Code 常用快捷键</title>
    <url>/p/1f75c6d3.html</url>
    <content><![CDATA[<h2 id="主命令框"><a href="#主命令框" class="headerlink" title="主命令框"></a>主命令框</h2><p>F1 或 Ctrl+Shift+P : 打开命令面板。在打开的输入框内，可以输入任何命令，例如：</p>
<a id="more"></a>
<ul>
<li>按一下 Backspace 会进入到 Ctrl+P 模式</li>
<li>在 Ctrl+P 下输入 &gt; 可以进入 Ctrl+Shift+P 模式</li>
<li>在 Ctrl+P 窗口下还可以:<blockquote>
<dl><dt>-直接输入文件名，跳转到文件<br>? 列出当前可执行的动作<br>! 显示 Errors或 Warnings，也可以 Ctrl+Shift+M</dt><dd>跳转到行数，也可以 Ctrl+G 直接进入<br>@ 跳转到 symbol（搜索变量或者函数），也可以 Ctrl+Shift+O 直接进入<br>@ 根据分类跳转 symbol，查找属性或函数，也可以 Ctrl+Shift+O 后输入:进入<br># 根据名字查找 symbol，也可以 Ctrl+T</dd></dl></blockquote>
<h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><h3 id="编辑器与窗口管理"><a href="#编辑器与窗口管理" class="headerlink" title="编辑器与窗口管理"></a>编辑器与窗口管理</h3></li>
<li>打开一个新窗口： Ctrl+Shift+N</li>
<li>关闭窗口： Ctrl+Shift+W</li>
<li>同时打开多个编辑器（查看多个文件）</li>
<li>新建文件 Ctrl+N</li>
<li>文件之间切换 Ctrl+Tab</li>
<li>切出一个新的编辑器（最多 3 个） Ctrl+\，也可以按住 Ctrl 鼠标点击 Explorer 里的文件名</li>
<li>左中右 3 个编辑器的快捷键 Ctrl+1 Ctrl+2 Ctrl+3</li>
<li>3 个编辑器之间循环切换 Ctrl+</li>
<li>编辑器换位置， Ctrl+k然后按 Left或 Right<h3 id="代码编辑"><a href="#代码编辑" class="headerlink" title="代码编辑"></a>代码编辑</h3><h4 id="格式调整"><a href="#格式调整" class="headerlink" title="格式调整"></a>格式调整</h4></li>
<li>代码行缩进: Ctrl+[ 、 Ctrl+]</li>
<li>Ctrl+C 、 Ctrl+V 复制或剪切当前行/当前选中内容</li>
<li>代码格式化： Shift+Alt+F，或 Ctrl+Shift+P 后输入 format code</li>
<li>上下移动一行： Alt+Up 或 Alt+Down</li>
<li>向上向下复制一行： Shift+Alt+Up 或 Shift+Alt+Down</li>
<li>在当前行下边插入一行: Ctrl+Enter</li>
<li>在当前行上方插入一行 Ctrl+Shift+Enter<h4 id="光标相关"><a href="#光标相关" class="headerlink" title="光标相关"></a>光标相关</h4></li>
<li>移动到行首： Home</li>
<li>移动到行尾： End</li>
<li>移动到文件结尾： Ctrl+End</li>
<li>移动到文件开头： Ctrl+Home</li>
<li>移动到定义处： F12</li>
<li>定义处缩略图：只看一眼而不跳转过去 Alt+F12</li>
<li>移动到后半个括号： Ctrl+Shift+]</li>
<li>选择从光标到行尾： Shift+End</li>
<li>选择从行首到光标处： Shift+Home</li>
<li>删除光标右侧的所有字： Ctrl+Delete</li>
<li>扩展/缩小选取范围： Shift+Alt+Left 和 Shift+Alt+Right</li>
<li>多行编辑(列编辑)：Alt+Shift+鼠标左键， Ctrl+Alt+Down/Up</li>
<li>同时选中所有匹配： Ctrl+Shift+L</li>
<li>Ctrl+D 下一个匹配的也被选中 (在 sublime 中是删除当前行，后面自定义快键键中，设置与 Ctrl+Shift+K 互换了)</li>
<li>回退上一个光标操作： Ctrl+U</li>
<li>选中所有匹配词批量编辑：鼠标高亮选中需要查找的词，按下 Ctrl + Shift + L键，即可快速选中当前文件中所有匹配的词，并在每一个词后面有一个编辑光标，可批量同步编辑</li>
<li>折叠所有区域代码 Ctrl+K Ctrl+0(零)</li>
<li>展开所有区域代码 Ctrl+K Ctrl+J</li>
<li>打开当前文件所在目录 Ctrl+K R<h4 id="重构代码"><a href="#重构代码" class="headerlink" title="重构代码"></a>重构代码</h4></li>
<li>找到所有的引用： Shift+F12</li>
<li>同时修改本文件中所有匹配的： Ctrl+F12</li>
<li>重命名：比如要修改一个方法名，可以选中后按 F2，输入新名字，回车，则所有该方法的引用也都同步更新了</li>
<li>跳转到下一个 Error 或 Warning：当有多个错误时可以按 F8 逐个跳转</li>
<li>查看 diff： 在 explorer 里选择文件右键 Set file tocompare，然后需要对比的文件上右键选择 Compare with file_name_you_chose<h4 id="查找替换"><a href="#查找替换" class="headerlink" title="查找替换"></a>查找替换</h4></li>
<li>查找 Ctrl+F</li>
<li>查找替换 Ctrl+H</li>
<li>整个文件夹中查找 Ctrl+Shift+F<h4 id="显示相关"><a href="#显示相关" class="headerlink" title="显示相关"></a>显示相关</h4></li>
<li>全屏：F11</li>
<li>zoomIn/zoomOut：Ctrl +/-</li>
<li>侧边栏显/隐： Ctrl+B</li>
<li>显示资源管理器 Ctrl+Shift+E</li>
<li>显示搜索 Ctrl+Shift+F</li>
<li>显示 Git Ctrl+Shift+G</li>
<li>显示 Debug Ctrl+Shift+D</li>
<li>显示 Output Ctrl+Shift+U<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4></li>
<li>自动保存：File -&gt; AutoSave，或者 Ctrl+Shift+P，输入 auto<h3 id="修改默认快捷键"><a href="#修改默认快捷键" class="headerlink" title="修改默认快捷键"></a>修改默认快捷键</h3>打开默认键盘快捷方式设置：File -&gt; Preferences -&gt; Keyboard Shortcuts，或者：Alt+F -&gt; p -&gt; k<br>修改 keybindings.json：<pre><code class="line-numbers language-json">// Place your key bindings in this file to overwrite the defaults
[
  // ctrl+space 被切换输入法快捷键占用
  {
      &quot;key&quot;: &quot;ctrl+alt+space&quot;,
      &quot;command&quot;: &quot;editor.action.triggerSuggest&quot;,
      &quot;when&quot;: &quot;editorTextFocus&quot;
  },
  // ctrl+d 删除一行
  {
      &quot;key&quot;: &quot;ctrl+d&quot;,
      &quot;command&quot;: &quot;editor.action.deleteLines&quot;,
      &quot;when&quot;: &quot;editorTextFocus&quot;
  },
  // 与删除一行的快捷键互换
  {
      &quot;key&quot;: &quot;ctrl+shift+k&quot;,
      &quot;command&quot;: &quot;editor.action.addSelectionToNextFindMatch&quot;,
      &quot;when&quot;: &quot;editorFocus&quot;
  },
  // ctrl+shift+/多行注释
  {
      &quot;key&quot;:&quot;ctrl+shift+/&quot;,
      &quot;command&quot;: &quot;editor.action.blockComment&quot;,
      &quot;when&quot;: &quot;editorTextFocus&quot;
  },
  // 定制与 sublime 相同的大小写转换快捷键
  editor.action.transformToLowercase
  editor.action.transformToUppercase
  {
      &quot;key&quot;: &quot;ctrl+k ctrl+u&quot;,
      &quot;command&quot;: &quot;editor.action.transformToUppercase&quot;
      &quot;when&quot;: &quot;editorTextFocus&quot;
  },
  {
      &quot;key&quot;: &quot;ctrl+k ctrl+l&quot;,
      &quot;command&quot;: &quot;editor.action.transformToLowercase&quot;
      &quot;when&quot;: &quot;editorTextFocus&quot;
  }
]</code></pre>
vscode 自定义配置参考：<pre><code class="line-numbers language-json">{
  &quot;editor.fontSize&quot;: 16,
  &quot;editor.tabSize&quot;: 2,
  &quot;editor.fontLigatures&quot;: true,
      // 使用等宽字体 Fira Code
  &quot;editor.fontFamily&quot;: &quot;Fira Code, &#39;Noto Sans CJK SC Medium&#39;, Consolas, &#39;Courier New&#39;, monospace&quot;,
      // 关闭右侧的 minimap
  &quot;editor.minimap.enabled&quot;: false,
  &quot;editor.minimap.renderCharacters&quot;: false,
  &quot;files.associations&quot;: {
      &quot;*.es&quot;: &quot;javascript&quot;,
      &quot;*.es6&quot;: &quot;javascript&quot;
  },
  // 控制编辑器是否应呈现空白字符
  &quot;editor.renderWhitespace&quot;: &quot;all&quot;,
  // 启用后，将在保存文件时剪裁尾随空格。
  &quot;files.trimTrailingWhitespace&quot;: true,
  // File extensions that can be beautified as javascript or JSON.
  &quot;beautify.JSfiles&quot;: [
      &quot;&quot;,
      &quot;es&quot;,
      &quot;es6&quot;,
      &quot;js&quot;,
      &quot;json&quot;,
      &quot;jsbeautifyrc&quot;,
      &quot;jshintrc&quot;
  ],
  // 关闭 git 自动刷新、fetch、add 操作
  &quot;git.enableSmartCommit&quot;: false,
  &quot;git.enabled&quot;: true,
  &quot;git.autorefresh&quot;: false,
  &quot;git.autofetch&quot;: false,
}</code></pre>
</li>
</ul>
<p>原文章地址： <a href="https://lzw.me/a/vscode-visual-studio-code-shortcut.html" target="_blank" rel="noopener" title="vscode: Visual Studio Code 常用快捷键">vscode: Visual Studio Code 常用快捷键</a><br>官方快捷键说明：<a href="https://code.visualstudio.com/docs/customization/keybindings" target="_blank" rel="noopener" title="Key Bindings for Visual Studio Code">Key Bindings for Visual Studio Code</a></p>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Go中for range的一个坑</title>
    <url>/p/1f779438.html</url>
    <content><![CDATA[<h2 id="for-range是值拷贝出来的副本"><a href="#for-range是值拷贝出来的副本" class="headerlink" title="for range是值拷贝出来的副本"></a>for range是值拷贝出来的副本</h2><p>在使用for range的时候，要注意的是，不管是slice还是map，循环的值都是被range值拷贝出来的副本值。<br>举个简单的例了</p>
<a id="more"></a>
<pre><code class="line-numbers language-go">package main

import &quot;fmt&quot;

type Test struct {
    Index int
    Num   int
}

func main() {
    var t []Test
    t = append(t,Test{Index:1,Num:1})
    t = append(t,Test{Index:2,Num:2})

    for _, v := range t {
        v.Num += 100
    }

    for _,v:= range t{
        fmt.Println(v.Index,v.Num)
    }
}</code></pre>
<p>得到的结果是  </p>
<pre><code class="line-numbers language-go">1 1
2 2</code></pre>
<p>因为这里的v已经不是原来t中的了，而是值拷贝出来的副本值，副本值，副本值！<br>当然，map中的结果也是一样  </p>
<pre><code class="line-numbers language-go">m := make(map[int]Test)
for _, v := range m {
    v.Num += 100
}</code></pre>
<p>为了防止这个问题，我们可以用指针数组</p>
<pre><code class="line-numbers language-go">var t []*Test
t = append(t,&amp;Test{Index:1,Num:1})
t = append(t,&amp;Test{Index:2,Num:2})

for _, v := range t {
    v.Num += 100
}</code></pre>
<p>这样输出的结果是  </p>
<pre><code class="line-numbers language-go">1 101
2 102</code></pre>
<p>对于数组还有更好的办法，就是用for range，但value值用”_”舍弃了元素的复制，用下标去访问</p>
<pre><code class="line-numbers language-go">for i, _ := range t {
    t[i].Num += 100
}</code></pre>
<p>这样的结果也是  </p>
<pre><code class="line-numbers language-go">1 101
2 102</code></pre>
<p>偷偷的告诉你，这样的效率还比for _, v := range t 要高哦<br>为什么会出现这种情况呢，我们去看一下for range 原理就清楚了</p>
<h2 id="for-range-原理"><a href="#for-range-原理" class="headerlink" title="for range 原理"></a>for range 原理</h2><p>通过查看<a href="https://github.com/golang/gofrontend" target="_blank" rel="noopener">https://github.com/golang/gofrontend</a>源代码，我们可以发现for range的实现是：</p>
<pre><code class="line-numbers language-c"># statements.cc:6419 (441f3f1 on 4 Oct)
// Arrange to do a loop appropriate for the type.  We will produce
//   for INIT ; COND ; POST {
//           ITER_INIT
//           INDEX = INDEX_TEMP
//           VALUE = VALUE_TEMP // If there is a value
//           original statements
//   }</code></pre>
<p>并且对于Slice,Map等各有具体不同的编译实现,我们先看看for range slice的具体实现  </p>
<pre><code class="line-numbers language-c"># statements.cc:6638  (441f3f1 on 4 Oct)
  // The loop we generate:
  //   for_temp := range
  //   len_temp := len(for_temp)
  //   for index_temp = 0; index_temp &lt; len_temp; index_temp++ {
  //           value_temp = for_temp[index_temp]
  //           index = index_temp
  //           value = value_temp
  //           original body
  //   }</code></pre>
<p>先是对要遍历的 Slice 做一个拷贝，获取长度大小，然后使用常规for循环进行遍历，并且返回值的拷贝。<br>再看看for range map的具体实现：  </p>
<pre><code class="line-numbers language-c"># statements.cc:6891  (441f3f1 on 4 Oct)
  // The loop we generate:
  //   var hiter map_iteration_struct
  //   for mapiterinit(type, range, &amp;hiter); hiter.key != nil; mapiternext(&amp;hiter) {
  //           index_temp = *hiter.key
  //           value_temp = *hiter.val
  //           index = index_temp
  //           value = value_temp
  //           original body
  //   }</code></pre>
<p>也是先对map进行了初始化，因为map是<em>hashmap，所以这里其实是一个</em>hashmap指针的拷贝。<br>不多说了，躺过这个坑的人只想静静。。。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 中使用Kafka</title>
    <url>/p/c6a5e268.html</url>
    <content><![CDATA[<h3 id="Kafka介绍"><a href="#Kafka介绍" class="headerlink" title="Kafka介绍"></a>Kafka介绍</h3><p>Kafka是由Apache软件基金会开发的统一、高吞吐、低延迟的一个开源流处理平台。在游戏中，一些日志会用到它，游戏服务器是消息的生产者产生日志消息；日志服务器是消息的消费者，处理游戏的日志并存数据库。</p>
<a id="more"></a>
<h3 id="Kafka基本使用"><a href="#Kafka基本使用" class="headerlink" title="Kafka基本使用"></a>Kafka基本使用</h3><h4 id="消息生产者"><a href="#消息生产者" class="headerlink" title="消息生产者"></a>消息生产者</h4><pre><code class="line-numbers language-go">import (
    &quot;strings&quot;
    &quot;github.com/Shopify/sarama&quot;
    &quot;github.com/zngw/log&quot;
)

var producer sarama.AsyncProducer

// 初始化生产者
func InitProducer(hosts string) {
    config := sarama.NewConfig()
    client, err := sarama.NewClient(strings.Split(hosts, &quot;,&quot;), config)
    if err != nil {
        log.Error(&quot;unable to create kafka client: &quot;, err)
    }
    producer, err = sarama.NewAsyncProducerFromClient(client)
    if err != nil {
        log.Error(err)
    }
}

// 发送消息
func Send(topic, data string) {
    producer.Input() &lt;- &amp;sarama.ProducerMessage{Topic: topic, Key: nil, Value: sarama.StringEncoder(data)}
    log.Trace(&quot;kafka&quot;, &quot;Produced message: [&quot;+ data+&quot;]&quot;)
}

func Close() {
    if producer != nil {
        producer.Close()
    }
}</code></pre>
<h4 id="消息的消费者"><a href="#消息的消费者" class="headerlink" title="消息的消费者"></a>消息的消费者</h4><pre><code class="line-numbers language-go">import (
    &quot;strings&quot;
    &quot;github.com/Shopify/sarama&quot;
    &quot;github.com/zngw/log&quot;
)

var consumer sarama.Consumer

// 消费者回调函数
type ConsumerCallback func(data []byte)

// 初始化消费者
func InitConsumer(hosts string) {
    config := sarama.NewConfig()
    client, err := sarama.NewClient(strings.Split(hosts, &quot;,&quot;), config)
    if err != nil {
        log.Error(&quot;unable to create kafka client: &quot;, err)
    }

    consumer, err = sarama.NewConsumerFromClient(client)
    if err != nil {
        log.Error(err)
    }
}

// 消费者循环
func LoopConsumer(topic string, callback ConsumerCallback) {
    partitionConsumer, err := consumer.ConsumePartition(topic, 0, sarama.OffsetNewest)
    if err != nil {
        log.Error(err)
        return
    }
    defer partitionConsumer.Close()

    for {
        msg := &lt;-partitionConsumer.Messages()
        if callback != nil {
            callback(msg.Value)
        }
    }
}

func Close() {
    if consumer!= nil {
        consumer.Close()
    }
}</code></pre>
<h3 id="完整的测试实例"><a href="#完整的测试实例" class="headerlink" title="完整的测试实例"></a>完整的测试实例</h3><ul>
<li>生产者测试producer.go</li>
</ul>
<pre><code class="line-numbers language-go">package main

import (
    &quot;github.com/zngw/kafka&quot;
    &quot;github.com/zngw/log&quot;
    &quot;os/signal&quot;
    &quot;runtime&quot;
    &quot;syscall&quot;
)

func main() {
    // 初始化日志
    err := log.Init(nil)
    if err != nil {
        panic(err)
    }

    // 初始化生产生
    err = kafka.InitProducer(&quot;192.168.1.29:9092&quot;)
    if err != nil {
        panic(err)
    }

    // 关闭
    defer kafka.Close()

    // 发送测试消息
    kafka.Send(&quot;Test&quot;,&quot;This is Test Msg&quot;)
    kafka.Send(&quot;Test&quot;,&quot;Hello Guoke&quot;)

    signal.Ignore(syscall.SIGHUP)
    runtime.Goexit()
}
</code></pre>
<ul>
<li>消费者测试consumer.go</li>
</ul>
<pre><code class="line-numbers language-go">package main

import (
    &quot;github.com/zngw/kafka&quot;
    &quot;github.com/zngw/log&quot;
    &quot;os/signal&quot;
    &quot;runtime&quot;
    &quot;syscall&quot;
)

func main() {
    // 初始化日志
    err := log.Init(nil)
    if err != nil {
        panic(err)
    }

    // 初始化消费者
    err = kafka.InitConsumer(&quot;192.168.1.29:9092&quot;)
    if err != nil {
        panic(err)
    }

    // 监听
    go func() {
        err = kafka.LoopConsumer(&quot;Test&quot;, TopicCallBack)
        if err != nil {
            panic(err)
        }
    }()

    signal.Ignore(syscall.SIGHUP)
    runtime.Goexit()
}

func TopicCallBack(data []byte) {
    log.Trace(&quot;kafka&quot;, &quot;Test:&quot;+string(data))
}</code></pre>
<ul>
<li>执行结果<br><img src="//gitee.com/guoke3915/zw/raw/master/p/c6a5e268/19826068-f41f40d0a525b3a9.png" alt></li>
</ul>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go操作mongoDB GridFS增删查</title>
    <url>/p/446643ac.html</url>
    <content><![CDATA[<h2 id="MongoDB-GridFS介绍"><a href="#MongoDB-GridFS介绍" class="headerlink" title="MongoDB GridFS介绍"></a>MongoDB GridFS介绍</h2><p>GridFS 用于存储和恢复那些超过16M（BSON文件限制）的文件(如：图片、音频、视频等)。</p>
<a id="more"></a>
<p>GridFS 会将大文件对象分割成多个小的chunk(文件片段),一般为256k/个,每个chunk将作为MongoDB的一个文档(document)被存储在chunks集合中。<br>GridFS 用两个集合来存储一个文件：fs.files与fs.chunks。<br>每个文件的实际内容被存在chunks(二进制数据)中,和文件有关的meta数据(filename,content_type,还有用户自定义的属性)将会被存在files集合中。<br><img src="//gitee.com/guoke3915/zw/raw/master/p/446643ac/19826068-9aae5aa04ab0c20d.png" alt="GridFS文件内容"></p>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/446643ac/19826068-3cb6c990a1b21777.png" alt=" fs.files 集合"><br><img src="//gitee.com/guoke3915/zw/raw/master/p/446643ac/19826068-4f50ba8bfb9d4fdc.png" alt="fs.chunks 集合"></p>
<h2 id="go中使用"><a href="#go中使用" class="headerlink" title="go中使用"></a>go中使用</h2><ol>
<li>增加文件</li>
</ol>
<pre><code class="line-numbers language-go">// 输入文件名，将文件保存在MongoDB GridFS中，返回文件ID和错误码
func SaveFile(filename string) (fileId string, err error) {
    // 连接数据库
    session, err := mgo.Dial(&quot;mongodb://root:guoke3915@127.0.0.1:3717/admin&quot;)
    defer session.Close()
    if err != nil {
        fmt.Println(err)
        return
    }

    // 获取Test库
    db := session.DB(&quot;Test&quot;)

    // 在file前缀的GridFS中创建新文件
    file, err := db.GridFS(&quot;file&quot;).Create(filename)
    if err != nil {
        return
    }
    defer file.Close()

    // 读取文件内容
    data, err := os.OpenFile(filename, os.O_RDWR, 0666)
    if err != nil {
        return
    }
    defer data.Close()

    // 写入GridFS文件，这里也可以直接用[]byte字节流的文件
    _, err = io.Copy(file, data)
    if err != nil {
        return
    }

    // 以字符串形式返回文件ID
    fileId = file.Id().(bson.ObjectId).Hex()
    return
}</code></pre>
<ol start="2">
<li>查询文件</li>
</ol>
<pre><code class="line-numbers language-go">// 输入数据库中文件ID和要保存的文件名，将数据库在文件存回本地，返回错误码
func LoadFile(fileId, filename string) (err error) {
    // 连接数据库
    session, err := mgo.Dial(&quot;mongodb://root:guoke3915@127.0.0.1:3717/admin&quot;)
    defer session.Close()
    if err != nil {
        fmt.Println(err)
        return
    }

    // 获取Test库
    db := session.DB(&quot;Test&quot;)

    // 通过文件名获取文件，文件名不唯一，如果存在同名的，返回最后上传的那一个
    // file, err := db.GridFS(&quot;file&quot;).Open(filename)
    // 通过文件ID获取文件，因为文件ID是唯一的
    file, err := db.GridFS(&quot;file&quot;).OpenId(bson.ObjectIdHex(fileId))
    if err != nil {
        return
    }
    defer file.Close()

    // 读取文件内容
    data, err := os.OpenFile(filename, os.O_CREATE, 0666)
    if err != nil {
        return
    }
    defer data.Close()

    // 将数据写入文件
    _, err = io.Copy(data, file)
    if err != nil {
        return
    }

    return
}</code></pre>
<ol start="3">
<li>删除文件</li>
</ol>
<pre><code class="line-numbers language-go">// 删除文件，输入文件ID
func RemoveFile(fileId string) (err error) {
    // 连接数据库
    session, err := mgo.Dial(&quot;mongodb://root:guoke3915@127.0.0.1:3717/admin&quot;)
    defer session.Close()
    if err != nil {
        fmt.Println(err)
        return
    }

    // 获取Test库
    db := session.DB(&quot;Test&quot;)

    // 如果是文件名删，则删除所有同名的文件
    // err = db.GridFS(&quot;file&quot;).Remove(filename)
    // 通过文件ID删除文件
    err = db.GridFS(&quot;file&quot;).RemoveId(bson.ObjectIdHex(fileId))
    return
}</code></pre>
<ol start="4">
<li>完整代码测试</li>
</ol>
<pre><code class="line-numbers language-go">package main

import (
    &quot;fmt&quot;
    &quot;gopkg.in/mgo.v2&quot;
    &quot;gopkg.in/mgo.v2/bson&quot;
    &quot;io&quot;
    &quot;os&quot;
)

func main() {
    fileId, err := SaveFile(&quot;test.txt&quot;)
    if err != nil {
        fmt.Println(err)
        return
    }

    fmt.Println(fileId)

    err = LoadFile(fileId, &quot;test1.txt&quot;)
    if err != nil {
        fmt.Println(err)
        return
    }

    err = RemoveFile(fileId)
    if err != nil {
        fmt.Println(err)
        return
    }
}

// 输入文件名，将文件保存在MongoDB GridFS中，返回文件ID和错误码
func SaveFile(filename string) (fileId string, err error) {
    // 连接数据库
    session, err := mgo.Dial(&quot;mongodb://root:guoke3915@127.0.0.1:3717/admin&quot;)
    defer session.Close()
    if err != nil {
        fmt.Println(err)
        return
    }

    // 获取Test库
    db := session.DB(&quot;Test&quot;)

    // 在file前缀的GridFS中创建新文件
    file, err := db.GridFS(&quot;file&quot;).Create(filename)
    if err != nil {
        return
    }
    defer file.Close()

    // 读取文件内容
    data, err := os.OpenFile(filename, os.O_RDWR, 0666)
    if err != nil {
        return
    }
    defer data.Close()

    // 写入GridFS文件，这里也可以直接用[]byte字节流的文件
    _, err = io.Copy(file, data)
    if err != nil {
        return
    }

    // 以字符串形式返回文件ID
    fileId = file.Id().(bson.ObjectId).Hex()
    return
}

// 输入数据库中文件ID和要保存的文件名，将数据库在文件存回本地，返回错误码
func LoadFile(fileId, filename string) (err error) {
    // 连接数据库
    session, err := mgo.Dial(&quot;mongodb://root:guoke3915@127.0.0.1:3717/admin&quot;)
    defer session.Close()
    if err != nil {
        fmt.Println(err)
        return
    }

    // 获取Test库
    db := session.DB(&quot;Test&quot;)

    // 通过文件名获取文件，文件名不唯一，如果存在同名的，返回最后上传的那一个
    // file, err := db.GridFS(&quot;file&quot;).Open(filename)
    // 通过文件ID获取文件，因为文件ID是唯一的
    file, err := db.GridFS(&quot;file&quot;).OpenId(bson.ObjectIdHex(fileId))
    if err != nil {
        return
    }
    defer file.Close()

    // 读取文件内容
    data, err := os.OpenFile(filename, os.O_CREATE, 0666)
    if err != nil {
        return
    }
    defer data.Close()

    // 将数据写入文件
    _, err = io.Copy(data, file)
    if err != nil {
        return
    }

    return
}

// 删除文件，输入文件ID
func RemoveFile(fileId string) (err error) {
    // 连接数据库
    session, err := mgo.Dial(&quot;mongodb://root:guoke3915@127.0.0.1:3717/admin&quot;)
    defer session.Close()
    if err != nil {
        fmt.Println(err)
        return
    }

    // 获取Test库
    db := session.DB(&quot;Test&quot;)

    // 如果是文件名删，则删除所有同名的文件
    // err = db.GridFS(&quot;file&quot;).Remove(filename)
    // 通过文件ID删除文件
    err = db.GridFS(&quot;file&quot;).RemoveId(bson.ObjectIdHex(fileId))
    return
}</code></pre>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB查询内嵌数组的统计值</title>
    <url>/p/4fbd252f.html</url>
    <content><![CDATA[<p>在游戏数据中，一个玩家数据的doucument可能包含一些数据，如背包道具，我们要统计数据库中某道具ID的数量。</p>
<a id="more"></a>
<p>原始数据：</p>
<pre><code class="line-numbers language-json">{
    &quot;_id&quot;:&quot;3915&quot;,
    &quot;createTime&quot;:1574954810000,
    &quot;platform&quot;:&quot;Android&quot;,
    &quot;bag&quot;: [
        {
            &quot;id&quot;:1,
            &quot;name&quot;:&quot;道具1&quot;,
            &quot;num&quot;:3
        },
        {
            &quot;id&quot;:2,
            &quot;name&quot;:&quot;道具2&quot;,
            &quot;num&quot;:9
        },
        {
            &quot;id&quot;:3,
            &quot;name&quot;:&quot;道具3&quot;,
            &quot;num&quot;:5
        }
    ]
}

{
    &quot;_id&quot;:&quot;1234&quot;,
   &quot;createTime&quot;:1574954820000,
   &quot;platform&quot;:&quot;iOS&quot;,
    &quot;bag&quot;: [
        {
            &quot;id&quot;:1,
            &quot;name&quot;:&quot;道具1&quot;,
            &quot;num&quot;:1
        },
        {
            &quot;id&quot;:3,
            &quot;name&quot;:&quot;道具3&quot;,
            &quot;num&quot;:5
        }
    ]
}</code></pre>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/4fbd252f/19826068-f48ddbd590a114bd.png" alt></p>
<p>现在需要按平台(platform)统计创建时间(createTime)大于1574954800000，道具ID为3的数量.</p>
<pre><code class="line-numbers language-json">db.getCollection(&quot;PlayerData&quot;).aggregate([
    {
        $unwind: &quot;$bag&quot;
    },
    {
        $match: {
            &quot;createTime&quot;: {
                $gt: 1574954800000
            },
            &quot;bag.id&quot;: 3
        }
    },
    {
        $group: {
            _id: &quot;$platform&quot;,
            num: {
                $sum: &quot;$bag.num&quot;
            }
        }
    }
])</code></pre>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/4fbd252f/19826068-fb8e0cf1afe0d69c.png" alt></p>
<ul>
<li><a href="https://docs.mongodb.com/manual/reference/operator/aggregation/unwind/" target="_blank" rel="noopener">$unwind</a>: 将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。</li>
<li><a href="https://docs.mongodb.com/manual/reference/operator/aggregation/match/" target="_blank" rel="noopener">$match</a> :  用于过滤数据，只输出符合条件的文档。match使用MongoDB的标准查询操作。</li>
<li><a href="https://docs.mongodb.com/manual/reference/operator/aggregation/group" target="_blank" rel="noopener">$group</a>: 将集合中的文档分组，可用于统计结果。</li>
</ul>
]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>如何隐藏站长统计图标</title>
    <url>/p/64f6c1cd.html</url>
    <content><![CDATA[<p>在一些网站上需要做统计，但又不想显示出站长统计那丑丑的图标。</p>
<a id="more"></a>
<h3 id="一、包一层DIV隐藏"><a href="#一、包一层DIV隐藏" class="headerlink" title="一、包一层DIV隐藏"></a>一、包一层DIV隐藏</h3><p>用一个div快，把统计代码包进去就OK了。然后给div设置样式style=“display:none”</p>
<pre><code class="line-numbers language-js">&lt;div style=&quot;display:none&quot;&gt;[这里放统计代码]&lt;/div&gt;</code></pre>
<h3 id="二、在统计代码中加入style-39-display-none-39-属性"><a href="#二、在统计代码中加入style-39-display-none-39-属性" class="headerlink" title="二、在统计代码中加入style=&#39;display:none;&#39;属性"></a>二、在统计代码中加入<code>style=&#39;display:none;&#39;</code>属性</h3><p>在统计代码 javascript 中的 ducument.write(unescape(“%3Cspan 和 id=’cnzz_stat_icon’中间加上<code>style=&#39;display:none;&#39;</code>属性</p>
<pre><code class="line-numbers language-js">&lt;script type=&quot;text/javascript&quot;&gt;var cnzz_protocol = ((&quot;https:&quot; == document.location.protocol) ? &quot;https://&quot; : &quot;http://&quot;);document.write(unescape(&quot;%3Cspan `style=&#39;display:none;&#39;` id=&#39;cnzz_stat_icon_1278243234&#39;%3E%3C/span%3E%3Cscript src=&#39;&quot; + cnzz_protocol + &quot;s9.cnzz.com/z_stat.php%3Fid%3D1278243234&#39; type=&#39;text/javascript&#39;%3E%3C/script%3E&quot;));&lt;/script&gt;</code></pre>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>如何隐藏站长统计图标</title>
    <url>/p/64f6c1cd.html</url>
    <content><![CDATA[<p>在一些网站上需要做统计，但又不想显示出站长统计那丑丑的图标。</p>
<a id="more"></a>
<h3 id="一、包一层DIV隐藏"><a href="#一、包一层DIV隐藏" class="headerlink" title="一、包一层DIV隐藏"></a>一、包一层DIV隐藏</h3><p>用一个div快，把统计代码包进去就OK了。然后给div设置样式style=“display:none”</p>
<pre><code class="line-numbers language-js">&lt;div style=&quot;display:none&quot;&gt;[这里放统计代码]&lt;/div&gt;</code></pre>
<h3 id="二、在统计代码中加入style-39-display-none-39-属性"><a href="#二、在统计代码中加入style-39-display-none-39-属性" class="headerlink" title="二、在统计代码中加入style=&#39;display:none;&#39;属性"></a>二、在统计代码中加入<code>style=&#39;display:none;&#39;</code>属性</h3><p>在统计代码 javascript 中的 ducument.write(unescape(“%3Cspan 和 id=’cnzz_stat_icon’中间加上<code>style=&#39;display:none;&#39;</code>属性</p>
<pre><code class="line-numbers language-js">&lt;script type=&quot;text/javascript&quot;&gt;var cnzz_protocol = ((&quot;https:&quot; == document.location.protocol) ? &quot;https://&quot; : &quot;http://&quot;);document.write(unescape(&quot;%3Cspan `style=&#39;display:none;&#39;` id=&#39;cnzz_stat_icon_1278243234&#39;%3E%3C/span%3E%3Cscript src=&#39;&quot; + cnzz_protocol + &quot;s9.cnzz.com/z_stat.php%3Fid%3D1278243234&#39; type=&#39;text/javascript&#39;%3E%3C/script%3E&quot;));&lt;/script&gt;</code></pre>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10 此应用可能会影响电脑安全性或性能</title>
    <url>/p/ba8aacc2.html</url>
    <content><![CDATA[<p>在Win10上运行程序时，出现了一个“此应用可能会影响电脑安全性或性能”的提示</p>
<a id="more"></a>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/ba8aacc2/19826068-45bd37c8ddb59c6c.png" alt><br>出现这个问题，可能会有二种情况。</p>
<h3 id="一、软件还不匹配你的电脑系统"><a href="#一、软件还不匹配你的电脑系统" class="headerlink" title="一、软件还不匹配你的电脑系统"></a>一、软件还不匹配你的电脑系统</h3><p>可能软件还不支持win10或者不支持你的电脑位数64位电脑使用32位的软件等，可以尝试兼容模式运行<br>右键应用-&gt;属性-&gt;兼容性，兼容win7或xp模式运行试试<br><img src="//gitee.com/guoke3915/zw/raw/master/p/ba8aacc2/19826068-db72f8b1ff638fd6.png" alt></p>
<h3 id="二、电脑安全等级太高被禁止了"><a href="#二、电脑安全等级太高被禁止了" class="headerlink" title="二、电脑安全等级太高被禁止了"></a>二、电脑安全等级太高被禁止了</h3><p>按Win+R打开运行输入services.msc启动服务管理面板，找到Program Compatibility Assistant Service，然后禁用<br><img src="//gitee.com/guoke3915/zw/raw/master/p/ba8aacc2/19826068-bde57a8c927addc0.png" alt></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Win7安装msi提示受限</title>
    <url>/p/da941989.html</url>
    <content><![CDATA[<p>非Administrator账号在安装msi程序时，提示“本次操作由于这台计算机的限制而被取消。请与您的系统管理员联系。”</p>
<a id="more"></a>
<p><img src="//gitee.com/guoke3915/zw/raw/master/p/da941989/19826068-c431452302895bbf.jpg" alt><br>这是没有权限导致的，解决办法有二个：</p>
<h3 id="命令行中用管理员权限安装"><a href="#命令行中用管理员权限安装" class="headerlink" title="命令行中用管理员权限安装"></a>命令行中用管理员权限安装</h3><ul>
<li>在开启菜单-&gt;程序中输入cmd，右键选择以管理员权限运行命令行<br><img src="//gitee.com/guoke3915/zw/raw/master/p/da941989/19826068-ebd65c3b71b709e0.png" alt></li>
<li>用msiexec命令安装<pre><code class="line-numbers language-powershell">msiexec /i d:\setup.msi
# d:\setup.msi为msi安装文件路径，如果路径目录带空格，需要双引号。可以直接把文件拖到命令行中获取路径</code></pre>
</li>
<li>进入安装</li>
</ul>
<h3 id="用Administrator账号进行安装"><a href="#用Administrator账号进行安装" class="headerlink" title="用Administrator账号进行安装"></a>用Administrator账号进行安装</h3><ul>
<li>在开启菜单-&gt;程序中输入cmd，右键选择以管理员权限运行</li>
<li>启用Administrator账号<pre><code class="line-numbers language-powershell">net user administrator /active:yes</code></pre>
</li>
<li>设置Administrator账号密码<pre><code class="line-numbers language-powershell"># 设置密码为123455
net user administrator 123455
# 清空密码用
net user administrator &quot;&quot;</code></pre>
</li>
<li>切换账号，进入Administrator账号就可以安装了。</li>
</ul>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>VisualSVN设置提交时必须填写备注信息设置</title>
    <url>/p/190f4e5.html</url>
    <content><![CDATA[<p>像git默认是需要填写备注信息的，如果没有会不让提交，而svn默认没有这个设定。这样会导致很多时候查看提交日志的时候都不知道提交的是啥，所以，加一个强制的判断会比较好</p>
<a id="more"></a>
<ol>
<li><p>打开VisualSVN Server控制面版</p>
</li>
<li><p>右键选中需要修改的项目-&gt;”Properties…”<br><img src="//gitee.com/guoke3915/zw/raw/master/p/190f4e5/19826068-493992540a671292.png" alt></p>
</li>
<li><p>在属性页面中，选择”Hooks”分页，选中”Pre-commit hook”，点击下面”Edit”<br><img src="//gitee.com/guoke3915/zw/raw/master/p/190f4e5/19826068-fd3a7814b651e8af.png" alt></p>
</li>
<li><p>在弹出的编辑框中输入以下内容</p>
<pre><code class="line-numbers language-powershell">@echo off
setlocal
set SVN_BINDIR=C:\Program Files\VisualSVN Server\bin
set REPOS=%1
set TXN=%2
rem check that logmessage contains at least 10 characters
svnlook log &quot;%REPOS%&quot; -t &quot;%TXN%&quot; | findstr &quot;..........&quot; &gt; nul
endlocal
if %errorlevel% gtr 0 goto err
exit 0
:err
echo please input log message ,at least 10 characters(请认真填写注释信息，至少5个汉字). Commit aborted! 1&gt;&amp;2
exit 1</code></pre>
<p>其中:</p>
</li>
</ol>
<ul>
<li>SVN_BINDIR=C:\Program Files\VisualSVN Server\bin为VisualSVN的安装路径</li>
<li>findstr “……….” 字符串的长度</li>
<li>:err echo 后的不足时的提示内容</li>
</ul>
<ol start="5">
<li>提交测试<br><img src="//gitee.com/guoke3915/zw/raw/master/p/190f4e5/19826068-9b76ad50085a40b3.png" alt></li>
</ol>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac ssh连接Permissions 0644 for &#39;*.pem&#39; are too open</title>
    <url>/p/1ada6f6a.html</url>
    <content><![CDATA[<p>在用到ssh的时候，突然出现了报错</p>
<a id="more"></a>

<pre><code class="line-numbers language-bash">guoke:.ssh guoke $ ssh guoke
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Permissions 0644 for &#39;/Users/guoke/.ssh/guoke.pem&#39; are too open.
It is required that your private key files are NOT accessible by others.
This private key will be ignored.
Load key &quot;/Users/guoke/.ssh/guoke.pem&quot;: bad permissions
root@47.97.175.51: Permission denied (publickey,gssapi-keyex,gssapi-with-mic).</code></pre>
<p>从字面意思看，这是密钥文件权限问题。<br>进入密钥文件目录，用ls -l查看  </p>
<pre><code class="line-numbers language-bash">guoke:.ssh guoke $ ls -l
total 32
-rw-r--r--@ 1 guoke  staff   222 Nov 15 16:22 config
-rw-r--r--@ 1 guoke  staff  1700 Nov 11 20:19 guoke.pem</code></pre>
<p>可以看出密钥文件的权限是-rw-r–r–(0644)</p>
<ul>
<li>解决办法是修改密钥文件权限为0600就可以了  </li>
</ul>
<pre><code class="line-numbers language-bash">guoke:.ssh guoke$ chmod 600 guoke.pem 
guoke:.ssh guoke$ ls -l
total 32
-rw-r--r--@ 1 guoke  staff   222 Nov 15 16:22 config
-rw-------@ 1 guoke  staff  1700 Nov 11 20:19 guoke.pem
guoke:.ssh guoke $ ssh guoke
Last login: Sat Nov 16 11:24:53 2019 from 111.23.117.141

Welcome to Alibaba Cloud Elastic Compute Service !</code></pre>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Go中seelog日志包</title>
    <url>/p/6fe630a4.html</url>
    <content><![CDATA[<ol>
<li>介绍<br>在Go中，<a href="https://godoc.org/github.com/cihub/seelog" target="_blank" rel="noopener">seelog</a>是比较有名的日志处理包,功能也比较强大。<a id="more"></a></li>
<li>seelog包的引用</li>
</ol>
<pre><code class="line-numbers language-go">import &quot;github.com/cihub/seelog&quot;</code></pre>
<ol start="3">
<li>使用</li>
</ol>
<pre><code class="line-numbers language-go">package main

import (
    log &quot;github.com/cihub/seelog&quot;
)

func main() {
    defer log.Flush()
    log.Info(&quot;Hello from Seelog!&quot;)
}</code></pre>
<ol start="4">
<li>也可以用xml来配置日志<br><a href="https://github.com/cihub/seelog/wiki/Example-config" target="_blank" rel="noopener">官方配置</a>说明</li>
</ol>
<pre><code class="line-numbers language-xml">&lt;!-- type 设置记录器类型 https://github.com/cihub/seelog/wiki/Logger-types-reference
minlevel 设置日志最低级别; maxlevel 设置日志的最高级别
也可以通过 &lt;seelog levels=&quot;trace,info,critical&quot;&gt; 设置日记级别 --&gt;
&lt;seelog type=&quot;asynctimer&quot; asyncinterval=&quot;5000000&quot; minlevel=&quot;debug&quot; maxlevel=&quot;error&quot;&gt;
    &lt;exceptions&gt;
        &lt;!-- &lt;exception&gt; 是为特定的程序文件(filepattern)或函数(funcpattern)设定特殊的日志规则 --&gt;
        &lt;exception funcpattern=&quot;*main.test*Something*&quot; minlevel=&quot;info&quot;/&gt;
        &lt;exception filepattern=&quot;*main.go&quot; minlevel=&quot;error&quot;/&gt;
    &lt;/exceptions&gt;

    &lt;!-- &lt;outputs&gt; formatid 指定日志输出的格式(格式在&lt;formats&gt;标签中定义) --&gt;
    &lt;outputs formatid=&quot;main&quot;&gt;
        &lt;!-- &lt;console&gt; 标签表示输出到终端 --&gt;
        &lt;console/&gt;

        &lt;!-- &lt;splitter&gt; 用于细分&lt;outputs&gt;日志格式，内部支持:file(文件), rollingfile(滚动文件，自动清除过期),
        buffered(日志写到内存再写到文件), smtp(发送日志到邮件), con(网络转发) --&gt;
        &lt;splitter formatid=&quot;format1&quot;&gt;
            &lt;!-- log.log, log2.log将按&lt;formats&gt;标签中的id=&quot;format1&quot;格式写入 --&gt;
            &lt;file path=&quot;log.log&quot;/&gt;
            &lt;file path=&quot;log2.log&quot;/&gt;
        &lt;/splitter&gt;
        &lt;splitter formatid=&quot;format2&quot;&gt;
            &lt;file path=&quot;log3.log&quot;/&gt;
            &lt;file path=&quot;log4.log&quot;/&gt;
        &lt;/splitter&gt;

        &lt;!-- &lt;rollingfile&gt;滚动文件(定期清除过期日志)
        formatid: 指定日志格式; type=&quot;size&quot; 按大小; maxsize: 单日志文件最大大小; maxrools: 最大文件数 --&gt;
        &lt;rollingfile formatid=&quot;someformat&quot; type=&quot;size&quot; filename=&quot;./log/roll.log&quot; maxsize=&quot;100&quot; maxrolls=&quot;5&quot; /&gt;

        &lt;!-- &lt;buffered&gt; 将日志先存在内存中，定期写入文件，适合日志并发量较大或 IO 比较紧张的场合
        size: 缓存大小; flushperiod: 缓存间隔(毫秒) --&gt;
        &lt;buffered formatid=&quot;testlevels&quot; size=&quot;10000&quot; flushperiod=&quot;1000&quot;&gt;
            &lt;file path=&quot;./log/bufFileFlush.log&quot;/&gt;
        &lt;/buffered&gt;

        &lt;!-- &lt;filter&gt;用于单独处理某级别日志
        过滤日志，把级别是error的通过邮件smtp方式发送出去(一般会发给相应的运维人员) --&gt;
        &lt;filter levels=&quot;error&quot;&gt;
            &lt;file path=&quot;./log/error.log&quot;/&gt;
            &lt;smtp senderaddress=&quot;noreply-notification-service@none.org&quot; 
                  sendername=&quot;Automatic notification service&quot; 
                  hostname=&quot;mail.none.org&quot; 
                  hostport=&quot;587&quot; 
                  username=&quot;nns&quot; 
                  password=&quot;123&quot;&gt;
                &lt;recipient address=&quot;john-smith@none.com&quot;/&gt;
                &lt;recipient address=&quot;hans-meier@none.com&quot;/&gt;
            &lt;/smtp&gt;
            &lt;!-- 按tcp4网络协议发送日志 --&gt;
            &lt;conn net=&quot;tcp4&quot; addr=&quot;server.address:5514&quot; tls=&quot;true&quot; insecureskipverify=&quot;true&quot; /&gt;
        &lt;/filter&gt;

    &lt;/outputs&gt;

    &lt;!-- &lt;formats&gt; 定制日志的输出格式
    https://github.com/cihub/seelog/wiki/Format-reference --&gt;
    &lt;formats&gt;
        &lt;format id=&quot;main&quot; format=&quot;%Date(2006 Jan 02/3:04:05.000000000 PM MST) [%Level] %Msg%n&quot;/&gt;
        &lt;format id=&quot;someformat&quot; format=&quot;%Ns [%Level] %Msg%n&quot;/&gt;
        &lt;format id=&quot;testlevels&quot; format=&quot;%Level %Lev %LEVEL %LEV %l %Msg%n&quot;/&gt;
        &lt;format id=&quot;usetags&quot; format=&quot;&amp;lt;msg&amp;gt;%Msg&amp;lt;/time&amp;gt;&quot;/&gt;
        &lt;format id=&quot;format1&quot; format=&quot;%Date/%Time [%LEV] %Msg%n&quot;/&gt;
        &lt;format id=&quot;format2&quot; format=&quot;%File %FullPath %RelFile %Msg%n&quot;/&gt;
    &lt;/formats&gt;
&lt;/seelog&gt;</code></pre>
<ol start="5">
<li>使用配置</li>
</ol>
<pre><code class="line-numbers language-go">import (
    log &quot;github.com/cihub/seelog&quot;
)

func SetupLogger() {
    logger, err := log.LoggerFromConfigAsFile(&quot;seelog.xml&quot;)
    if err != nil {
        return
    }

    log.ReplaceLogger(logger)
}</code></pre>
<ol start="6">
<li>封装的一个seelog包</li>
</ol>
<pre><code class="line-numbers language-go">/**
* File:log.go
* Copyright: Copyright (c) 2019
* Created on 2019-11-11
* Author:zengwu
* Version 1.0
* Title: 日志类
 */
package log

import (
    &quot;fmt&quot;
    &quot;github.com/cihub/seelog&quot;
    &quot;os&quot;
    &quot;path/filepath&quot;
    &quot;runtime&quot;
    &quot;strings&quot;
)

// 输入日志的标签
var showTag map[string]bool
var logFolder string

// 初始化日志
// tags 显示的tag
func Init(tags []string) {
    // 获取程序运行文件路径
    dir, file := filepath.Split(os.Args[0])
    logFolder = dir + &quot;/logs/&quot;

    // 配置日志文件，运行文件所在目录/logs/文件名
    fileCfg := strings.Replace(fileConfig, &quot;./logs/log&quot;, logFolder+file, -1)
    logger, _ := seelog.LoggerFromConfigAsString(fileCfg)
    err := seelog.ReplaceLogger(logger)
    if err != nil {
        fmt.Println(&quot;log init error.&quot;, err)
    }

    // 根据配置显示tag
    showTag = make(map[string]bool)
    for _, tag := range tags {
        showTag[tag] = true
    }
}

// 重新设置显示标志
func ReplaceShowTag(tags []string) {
    showTag = make(map[string]bool)
    for _, tag := range tags {
        showTag[tag] = true
    }
}

// 输出日志
func Trace(tag string, v ...interface{}) {
    if showTag != nil {
        if _, ok := showTag[tag]; !ok {
            return
        }
    }

    seelog.Trace(&quot;- [Tag:&quot;+tag+&quot;] &quot;, v)
}

// 输出错误日志
func Error(v ...interface{}) {
    pc, filename, line, _ := runtime.Caller(1)
    funcName := runtime.FuncForPC(pc).Name()
    caller := fmt.Sprintf(&quot;- [%s:%d - %s] &quot;, filename, line, funcName)
    _ = seelog.Error(caller, v)
}

var fileConfig = `
&lt;!-- type 设置记录器类型 https://github.com/cihub/seelog/wiki/Logger-types-referenceminlevel 设置日志最低级别; 
maxlevel 设置日志的最高级别也可以通过 &lt;seelog levels=&quot;trace,info,critical&quot;&gt; 设置日记级别 --&gt;
&lt;seelog type=&quot;asynctimer&quot; asyncinterval=&quot;5000000&quot; minlevel=&quot;trace&quot; maxlevel=&quot;error&quot;&gt;
    &lt;!-- &lt;outputs&gt; formatid 指定日志输出的格式(格式在&lt;formats&gt;标签中定义) --&gt;
    &lt;outputs formatid=&quot;trace&quot;&gt;
        &lt;filter levels=&quot;trace,info,debug&quot;&gt;
            &lt;!-- &lt;console&gt; 标签表示输出到终端 --&gt;
            &lt;console formatid=&quot;colored&quot; /&gt;
            &lt;!-- &lt;rollingfile&gt;滚动文件(定期清除过期日志) formatid: 指定日志格式; type=&quot;size/date&quot; 按大小/按日期; maxsize: 单日志文件最大大小; maxrools: 最大文件数 --&gt;
            &lt;rollingfile formatid=&quot;trace&quot; type=&quot;date&quot; filename=&quot;./logs/log.info&quot; datepattern=&quot;2006-01-02&quot; fullname=&quot;true&quot; maxrolls=&quot;5&quot;/&gt;
        &lt;/filter&gt;
        &lt;filter levels=&quot;error,warn&quot;&gt;
            &lt;console formatid=&quot;coloredErr&quot; /&gt;
            &lt;rollingfile formatid=&quot;trace&quot; type=&quot;date&quot; filename=&quot;./logs/log.err&quot; datepattern=&quot;2006-01-02&quot; fullname=&quot;true&quot; maxrolls=&quot;30&quot;/&gt;
        &lt;/filter&gt;
    &lt;/outputs&gt;

    &lt;formats&gt;
         &lt;!-- &lt;formats&gt; 定制日志的输出格式https://github.com/cihub/seelog/wiki/Format-reference --&gt;
        &lt;format id=&quot;trace&quot; format=&quot;%Date(2006-01-02 15:04:05.000) [%LEVEL] %Msg%n&quot; /&gt;
        &lt;format id=&quot;err&quot; format=&quot;%Date(2006-01-02 15:04:05.000) [%LEVEL] [%File:%Line-%Func] %Msg%n&quot; /&gt;
        &lt;format id=&quot;colored&quot; format=&quot;%Date(2006-01-02 15:04:05.000) %EscM(42)[%LEVEL]%EscM(49) %Msg%n%EscM(0)&quot; /&gt;
        &lt;format id=&quot;coloredErr&quot; format=&quot;%Date(2006-01-02 15:04:05.000) %EscM(41)[%LEVEL]%EscM(49) [%File:%Line-%Func] %Msg%n%EscM(0)&quot;/&gt;
    &lt;/formats&gt;
&lt;/seelog&gt;
`
</code></pre>
<p>使用</p>
<pre><code class="line-numbers language-go">package main

import (
    &quot;github.com/zngw/log&quot;
)

func main() {
    // 初始化日志
    log.Init([]string{&quot;sys&quot;,&quot;net&quot;})

    // 输出日志: 2019-11-15 01:06:01.215 [TRACE] - [Tag:sys] [Hello World]
    log.Trace(&quot;sys&quot;,&quot;Hello World&quot;)

    // 输出日志: 2019-11-15 01:06:01.215 [TRACE] - [Tag:net] [Hello Golang]
    log.Trace(&quot;net&quot;,&quot;Hello Golang&quot;)

    // 这条日志不在显示的tag内，故不输出
    log.Trace(&quot;test&quot;,&quot;Hello zngw&quot;)

    // 输出错误日志: 2019-11-15 01:06:01.215 [ERROR] [log.go:71-github.com/zngw/log.Error] - [F:/work/src/github.com/main.go:15 - main.main] [Error]
    log.Error(&quot;Error&quot;)
}</code></pre>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 计算两个日期之间相差几日、几月</title>
    <url>/p/290a12.html</url>
    <content><![CDATA[<ol>
<li><p>两个日期相差多少天<br>time包有个函数Parse可以将时间字符串解析成Time对象，而Time对象有个Sub方法可以计算与某个时间的差，返回值是Duration对象，而Duration有一个Hours方法，除以24就是天数了</p>
<pre><code class="line-numbers language-go">// 计算日期相差多少天
// 返回值day&gt;0, t1晚于t2; day&lt;0, t1早于t2
func SubDays(t1,t2 time.Time)(day int)  {
 swap := false
 if t1.Unix() &lt; t2.Unix(){
     t_:= t1
     t1 = t2
     t2 = t_
     swap = true
 }

 day = int(t1.Sub(t2).Hours()/24)

 // 计算在被24整除外的时间是否存在跨自然日
 if int(t1.Sub(t2).Milliseconds())%86400000 &gt; int(86400000-t2.Unix()%86400000) {
     day += 1
 }

 if swap {
     day = -day
 }

 return
}</code></pre>
</li>
<li><p>计算日期相差多少月<br>先计算二个日期相差的年，然后计算月，计算月的时候需要补差。计算日的时候也需要这样补差</p>
<pre><code class="line-numbers language-go">// 计算日期相差多少月
func SubMonth(t1, t2 time.Time) (month int) {
 y1 := t1.Year()
 y2 := t2.Year()
 m1 := int(t1.Month())
 m2 := int(t2.Month())
 d1 := t1.Day()
 d2 := t2.Day()

 yearInterval := y1 - y2
 // 如果 d1的 月-日 小于 d2的 月-日 那么 yearInterval-- 这样就得到了相差的年数
 if m1 &lt; m2 || m1 == m2 &amp;&amp; d1 &lt; d2 {
     yearInterval--
 }
 // 获取月数差值
 monthInterval := (m1 + 12) - m2
 if d1 &lt; d2 {
     monthInterval--
 }
 monthInterval %= 12
 month = yearInterval*12 + monthInterval
 return
}</code></pre>
</li>
</ol>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go中文件路径解析</title>
    <url>/p/2b58ee93.html</url>
    <content><![CDATA[<ol>
<li>返回所给路径的绝对路径<pre><code class="line-numbers language-go">// 输出绝对路径 F:\my\bin\log.txt
path, _ := filepath.Abs(&quot;./log.txt&quot;)
fmt.Println(path)</code></pre>
<a id="more"></a></li>
<li>返回路径最后一个元素<pre><code class="line-numbers language-go">// 输出 log.txt
fmt.Println(filepath.Base(&quot;./log.txt&quot;))</code></pre>
</li>
<li>返回路径中的扩展名<pre><code class="line-numbers language-go">// 输出 .jpg
fmt.Println(filepath.Ext(&quot;./a/b/c/d.jpg&quot;))</code></pre>
</li>
<li>分割目录和文件<pre><code class="line-numbers language-go">// 输入出 C:/a/b/c/   d.jpg
dir, file := filepath.Split(&quot;C:/a/b/c/d.jpg&quot;)
fmt.Println(dir, file)</code></pre>
</li>
</ol>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go中字符串替换</title>
    <url>/p/b71639ab.html</url>
    <content><![CDATA[<p>在go中，可以用strings包里的Replace方法来做字符串替换</p>
<ul>
<li>函数申明<a id="more"></a>

</li>
</ul>
<pre><code class="line-numbers language-go">package strings

// Replace returns a copy of the string s with the first n
// non-overlapping instances of old replaced by new.
// If old is empty, it matches at the beginning of the string
// and after each UTF-8 sequence, yielding up to k+1 replacements
// for a k-rune string.
// If n &lt; 0, there is no limit on the number of replacements.
func Replace(s, old, new string, n int) string{
    ...
}</code></pre>
<p>返回将s中前n个不重叠old子串都替换为new的新字符串，<br>如果old为空，则向前插入n个new<br>如果n&lt;0会替换所有old子串。</p>
<pre><code class="line-numbers language-go">package log

import (
    &quot;fmt&quot;
    &quot;strings&quot;
)

func main(){
        s := &quot;123abcd123abcd123abcd123abcd123abcd&quot;
    old := &quot;123&quot;
    new := &quot;3915&quot;
    // n &lt; 0 ,用 new 替换所有匹配上的 old；n=-1:  3915abcd3915abcd3915abcd3915abcd3915abcd
    fmt.Println(&quot;n=-1: &quot;, strings.Replace(s, old, new, -1))

    // n = 0 ,不替换任何匹配的 old; n=0: 123abcd123abcd123abcd123abcd123abcd
    fmt.Println(&quot;n=0: &quot;, strings.Replace(s, old, new, 0))

    // n = 1 ,用 new 替换第一个匹配的 old；n=-1:  3915abcd123abcd123abcd123abcd123abcd
    fmt.Println(&quot;n=1: &quot;, strings.Replace(s, old, new, 1))

    // n = 2 ,用 new 替换第二个匹配的 old；n=-1:  3915abcd3915abcd123abcd123abcd123abcd
    fmt.Println(&quot;n=0: &quot;, strings.Replace(s, old, new, 2))

    // n = 2,old=&quot;&quot; 在最前面插入二个new；n=2:  39151391523abcd123abcd123abcd123abcd123abcd
    fmt.Println(&quot;n=2: &quot;, strings.Replace(s, &quot;&quot;, new, 2))
}</code></pre>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac中使用密钥连接SSH</title>
    <url>/p/de380c7a.html</url>
    <content><![CDATA[<ol>
<li>打开终端</li>
<li>输入”ls -a” 查看目录，看是否包含 “.ssh”目录，如果没有，创建<a id="more"></a>

</li>
</ol>
<pre><code class="line-numbers language-bash">root:~ root$ ls -a
.            .gitignore_global    Desktop
..            .hgignore_global    Documents
.CFUserTextEncoding    .local            Downloads
.CocosCreator        .mailcap        Library
.DS_Store        .mime.types        Movies
.Trash            .oss-browser        Music
.bash_history        .ssh            Pictures
.bash_profile        .subversion        Public
.bash_sessions        .vim            Applications</code></pre>
<ol start="3">
<li>进入”.ssh”目录</li>
</ol>
<pre><code class="line-numbers language-bash">cd .ssh</code></pre>
<ol start="4">
<li>将密钥文件复制到此目录中</li>
</ol>
<pre><code class="line-numbers language-bash">root:.ssh root$ cp /Users/wenle/Desktop/guoke.pem ./</code></pre>
<ol start="5">
<li>编辑”config”文件,并输入以下内容</li>
</ol>
<pre><code class="line-numbers language-bash">vim config

Host guoke
HostName 192.168.1.55
User root
IdentityFile ~/.ssh/guoke.pem</code></pre>
<ul>
<li>Host 自定义名</li>
<li>HostName 连接的IP</li>
<li>User 登陆用户名</li>
<li>IdentityFile 密钥文件</li>
</ul>
<ol start="6">
<li>连接<br>直接ssh + 配置中Host中自定义名</li>
</ol>
<pre><code class="line-numbers language-bash">root:.ssh root$  ssh guoke</code></pre>
<ol start="7">
<li>如果配置多个服务器中，直接服务一次这个配置就行了  </li>
</ol>
<pre><code class="line-numbers language-ini">Host guoke
HostName 192.168.1.55
User root
IdentityFile ~/.ssh/guoke.pem

Host guoke1
HostName 192.168.1.56
User root
IdentityFile ~/.ssh/guoke.pem</code></pre>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Goland 保存时自动格式化代码 fmt</title>
    <url>/p/8c26f3b2.html</url>
    <content><![CDATA[<p>默认情况下，goland idea保存的时候会自动格式化代码的，但是，有时会出现不自动化的情况。下面介绍一下手动配置：</p>
<a id="more"></a>
<ol>
<li>File-&gt;Settings(Ctrl+Alt+S)打开设置页面<br><img src="//gitee.com/guoke3915/zw/raw/master/p/8c26f3b2/19826068-ff821a0647893ff9.png" alt></li>
<li>在左侧找到Tools-&gt;File Watchers<br><img src="//gitee.com/guoke3915/zw/raw/master/p/8c26f3b2/19826068-e45cd5d7023870af.png" alt></li>
<li>在左侧添加go fmt<br><img src="//gitee.com/guoke3915/zw/raw/master/p/8c26f3b2/19826068-f3b3718ecb6a9c68.png" alt></li>
<li>使用默认的配置添加就可以了<br><img src="//gitee.com/guoke3915/zw/raw/master/p/8c26f3b2/19826068-017b1d3dc8259c79.png" alt></li>
</ol>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go中使用Google Authenticator</title>
    <url>/p/24fa6281.html</url>
    <content><![CDATA[<p>现在为了安全Google二次验证使用越来越平凡了，所以我们自己做的一些产品中，也会用到Google Authenticator。</p>
<a id="more"></a>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Google Authenticator采用的算法是TOTP（Time-Based One-Time Password基于时间的一次性密码），其核心内容包括以下三点：</p>
<ul>
<li>一个共享密钥（一个比特序列）；</li>
<li>当前时间输入；</li>
<li>一个签署函数。</li>
</ul>
<ol>
<li>共享密钥<br>由服务器生成一个16位纯字母的字符串，用于在手机端上建立账户，可以手动输入，也可以生成二位维在手机上扫描<br>令牌的二维码的内容是一个URL：</li>
</ol>
<pre><code>otpauth://totp/账号名?secret=xxxxxxxxxxxxxxxx&amp;issuer=组织名</code></pre><ol start="2">
<li>时间<br>服务器和手机端使用各自的时间，只要时间都是准确的，不无需与服务器做任何通信。每30秒切换一次，所以时间用的当前时间戳/30。是但为了避免时间上的误差，服务器验证的时候可以取当前一次和后面一次，一共三次判断。</li>
<li>签署函数<br>签署所使用的方法是HMAC-SHA1（哈希运算消息认证码），以一个密钥和一个消息为输入，生成一个消息摘要作为输出。用共享密钥做为secret，时间戳/30做为输入值来生成20字节的SHA1值，</li>
<li>生成6位数密码<br>先把SHA1的最后4个比特数用来做索引，然后用另外的4个字节进行索引。然后将它转化为标准的32bit无符号整数，最后再进行7位数(1百万)取整，就可得到6位数字了<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2></li>
<li>手机客户端直接下载Google Authenticator</li>
<li>服务器验证代码如下：</li>
</ol>
<pre><code class="line-numbers language-go">import (
    &quot;crypto/hmac&quot;
    &quot;crypto/sha1&quot;
    &quot;encoding/base32&quot;
    &quot;strings&quot;
    &quot;time&quot;
    &quot;util/log&quot;
)

func toBytes(value int64) []byte {
    var result []byte
    mask := int64(0xFF)
    shifts := [8]uint16{56, 48, 40, 32, 24, 16, 8, 0}
    for _, shift := range shifts {
        result = append(result, byte((value&gt;&gt;shift)&amp;mask))
    }
    return result
}

func toUint32(bytes []byte) uint32 {
    return (uint32(bytes[0]) &lt;&lt; 24) + (uint32(bytes[1]) &lt;&lt; 16) +
        (uint32(bytes[2]) &lt;&lt; 8) + uint32(bytes[3])
}

func oneTimePassword(key []byte, value []byte) uint32 {
    // sign the value using HMAC-SHA1
    hmacSha1 := hmac.New(sha1.New, key)
    hmacSha1.Write(value)
    hash := hmacSha1.Sum(nil)

    // We&#39;re going to use a subset of the generated hash.
    // Using the last nibble (half-byte) to choose the index to start from.
    // This number is always appropriate as it&#39;s maximum decimal 15, the hash will
    // have the maximum index 19 (20 bytes of SHA1) and we need 4 bytes.
    offset := hash[len(hash)-1] &amp; 0x0F

    // get a 32-bit (4-byte) chunk from the hash starting at offset
    hashParts := hash[offset : offset+4]

    // ignore the most significant bit as per RFC 4226
    hashParts[0] = hashParts[0] &amp; 0x7F

    number := toUint32(hashParts)

    // size to 6 digits
    // one million is the first number with 7 digits so the remainder
    // of the division will always return &lt; 7 digits
    pwd := number % 1000000

    return pwd
}

// getCode 获取验证码
func getCode(secretKey string, epochSeconds int64) (code int32) {
    secretKeyUpper := strings.ToUpper(secretKey)
    key, err := base32.StdEncoding.DecodeString(secretKeyUpper)
    if err != nil {
        log.Error(err)
        return
    }

    // generate a one-time password using the time at 30-second intervals
    code = int32(oneTimePassword(key, toBytes(epochSeconds/30)))
    return
}

// 验证,传入验证key和code代码，返回验证是否成功
func CheckCode(secretKey string, code int32) bool {
        // 当前google值
        epochSeconds := time.Now().Unix()
    if getCode(secretKey, epochSeconds ) == code {
        return true
    }

    // 前30秒google值
    if getCode(secretKey, epochSeconds -30) == code {
        return true
    }

    // 后30秒google值
    if getCode(secretKey, epochSeconds +30) == code {
        return true
    }

    return false
}</code></pre>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go中string和int类型相互转换</title>
    <url>/p/bbd51f60.html</url>
    <content><![CDATA[<ul>
<li>string转成int： <pre><code class="line-numbers language-go">int, err := strconv.Atoi(string)</code></pre>
<a id="more"></a></li>
<li>string转成int64： <pre><code class="line-numbers language-go">int64, err := strconv.ParseInt(string, 10, 64)</code></pre>
</li>
<li>string转成uint64： <pre><code class="line-numbers language-go">uint64, err := strconv.ParseUint(string, 10, 64)</code></pre>
</li>
<li>int转成string： <pre><code class="line-numbers language-go">string := strconv.Itoa(int)</code></pre>
</li>
<li>int64转成string： <pre><code class="line-numbers language-go">string := strconv.FormatInt(int64,10)</code></pre>
</li>
<li>uint64转成string： <pre><code class="line-numbers language-go">string := strconv.FormatUint(uint64,10)</code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Go深度拷贝slice、map</title>
    <url>/p/67500598.html</url>
    <content><![CDATA[<p>在Go中没有像Java、C#那种封装好的slice、map深度拷贝函数，下面封装一个</p>
<a id="more"></a>
<pre><code class="line-numbers language-go">func DeepCopy(value interface{}) interface{} {
    if valueMap, ok := value.(map[string]interface{}); ok {
        newMap := make(map[string]interface{})
        for k, v := range valueMap {
            newMap[k] = DeepCopy(v)
        }

        return newMap
    } else if valueSlice, ok := value.([]interface{}); ok {
        newSlice := make([]interface{}, len(valueSlice))
        for k, v := range valueSlice {
            newSlice[k] = DeepCopy(v)
        }

        return newSlice
    }

    return value
}</code></pre>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS-设置自定义的系统默认字体</title>
    <url>/p/31fe234b.html</url>
    <content><![CDATA[<ol>
<li>先设置自定义的字体<br>将字体文件拖到工程目录中，并增添加到Bundle中。这里以<code>阿里巴巴普惠体</code>为例。<a id="more"></a>
<img src="//gitee.com/guoke3915/zw/raw/master/p/31fe234b/19826068-0a4c12ab120f98b0.png" alt></li>
<li>在info.plist中增加字体<br><img src="//gitee.com/guoke3915/zw/raw/master/p/31fe234b/19826068-b23d9458ddd23f54.png" alt></li>
<li>添加字体类<br>右键创建新文件-&gt;选择OC文件</li>
</ol>
<ul>
<li>File: 自己定义一个文件名</li>
<li>File Type:Category</li>
<li>Class:UIFont<br><img src="//gitee.com/guoke3915/zw/raw/master/p/31fe234b/19826068-76f1725f4cf39756.png" alt></li>
</ul>
<ol start="4">
<li>在.h文件中添加</li>
</ol>
<p>+(UIFont *)systemFontOfSize:(CGFloat)fontSize;  </p>
<pre><code class="line-numbers language-mm">//
//  UIFont+Custom.h
//
//  Created by 55 on 2019/11/7.
//

#import &lt;UIKit/UIKit.h&gt;
NS_ASSUME_NONNULL_BEGIN
@interface UIFont (UIFontCustom)

+(UIFont *)systemFontOfSize:(CGFloat)fontSize;
@end

NS_ASSUME_NONNULL_END</code></pre>
<ol start="5">
<li>在.m中实现systemFontOfSize方法  </li>
</ol>
<pre><code class="line-numbers language-mm">//
//  UIFont+Custom.m
//
//  Created by 55 on 2019/11/7.
//

#import &quot;UIFont+Custom.h&quot;

@implementation UIFont (UIFontCustom)

+(UIFont *)systemFontOfSize:(CGFloat)fontSize
{
    return [UIFont fontWithName:@&quot;AlibabaPuHuiTi-Medium&quot; size:fontSize];
}

@end</code></pre>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>使用sfntly提取ttf字体</title>
    <url>/p/40a78198.html</url>
    <content><![CDATA[<ul>
<li><p>在游戏中经常需要用到各种字体，但是一些字体都是比较大的。我们只需要提取自己需要的一些字符就行了。</p>
<a id="more"></a></li>
<li><p>sfntly是一款谷歌开源的字体提取工具<br>下载地址：<a href="https://github.com/googlefonts/sfntly" target="_blank" rel="noopener">https://github.com/googlefonts/sfntly</a></p>
</li>
<li><p>编译<br>用Intellij IDEA打开java工程目录，设置Artifacts为SfntTool，直接编译<br><img src="//gitee.com/guoke3915/zw/raw/master/p/40a78198/19826068-f1b78c208df63802.png" alt></p>
</li>
<li><p>找到Artifacts输出目录中的sfntly.jar</p>
</li>
<li><p>查看说明<br><code>java -jar sfntly.jar -h</code></p>
<pre><code class="line-numbers language-powershell">F:\sfntly-master\java\classes\artifacts\sfntly_jar&gt;java -jar sfntly.jar -h
Subset [-?|-h|-help] [-b] [-s string] fontfile outfile
Prototype font subsetter
      -?,-help        print this help information
      -s,-string       String to subset
      -b,-bench        Benchmark (run 10000 iterations)
      -h,-hints        Strip hints
      -w,-woff         Output WOFF format
      -e,-eot  Output EOT format
      -x,-mtx  Enable Microtype Express compression for EOT format
F:\sfntly-master\java\classes\artifacts\sfntly_jar&gt;</code></pre>
</li>
<li><p>提取字体</p>
</li>
</ul>
<p><code>java -jar sfnttool.jar -s &#39;需要提取的字体&#39; 源字体库 导出的最终字体库</code></p>
<pre><code class="line-numbers language-powershell">F:\sfntly-master\java\classes\artifacts\sfntly_jar&gt;java -jar sfntly.jar  -s &#39;这是一段测试文字&#39; Alibaba-PuHuiTi-Medium.ttf Ali.ttf</code></pre>
<ul>
<li>附常用的6500个常用字</li>
</ul>
<pre><code class="line-numbers language-none">的一国在人了有中是年和大业不为发会工经上地市要个产这出行作生家以成到日民来我部对进多全建他公开们场展时理新方主企资实学报制政济用同于法高长现本月定化加动合品重关机分力自外者区能设后就等体下万元社过前面农也得与说之员而务利电文事可种总改三各好金第司其从平代当天水市提商十管内小技位目起海所立已通入量子问度北保心还科委都术使明着次将增基名向门应里美由规今题记点计去强两些表系办教正条最达特革收二期并程厂如道际及西口京华任调性导组东路活广意比投决交统党南安此领结营项情解议义山先车然价放世间因共院步物界集把持无但城相书村求治取原处府研质信四运县军件育局干队团又造形级标联专少费效据手施权江近深更认果格几看没职服台式益想数单样只被亿老受优常销志战流很接乡头给至难观指创证织论别五协变风批见究支那查张精林每转划准做需传争税构具百或才积势举必型易视快李参回引镇首推思完消值该走装众责备州供包副极整确知贸己环话反身选亚么带采王策真女谈严斯况色打德告仅它气料神率识劳境源青护列兴许户马港则节款拉直案股光较河花根布线土克再群医清速律她族历非感占续师何影功负验望财类货约艺售连纪按讯史示象养获石食抓富模始住赛客越闻央席坚份士热限米银息校均房周游千失八检足配存九命尔即防钱评复考依断范础油照段落访未额双让切须儿便空往你层低奖注黄英承远版维算破铁乐边初满病响药助致善突爱容香称购届余素请白宣健牌促培竞巴稳继紧字困刘旅声超随例担友号显却监材且春居适除红半买充陈火搞图阳六察试太什执片古七球修尽控讲排粮武预亲挥卖审措荣洲卫希店良属险曾围域令站苏龙念罗吨器汇康减习演普田班待星飞写矿轻扩言章汽靠毛终仍景置底福止离泽波兰核降训逐票菜座献钢眼损宁像苦印融独湖早予夫编换欧努著顾征升态套介送某斗状画留航派室临兵补宝略黑综云差纳密贫剧犯阿击遇岁阶烈督吃丰馆招害官树听庭另沙私针胜贷网愿托缺园假酒音巨既判输讨测读洋括筑欢刚庆久陆找楼激晚绝压故互签汉草木亩短绍迎吸警藏疗贵纷授登探索湾宏录申诉秀序顺死卡歌午孩桥喜川邓扬津温船库订练候退违否彩棉帮拿罪币角召灾妇杨奋绩虽煤免笔够永圳停奥鲜朝吴岛觉移尼急博贯拥束左细舞幅语俄奇般简拍脑债固威券追筹刻映繁伟甚饭右彻烟沿街血冲洪植誉刊玉厅救潮迅伍怎付倍顿述播励斤乎纸振旧障鼓艰呼吉男绿尚夏亏季松哈祖典韩遍夜轮板抗摄杂皮贡借幕罚伤岸扶乱曲脱践危澳童散味叶累谢孙邮雄兼微呢谁惠偿署择染答块徐鱼赞课盛延瑞怀堂驻零辆齐胡途封似润守毕坦母雨败朱污趋械纺租灵拓残含握跨衣储瓦蒙鉴析竟骨档秘禁赵宾异伊智钟键辉跃冷倒庄毒仪哪涉泛宗鹏归岗雷礼尤休泰疾肥珠叫牛宜抵挂寻父攻佳塞架符裁虑肉启丽露鲁秋昌估射册若宽厚盾硬末轨饮勤茶诗郑冠涨篇泥唱纯坡熟浙晓抢丝锦载笑勇杰患乌坐雪戏背塔翻沈遗聚渠哥享迹森辽衡掌牧附操赶览野盟殊仁错萨夺梅误词董潜卷矛腐亮冒盖旗井凡震峰坏倾距壮惊盘梁摆径忠冰峡丹避珍乘刑扎透迫箱莫跑穿祝乏厦渐软询折浪朋敢诚弱疑邀沉端床络疆缩脚甘贴勒荒唐静缓侵句尊塑肃怕耕痛援劣伙挑洗暴冬龄乔餐肯廉跟阵伐悉忘闭奔恢宋泉杯渡吗奉婚赴恩盐掉洁亡洛聘蔬混摩抽鸡剂胆麦谋雅废贺羊阔唯捐返隆穷辛猪帐饰郭颁灯绕诸伴顶祥谓恶番敏旦劲缴麻屋跳码鞋扣迈忙趣盈棋勃敬辑摊旺纠炼梦偏渔牙侨黎赔裕宫谷概稿柱弹殖秩凭拨幸洞伪沟姓遭涌陶迁诺拔畅忧胞丁蓄贝舍腾杀煌圆伦横薄畜毫豪弟呈佛邦您墨徽惯循蓝烧触陕拖伯盲宪净卢炭籍秦粉妻爆欣释玩俊欠蛋猛迪苗暂貌遵锡楚桂昆杜皇醒燃凤截铺液撤胶慢杭虚辞曼毅咨俗糖忽芳姐耗妈谊浦频阻允宅窗默胀弃倡灭甲症埃滨赏莱拒淡坛陵绘虎竹赢锋篮迷纽轿贩递娘圈挖炉替幼乃郊颇戴滑徒崇涛焦凝墙吧炎刀玻寿履圣昨酸朗媒桑铜仲亦诞揭纵漫愈辟赠旱奶泳枪骗虫池镜浓拆艾扫娱钻碍寒迟邻曹盗穆豆赚晨浩彭耳瓜扭脸燕摇寄仿炮晋泪欲饱壁锁刷柬诊磨捕寨滚膨孔添帝辖炸旨吁址驶抱嘉拜扰袋佩阴辈锅赖剩押怪浮枚栏毁柳恐敦孟旁仓岩伸岭耐懂捷璃溪暖纤汗疫巧旋侧冶陪鸣瓶纲挤旬舆喝陷缘稻饲滩隔慰朴隐灌拟偷闲赫恰慧蒋闹邹牵柴刺滞彰俱勘填琛尝贾搬淮奏荷滋覆役秒踏巩摸荡辅惜柜肖颗搏氏姑弄姜君舒兑宇割哲摘钦逃漠忆敌宿啊凌耀闯阅贪赤汪悲抑瓷冯厉粗菲琴堡斌掘稀衰驾雕牢氛驱妥悄郎巡臣羽灰癌颖姆漏袭贤鸟暗茂孤惩榜袁桌卓傅剑堆兆狠轰拳妹绒裂潘兄洽叹涵贿侯岚熊绪阁尾碑尖腿涂栽坝犹铸肩闪诱辩芬睡奠伏妙乙绸廷夕恒梯赁霞攀枝译描湘磁吕硕爸肝峻葡衷搭唤薪挺逝狗蔡宴蓬撞铝牲舰胁崛桃斜丧烂屏砖墓详逾函跌抚插戈凉啤脉滥赋柏堤腰泊寺尘蒂削仙踪冻汤睛艳荐劫框廊惑页拼堪携丈乳挪谱舶埔遥菌塘氧晶洒株颜虹岳胸忍甜匹瞩懈爷丛莲叙鸿逢抬嘴弘炒喷吊窝衔吹霸仔垦胎慎脏歧疏悠慕漂杆萍舟吐玲凯戒盼偶盆慨弊箭茅衫罐串辐腹钩碰昂酬晰姿彼锻飘嫁竣缝蹈悬紫浅缆喊昔驰湿剪侦坑姚魏扑挣焕皆狂泡骤堵膜禽锐芝帽擅沪晤婆埋劝碗玛顷鸭娃豫匆魂哭庞亭屡逼尺撒鹿讼弥坊碎缔霍壤萄铃稍丘肿烦苹庙雇汛孝辰吞汰怨酿耶咱欺丢琼棚披渴屈弗疲帕昭盒仰萧牺撑抛鼠纱翼兹骑糊契铭淘顽撰乒淑妆窑柔姻苍谨卿灿栋敲窃菊郁催眉邱揽鼎韦肤娜俏呀拚寸爬悟尿罢圭葬聪沃肠厕慈恋绵橡圾垃翁粤脂歹憾阐甸巷蜂轴艘垄衬阜惨冀幽厘崭筋寓迄渗碘碧赌袖奈崔悦捞剥孕逆婴脆缅艇谭笼儒粒诈遣垂磋卸帜枣幢淀帆蛇宰殿猎叔夹帅沧魅俩牟钓葛罕渤汕溢擦袱嫩桶殷酷呆卧暑骄幻囊掀醉牡饼扇蒸赣俭椅枢彦樊吾仗彬砂绳巾喀勋愁碱谦壳轧潭浆挽邢啥焊钞烤廖猫狱腔喻御蕴坎魔刮瘤茫竭莉链淫愤纹咸睐睹裤夸滴雾搜拘龚凶茨傲鞍鹤蚀颈翠卉汁冈狮隧弯胃沛募琳疼蚕泼磷捧炳绣朵涯掏奎聂孜韵浑翔魄掩斥敞腊愧粘丑溉斑啦柯谐烯禄浴涝鬼薛瘦挡昏鹅湛逻虾沂辱叉鼻厨鲍鞭辣潇乓肺尹颂邵澜桐鹰妨闽屠畏翰塌亟寂赂犬聊暨垫泄漆旭蕾坪涤挫佐瞄拦硫棒杏爽碳畔熙襄祸乾淹臂莎辜阎庸砍捉勾垒衍坤噪毯倪扮铅遏哀愉瑶咬嫌闸恳齿杠怒兽浇肇鄂溶哄棵盯梨灶屯狭陋啡浸淋濒脊戚勉膏氨墅沸挨蔓抄芒秉刹饶厢咖魁骚缚遂恨跻螺辨菇帷凰椒汝瞬淄舱馈桩炬誓卜麟岂兔眠泵拐肚匪芦匈霉蜜荆雁窄秧枯仆嘱壶谅哨肌贬叠稽岐沫肆醇菱彪躺摔膀甫逊凑渊喂藤砸悔杉霜厄忌桔筒丙臭拾芜禹丸蟹嘛俞翅尸澄骂睦馨郝贮陌钧轩赃笋歉逸歪巍萃崖窟踢锣萎庐剖籽甩饥苑恼渣痕莞硅晴巢瘫缠隶筛穴昼埠宠肢饿仑逮兢趟糕妮邪抹俑萌匠扔酱葱礁掺雀髓悼挚蔚枫庚伞侃僵捆蒜溜傻蔗谜斋蝶沾闷驳耿槽黔吓肾芽栗朽荫榆皖曰徊奴迭僻蓉靖氟滔羡愚尧俺徘罩磊镑舌曙纶粪匙钉佼扯踊躲猴纬咽酝挠宛瑰歇抒茧穗祭鑫趁痴裙猜耘碌锈晒潍弦稼狼拢梧芯眷哑宙厌逛谴邯呵蜡寥钥耸媳熏蚁惕颠娟亨吟蒲梭瞻渝喉遮慌夷韶焰尉珊胖蕉粹裹琦秽侠奸挝绑曝棍婉镶熬傍燥氯骆晃鸽疯琢聋瑟暇绥禅溃腺垮阀撼煮佣滕淤蹲栖硝睁荟荧抖坟芭臻锭晖倦倘喘邑锤惧荔毗觅矮恭钙氮缸瞧颤萝佑怡瘾寡烹摧棠缪雏韧喇兜坯坷贞仇缉帘竖糟猖懒凿洼喧谣驼烫锌椰崩沥汾磅霖棘扛彗矩瞒陇绎诫斐卵铮钾宵簿秤畴斧擂剔躁冤讳寅焚漳鳖哺耻僧琅粟怖咏蜀淳柑缕烁氢蔽琪泣阮镀殴虞虐炊搁诀掠坠屿髦酋躯吵遐寞仕稚僚楠矶筝彝叮熔槐潢芹郸匾咋玄裔陡哗怜襟刃脾嵌拱慷痪跋孚峪钊滇苟晕墩膝羞乍腻詹讶敷肴莹衢柿朔袜枕烘匀歼泻樱吻翟堰苯隙娇獗汲蛙斩靡沁乞姨翩沼嘎畸矫骏薯绚窜藻矗皂楷腕篷徇耽娼犁榻茄棕汹峨蹄昧奢涩灼踩粥拣旷簇溯攒沓呕梳搅砌纫渭澡撕漓葆辍肪祁鞠蛮捏诵娣岱瀑啸裸鸦瑛躬舜忱豹纂恤惟赐俯犀媚嫂嗓蚊茬驭缀皱凳钮蚂姬扒嫖跪凹揣尬沦尴豁玫殡淌叭唇啃裘卑琐矢拯忡勿盎茵椎脖拂骅葫迢薇龟绞眶沐傣浊舅叛浚窘栓酶笛泌榄惹铲碟捡恪酯滤匿酵砚贼匮熠鳞麓镁氓苇廓巫踵竿蘑翘梓贻鳗帼冉泓狐涟崎窍瑜讽逗铎掷璀泗浏陲醋苛攘璧瀚哩暮矣蚌悖扼漯烛蝴屑墟俘侣庇陀煎秸弓捣譬炜炯拌扁彤锚禾侮秆绮嚣樟咐枉窦桦寇哉狸耍馒驹隋冕疮咄妄峙娄溥腑钠栩糙滦呐鲻娶祺刨褒橙茹谎抉慑媛橄戎迩雯璨雍惶扳桢霓账梗炕裴韬杖痹缤沽燎煞删辙爵缭劈烨槌媲凛莆颅锯膳澎坞瓣婷絮酌涡唁秃禺膊棣芸忻炽榨篆憨戍圩爹蹊饪胺贱睫蝇惫拇赈泾盏弧剿硒毓皓菏灸湄炙祠荻捍嚼朦屹紊藜驴寝兮隘祈榕臧蝉绢瞎闵鳌娥藉娅烽楂摒凄凸熄孵叩渎胳匡袍卒怠桓莽倩泸藕陨辗骋峭冥饺亢圃颐擒铵鳄簧愣璜钰拙瘠靳隽罹岑镭榴恕毋囤汀绽窖筷擎猿诲碾夭筐邃藩诬芙胚哇垣胧帖殉毙壑绰憋亥涅屁璞缮侍倚稠棺棱葵诣笨橱寰郡垢徕眺胰谆窥霄栉舸蹦坂瞪珲釉跤挟侄肘嘲刁缎嚷痒敛祛绅孰痫闺椿噶恍伶峦酥萦苎癫涪锲蜚拎嵩昊娴涣烙璋笃囚祯篱讴舷纭锄巅卦摹眸柄踞焉辄褚褐湃夙堕岔惦疚谍奕羚帧澈濮捎漾吼锰趴菩簸仃渲札谙咕桨咀郴咳呜蛟拧莘驯庵弼逞蹬姥撂镍晏疡爪骥楞钳懋寐淇琉杞菠铨翌靶侗瑙馅丐痊娓侈苓聆睿偌釜噬曦燮哟瑾瞿璇拮憬鹊勺憧嗜啼檐柚呱渍镌妃溺鸥粕沱榭隅毡禧瞅鲸淆阪茁渺瞥茜瘟礴伺谛锹蔼虔莺迸磕赡泱栈甄镐抠嬉诿甬绊饵谬梢颍揪琶褥佟腥辊溅琵鄯拴喃笙酰粱卤芮膛斓潼鸵侥讷婿吆羁嗣蜒栅疙拷戳镛芷钛蜿铀夯摞雌酣荼蝎锥姊瓢祀玺弛犷哦茸鱿绷茎惋亘珑莓掂迥鲤殃瘩叨螃奄腈疟沭钨昕膺涿糠氰揉狩檀悍缫哮衙瑚潞谤搀洱涓袤痰乖冗芋甭骸幌涮俨敖槛狄牒恺雹赎庶熨蛛佰蓦鄱煽腌黯疤倔剌斡诽锵筱妍掖铿脐捅弈邸湟眯赦拄啪玮轶蛾麋炫赊靴箔菁撬裳戌缨蝗撇奚瀛噩怯蓓匕咚瞰佬泞扉皋晾麒姗跚瘀鄙猕拭鲟祷脯砺驿陛瘁搓舵汞哼胫珀邬磺馏馍铢诧涧吏苔潺邳烷囿斟滁殆酚狡孺恬沅铬湍啧囱蒿鹃柠漱胥妖洙珂茉蹒圻鬓搂葩佘渥诙袒捂瞠妓铐澧袂馁汐匣逍谚窒蔑糯汶壹岖盔嘘迂嘀锢讥吭抨屎獭褪咫稷迦檬塬蠢蓟咎皿驮俐坍惭垛鹭鸾蹴撩诠恙臃遨睬踌浒搪郧竺翡宦冽憩萱拽卞槟躇蘸肋呛濡酮眨撮矸垸蛀黛涸脓徙撷曳峥渚镖钴骊袅磐掣沌埂嘿琏楣豚诡悸麝煦矾羲唉溧呻覃兖吱惰羹钝枸姣颓铣梆骇淅孢叱谧泯谟恃薹筵鏖栾鹜哽掬辘茗瓯绛筠铤袄殚梵挎遴榈蜕癣垠厮幄偕焱攥裨炖旮旯蔺骡娩伫猝窿虏屉缜咒筏骼璐剃涕猗淼侬阙嗅鸳嘈霏珩沮捺硼荃驷漩嘻眩掰伽脍婪煜鹄壕崂翎痞兀婺鸯楹咤徜嫉篓烃铂咪掐匝杼蕃箍荤砾嘶皑宕荪哎汴貂邡淦蕙弩堑惬偃徉箴赘啻凋穹酗憎芥唾闫晔苞昶甙笺吝蕊鳝衅猩薰昱趾淞坳怅翱汩琥岌阑粼羌霆篡塾酉裱韭唠廿闰攸黝蛤厥荞瑕柘祚疵愕蕨牦飨疹嗷癖芪漕隍徨逵泠嵘嗡岫岷擞陂颊咔卯婶椭惘歙幺臆叽缰睽勐暄弋痔秭煲琮嘟犊玖怦丕溴罂瓮丞惮癜晦攫镰镯柞舫铆蹼妩熹铱褂丫笆妒噢噙琬冼荀蟾捶嗒町嫣肮皎旖恣钚砥吩茯馥钎甥嗦蜗浔谒辫亳彷珏咯淖妊佤玷嘹崴於辕贲扈伎旎孽耙娠戊冢跷砷焘羔圪耄钼悻荥唑稞邝莅杷醛嗽唆拗碴馋胱琨茏糜懦骞蜘嚓怵抡唢腆涎灏臼墒暹椽牍钒猾榔懵枇樵锶籼箫漪帚钵赓捻郅儋烬锂剽锑鄢鄞臾喳胄耋阱笠瓴啬杳萤莠嶂浜傩遒轼睢倜矽仉唬旌酪腼罄嬗畲祟桅悴讹憔龋嵊绶邕忖箩咆晌愫猷帛麾莒觑吮蟋庥懊阂蒯阡腮潸晟蟀臀罔骁崽绉粽忿肛蠡遛蜓煊蚜坻滹銮悯鼐撵噼忐湮侏粳矍铄坨铉盂锗阖溟俟忑赝鬃敝宸哆靓揩瘸鲅篝氦嚎浃缙飚锷癸柩蛎濂榷鲨钡盹鲫诘诩迤桎遁尕梏楫赳飒锃雉怆痼劾痢喽霹昙畹胭佚狈瘪姹吠铧谏雳咙畦荠娑褶忏惚痉橘漉诏呗晁惆砀馄戟峁昵拈蠕虱洵鹦蛹铛挛倏澍濉钅噜咛俳磬蜷霎肽砼聿怔砭谌箕蹶孪蔷糅挞饨惴禀淙哒枷楝闾蜻嗖淬垩矜郗蚤嫦喋镉饯髋潦镂簌偎鹉岙踱诃籁宓膘飙涞耆荏渑豌琰俎绌埭幡赅锆崮碣珞腋滢蓖伉馗聩幔锨蓥鹑砝酩枰鞘苋粑蹭倌犟俪嶙砻嵋滂葺苒枭翊婀飓阚喟傈藐蜃怂稣亵诒蜇岜霁瞌沏卅舀鹌俸嵇蟒汨砰鞣唏陉佯恿竽瘴祉焙诋濠螂叻垅谩朐稔芍瞳惺萸盅啄眈偻爿蟠炔垭噎蛰擘锏茭悌喔谑峋妪恽韫褓镳饽杈戛鸠萋襁榫霭苄跺杲嗨珉哌娆孀恸缄夔佗饷苷郜鼾颌訇谲溘咧褛逄颦洮逶嫡蠹碓烩醴栎鎏瓤伢蔫怿甾摈畈镣螨秣搔盱痍搐蹉佃绂疽骝霾悚缃懿咂奘轱邗蚝瘘醚湎瞑掮羟仨砣郢砧鳟跛踝轲窠郦踉躏戮篾骐鳍蹂郯跎倭诅鄄褴阆缈嗯妞沤跄箐苕窕楔饴峄腴圄谕揍踹罡佝颔觊篑鲢綦妾镗啕蚬窈揖眙蟑诛钗绯讣睾媾嗬祜镢囹苜坭蛐髯搡叟蹋觎捱碉呋罘荚鹫岿寮扪焖狞鳅嗄嗤擀痂嗟颉蚧儆锴龛嗑锟俚枥懑讫橇嗪虬跆骧陟灞恻涔酐鸪牯钜萘鲶缥曜蚓诤埕墀麸蝠蛊遑厩趄沔耦疱匍揿蚯讪唰舔呷蓿鹧膑刍耷鞑裆趸孑鲲绫埝嘭舢鸢螯吡蝙疸匐桁铠羸鲈囵唛仫庖劭郓骜粲峒腓鹳鳜蚶囫茴峤蟆蘖癯纾僳皙隰缬馐谪捭汊碜塍艮睑狍苫篦蜍锉沣诰晗喙麂謇蹇觐啾踽邈壬燧娲猥歆镒茔昝赭狰孳哧舛噔鹗蚣逅洹腱锒纰蛆蕤姝邰纣嘣钹衩婵孱蹿鲷萼椁浣镓遽赉趔蕲剜邂仡氤獐幛俾铋嗔茌氡诂豢桧畿倥捋仞忒疃浯蜈榛偬稗菖鲳厝踮叼痱貉玑婕琚疴掳钤垧氵黠跹怏揄氲铡濯芾笈崆钕菽隼傥仝囗芗埙簪暧桉镝蚪蜉藁笳菅龃喹橹抿啮蹑逖唔樨巽揶黟訾钣嵯凼恫掇剁珙沆噱揆耒铌泅疝葳隗滟龉钺殒蒡觇黜澹酊垡奂珈濑馕馊嚏痿岘氩茱滓焯抻豉敕掸碲靛摁淝鳏盥皈鲑颢犄翦铰椐胯屺邛庹猬蓊骛浠桠胤鸩痣蛭噌杵啜靼啶煅枋觥毂刽蝈蘅芨戬醮疖忾骷洌呤荦觞谡瀣蝣糌倬碚蹙痘砘绀虢蕻肓蛔唧桀蝌侩棂樯挈轫巳崧蓑藓鳕瑗帙馔豺痤郇殓髅轳逯嗫戕嚅蛳琊嘤疣蚱钯钿碇咣毽迳喱逦廪邙囡匏扦亻咝凇纨涠庠溆醺炀烊肄龈谀锱瘢枞皴贰晷闳斛屐讦婧苣蔻绺渌瑁螟叵颀穑膻羧螳绦誊蜥楦恂靥咿翳瓒枳啭樽嫒婊搽铒跗凫菡篁髻裾栲癞蓼氖孬喏砒姘衽缛嵬挹缢慵呦箸蹩槎榇舂嗲胴谔岢圹娌潋蛉酃鲵鲇娉亓碛芊忪谇笤韪勰呓俣圜愠仄炷毖筚伧棰磴滏篙肱笕堇馑荩榘哐傀崃罱痨儡鹂檩垴仵檄芎阉刈壅馀庾妯躅獒阊笞饬钏硐椴泔硌鹘鳇豇狙戡莨啉辇臬殇舐黍薮眭佻嗵煨莴蚴妤瘐擢蛏蹰龊辏绐氘骶莪珐缟聒讧岬胛桷谰戾撸鸬雒嘧囔铍骈掊茕噻铯柁艉龌硖罅魇酽咦嶷羿轸趵荸薜踟玳啖蔸槁鲛疥砬唳弭曩黏镊泮霈淠柒颧瘙痧辋郄燹泫郾鹞钇殪痈甑踯翥婢檗柽啐菪嶝腭嗝剐笏蟥戢阄噘撅尻贶辚蜢颞忸胼阕竦焐揠邺鳙啁稹徵诌隹舨哔卟伥苌鹚箪缍锇蝮诟洄浍诨犍硷噤垲郐椤嫫伲脲殍噗溱箬厍钽钍恹鬻爰砦蓁胝颛褙鳊邴铖镫腚钭颚鲂悱狒佶偈堀绔醪坜疠椋犸暝佞哝瞟荨芩逡溽裟挲抟暾崦芫荑薏莸欤栀斫镞嗳鸨跸骠俦谠簟棼驸掼倨橛犒邋耧蝼虻铙郫汔诮楸阒绻叁臊钐腧闩菘阗忝橐翕阋踅窨鹬鼋樾錾吒旃弁侪坼蚩嘬糍骢氐呃榧玢绋蚨钆岣菰罟嘏埚绗嚯藿笄袈羯肼暌啷蒗蜊獠鬣熳黾乜镆怩驽旆髂仟芡谯恁鳃艄莳艏趿遢鲐醍僮氽刎芴喑墉昀箦鄣摺钲贽缵鏊锛瓿廛瘳亍遄褡垌椟酆砩桴赙坩臌曷跽湫榉黧猁钌镏缦殁赧埤悭缱衾鲭铩猞眚铈谥耜飕饕餮骰乇绾鹇鲞爻蜴镱铟莜祗濞镔逋谄谶酲茺樗憷莼撺柢阏砜垓旰妫衮嗥郏鞯徼孓钪侉夼跬铼嫘蟊茆睨怄蹁谝嘌綮嫱筇犰穰铷筲哂炻豕秫笥涑铊帏闱鋈舾屣狎哓噫璎铕宥阈豸辎趑龇捌秕荜愎窆镲谗踔苁酢呔聃镦屙鲱鬲膈铪醐獾鲩虺葭牮礓苴讵颏裉诳栌氇镙哞柰袢帔睥苤嫔笸氆佥箧跫蚋鲥扌狲桫溏铽殄脘洧肟绡咻洫癔洇嵛磔胗肫赀眦吖瑷埯畚妣飑豳髌砗铳楮蔟毳锝堞疔葑缶菔疳彀胍磙顸薅翮猢怙蒺廑妗髁醌粝魉旒蝥缗衲呸醅芘蚍圮榀萁苘逑诎劬蕖朊剡蟮椹饣酞帑葶菟魍庑葸氙谖鞅狺夤嬴瘿饔雩鹆橼赜潴骓缁诹怍杓艹檫媸氚呲殂矬笪迨纛簦玎苊轭匚鼢呒缑诖炅鲧唿戽鬟恚袷瘕枧洚桕雎蠲剀诓瘌镧铑鳓蓠呖跞裢裣埒捩鲮熘嵝瘰镘脒腩筢耪辔牝嘁蛴戗蛩巯悫葚熵绱蛸螫毹妁纟嗾鳎绨粜菀沩鼯牾螅顼泶蕈鼹繇苡悒廴吲喁卣牖笮舴罾棹鸷碡锕嗌媪龅甏箅傧啵鹁晡氅魑篪怛籴礅蒽珥钫绠觚鸹涫颃篌锪蠖乩咭赍嵴铗湔槿赆僦皲佧箜蒉缧酹嘞疬臁膦泷蒌泺荬颟旄泖镅蠓冖幂耱襻鼙攵炝愀蘧氍犭禳桡糁馓酾槊狻锬羰鼗鹈畋髫萜堍璺怃崤囟睚痖菸餍徭瘗唷圉蜮砟谵澶朕摭轵诼笫廒聱庳髀笾龀裎雠蝽腠妲刂铥黩怼沲蘩趺苻拊阝鲋戆纥哏鲠笱瞽庋簋刿掴猓蚵槲觳萑癀蟪钬虮掎鲣囝裥踺茳糨鹪狷麇芤刳愦髡悃缡鲡鳢奁墚尥柃胪镥脔杩劢墁玟蝻呶搦湓罴蜱俜鲆皤镨槭镪黢洳枘芟埏渖筮殳飧溻饧樘醣酡圬粞觋莶霰榍薤髹曛疋迓衤欹佾埸霪茚鼬伛瘵骣畛卮轾彘觯锺邾槠谘嵫髭蕞犴鞴畀滗煸褊冫孛羼耖褫彳艟辶茈璁爨榱萏坫鸫篼簖裰哚蹯瀵怫陔筻廾蛄绲崞蜾盍荭黉糇骺後鲎煳鹕冱瓠逭漶耠镬齑殛鲚跏蛱搛缣鹣僬噍衿缂喾狯纩栝蛞稂塄嫠詈蠊鹩躐鹨簏膂脶嬷昴瞀浼艨祢縻蘼芈糸宀眄鹋杪咩愍麽瘼鍪硇猱茑脬蟛貔仳犏钋芑葜愆锓蠼筌鬈蚺荛埽潲诜埘弑嗍蒴鸶缌澌姒蔌睃缇梃彖鼍芄隈鲔硪忤痦欷僖醯鼷跣枵忄擤勖痃碹谳轺铘圯纡窬窳饫蓣瀹趱驵缯揸笊絷跖舯螽籀舳粢驺陬阼揞菝魃癍鹎坌狴萆嬖襞碥髟鳔醭螬馇虿瘥惝怊鸱螭瘛帱徂汆脞瘅忉羝睇瓞鲽岽胨芏佴燔偾稃郛莩幞澉槔袼搿茛鞲觏酤牿鲴宄匦呙馘焓瘊虍岵鹱咴隳缋溷夥剞洎恝蒹谫僭艽挢敫卺冂扃锔窭锩觖劂氪骒哙悝蝰诔苈篥娈瞵锍栊癃舻辂稆猡蛑甍艋敉眇蠛侔镎肭艿蛲疒陧衄锘堋庀擗甓螵钷攴桤褰凵肷锖鞒吣黥俅蝤璩悛辁肜颡谂礻摅汜溲嗉荽闼骀炱螗耥裼铫莛亠箨蕹迕杌寤穸饩舄禊猃绁渫廨獬硎荇鸺貅糈揎镟獯讠厣罨蛘鳐崾舣媵尢蚰侑狳螈龠昃痄搌浈埴夂黹酎橥丶缒窀菹锿砹茇勹邶鐾舭忭缏灬瘭踣钸礤骖黪艚锸猹镡躔蒇冁鬯屮枨眵傺搋巛舡楱镩鹾戥觌阽铞垤揲蹀耵髑憝鸸鲕篚镄鲼唪祓艴黻黼鳆尜戤塥哿虼遘桄丨胲醢撖嚆薨堠烀轷锾缳擐哕阍劐攉丌墼蕺彐芰哜戋趼楗耩喈卩鲒骱刭弪獍鬏鞫犋屦醵桊爝捃胩锎蒈莰闶钶锞眍筘阃漤铹栳耢仂泐檑轹蔹懔垆锊倮蠃鞔硭漭猸鹛钔瞢礞喵苠鳘貊貘毪坶攮猊嬲肀聍甯狃耨孥胬恧蒎锫陴氕丿裒镤蜞岍搴箝慊椠蜣硗劁缲檎螓圊檠謦銎赇鼽糗麴鸲磲畎狨蝾薷襦颥蓐脎毵磉鳋唼歃彡骟滠矧胂蓍鲺贳搠厶兕锼螋瞍觫赕铴瑭慝掭祧龆蜩鲦茼酴煺柝腽軎阌阢诶菥蓰柙祆筅葙蟓魈躞砉醑儇岈砑珧酏劓堙撄潆舁蝓燠眢箢掾刖狁拶唣迮帻谮哳齄膪嫜忮骘膣踬荮瘃麈疰丬浞禚觜耔腙鄹鲰躜撙胙</code></pre>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
      </tags>
  </entry>
  <entry>
    <title>JS实现悬浮导航制作</title>
    <url>/p/3f8d17e0.html</url>
    <content><![CDATA[<ol>
<li>css部分，需要做一个导航栏。<br>创建style.css文件，并写入以下内容<a id="more"></a>

</li>
</ol>
<pre><code class="line-numbers language-css">body{
    margin: 0;
    padding: 0;
}

.nav{
    background-color:#521C1C;
    width: 100%;
    height: 38px
}
.nav#nav a{
    color: #ffffff;
    font-size: 14px;
    width: 160px;
    height: 38px;
    display: block;
    float:left;
    text-decoration: none;
    text-align: center;
    line-height: 38px;
}
.nav#nav a:hover{
    background:#e50065
}
.scrollNav{
    position: fixed;
    left: 0;
    top: 0
}</code></pre>
<ol start="2">
<li>HTML部分<br>创建index.html文件，并写入以下内容</li>
</ol>
<pre><code class="line-numbers language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html&quot; charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;JS实现悬浮导航&lt;/title&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;css/style.css&quot; type=&quot;text/css&quot;&gt;
    &lt;script src=&quot;http://libs.baidu.com/jquery/1.11.1/jquery.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;javascript/nav.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;div id=&quot;nav&quot; class=&quot;nav&quot;&gt;
            &lt;a href=&quot;#&quot;&gt;导航标题&lt;/a&gt;
            &lt;a href=&quot;#&quot;&gt;关于我们&lt;/a&gt;
    &lt;/div&gt;
    &lt;br&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4&lt;br&gt;5&lt;br&gt;6&lt;br&gt;7&lt;br&gt;8&lt;br&gt;9&lt;br&gt;0
    &lt;br&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4&lt;br&gt;5&lt;br&gt;6&lt;br&gt;7&lt;br&gt;8&lt;br&gt;9&lt;br&gt;0
    &lt;br&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4&lt;br&gt;5&lt;br&gt;6&lt;br&gt;7&lt;br&gt;8&lt;br&gt;9&lt;br&gt;0
    &lt;br&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4&lt;br&gt;5&lt;br&gt;6&lt;br&gt;7&lt;br&gt;8&lt;br&gt;9&lt;br&gt;0
    &lt;br&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4&lt;br&gt;5&lt;br&gt;6&lt;br&gt;7&lt;br&gt;8&lt;br&gt;9&lt;br&gt;0
    &lt;br&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4&lt;br&gt;5&lt;br&gt;6&lt;br&gt;7&lt;br&gt;8&lt;br&gt;9&lt;br&gt;0
    &lt;br&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4&lt;br&gt;5&lt;br&gt;6&lt;br&gt;7&lt;br&gt;8&lt;br&gt;9&lt;br&gt;0
    &lt;br&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4&lt;br&gt;5&lt;br&gt;6&lt;br&gt;7&lt;br&gt;8&lt;br&gt;9&lt;br&gt;0
    &lt;br&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4&lt;br&gt;5&lt;br&gt;6&lt;br&gt;7&lt;br&gt;8&lt;br&gt;9&lt;br&gt;0
    &lt;br&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4&lt;br&gt;5&lt;br&gt;6&lt;br&gt;7&lt;br&gt;8&lt;br&gt;9&lt;br&gt;0
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<ol>
<li>JS部分<br>创建nav.js文件，并写入以下内容</li>
</ol>
<pre><code class="line-numbers language-js">$(document).ready(function () {
    var nav = $(&quot;#nav&quot;);
    //获取浏览器窗口
    $(window).scroll(function () {
        if ($(window).scrollTop() &gt; 0) {
            nav.addClass(&quot;scrollNav&quot;)//添加样式
        } else {
            nav.removeClass(&quot;scrollNav&quot;)
        }
    });
});</code></pre>
<ol>
<li>基本思路是在js中判断导航栏是否在最顶端</li>
</ol>
<ul>
<li>如果不在，则加入<code>{position: fixed;left: 0;top: 0}</code>样式，</li>
<li>如果在，则删除<code>{position: fixed;left: 0;top: 0}</code>样式</li>
</ul>
<ol start="5">
<li>预览效果<br><img src="//gitee.com/guoke3915/zw/raw/master/p/3f8d17e0/19826068-f6df5d8168afe193-1583249296164.png" alt></li>
</ol>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>GO 获取时间的年份、月份以及日期</title>
    <url>/p/ece0b276.html</url>
    <content><![CDATA[<ol>
<li>通过time获取年、月、日<a id="more"></a>

</li>
</ol>
<pre><code class="line-numbers language-go">year:=time.Now().Year()
month:=time.Now().Month()//time.Now().Month().String()
day:=time.Now().Day()</code></pre>
<ol start="2">
<li>字符串转Time</li>
</ol>
<pre><code class="line-numbers language-go">tm := &quot;2019-01-01 01:01:01&quot;
t1, _ = time.Parse(&quot;2006-01-02 15:04:05&quot;, tm )

date := &quot;2019-01-01&quot;
t2, _ = time.Parse(&quot;2006-01-02&quot;, date)</code></pre>
<ol start="3">
<li>毫秒时间戳转Time</li>
</ol>
<pre><code class="line-numbers language-go">ms:= 1572958141000
t := time.Unix(ms/1000, 0)</code></pre>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 安装MySQL并配置my.cnf</title>
    <url>/p/3c87b56e.html</url>
    <content><![CDATA[<ol>
<li>先查看远端的版本<br><code>docker search mysql</code><a id="more"></a>
<pre><code class="line-numbers language-bash">[root@iZbp17pvndv49r9ozf5hbcZ ~]# docker search mysql
NAME                              DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED
mysql                             MySQL is a widely used, open-source relation…   8760                [OK]                
mariadb                           MariaDB is a community-developed fork of MyS…   3072                [OK]                
mysql/mysql-server                Optimized MySQL Server Docker images. Create…   650                                     [OK]
centos/mysql-57-centos7           MySQL 5.7 SQL database server                   64                                      
centurylink/mysql                 Image containing mysql. Optimized to be link…   61                                      [OK]
mysql/mysql-cluster               Experimental MySQL Cluster Docker images. Cr…   55                                      
deitch/mysql-backup               REPLACED! Please use http://hub.docker.com/r…   41                                      [OK]
bitnami/mysql                     Bitnami MySQL Docker Image                      35                                      [OK]
tutum/mysql                       Base docker image to run a MySQL database se…   34                                      
schickling/mysql-backup-s3        Backup MySQL to S3 (supports periodic backup…   28                                      [OK]
prom/mysqld-exporter                                                              23                                      [OK]
linuxserver/mysql                 A Mysql container, brought to you by LinuxSe…   22                                      
centos/mysql-56-centos7           MySQL 5.6 SQL database server                   16                                      
circleci/mysql                    MySQL is a widely used, open-source relation…   15                                      
mysql/mysql-router                MySQL Router provides transparent routing be…   13                                      
arey/mysql-client                 Run a MySQL client from a docker container      12                                      [OK]
imega/mysql-client                Size: 36 MB, alpine:3.5, Mysql client: 10.1.…   8                                       [OK]
yloeffler/mysql-backup            This image runs mysqldump to backup data usi…   6                                       [OK]
openshift/mysql-55-centos7        DEPRECATED: A Centos7 based MySQL v5.5 image…   6                                       
fradelg/mysql-cron-backup         MySQL/MariaDB database backup using cron tas…   4                                       [OK]
genschsa/mysql-employees          MySQL Employee Sample Database                  2                                       [OK]
ansibleplaybookbundle/mysql-apb   An APB which deploys RHSCL MySQL                2                                       [OK]
jelastic/mysql                    An image of the MySQL database server mainta…   1                                       
widdpim/mysql-client              Dockerized MySQL Client (5.7) including Curl…   0                                       [OK]
monasca/mysql-init                A minimal decoupled init container for mysql    0                                       </code></pre>
</li>
<li>从远端下载<br><code>docker pull mysql</code><pre><code class="line-numbers language-bash">[root@iZbp17pvndv49r9ozf5hbcZ ~]# docker pull mysql
Using default tag: latest
latest: Pulling from library/mysql
80369df48736: Pull complete 
e8f52315cb10: Pull complete 
cf2189b391fc: Pull complete 
cc98f645c682: Pull complete 
27a27ac83f74: Pull complete 
fa1f04453414: Pull complete 
d45bf7d22d33: Pull complete 
3dbac26e409c: Pull complete 
9017140fb8c1: Pull complete 
b76dda2673ae: Pull complete 
bea9eb46d12a: Pull complete 
e1f050a38d0f: Pull complete 
Digest: sha256:7345ce4ce6f0c1771d01fa333b8edb2c606ca59d385f69575f8e3e2ec6695eee
Status: Downloaded newer image for mysql:latest
docker.io/library/mysql:latest</code></pre>
</li>
<li>查看镜像<br><code>docker images</code><pre><code class="line-numbers language-bash">[root@iZbp17pvndv49r9ozf5hbcZ ~]# docker images
REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE
mysql                latest              c8ee894bd2bd        2 weeks ago         456MB</code></pre>
</li>
<li>然后先创建一个临时的mysql，进入容器中<pre><code class="line-numbers language-bash">docker run --rm --name mysqlTemp -it -v /usr/local/mysql/:/var/lib/mysql  -e MYSQL_ROOT_PASSWORD=123456 mysql /bin/bash </code></pre>
</li>
</ol>
<p>– rm 退出后就删除该容器<br>-v /usr/local/mysql/:/var/lib/mysql  装主机目录/usr/local/mysql/映射Docker中的/var/lib/mysql目录<br>-it 交互模式<br>/bin/bash 进入 bash 命令模式<br>5. 查看 my.cnf文件。<br><code>cat /etc/mysql/my.cnf</code></p>
<pre><code class="line-numbers language-bash">root@ea063c22ea1e:/# cat /etc/mysql/my.cnf
# Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

#
# The MySQL  Server configuration file.
#
# For explanations see
# http://dev.mysql.com/doc/mysql/en/server-system-variables.html

[mysqld]
pid-file        = /var/run/mysqld/mysqld.pid
socket          = /var/run/mysqld/mysqld.sock
datadir         = /var/lib/mysql
secure-file-priv= NULL
# Disabling symbolic-links is recommended to prevent assorted security risks
symbolic-links=0

# Custom config should go here
!includedir /etc/mysql/conf.d/</code></pre>
<p>如果是完整的my.cnf文件，直接复制出去，如果不是，则需要把includedir目录一起复到主机<br>6. 拷贝配置文件</p>
<ul>
<li>把Docker中的/etc/mysql/my.cnf文件拷贝到Docker的/var/lib/mysql目录，及主机的/usr/local/mysql/目录中<pre><code class="line-numbers language-bash">cp /etc/mysql/my.cnf /var/lib/mysql</code></pre>
</li>
<li>把Docker中includedir目录复制出去<pre><code class="line-numbers language-bash">cp -R /etc/mysql/conf.d/ /var/lib/mysql/conf.d</code></pre>
</li>
</ul>
<ol start="7">
<li>退出bash，Docker中临时用的mysqlTemp会被删除<br>然后可以查看/usr/local/mysql/目录下有mysql所有的配置文件<pre><code class="line-numbers language-bash">[root@iZbp17pvndv49r9ozf5hbcZ ~]# ls /usr/local/mysql/
conf.d  my.cnf</code></pre>
</li>
<li>这里就可以修改配置了。<br>改完之后，创建正式的mysql容器<pre><code class="line-numbers language-bash">docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123455 -v /usr/local/mysql/data:/var/lib/mysql -v /usr/local/mysql/my.cnf:/etc/mysql/my.cnf -v /usr/local/mysql/conf.d:/etc/mysql/conf.d -d mysql</code></pre>
如果my.cnf 是完整的配置，这里不需要映射conf.d和mysql.conf.d这二个目录<pre><code class="line-numbers language-bash">docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123455 -v /usr/local/mysql/data:/var/lib/mysql -v /usr/local/mysql/my.cnf:/etc/mysql/my.cnf  -d mysql</code></pre>
</li>
</ol>
<ul>
<li>–name 容器名称</li>
<li>-p 端口映射</li>
<li>-v 配置文件映射：将 宿主机上修改的自定义配置文件，映射到 容器中</li>
<li>-e MYSQL_ROOT_PASSWORD   设置root密码</li>
<li>-d 守护进程模式运行</li>
</ul>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 10 中Maven环境的安装与配置</title>
    <url>/p/bf943d68.html</url>
    <content><![CDATA[<ol>
<li>先去<a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener">maven官网</a>下载最新的bin的版本</li>
<li>解压到本地文件夹中<a id="more"></a></li>
<li>右击“我的电脑”，选择“属性”<br><img src="//gitee.com/guoke3915/zw/raw/master/p/bf943d68/19826068-9696d2cc75292d67.png" alt></li>
<li>进入“高级系统设置”</li>
<li>在系统属性页面中，打开“环境变量”</li>
<li>在环境变量中的Path中，添加maven目录，这里是’D:\apache-maven-3.5.4\bin’<br><img src="//gitee.com/guoke3915/zw/raw/master/p/bf943d68/19826068-5e8c4335531959ba.png" alt></li>
<li>打开cmd，运行’mvn –version’查看版本<pre><code class="line-numbers language-powershell">C:\Users\Administrator&gt;mvn --version
Apache Maven 3.6.0 (97c98ec64a1fdfee7767ce5ffb20918da4f719f3; 2018-10-25T02:41:47+08:00)
Maven home: D:\Program Files\apache-maven-3.6.0\bin\..
Java version: 1.8.0_121, vendor: Oracle Corporation, runtime: C:\Program Files\Java\jdk1.8.0_121\jre
Default locale: zh_CN, platform encoding: GBK
OS name: &quot;windows 10&quot;, version: &quot;10.0&quot;, arch: &quot;amd64&quot;, family: &quot;windows&quot;</code></pre>
</li>
</ol>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>svn cleanup 报错</title>
    <url>/p/3ee90d06.html</url>
    <content><![CDATA[<ol>
<li>更新的文件被打开导致失败，然后运行“cleanup”时出现了<pre><code>Previous operation has not finished; run &#39;cleanup&#39; if it was interrupted</code></pre><a id="more"></a>
<img src="//gitee.com/guoke3915/zw/raw/master/p/3ee90d06/19826068-97ecda247b768466.png" alt></li>
<li>在svn工程目录下，有一个隐藏目录”.svn”，在这个目录下有一个wc.db文件。<br><img src="//gitee.com/guoke3915/zw/raw/master/p/3ee90d06/19826068-a66a2580e83eae5d.png" alt></li>
<li>用sqlite3.exe 打开 wc.db文件<br><img src="//gitee.com/guoke3915/zw/raw/master/p/3ee90d06/19826068-7835ff5854de76aa.png" alt></li>
<li>查看记录<pre><code class="line-numbers language-sql">select * from work_queue;</code></pre>
<img src="//gitee.com/guoke3915/zw/raw/master/p/3ee90d06/19826068-39535f7a23ad6e81.png" alt></li>
<li>把列表清空<pre><code class="line-numbers language-sql">delete from work_queue;</code></pre>
<img src="//gitee.com/guoke3915/zw/raw/master/p/3ee90d06/19826068-23ede874722ce254.png" alt></li>
<li>再次查询，确认是否清空<pre><code class="line-numbers language-sql">select * from work_queue;</code></pre>
<img src="//gitee.com/guoke3915/zw/raw/master/p/3ee90d06/19826068-545bf58454e14df1.png" alt></li>
<li>然后，再 clean up清空<br><img src="//gitee.com/guoke3915/zw/raw/master/p/3ee90d06/19826068-ebb258389a6e53c2.png" alt></li>
</ol>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>ERROR</tag>
      </tags>
  </entry>
  <entry>
    <title>C# XML反序列化与序列化</title>
    <url>/p/24bd1b9f.html</url>
    <content><![CDATA[<p>在C#中，可以用XmlSerializer类来反序列化与序列化xml，但我们也可以封装一下，可以使用起来更方便</p>
<a id="more"></a>
<ol>
<li><p>将XML字符串反序列化成对象 方法</p>
<pre><code class="line-numbers language-C#">/// &lt;summary&gt;
/// 将XML字符串反序列化成对象
/// &lt;/summary&gt;
/// &lt;typeparam name=&quot;T&quot;&gt;返回的对象类型&lt;/typeparam&gt;
/// &lt;typeparam name=&quot;xml&quot;&gt;xml字符串&lt;/typeparam&gt;
/// &lt;typeparam name=&quot;xmlRootName&quot;&gt;xml根节点&lt;/typeparam&gt;
/// &lt;returns&gt;返回对象类型&lt;/returns&gt;
public static T Deserialize&lt;T&gt;(string xml, string xmlRootName = &quot;Root&quot;)
{
 T result = default(T);
 using (StringReader sr = new StringReader(xml))
 {
     XmlSerializer xmlSerializer = string.IsNullOrWhiteSpace(xmlRootName) ?
         new XmlSerializer(typeof(T)) : new XmlSerializer(typeof(T), new XmlRootAttribute(xmlRootName));
     result = (T)xmlSerializer.Deserialize(sr);
 }
 return result;
}</code></pre>
</li>
<li><p>将XML文件反序列化成对象 方法</p>
<pre><code class="line-numbers language-C#">/// &lt;summary&gt;
/// 将XML文件反序列化成对象
/// &lt;/summary&gt;
/// &lt;typeparam name=&quot;T&quot;&gt;返回的对象类型&lt;/typeparam&gt;
/// &lt;typeparam name=&quot;xml&quot;&gt;文件路径&lt;/typeparam&gt;
/// &lt;typeparam name=&quot;xmlRootName&quot;&gt;xml根节点&lt;/typeparam&gt;
/// &lt;returns&gt;返回对象类型&lt;/returns&gt;
public static T DeserializeFile&lt;T&gt;(string filePath, string xmlRootName = &quot;Root&quot;)
{
 T result = default(T);
 if (File.Exists(filePath))
 {
     using (StreamReader reader = new StreamReader(filePath))
     {
         XmlSerializer xmlSerializer = string.IsNullOrWhiteSpace(xmlRootName) ?
             new XmlSerializer(typeof(T)) : new XmlSerializer(typeof(T), new XmlRootAttribute(xmlRootName));
         result = (T)xmlSerializer.Deserialize(reader);
     }
 }

 return result;
}</code></pre>
</li>
<li><p>将对象序列化成XML字符串 方法</p>
<pre><code class="line-numbers language-C#">/// &lt;summary&gt;
/// 将对象序列化成XML字符串
/// &lt;/summary&gt;
/// &lt;typeparam name=&quot;sourceObj&quot;&gt;数据对象&lt;/typeparam&gt;
/// &lt;typeparam name=&quot;xmlRootName&quot;&gt;xml根节点&lt;/typeparam&gt;
/// &lt;returns&gt;xml字符串&lt;/returns&gt;
public static string Serializer(object sourceObj, string xmlRootName = &quot;Root&quot;)
{
 MemoryStream Stream = new MemoryStream();
 Type type = sourceObj.GetType();
 XmlSerializer xmlSerializer = string.IsNullOrWhiteSpace(xmlRootName) ?
     new XmlSerializer(type) : new XmlSerializer(type, new XmlRootAttribute(xmlRootName));
 xmlSerializer.Serialize(Stream, sourceObj);
 Stream.Position = 0;
 StreamReader sr = new StreamReader(Stream);
 string str = sr.ReadToEnd();
 sr.Dispose();
 Stream.Dispose();

 return str;
}</code></pre>
</li>
<li><p>将对象序列化成XML文件 方法</p>
<pre><code class="line-numbers language-C#">/// &lt;summary&gt;
/// 将对象序列化成XML文件
/// &lt;/summary&gt;
/// &lt;typeparam name=&quot;filePath&quot;&gt;xml文件路径&lt;/typeparam&gt;
/// &lt;typeparam name=&quot;sourceObj&quot;&gt;数据对象&lt;/typeparam&gt;
/// &lt;typeparam name=&quot;xmlRootName&quot;&gt;xml根节点&lt;/typeparam&gt;
public static void SerializerFile(string filePath, object sourceObj, string xmlRootName = &quot;Root&quot;)
{
 if (!string.IsNullOrWhiteSpace(filePath) &amp;&amp; sourceObj != null)
 {
     Type type = sourceObj.GetType();
     using (StreamWriter writer = new StreamWriter(filePath))
     {
         XmlSerializer xmlSerializer = string.IsNullOrWhiteSpace(xmlRootName) ?
             new XmlSerializer(type) : new XmlSerializer(type, new XmlRootAttribute(xmlRootName));

         xmlSerializer.Serialize(writer, sourceObj);
     }
 }
}</code></pre>
</li>
</ol>
]]></content>
      <categories>
        <category>CSharp(C#)</category>
      </categories>
      <tags>
        <tag>CSharp(C#)</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7中使用yum安装Nginx的方法</title>
    <url>/p/264b63e9.html</url>
    <content><![CDATA[<ol>
<li>添加源<br>默认情况Centos7中无Nginx的源，可以去官方添加。（但是阿里的源是包含Nginx的，直接跳过）<a id="more"></a>

</li>
</ol>
<pre><code class="line-numbers language-bash">rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</code></pre>
<ol start="2">
<li>查看安装源是否添加成功</li>
</ol>
<pre><code class="line-numbers language-bash">yum search nginx</code></pre>
<ol start="3">
<li>安装</li>
</ol>
<pre><code class="line-numbers language-bash">yum install -y nginx</code></pre>
<ol start="4">
<li>启动Nginx并设置开机自动运行</li>
</ol>
<pre><code class="line-numbers language-bash">systemctl start nginx.service
systemctl enable nginx.service</code></pre>
<ol start="5">
<li>配置</li>
</ol>
<p>配置文件在’/etc/nginx/nginx.conf’</p>
<ol start="6">
<li>重新加载配置</li>
</ol>
<pre><code class="line-numbers language-bash">/usr/sbin/nginx -s reload</code></pre>
<ol start="7">
<li>安装nginx-upstream-fair模块<br><a href="/p/72e79b4.html">yum安装nginx后添加nginx-upstream-fair</a></li>
</ol>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>软件使用</tag>
      </tags>
  </entry>
  <entry>
    <title>iPhone退订订阅或取消试用</title>
    <url>/p/7be709da.html</url>
    <content><![CDATA[<p>当我们订阅苹果业务后不需要时或试用完时，可以退订订阅或取消试用</p>
<a id="more"></a>
<ol>
<li>打开设置，点击“名字头像”，进入AppleID。</li>
<li>在AppleID页面中，选择“iTunes Store 与 App Store”</li>
<li>点击自己的AppleID，查看“AppleID”</li>
<li>输入AppleID密码登录</li>
<li>向下翻，找到“订阅”</li>
<li>进入订阅页面后，会显示当前AppleID账号下所有的订阅或试用的软件</li>
<li>选择订阅的App，然后，点“取消订阅”或“取消订阅”</li>
</ol>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>WPS 表格时间戳转时间显示</title>
    <url>/p/7368e5c6.html</url>
    <content><![CDATA[<p>有时候我们从数据库导出来的时间为时间戳格式，可以用简单的公式用WPS（或Office）直接显示为日期格式</p>
<a id="more"></a>
<ol>
<li>打开表格，选择一个空表格<br><img src="//gitee.com/guoke3915/zw/raw/master/p/7368e5c6/19826068-a0e482ba96773d34.png" alt></li>
<li>右击选择<code>设置单元格格式</code>为日期格式<br><img src="//gitee.com/guoke3915/zw/raw/master/p/7368e5c6/19826068-29d0fbb18329e9bc.png" alt></li>
<li>输入公式</li>
</ol>
<pre><code class="line-numbers language-txt">=(B2+8*3600)/86400+70*365+19</code></pre>
<p>这里的B2为时间戳表格的位置，这里是秒为单位，如果是毫秒，则需要将<code>B2/1000</code><br><img src="//gitee.com/guoke3915/zw/raw/master/p/7368e5c6/19826068-cf534d6c9e8bdd1f.png" alt></p>
<ol start="4">
<li>时间戳转年月日时分秒<br>修改一下公式就可以了</li>
</ol>
<pre><code class="line-numbers language-txt">=TEXT((B2/1000+8*3600)/86400+70*365+19,&quot;yyyy-mm-dd hh:mm:ss&quot;)</code></pre>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Cocos Creator iOS13 深色模式导致EditBox白色字体看不到</title>
    <url>/p/2509e77b.html</url>
    <content><![CDATA[<ul>
<li>iOS 升级到13后，新出了一个深色模式。然后用Cocos creator开发的软件，用到EditBox输入时，字体的颜色为白色，这样就基本上看不清了。解决办法在ios工程下修改二行代码<a id="more"></a></li>
<li>找到文件<code>jsb-default/frameworks/cocos2d-x/cocos/ui/edit-box/EditBox-ios.mm</code>,找到二处<code>initTextField中</code>添加<code>g_textField.textColor = [UIColor blackColor]</code></li>
</ul>
<pre><code class="line-numbers language-c++">void initTextField(const CGRect&amp; rect, const cocos2d::EditBox::ShowInfo&amp; showInfo)
{
    if (! g_textField)
    {
        g_textField = [[UITextField alloc] initWithFrame:rect];
        [g_textField setBorderStyle:UITextBorderStyleLine];
        // 添加textColor值为黑色
        g_textField.textColor = [UIColor blackColor];

        g_textField.backgroundColor = [UIColor whiteColor];

        ...
    }
}

void initTextView(const CGRect&amp; viewRect, const CGRect&amp; btnRect, const cocos2d::EditBox::ShowInfo&amp; showInfo)
{
    if (!g_textView)
    {
        g_textView = [[UITextView alloc] initWithFrame:btnRect];

        // 添加textColor值为黑色
        g_textView.textColor = [UIColor blackColor]

        // 这里要添加背景色为白色，不然多行输入会有问题
        g_textView.backgroundColor= [UIColor whiteColor]

        g_textViewDelegate = [[TextViewDelegate alloc] init];
        g_textView.delegate = g_textViewDelegate;

        ...
    }
}</code></pre>
]]></content>
      <categories>
        <category>Cocos2d-JS</category>
      </categories>
      <tags>
        <tag>Cocos2djs</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS源修改为阿里云源</title>
    <url>/p/b44e8cf6.html</url>
    <content><![CDATA[<ol>
<li>备份源文件<a id="more"></a>

</li>
</ol>
<pre><code class="line-numbers language-bash">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak</code></pre>
<ol start="2">
<li>查看CentOS版本号</li>
</ol>
<pre><code class="line-numbers language-bash">cat /etc/redhat-release</code></pre>
<ol start="3">
<li>在阿里云镜像库找到符合自己centos版本的镜像源</li>
</ol>
<pre><code class="line-numbers language-bash"># CentOS 5
wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo

# CentOS 6
wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo

# CentOS 7
wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</code></pre>
<ol start="4">
<li>重新加载</li>
</ol>
<pre><code class="line-numbers language-bash">yum clean all
yum makecache </code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7 最小安装不能联网</title>
    <url>/p/920d6eb1.html</url>
    <content><![CDATA[<p>下载了Centos7最小化安装后，发现不能上网，ping 和 ifconfig都不能用</p>
<a id="more"></a>
<ol>
<li>先用ip addr来查看ip，发现看不到ip，应该是网卡没有启动<pre><code class="line-numbers language-bash">[root@localhost ~]# ip addr
1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
 inet 127.0.0.1/8 scope host lo
    valid_lft forever preferred_lft forever
 inet6 ::1/128 scope host 
    valid_lft forever preferred_lft forever
2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
 link/ether 00:0c:29:70:22:8a brd ff:ff:ff:ff:ff:ff</code></pre>
</li>
<li>进入到网络配置文件目录,找到前面在ip addr中看到的网卡为ens33<pre><code class="line-numbers language-bash">[root@localhost  ~]# cd /etc/sysconfig/network-scripts
[root@localhost  network-scripts]# ls
ifcfg-ens33  ifdown-eth   ifdown-post    ifdown-Team      ifup-aliases  ifup-ipv6   ifup-post    ifup-Team      init.ipv6-global
ifcfg-lo     ifdown-ippp  ifdown-ppp     ifdown-TeamPort  ifup-bnep     ifup-isdn   ifup-ppp     ifup-TeamPort  network-functions
ifdown       ifdown-ipv6  ifdown-routes  ifdown-tunnel    ifup-eth      ifup-plip   ifup-routes  ifup-tunnel    network-functions-ipv6
ifdown-bnep  ifdown-isdn  ifdown-sit     ifup             ifup-ippp     ifup-plusb  ifup-sit     ifup-wireless</code></pre>
</li>
<li>修改ifcfg-ens33的文件<br>修改 <code>ONBOOT=&quot;yes&quot;</code>，如查不存在<code>ONBOOT</code>创建一个并赋值为”yes”</li>
<li>重启网络服务，如果在虚拟机中，无法上网，重启一下<pre><code class="line-numbers language-bash">[root@localhost  ~] service network restart</code></pre>
</li>
<li>通过dhcp动态获取IP配置，参考文件<pre><code class="line-numbers language-ini">TYPE=&quot;Ethernet&quot;
PROXY_METHOD=&quot;none&quot;
BROWSER_ONLY=&quot;no&quot;
BOOTPROTO=&quot;dhcp&quot;
DEFROUTE=&quot;yes&quot;
IPV4_FAILURE_FATAL=&quot;no&quot;
IPV6INIT=&quot;yes&quot;
IPV6_AUTOCONF=&quot;yes&quot;
IPV6_DEFROUTE=&quot;yes&quot;
IPV6_FAILURE_FATAL=&quot;no&quot;
IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;
NAME=&quot;ens33&quot;
UUID=&quot;e4b1323f-5a09-46ce-a121-a51dabc1ee7b&quot;
DEVICE=&quot;ens33&quot;
ONBOOT=&quot;yes&quot;</code></pre>
</li>
<li>配置静态IP，参考文件<pre><code class="line-numbers language-ini">TYPE=&quot;Ethernet&quot;
PROXY_METHOD=&quot;none&quot;
BROWSER_ONLY=&quot;no&quot;
BOOTPROTO=&quot;static&quot;
DEFROUTE=&quot;yes&quot;
IPV4_FAILURE_FATAL=&quot;no&quot;
IPV6INIT=&quot;yes&quot;
IPV6_AUTOCONF=&quot;yes&quot;
IPV6_DEFROUTE=&quot;yes&quot;
IPV6_FAILURE_FATAL=&quot;no&quot;
IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;
NAME=&quot;ens33&quot;
UUID=&quot;e4b1323f-5a09-46ce-a121-a51dabc1ee7b&quot;
DEVICE=&quot;ens33&quot;
ONBOOT=&quot;yes&quot;
IPADDR=&quot;192.168.31.55&quot;      # 静态IP 
GATEWAY=&quot;192.168.31.1&quot;    # 默认网关
NETMASK=&quot;255.255.255.0&quot;  # 子网掩码
DNS1=192.168.31.1              # DNS 配置  
DNS2=114.114.114.114         #</code></pre>
</li>
</ol>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>用Siri控制米家智能家电</title>
    <url>/p/1c31d8af.html</url>
    <content><![CDATA[<p>小米的智能设备还是挺多的，前段时间米家更新到4.10后支持Siri快捷了</p>
<a id="more"></a>
<ol>
<li>先在米家里面添加一个手动的智能操作，这里以“关灯”为例<br><img src="//gitee.com/guoke3915/zw/raw/master/p/1c31d8af/19826068-e081d5302a4f8654.png" alt></li>
<li>在米家app中，找到“我的”-&gt;“试验实功能”<br><img src="//gitee.com/guoke3915/zw/raw/master/p/1c31d8af/19826068-1fb179d052f4660c.png" alt></li>
<li>实验室里找到“iOS捷径”<br><img src="//gitee.com/guoke3915/zw/raw/master/p/1c31d8af/19826068-8cae82683e24a09d.png" alt></li>
<li>开启“将米家场景添加到捷径”<br><img src="//gitee.com/guoke3915/zw/raw/master/p/1c31d8af/19826068-c395d6f24a0ceaec.png" alt></li>
<li>回到米家”智能”页面，找到“添加到Siri”<br><img src="//gitee.com/guoke3915/zw/raw/master/p/1c31d8af/19826068-76eb2af763215449.png" alt></li>
<li>将”关灯’添加到Siri’”中<br><img src="//gitee.com/guoke3915/zw/raw/master/p/1c31d8af/19826068-5aedf7c9716f7bf5.png" alt></li>
<li>输入控制语句<br><img src="//gitee.com/guoke3915/zw/raw/master/p/1c31d8af/19826068-36d30499b70b80c4.png" alt></li>
<li>确认添加后，在Siri捷径中可以看到赢添加好了<br><img src="//gitee.com/guoke3915/zw/raw/master/p/1c31d8af/19826068-437c28f983a77f2a.png" alt></li>
<li>唤醒Siri尝试控制，然后灯就光了哈<br><img src="//gitee.com/guoke3915/zw/raw/master/p/1c31d8af/19826068-a1fd8e0a71b53818.png" alt></li>
</ol>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS-内购设置AppStore中`协议、税务和银行`</title>
    <url>/p/ee780a02.html</url>
    <content><![CDATA[<ol>
<li><a href="https://appstoreconnect.apple.com/login" target="_blank" rel="noopener">登录AppStore Connect 中心</a><a id="more"></a>
<img src="//gitee.com/guoke3915/zw/raw/master/p/ee780a02/19826068-b95747d594305ffb.png" alt></li>
<li>用短信或绑定的设备进行双重认证<br><img src="//gitee.com/guoke3915/zw/raw/master/p/ee780a02/19826068-1f3c48727865cc7f.png" alt></li>
<li>同意服务协议<br><img src="//gitee.com/guoke3915/zw/raw/master/p/ee780a02/19826068-175a206980188fa9.png" alt></li>
<li>找到协议、税务和银行业务<br><img src="//gitee.com/guoke3915/zw/raw/master/p/ee780a02/19826068-5a38f161a63e875b.png" alt></li>
<li>免费App已经正常了，付费App点后面操作的<code>查看并同意条款</code><br><img src="//gitee.com/guoke3915/zw/raw/master/p/ee780a02/19826068-b5f60800a44a1d18.png" alt></li>
<li>确认条款后，就会看到<code>设置税务、银行业务和联系信息</code><br><img src="//gitee.com/guoke3915/zw/raw/master/p/ee780a02/19826068-d0ecea0a6be8d707.png" alt></li>
<li>进入付费App中，添加银行账户<br><img src="//gitee.com/guoke3915/zw/raw/master/p/ee780a02/19826068-502b71fea86ce1c9.png" alt></li>
<li>添加新银行账户。这里可以是个人，也可以是公司。如果是公司时，用公司申请邓白氏编码时的英文名；个人的话写名字拼音<br><img src="//gitee.com/guoke3915/zw/raw/master/p/ee780a02/19826068-82ed9c2e8950ab9b.png" alt></li>
<li>这里有一个银行的CNAPS码，这是大陆地区每个银行的银联收款号，用苹果自带的查询都是英雄输入太麻烦的，这里用第三方<a href="https://www.lianhanghao.com" target="_blank" rel="noopener">联行号网</a>查询</li>
<li>确认后会显示银行信息<br><img src="//gitee.com/guoke3915/zw/raw/master/p/ee780a02/19826068-7f776f53c67f4e95.png" alt></li>
<li>继续往下拉，添加<code>选择报税表</code><br><img src="//gitee.com/guoke3915/zw/raw/master/p/ee780a02/19826068-b32dc37ab8d5613c.png" alt></li>
<li>报税表选择<code>美国</code><br><img src="//gitee.com/guoke3915/zw/raw/master/p/ee780a02/19826068-cc84c6729c764d7b.png" alt></li>
<li>填写美国报税表<br><img src="//gitee.com/guoke3915/zw/raw/master/p/ee780a02/19826068-05560726575ffdef.png" alt></li>
<li>美国税务居民，选择<code>否</code><br><img src="//gitee.com/guoke3915/zw/raw/master/p/ee780a02/19826068-ea42973ac7f94943.png" alt></li>
<li>美国是否有商业活动，选择<code>否</code><br><img src="//gitee.com/guoke3915/zw/raw/master/p/ee780a02/19826068-8afd2a7f0e1c8968.png" alt></li>
<li>查看自己的基本信息<br><img src="//gitee.com/guoke3915/zw/raw/master/p/ee780a02/19826068-ac84cc61ad6e65ff.png" alt></li>
<li>确认信息，然后在Title中输入英文签名<br><img src="//gitee.com/guoke3915/zw/raw/master/p/ee780a02/19826068-1f633e8d9d6ab1b9.png" alt></li>
<li>确认报税表信息，填写Date of Birth生日就好了，其他的可以不填<br><img src="//gitee.com/guoke3915/zw/raw/master/p/ee780a02/19826068-55917f7bfb5773a1.png" alt></li>
<li>Part II: Claim of Tax Treaty Benefits (If Applicable) 勾选就行了，其他可以留空<br><img src="//gitee.com/guoke3915/zw/raw/master/p/ee780a02/19826068-ef64e3b4ea00ef29.png" alt></li>
<li>Part III: Certification中确认信息，并签名。最后提交<br><img src="//gitee.com/guoke3915/zw/raw/master/p/ee780a02/19826068-6e6082e6a7f88d56.png" alt></li>
<li>回到协议、税务和银行业务页面，状态切换成了设置<code>联系信息</code><br><img src="//gitee.com/guoke3915/zw/raw/master/p/ee780a02/19826068-4c36658e1e896bab.png" alt></li>
<li>添加联系信息<br><img src="//gitee.com/guoke3915/zw/raw/master/p/ee780a02/19826068-a683bacabd62d65e.png" alt></li>
<li>完成后，回到协议、税务和银行业务页面，状态切换成了<code>有效</code><br><img src="//gitee.com/guoke3915/zw/raw/master/p/ee780a02/19826068-8b5145cfaf943cf1.png" alt></li>
</ol>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB备份、恢复</title>
    <url>/p/e405ffa9.html</url>
    <content><![CDATA[<h2 id="备份数据库"><a href="#备份数据库" class="headerlink" title="备份数据库"></a>备份数据库</h2><a id="more"></a>
<pre><code class="line-numbers language-bash">mongodump -h 地址 --port 端口 -u 用户名 -p 密码 -d 数据库 -o 导出文件目录 --authenticationDatabase admim 授权认证数据库</code></pre>
<ul>
<li>如果是本地服务器，默认<code>27017</code>端口时，可以战斗力<code>-h</code> 和<code>-d</code> 参数</li>
<li>如果要导出整个库时，可以不在<code>-d</code>参数</li>
<li>如果用户是<code>-d</code>数据库的用户可以不加<code>authenticationDatabase admim</code>，如果出现 Authentication failed验证失败时，需要加上<code>--authenticationDatabase admim</code> 授权认证数据库</li>
<li>导出的数据，每个库为一个目录，每张表二个文件，一个json是结构，一个bson是数据<pre><code class="line-numbers language-bash">mongodump -uroot -p123456 -d Test -o /data/db/ --authenticationDatabase admin</code></pre>
</li>
</ul>
<h2 id="恢复数据库"><a href="#恢复数据库" class="headerlink" title="恢复数据库"></a>恢复数据库</h2><pre><code class="line-numbers language-bash">mongorestore -h 地址 --port 端口 -u 用户名 -p 密码 -d 数据库 --drop 导入文件目录 --authenticationDatabase admin</code></pre>
<p>–drop 导入的是备份的数据库目录</p>
<pre><code class="line-numbers language-bash">mongorestore -uroot -p123456 -d Test --drop /data/db/Test</code></pre>
<h2 id="导出表、或者部分字段"><a href="#导出表、或者部分字段" class="headerlink" title="导出表、或者部分字段"></a>导出表、或者部分字段</h2><pre><code class="line-numbers language-bash">mongoexport -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 -c 表名 -q 条件判断 -f 字段 --authenticationDatabase admin</code></pre>
<ul>
<li>-q 可以根查询条件导出，<code>-q &#39;{_id:{$gt:100}}&#39;</code>导出_id大于100的数据</li>
<li>-f 导出指字段，以字号分割，<code>-f _id,name,age</code>导出<code>id,name,age</code>这三个字段</li>
<li>–csv 表示导出的文件格式为csv的</li>
</ul>
<ol>
<li>导出整张表<pre><code class="line-numbers language-bash">mongoexport -uroot -p123456 -d Test -c Users -o /data/db/Test/Users.dat</code></pre>
</li>
<li>导出表中部分字段<pre><code class="line-numbers language-bash">mongoexport -uroot -p123456 -d Test -c Users --csv  -f _id,name,age -o /data/db/Test/Users.csv</code></pre>
</li>
<li>根据条件敢出数据<pre><code class="line-numbers language-bash">mongoexport -uroot -p123456 -d Test -c Users -q &#39;{_id:{$gt:100}}&#39; -o /data/db/Test/Users.json</code></pre>
<h2 id="导入表，或者表中部分字段"><a href="#导入表，或者表中部分字段" class="headerlink" title="导入表，或者表中部分字段"></a>导入表，或者表中部分字段</h2></li>
<li>还原整表导出的非csv文件<pre><code class="line-numbers language-bash">mongoimport -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 -c 表名 --upsert --drop 文件名 --authenticationDatabase admin</code></pre>
</li>
</ol>
<ul>
<li>–upsert 插入或者更新现有数据<pre><code class="line-numbers language-bash">mongoimport -uroot -p123456 -d Test -c Users  --upsert /data/db/Test/Users.dat</code></pre>
</li>
</ul>
<ol start="2">
<li>还原部分字段的导出文件<pre><code class="line-numbers language-bash">mongoimport -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 -c 表名 --upsertFields 字段 --drop 文件名 --authenticationDatabase admin</code></pre>
</li>
</ol>
<ul>
<li>–upsertFields根–upsert一样<pre><code class="line-numbers language-bash">mongoimport -uroot -p123456 -d Test -c Users  --upsertFields _id,name,age  /data/db/Test/Users.dat</code></pre>
</li>
</ul>
<ol start="3">
<li>还原csv文件<pre><code class="line-numbers language-bash">mongoimport -h IP --port 端口 -u 用户名 -p 密码 -d 数据库 -c 表名 --type 类型 --headerline --upsert --drop 文件名 --authenticationDatabase admin</code></pre>
</li>
</ol>
<ul>
<li>–type 文件类型<pre><code class="line-numbers language-bash">mongoimport -uroot -p123456 -d Test -c Users --type csv --headerline --file /data/db/Test/Users.csv</code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>EXCEL中计算大于且小于特定值的个数</title>
    <url>/p/f259511a.html</url>
    <content><![CDATA[<ul>
<li>比如有表<br><img src="//gitee.com/guoke3915/zw/raw/master/p/f259511a/19826068-23161e0a9826a514.png" alt></li>
<li>我们要统计A列中，大于5且小于10的值的个数</li>
<li>选择一个空白表格中，输入以下公式<pre><code class="line-numbers language-none">=COUNTIFS(L24:L33,&quot;&gt;=14&quot;,L24:L33,&quot;&lt;=17&quot;)</code></pre>
<img src="//gitee.com/guoke3915/zw/raw/master/p/f259511a/19826068-415be0b246435c52.png" alt></li>
</ul>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 关闭selinux</title>
    <url>/p/c2b74a9a.html</url>
    <content><![CDATA[<ol>
<li>要关掉selinux，首先要查看它是否运行。输入<code>/usr/sbin/sestatus -v</code>查看状态<a id="more"></a>

</li>
</ol>
<pre><code class="line-numbers language-bash">[root@localhost ~]# /usr/sbin/sestatus -v
SELinux status:                 enabled
SELinuxfs mount:                /sys/fs/selinux
SELinux root directory:         /etc/selinux
Loaded policy name:             targeted
Current mode:                   enforcing
Mode from config file:          enforcing
Policy MLS status:              enabled
Policy deny_unknown status:     allowed
Max kernel policy version:      31

Process contexts:
Current context:                unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
Init context:                   system_u:system_r:init_t:s0
/usr/sbin/sshd                  system_u:system_r:sshd_t:s0-s0:c0.c1023

File contexts:
Controlling terminal:           unconfined_u:object_r:user_devpts_t:s0
/etc/passwd                     system_u:object_r:passwd_file_t:s0
/etc/shadow                     system_u:object_r:shadow_t:s0
/bin/bash                       system_u:object_r:shell_exec_t:s0
/bin/login                      system_u:object_r:login_exec_t:s0
/bin/sh                         system_u:object_r:bin_t:s0 -&gt; system_u:object_r:shell_exec_t:s0
/sbin/agetty                    system_u:object_r:getty_exec_t:s0
/sbin/init                      system_u:object_r:bin_t:s0 -&gt; system_u:object_r:init_exec_t:s0
/usr/sbin/sshd                  system_u:object_r:sshd_exec_t:s0</code></pre>
<p>SELinux status:<br>    * enabled就是开启的;<br>    * disabled就是关闭</p>
<ol start="2">
<li>开启的时候我们还需要看它的模式(Current mode),它有三种模式<ul>
<li>enforcing：强制模式，代表 SELinux 运作中，且已经正确的开始限制 domain/type 了； </li>
<li>permissive：宽容模式：代表 SELinux 运作中，不过仅会有警告讯息并不会实际限制 domain/type 的存取。 </li>
<li>disabled：关闭，SELinux 并没有实际运作。<br>在不重系统的情况下就是将模式改为<code>permissive</code></li>
</ul>
</li>
</ol>
<pre><code class="line-numbers language-bash">setenforce 0</code></pre>
<p>但是，这样关掉会有一个问题，就是系统重起后，会恢复为enforcing模式，所以还需要修改配置文件<br>3. 修改配置文件重启系统关闭selinux<br>修改<code>/etc/selinux/config</code> 文件。将<code>SELINUX=enforcing</code> 改为<code>SELINUX=disable</code> </p>
<pre><code class="line-numbers language-bash">vim /etc/selinux/config

# This file controls the state of SELinux on the system.
# SELINUX= can take one of these three values:
#     enforcing - SELinux security policy is enforced.
#     permissive - SELinux prints warnings instead of enforcing.
#     disabled - No SELinux policy is loaded.
SELINUX=disabled
# SELINUXTYPE= can take one of three values:
#     targeted - Targeted processes are protected,
#     minimum - Modification of targeted policy. Only selected processes are protected. 
#     mls - Multi Level Security protection.
SELINUXTYPE=targeted</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7 安装Docker</title>
    <url>/p/39d97234.html</url>
    <content><![CDATA[<h2 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h2><pre><code class="line-numbers language-bash">## 确保 yum 包更新到最新。
sudo yum -y update

## 卸载旧版本
sudo yum remove docker  docker-common docker-selinux docker-engine
&lt;!-- more --&gt;
## 安装需要的软件包
sudo yum install -y yum-utils device-mapper-persistent-data lvm2 

## 安装container-selinux
yum  install -y http://mirror.centos.org/centos/7/extras/x86_64/Packages/container-selinux-2.107-1.el7_6.noarch.rpm

## 设置yum源
sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

## 安装
sudo yum -y install docker-ce

## 设置开机启动
sudo systemctl enable docker

## 启动docker
sudo systemctl start docker

## 显示版本
docker version</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 离线安装Nginx</title>
    <url>/p/26517669.html</url>
    <content><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>在一些无法联网的内网环境中安装Nginx。</p>
<ul>
<li><p>CentOS 7系统安装的时候勾选安装环境，如果没有安装可以<a href="/p/4fb2868f">挂载系统光盘</a>使用</p>
<a id="more"></a>
<pre><code class="line-numbers language-bash">sudo yum groupinstall -y Development Tools</code></pre>
</li>
<li><p>下载zlib、pcre和nginx复制到系统目录中</p>
<p>pcre-8.35.tar.gz 下载地址:<br><a href="http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz" target="_blank" rel="noopener">http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz</a></p>
<p> zlib-devel-1.2.7-18.el7.x86_64.rpm 下载地址:<br><a href="http://mirror.centos.org/centos/7/os/x86_64/Packages/zlib-devel-1.2.7-18.el7.i686.rpm" target="_blank" rel="noopener">http://mirror.centos.org/centos/7/os/x86_64/Packages/zlib-devel-1.2.7-18.el7.i686.rpm</a></p>
<p>nginx-1.17.3.tar.gz 下载地址：<br><a href="http://nginx.org/download/nginx-1.17.3.tar.gz" target="_blank" rel="noopener">http://nginx.org/download/nginx-1.17.3.tar.gz</a></p>
</li>
</ul>
<h2 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h2><p>将脚本和所有包放到同一目录中</p>
<pre><code class="line-numbers language-bash">#!/bin/bash

# 安装zlib
## wget http://mirror.centos.org/centos/7/os/x86_64/Packages/zlib-devel-1.2.7-18.el7.i686.rpm
rpm -ivh zlib-devel-1.2.7-18.el7.x86_64.rpm

# 安装pcre
## wget http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz
tar zxf pcre-8.35.tar.gz
cd pcre-8.35
./configure
make &amp;&amp; make install

# 安装Nginx
tar zxf nginx-1.17.3.tar.gz
## http://nginx.org/download/nginx-1.17.3.tar.gz

## 配置
cd nginx-1.17.3
./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre=/usr/local/src/pcre-8.35

## 编译安装
make &amp;&amp; make install

## 创建mongodb服务
echo &quot;[Unit]

Description=nginx 
After=network.target remote-fs.target nss-lookup.target

[Service]
Type=forking
ExecStart=/usr/local/nginx/sbin/nginx
ExecReload=/usr/local/nginx/sbin/nginx -s reopen
ExecStop=/usr/local/nginx/sbin/nginx -s stop
PrivateTmp=true

[Install]
WantedBy=multi-user.target&quot; &gt; /lib/systemd/system/nginx.service

## 服务启动
systemctl enable nginx.service
systemctl start nginx.service</code></pre>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>Nginx的安装目录在<code>/usr/local/nginx</code><br>配置文件在<code>/usr/local/nginx/conf/nginx.conf</code></p>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux获取sh文件所在路径</title>
    <url>/p/16cfe3a6.html</url>
    <content><![CDATA[<pre><code class="line-numbers language-bash">basepath=$(cd `dirname $0`; pwd)
echo $basepath</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 安装开发者环境</title>
    <url>/p/b1016384.html</url>
    <content><![CDATA[<p>系统在安装的时候有勾选“开发者环境”选项，但是，如果以最小安装的话，是不包含开发者环境的。等到用到的时候，一个包一个包的安装有点麻烦。所以可以直接安装开发者环境</p>
<a id="more"></a>
<ol>
<li>查看群组安装源数数量<pre><code class="line-numbers language-bash">[root@localhost ~]# yum group list | grep Development
Development and Creative Workstation
Development Tools</code></pre>
</li>
<li>安装Development Tools包<pre><code class="line-numbers language-bash">sudo yum groupinstall -y Development Tools</code></pre>
</li>
</ol>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 中yum从本地光盘安装软件</title>
    <url>/p/4fb2868f.html</url>
    <content><![CDATA[<ol>
<li>挂载光驱</li>
</ol>
<pre><code class="line-numbers language-bash">mkdir /media/cdrom
mount /dev/cdrom /media/cdrom</code></pre>
<a id="more"></a>
<ol start="2">
<li>找到yum的源配置文件路径</li>
</ol>
<pre><code class="line-numbers language-bash">cd /etc/yum.repos.d/</code></pre>
<ol start="3">
<li>这个目录下默认应该有很多文件，例如</li>
</ol>
<pre><code class="line-numbers language-bash">-rw-r--r--. 1 root root 1664 9月   5 21:05 CentOS-Base.repo
-rw-r--r--. 1 root root 1309 9月   5 21:05 CentOS-CR.repo
-rw-r--r--. 1 root root  649 9月   5 21:05 CentOS-Debuginfo.repo
-rw-r--r--. 1 root root  314 9月   5 21:05 CentOS-fasttrack.repo
-rw-r--r--. 1 root root  630 9月   5 21:05 CentOS-Media.repo
-rw-r--r--. 1 root root 1331 9月   5 21:05 CentOS-Sources.repo
-rw-r--r--. 1 root root 6639 9月   5 21:05 CentOS-Vault.repo</code></pre>
<ol start="4">
<li>这些文件中CentOS-Media.repo就是和光驱有关的源，将这个文件保留，其他文件都重命名一下（不要以repo为后缀名即可）。</li>
</ol>
<pre><code class="line-numbers language-bash">mv CentOS-Base.repo CentOS-Base.repo.disable
mv CentOS-CR.repo CentOS-CR.repo.disable
mv CentOS-Debuginfo.repo CentOS-Debuginfo.repo.disable
mv CentOS-fasttrack.repo CentOS-fasttrack.repo.disable
mv CentOS-Sources.repo CentOS-Sources.repo.disable
mv CentOS-Vault.repo CentOS-Vault.repo.disable</code></pre>
<ol start="5">
<li>如果没有CentOS-Media.repo这个文件，就手动创建一个，内容如下，如果存在，修改<code>enabled=1</code></li>
</ol>
<pre><code class="line-numbers language-bash">[c7-media]
name=CentOS-$releasever - Media
baseurl=file:///media/CentOS/
        file:///media/cdrom/
        file:///media/cdrecorder/
gpgcheck=1
enabled=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</code></pre>
<ol start="6">
<li>清除yum缓存</li>
</ol>
<pre><code class="line-numbers language-bash">yum clean all</code></pre>
<ol start="7">
<li>使用yum安装，如：</li>
</ol>
<pre><code class="line-numbers language-bash">yum install -y vim</code></pre>
<ol start="8">
<li>安装完成，如果改为网络安装，将前面的repo.disable改回来</li>
</ol>
<pre><code class="line-numbers language-bash">mv CentOS-Base.repo.disable CentOS-Base.repo
mv CentOS-CR.repo.disable CentOS-CR.repo
mv CentOS-Debuginfo.repo.disable CentOS-Debuginfo.repo
mv CentOS-fasttrack.repo.disable CentOS-fasttrack.repo
mv CentOS-Sources.repo.disable CentOS-Sources.repo
mv CentOS-Vault.repo.disable CentOS-Vault.repo</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu中Error: Can&#39;&#39;t find Python executable &quot;python&quot;, you can set the PYTHON env variable</title>
    <url>/p/71df779c.html</url>
    <content><![CDATA[<h3 id="Ubuntu中在用npm-install-时报错"><a href="#Ubuntu中在用npm-install-时报错" class="headerlink" title="Ubuntu中在用npm install 时报错"></a>Ubuntu中在用<code>npm install</code> 时报错</h3><a id="more"></a>
<pre><code class="line-numbers language-bash">gyp WARN download NVM_NODEJS_ORG_MIRROR is deprecated and will be removed in node-gyp v4, please use NODEJS_ORG_MIRROR
gyp ERR! configure error 
gyp ERR! stack Error: Can&#39;t find Python executable &quot;python&quot;, you can set the PYTHON env variable.
gyp ERR! stack     at PythonFinder.failNoPython (/home/nvm/versions/node/v10.16.3/lib/node_modules/npm/node_modules/node-gyp/lib/configure.js:484:19)
gyp ERR! stack     at PythonFinder.&lt;anonymous&gt; (/home/nvm/versions/node/v10.16.3/lib/node_modules/npm/node_modules/node-gyp/lib/configure.js:406:16)
gyp ERR! stack     at F (/home/nvm/versions/node/v10.16.3/lib/node_modules/npm/node_modules/which/which.js:68:16)
gyp ERR! stack     at E (/home/nvm/versions/node/v10.16.3/lib/node_modules/npm/node_modules/which/which.js:80:29)
gyp ERR! stack     at /home/nvm/versions/node/v10.16.3/lib/node_modules/npm/node_modules/which/which.js:89:16
gyp ERR! stack     at /home/nvm/versions/node/v10.16.3/lib/node_modules/npm/node_modules/isexe/index.js:42:5
gyp ERR! stack     at /home/nvm/versions/node/v10.16.3/lib/node_modules/npm/node_modules/isexe/mode.js:8:5
gyp ERR! stack     at FSReqWrap.oncomplete (fs.js:153:21)
gyp ERR! System Linux 4.15.0-65-generic
gyp ERR! command &quot;/home/nvm/versions/node/v10.16.3/bin/node&quot; &quot;/home/nvm/versions/node/v10.16.3/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js&quot; &quot;rebuild&quot;
gyp ERR! cwd /www/express-ffmpeg/node_modules/canvas
gyp ERR! node -v v10.16.3
gyp ERR! node-gyp -v v3.8.0
gyp ERR! not ok </code></pre>
<h3 id="解决办法是安装python"><a href="#解决办法是安装python" class="headerlink" title="解决办法是安装python"></a>解决办法是安装python</h3><pre><code class="line-numbers language-bash">sudo apt install python2.7
sudo npm config set python /usr/bin/python2.7</code></pre>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>ERROR</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 安装 Redis</title>
    <url>/p/edd98c69.html</url>
    <content><![CDATA[<ol>
<li>下载解压Redis<pre><code class="line-numbers language-bash">cd /home
wget http://download.redis.io/redis-stable.tar.gz
tar xvzf redis-stable.tar.gz</code></pre>
<a id="more"></a></li>
<li>编译<pre><code class="line-numbers language-bash">cd redis-stable
make</code></pre>
</li>
<li>复制到path目录<pre><code class="line-numbers language-bash">sudo cp src/redis-server /usr/local/bin/
sudo cp src/redis-cli /usr/local/bin/</code></pre>
</li>
<li>启动<pre><code class="line-numbers language-bash">redis-server &amp;</code></pre>
</li>
</ol>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS-7中离线安装MongoDB</title>
    <url>/p/65eba897.html</url>
    <content><![CDATA[<h2 id="一键安装脚本"><a href="#一键安装脚本" class="headerlink" title="一键安装脚本"></a>一键安装脚本</h2><a id="more"></a>
<pre><code class="line-numbers language-bash">#!/bin/bash

# 下载mongdb
# wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.13.tgz

## 解压
tar zxf mongodb-linux-x86_64-4.0.13.tgz
mv ./mongodb-linux-x86_64-4.0.13/ /usr/local/mongodb

## 创建全局链接
ln -s /usr/local/mongodb/bin/mongo /usr/local/bin/mongo
ln -s /usr/local/mongodb/bin/mongod /usr/local/bin/mongod

## mongodb 数据库配置
mkdir -p /data/db
mkdir -p /data/log

## 创建mongod.conf配置
echo &quot;systemLog:
  destination: file
  logAppend: true
  path: /data/log/mongodb.log # 日志文件
storage:
  dbPath: /data/db  # 数据目录
  journal:
    enabled: true
processManagement:
  fork: true  # fork and run in background
  timeZoneInfo: /usr/share/zoneinfo
net:
  port: 27017      # 端口
  bindIp: 0.0.0.0 # 绑定IP&quot; &gt; /usr/local/mongodb/bin/mongod.conf

## 创建mongodb服务
echo &quot;[Unit]

Description=mongodb 
After=network.target remote-fs.target nss-lookup.target

[Service]
Type=forking
ExecStart=/usr/local/mongodb/bin/mongod --config /usr/local/mongodb/bin/mongod.conf
ExecReload=/bin/kill -s HUP $MAINPID
ExecStop=/usr/local/mongodb/bin/mongod --shutdown --config /usr/local/mongodb/bin/mongod.conf
PrivateTmp=true

[Install]
WantedBy=multi-user.target&quot; &gt; /lib/systemd/system/mongodb.service

## 启动服务
mongod --dbpath /data/db --fork --logpath /data/log/mongodb.log

## 创建帐号
read -p &quot;输入root账号密码:&quot; password
mongo admin --eval &quot;db.createUser({ user: &#39;root&#39;, pwd: &#39;$password&#39;, roles: [ { role: &#39;root&#39;, db: &#39;admin&#39; } , &#39;readWriteAnyDatabase&#39;] })&quot;

## 关闭 mongodb 服务
ID=`ps -ef | grep &quot;mongod&quot; | grep -v &quot;grep&quot; | awk &#39;{print $2}&#39;`
for id in $ID
do
    if [ &quot;$BASHPID&quot; -ne &quot;$id&quot; ]
    then
        kill -9 $id  &amp;&gt;/dev/null
    fi
done

## 服务启动
systemctl start mongodb.service
systemctl enable mongodb.service</code></pre>
<h2 id="步骤说明"><a href="#步骤说明" class="headerlink" title="步骤说明"></a>步骤说明</h2><ol>
<li>去<a href="https://www.mongodb.com/download-center/community" target="_blank" rel="noopener">MongoDB官网</a>下载适合的版本，这里下的是<pre><code class="line-numbers language-bash">https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.13.tgz</code></pre>
</li>
<li>上传到CentOS服务器上。</li>
<li>解压<pre><code class="line-numbers language-bash">tar zxf mongodb-linux-x86_64-4.0.13.tgz
mv ./mongodb-linux-x86_64-4.0.13/ /usr/local/mongodb</code></pre>
</li>
<li>创建全局链接<pre><code class="line-numbers language-bash">cd /usr/local/mongodb/
ln -s /usr/local/mongodb/bin/mongo /usr/local/bin/mongo
ln -s /usr/local/mongodb/bin/mongod /usr/local/bin/mongod</code></pre>
</li>
<li>mongodb 数据库配置<br>进入根目录创建 data 文件夹，在 data 中再创建 db 文件夹和 log 文件夹<pre><code class="line-numbers language-bash">mkdir -p /data/db
mkdir -p /data/log</code></pre>
</li>
<li>启动mongodb 服务<pre><code class="line-numbers language-bash">mongod --dbpath /data/db --fork --logpath /data/log/mongodb.log</code></pre>
</li>
<li>创建帐号<pre><code class="line-numbers language-bash">mongo admin --eval &quot;db.createUser({ user: &#39;root&#39;, pwd: &#39;123456&#39;, roles: [ { role: &#39;root&#39;, db: &#39;admin&#39; } , &#39;readWriteAnyDatabase&#39;] })&quot;</code></pre>
</li>
<li>关闭 mongodb 服务<pre><code class="line-numbers language-bash">ps -ef|grep mongo 
root 11737 1 0 09:25 ? 00:00:01 mongod --dbpath /data/db --fork --logpath /data/log/mongodb.log 
root 11771 3220 0 09:29 pts/1 00:00:00 grep --color=auto mongo
kill 11737</code></pre>
</li>
<li>创建mongod.conf配置</li>
</ol>
<pre><code class="line-numbers language-bash">vi /usr/local/mongodb/bin/mongod.conf</code></pre>
<p>写入内容</p>
<pre><code class="line-numbers language-yaml">systemLog:
  destination: file
  logAppend: true
  path: /data/log/mongodb.log # 日志文件
storage:
  dbPath: /data/db  # 数据目录
  journal:
    enabled: true
processManagement:
  fork: true  # fork and run in background
  timeZoneInfo: /usr/share/zoneinfo
net:
  port: 27017      # 端口
  bindIp: 0.0.0.0 # 绑定IP</code></pre>
<ol start="10">
<li>创建mongodb服务</li>
</ol>
<pre><code class="line-numbers language-bash">vi /lib/systemd/system/mongodb.service</code></pre>
<p>输入以下内容并保存</p>
<pre><code class="line-numbers language-ini">[Unit]

Description=mongodb 
After=network.target remote-fs.target nss-lookup.target

[Service]
Type=forking
ExecStart=/usr/local/mongodb/bin/mongod --config /usr/local/mongodb/bin/mongod.conf
ExecReload=/bin/kill -s HUP $MAINPID
ExecStop=/usr/local/mongodb/bin/mongod --shutdown --config /usr/local/mongodb/bin/mongod.conf
PrivateTmp=true

[Install]
WantedBy=multi-user.target</code></pre>
<ol start="11">
<li>服务启动</li>
</ol>
<pre><code class="line-numbers language-bash"># 启动服务：
systemctl start mongodb.service

#停止服务：
systemctl stop mongodb.service

#开机启动：
systemctl enable mongodb.service</code></pre>
]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu18.04从apt-get安装MongoDB.4.0</title>
    <url>/p/355346b3.html</url>
    <content><![CDATA[<h2 id="一键安装脚本"><a href="#一键安装脚本" class="headerlink" title="一键安装脚本"></a>一键安装脚本</h2><a id="more"></a>
<pre><code class="line-numbers language-bash">#!/bin/bash
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 68818C72E52529D4

sudo echo &quot;deb http://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.0 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-4.0.list

sudo apt-get update
sudo apt-get install -y mongodb-org

cd /
mkdir data
cd data
mkdir db
mkdir log

mongod --dbpath /data/db --fork --logpath /data/log/mongodb.log

read -p &quot;Enter your account:&quot; account
read -p &quot;Enter your password:&quot; password
mongo --eval &quot;use admin;db.createUser({user:&#39;$account&#39;,pwd:&#39;$password&#39;,roles: [ { role: &quot;root&quot;, db: &quot;admin&quot; } ] });&quot;

ID=`ps -ef | grep &quot;mongod&quot; | grep -v &quot;grep&quot; | awk &#39;{print $2}&#39;`
for id in $ID
do
kill -9 $id
done

mongod -auth --dbpath /data/db --fork --logpath /data/log/mongodb.log</code></pre>
<h2 id="步骤说明"><a href="#步骤说明" class="headerlink" title="步骤说明"></a>步骤说明</h2><ol>
<li>添加mongodb签名到APT<pre><code class="line-numbers language-bash">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 68818C72E52529D4</code></pre>
</li>
<li>创建列表文件<pre><code class="line-numbers language-bash">sudo echo &quot;deb http://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.0 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-4.0.list</code></pre>
</li>
<li>更新软件源列表<pre><code class="line-numbers language-bash">sudo apt-get update</code></pre>
</li>
<li>安装mongodb（默认是安装稳定版）<pre><code class="line-numbers language-bash">sudo apt-get install -y mongodb-org</code></pre>
</li>
<li>mongodb 数据库配置<br>进入根目录创建 data 文件夹，在 data 中再创建 db 文件夹和 log 文件夹<pre><code class="line-numbers language-bash">cd /
mkdir data
cd data
mkdir db
mkdir log</code></pre>
</li>
<li>启动mongodb 服务<pre><code class="line-numbers language-bash">mongod --dbpath /data/db --fork --logpath /data/log/mongodb.log</code></pre>
</li>
<li>创建帐号<pre><code class="line-numbers language-bash">mongo
use admin
db.createUser({ user: &quot;root&quot;, pwd: &quot;123456&quot;, roles: [ { role: &quot;root&quot;, db: &quot;admin&quot; } ] })
db.auth(&quot;root&quot;,&quot;123456&quot;)
exit</code></pre>
</li>
<li>关闭 mongodb 服务<pre><code class="line-numbers language-bash">ps -ef|grep mongo
root      11737      1  0 09:25 ?        00:00:01 mongod --dbpath /data/db --fork --logpath /data/log/mongodb.log
root      11771   3220  0 09:29 pts/1    00:00:00 grep --color=auto mongo
kill 11737</code></pre>
</li>
<li>权限验证方式重新启动<pre><code class="line-numbers language-bash">mongod -auth --dbpath /data/db --fork --logpath /data/log/mongodb.log</code></pre>
</li>
</ol>
]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu安装npm(nodejs)环境</title>
    <url>/p/b387666f.html</url>
    <content><![CDATA[<h2 id="一键安装脚本"><a href="#一键安装脚本" class="headerlink" title="一键安装脚本"></a>一键安装脚本</h2><a id="more"></a>
<pre><code class="line-numbers language-bash">#!/bin/bash
sudo apt-get -y install build-essential
cd /home
git clone https://github.com/cnpm/nvm.git
source /home/nvm/nvm.sh
echo &quot;source /home/nvm/nvm.sh&quot; &gt;&gt; ~/.bashrc
nvm install 10.16.3
nvm alias default v10.16.3</code></pre>
<h2 id="步骤说明"><a href="#步骤说明" class="headerlink" title="步骤说明"></a>步骤说明</h2><ol>
<li>安装C/C++的编译环境<pre><code class="line-numbers language-bash">sudo apt-get -y install build-essential</code></pre>
</li>
<li>使用git下载mvn<pre><code class="line-numbers language-bash">cd /home
git clone https://github.com/cnpm/nvm.git</code></pre>
</li>
<li>添加到环境变量中<pre><code class="line-numbers language-bash">source /home/nvm/nvm.sh
echo &quot;source /home/nvm/nvm.sh&quot; &gt;&gt; ~/.bashrc</code></pre>
</li>
<li>查看最近 nodejs 稳定版本号，前往 nodejs 官网，查看稳定版本号。这里用v10.16.3<pre><code class="line-numbers language-bash">nvm install 10.16.3
nvm alias default v10.16.3</code></pre>
</li>
</ol>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>pm2查看错误日志</title>
    <url>/p/a64f964.html</url>
    <content><![CDATA[<h2 id="查看某个pm2任务的日志"><a href="#查看某个pm2任务的日志" class="headerlink" title="查看某个pm2任务的日志"></a>查看某个pm2任务的日志</h2><ol>
<li>使用<code>pm2 list</code> 查看当前运行的任务<a id="more"></a>
<pre><code class="line-numbers language-bash">root@adc:/www/# pm2 list
┌────┬─────────────────────────┬─────────┬─────────┬──────────┬────────┬──────┬──────────┬──────────┬──────────┬──────────┬──────────┐
│ id │ name                    │ version │ mode    │ pid      │ uptime │ ↺    │ status   │ cpu      │ mem      │ user     │ watching │
├────┼─────────────────────────┼─────────┼─────────┼──────────┼────────┼──────┼──────────┼──────────┼──────────┼──────────┼──────────┤
│ 0  │ www                     │ 0.0.0   │ cluster │ 26057    │ 2D     │ 240  │ online   │ 0.3%     │ 101.5mb  │ root     │ disabled │
└────┴─────────────────────────┴─────────┴─────────┴──────────┴────────┴──────┴──────────┴──────────┴──────────┴──────────┴──────────┘</code></pre>
</li>
<li>使用<code>pm2 log 任务名</code>如：<pre><code class="line-numbers language-bash">root@adc:/www/# pm2 log www</code></pre>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Ubuntu</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下Nginx防盗链设置</title>
    <url>/p/fbb066b3.html</url>
    <content><![CDATA[<h2 id="修改Nginx网站的配置"><a href="#修改Nginx网站的配置" class="headerlink" title="修改Nginx网站的配置"></a>修改Nginx网站的配置</h2><ol>
<li>首先找到<code>nginx.conf</code>文件，找到文件中的server{} 虚拟机配置<a id="more"></a></li>
<li>在server虚拟机配置内添加如下代码</li>
</ol>
<pre><code class="line-numbers language-bash">   location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|mp4)$ {
           root /www/html/;
           expires 24h;
           access_log off;
           valid_referers none blocked *.abc.com 192.168.1.55; 
           if ($invalid_referer) {
               return 403; 
           }
       } </code></pre>
<ol start="3">
<li><p>解析</p>
<ul>
<li><code>\.(gif|jpg|jpeg|png|bmp|swf|mp4)</code> 这是启用防盗链的文件扩展名</li>
<li><code>root /www/html/;</code> 文件转发目录</li>
<li><code>expires 24h;</code> 在客户浏览器缓存24小时，如果是天，可以用<code>expires 30d;</code> </li>
<li><code>access_log off;</code> 不写入日志文件中</li>
<li><code>valid_referers none blocked *.abc.com 192.168.1.55;</code> 允许访问的域名站点或IP，如果多个地址用空格隔开，支持域名泛解析</li>
<li>`if ($invalid_referer) {<pre><code>        return 403; 
          }` </code></pre></li>
</ul>
<p>除了允许直接访问的域名外，其他域名直接返回403，也可以直接返回一个指定的网址<code>rewrite ^/ http://abc.com/ima/a.jpg;</code></p>
</li>
<li><p>遗留问题</p>
<p>如上配置，有一图片地址为<code>http://a.abc.com/a.jpg</code>,如果有一有<code>def.com</code>网站解析到<code>abc.com</code>时无法防问，但是，如果直接引用<code>http://a.abc.com/a.jpg</code>是可以访问的</p>
</li>
</ol>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10 安装 MongoDB</title>
    <url>/p/3172944f.html</url>
    <content><![CDATA[<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>直接去MongoDB官网下载windows版本，直接安装</p>
<a id="more"></a>
<h2 id="创建MongoDB服务"><a href="#创建MongoDB服务" class="headerlink" title="创建MongoDB服务"></a>创建MongoDB服务</h2><p>安装之后，打开cmd 输入命令</p>
<pre><code class="line-numbers language-powershell">:: 如果MongoDB服务存在，删除并重起电脑
mongod --logpath D:\MongoDB\Server\4.2\log\mongod.log --logappend --dbpath D:\MongoDB\Server\4.2\data --directoryperdb --serviceName &quot;MongoDB&quot; --serviceDisplayName &quot;MongoDB&quot; --remove
:: 创建MongoDB服务 
:: 输出日志：D:\MongoDB\Server\4.2\log\mongod.log
:: 数据目录 D:\MongoDB\Server\4.2\data
:: 外网可访问 --bind_ip_all
mongod --logpath D:\MongoDB\Server\4.2\log\mongod.log --logappend --dbpath D:\MongoDB\Server\4.2\data --directoryperdb --bind_ip_all --serviceName MongoDB --install
:: 启动服务
net start MongoDB</code></pre>
<h2 id="如果启动mongoDB服务时，出现以下异常-window不能再本地计算机启动MongoDB"><a href="#如果启动mongoDB服务时，出现以下异常-window不能再本地计算机启动MongoDB" class="headerlink" title="如果启动mongoDB服务时，出现以下异常 window不能再本地计算机启动MongoDB"></a>如果启动mongoDB服务时，出现以下异常 window不能再本地计算机启动MongoDB</h2><p>删除文件</p>
<pre><code class="line-numbers language-powershell">D:\MongoDB\Server\4.2\data下的mongod.lock和storage.bson文件</code></pre>
]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>WIN10远程连接报错：你的凭据不工作</title>
    <url>/p/3296f49.html</url>
    <content><![CDATA[<ol>
<li><p>开始</p>
</li>
<li><p>运行</p>
</li>
<li><p>输入<code>gpedit.msc</code></p>
<a id="more"></a></li>
<li><p>进入<code>本地组策略编辑器</code></p>
</li>
<li><p>在左侧依次找到<code>计算机配置-&gt;Windows设置-&gt;安全设置-&gt;本地策略-&gt;安全选项</code></p>
</li>
<li><p>在右侧找到<code>网络访问:本地帐户的共享和安全模型</code></p>
</li>
<li><p>修改为<code>使用经典模式</code><br><img src="//gitee.com/guoke3915/zw/raw/master/p/3296f49/19826068-6174ff340bb5f745.png" alt="clipboard.png"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>将VS Code 添加到友键菜单</title>
    <url>/p/ab6cd228.html</url>
    <content><![CDATA[<p>Windows上面安装Visual Studio Code编辑器后,常常会因为安装的时候忘记勾选等原因,没有将”Open with Code(右键快捷方式)”添加到鼠标右键菜单里,使用起来多有不便,所以需要我们手动将VSCode添加至鼠标右键菜单之中.  </p>
<a id="more"></a>
<p>vs code 程序为：”C:\Users\Administrator\AppData\Local\Programs\Microsoft VS Code\Code.exe”</p>
<pre><code class="line-numbers language-regex">Windows Registry Editor Version 5.00

[HKEY_CLASSES_ROOT\*\shell\VSCode]
@=&quot;Open with VS Code&quot;
&quot;Icon&quot;=&quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe&quot;

[HKEY_CLASSES_ROOT\*\shell\VSCode\command]
@=&quot;\&quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe\&quot; \&quot;%1\&quot;&quot;

Windows Registry Editor Version 5.00

[HKEY_CLASSES_ROOT\Directory\shell\VSCode]
@=&quot;Open with VS Code&quot;
&quot;Icon&quot;=&quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe&quot;

[HKEY_CLASSES_ROOT\Directory\shell\VSCode\command]
@=&quot;\&quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe\&quot; \&quot;%V\&quot;&quot;

Windows Registry Editor Version 5.00

[HKEY_CLASSES_ROOT\Directory\Background\shell\VSCode]
@=&quot;Open with VS Code&quot;
&quot;Icon&quot;=&quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe&quot;

[HKEY_CLASSES_ROOT\Directory\Background\shell\VSCode\command]
@=&quot;\&quot;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe\&quot; \&quot;%V\&quot;&quot;</code></pre>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB 忘记密码</title>
    <url>/p/d9c741f4.html</url>
    <content><![CDATA[<h3 id="先查看MongoDB的启动模式"><a href="#先查看MongoDB的启动模式" class="headerlink" title="先查看MongoDB的启动模式"></a>先查看MongoDB的启动模式</h3><a id="more"></a>
<pre><code class="line-numbers language-bash">ps -ef | grep mongod</code></pre>
<h4 id="命令行参数启动"><a href="#命令行参数启动" class="headerlink" title="命令行参数启动"></a>命令行参数启动</h4><ul>
<li>如果查看到的mongod后面带<code>-auth</code>参数启动的<br>如：<code>root       9564      1  0 06:28 ?        00:00:15 mongod -auth --bind_ip 127.0.0.1 --port 27017 --dbpath /data/db --fork --logpath /data/log/mongodb.log</code></li>
<li>停止服务<code>kill 9564</code> 进程ID</li>
<li>去掉<code>-auth</code>参数重新启动<br>如：<code>mongod --bind_ip 127.0.0.1 --port 27017 --dbpath /data/db --fork --logpath /data/log/mongodb.log</code></li>
<li>运行命令删除账户<pre><code class="line-numbers language-bash">mongo                          # 运行客户端
use admin                      # 切换到系统帐户表
db.system.users.find()         # 查看当前帐户（密码有加密过）
db.system.users.remove({})     # 删除所有帐户
db.addUser(&#39;admin&#39;,&#39;password&#39;) # 添加新帐户</code></pre>
</li>
<li>恢复<code>-auth</code>参数运行<br>如：<code>mongod -auth --bind_ip 127.0.0.1 --port 27017 --dbpath /data/db --fork --logpath /data/log/mongodb.log</code><h4 id="配置文件运行"><a href="#配置文件运行" class="headerlink" title="配置文件运行"></a>配置文件运行</h4></li>
<li>如果参数没有<code>-auth</code>参数的，<code>vim /etc/mongod.conf</code></li>
<li>如果不是默认位置，用<code>find / -name mongod.conf</code>搜索到配置文件</li>
<li>注释掉<code>authorization:enabled</code></li>
<li>重启MongoDB服务<code>service mongodb restart</code></li>
<li>同上运行命令删除账户</li>
<li>恢复 <code>authorization:enabled</code></li>
<li>重启 mongodb 服务<code>service mongodb restart</code></li>
</ul>
]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>React环境搭建</title>
    <url>/p/28a0bfec.html</url>
    <content><![CDATA[<h1 id="node-安装和-npm"><a href="#node-安装和-npm" class="headerlink" title="node 安装和 npm"></a>node 安装和 npm</h1><a id="more"></a>
<ol>
<li>windows 安装node 可以直接在 <a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">node官网</a> 直接下载直接当作普通软件安装即可。  </li>
<li>安装完成可以在控制台中运行node测试是否安装成功 win + r  输入 cmd ,直接在终端输入node -v  输出版本号及已经成功安装。  </li>
<li>目前新版本的node自带npm(npm 是随同 node 一起安装的包管理工具)。这里安装好了 node并且测试安装成功之后，可以继续在控制台输入 npm -v 检查是不是安装成功。同样成功会输出版本号。</li>
<li>命令行cd进入项目目录</li>
<li>安装 jsx语法tranformer<pre><code class="line-numbers language-powershell">npm install --global babel-cli
npm install babel-preset-react</code></pre>
</li>
<li>在web目录下执行 transformer<pre><code class="line-numbers language-powershell">babel --presets react jsx --watch --out-dir funcjs</code></pre>
</li>
<li>npm install （安装依赖）</li>
<li>npm start （启动）</li>
<li>打包可部署 npm run build （在dist目录下，部署的东西）</li>
</ol>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>IOS ipa包企业证书签名手动替换</title>
    <url>/p/d4109bd2.html</url>
    <content><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>IOS安装包企业签名ipa包里面包含的是payload文件夹，文件夹中包含了资源文件和_CodeSignature签名文件夹以及embedded.mobileprovision证书配置文件，而其中关于ios授权签名的就是_CodeSignature签名文件夹和embedded.mobileprovision证书配置文件 只要替换这两个文件就搞定。<br>_CodeSignature签名文件夹 需要用 *.plist 授权文件去自动生成。</p>
<a id="more"></a>

<p>*.plist文件配置如下：</p>
<pre><code class="line-numbers language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
&lt;dict&gt;
    &lt;key&gt;application-identifier&lt;/key&gt;
    &lt;string&gt;${application-identifier}&lt;/string&gt;
    &lt;key&gt;com.apple.developer.team-identifier&lt;/key&gt;
    &lt;string&gt;${com.apple.developer.team-identifier}&lt;/string&gt;
    &lt;key&gt;get-task-allow&lt;/key&gt;
    &lt;false/&gt;
    &lt;key&gt;keychain-access-groups&lt;/key&gt;
    &lt;array&gt;
        &lt;string&gt;${application-identifier}&lt;/string&gt;
    &lt;/array&gt;
&lt;/dict&gt;
&lt;/plist&gt;</code></pre>
<p>其中 ${application-identifier} 和 ${com.apple.developer.team-identifier} 在 企业证书文件中 *.mobileprovision 中拷贝</p>
<h1 id="实施步骤"><a href="#实施步骤" class="headerlink" title="实施步骤"></a>实施步骤</h1><ul>
<li>你的有原始的ios安装包，*.ipa</li>
<li>你得有在有效期内的的企业证书，如下文件：</li>
</ul>
<ol>
<li>*.mobileprovision</li>
<li>distribution.cer</li>
<li>distribution.p12</li>
</ol>
<ul>
<li>将cer证书输入密码安装在当前的mac机器上</li>
<li>命名*.mobileprovision 为embedded.mobileprovision</li>
<li>解压ipa包<pre><code class="line-numbers language-bash">unzip *.ipa</code></pre>
</li>
<li>删除_CodeSignature签名文件夹<pre><code class="line-numbers language-bash">rm -rf Payload/*.app/_CodeSignature</code></pre>
</li>
<li>替换*app中的embedded.mobileprovision<pre><code class="line-numbers language-bash">cp embedded.mobileprovision Payload/*.app/ </code></pre>
</li>
<li>创建*.plist文件并用该文件签名<pre><code class="line-numbers language-bash">/usr/bin/codesign -f -s &quot;iPhone Distribution: ${cerName}&quot; --entitlements *.plist Payload/*.app</code></pre>
其中 ${cerName}是证书名称，可以在钥匙串证书中看到</li>
<li>修改Payload/*.app中Info(info).plist中bundleIdentifier的值为你自己的bundleIdentifier实际值</li>
<li>打包ipa<pre><code class="line-numbers language-bash">zip -r xxx.ipa Payload</code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Go文件名命名规则</title>
    <url>/p/daf9791f.html</url>
    <content><![CDATA[<h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><p>在golang源代码中，经常看到各种文件名，比如： bolt_windows.go。<br>下面对文件名命令规则的说明：</p>
<a id="more"></a>
<ol>
<li><p>平台区分</p>
<p>文件名_平台。</p>
<p>例： file_windows.go, file_unix.go</p>
<p>可选为<code>windows, unix, posix, plan9, darwin, bsd, linux, freebsd, nacl, netbsd, openbsd, solaris, dragonfly, bsd, notbsd， android，stubs</code></p>
</li>
<li><p>测试单远</p>
<p>文件名_test.go或者 文件名_平台_test.go。</p>
<p>例： path_test.go,  path_windows_test.go</p>
</li>
<li><p>版本区分（猜测）</p>
<p>文件名_版本号等。</p>
<p>例：trap_windows_1.4.go</p>
</li>
<li><p>CPU类型区分, 汇编用的多</p>
<p>文件名_(平台:可选)_CPU类型.</p>
<p>例：vdso_linux_amd64.go</p>
<p>可选为<code>amd64, none, 386, arm, arm64, mips64, s390,mips64x,ppc64x, nonppc64x, s390x, x86,amd64p32</code></p>
</li>
</ol>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ol>
<li><p>golang的命名需要使用驼峰命名法，且不能出现下划线</p>
</li>
<li><p>golang中根据首字母的大小写来确定可以访问的权限。无论是方法名、常量、变量名还是结构体的名称，如果首字母大写，则可以被其他的包访问；如果首字母小写，则只能在本包中使用，可以简单的理解成，首字母大写是公有的，首字母小写是私有的</p>
</li>
<li><p>结构体中属性名的大写</p>
<p>如果属性名小写则在数据解析（如json解析,或将结构体作为请求或访问参数）时无法解析</p>
</li>
</ol>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ol>
<li>go build 的时候会选择性地编译以系统名结尾的文件(linux、darwin、windows、freebsd)。例如Linux(Unix)系统下编译只会选择array_linux.go文件，其它系统命名后缀文件全部忽略。</li>
<li>在xxx.go文件的文件头上添加 // + build !windows (tags)，可以选择在windows系统下面不编译 <pre><code class="line-numbers language-go">// +build !windows
package main</code></pre>
</li>
</ol>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH获取连接者IP</title>
    <url>/p/8c986da4.html</url>
    <content><![CDATA[<pre><code class="line-numbers language-bash">who am i | awk &#39;{print $5}&#39; | sed &#39;s/(//g&#39; | sed &#39;s/)//g&#39;</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 在线安装dotnet环境</title>
    <url>/p/4b25257e.html</url>
    <content><![CDATA[<pre><code class="line-numbers language-bash">rpm -Uvh https://packages.microsoft.com/config/rhel/7/packages-microsoft-prod.rpm
yum update
yum install dotnet-sdk-2.2
dotnet --version</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>关于golang.org.x包问题</title>
    <url>/p/56b2f397.html</url>
    <content><![CDATA[<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><ol>
<li>进入GOPATH目录   </li>
</ol>
<pre><code class="line-numbers language-bash">win&gt; cd %GOPATH%
linux&gt; cd $GOPATH</code></pre>
<a id="more"></a>
<ol start="2">
<li>创建\src\golang.org\x 目录并进入  </li>
</ol>
<pre><code class="line-numbers language-bash">win&gt; mkdir %GOPATH%\src\golang.org\x
win&gt; cd %GOPATH%\src\golang.org\x

linux&gt; mkdir $GOPATH\src\golang.org\x
linux&gt; cd $GOPATH\src\golang.org\x</code></pre>
<ol start="3">
<li>从github.com上下载  </li>
</ol>
<pre><code class="line-numbers language-bash">git clone https://github.com/golang/net.git
git clone https://github.com/golang/sys.git
git clone https://github.com/golang/tools.git
git clone https://github.com/golang/time.git
git clone https://github.com/golang/crypto.git

go install golang.org/x/net/...
go install golang.org/x/sys/...
go install golang.org/x/tools/...
go install golang.org/x/time/...
go install golang.org/x/crypto/...</code></pre>
<ol start="4">
<li>go的官方包:<br><a href="https://golang.org/x" target="_blank" rel="noopener">https://golang.org/x</a> =&gt; <a href="https://github.com/golang" target="_blank" rel="noopener">https://github.com/golang</a></li>
</ol>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><ol>
<li>从ssr中获取本地代理端口  </li>
</ol>
<pre><code class="line-numbers language-bash">127.0.0.1:1080</code></pre>
<ol start="2">
<li>curl测试  </li>
</ol>
<pre><code class="line-numbers language-bash">curl -x http://127.0.0.1:1080 www.google.com</code></pre>
<ol start="3">
<li>设置http代理  </li>
</ol>
<ul>
<li>windows下: 注意大小写  </li>
</ul>
<pre><code class="line-numbers language-bash">set http_proxy=代理ip:port (临时有效)
set HTTPS_PROXY=代理ip:port (临时有效)
set ALL_PROXY=代理ip:port(临时有效)

如：
set http_proxy=http://127.0.0.1:1080
set HTTPS_PROXY=http://127.0.0.1:1080</code></pre>
<ul>
<li>linux下: 注意大小写  </li>
</ul>
<pre><code class="line-numbers language-bash">export http_proxy=代理ip:port (临时有效)
export HTTPS_PROXY=代理ip:port (临时有效)
或者合成一条
export ALL_PROXY=代理ip:port (临时有效)

如：
export http_proxy=http://127.0.0.1:1080
export HTTPS_PROXY=http://127.0.0.1:1080</code></pre>
<ol start="4">
<li>直接go get 安装  </li>
</ol>
<pre><code class="line-numbers language-bash">go get -u -v golang.org/x/net/...
go get -u -v golang.org/x/sys/...
go get -u -v golang.org/x/tools/...
go get -u -v golang.org/x/time/...
go get -u -v golang.org/x/crypto/...</code></pre>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Visual Studio Code调试Golang工程</title>
    <url>/p/5c36a00.html</url>
    <content><![CDATA[<h1 id="准备VSCode"><a href="#准备VSCode" class="headerlink" title="准备VSCode"></a>准备VSCode</h1><p>在官网下载最新版的VSCode:</p>
<a id="more"></a>
<p><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code - Code Editing. Redefined</a></p>
<h1 id="安装Golang插件"><a href="#安装Golang插件" class="headerlink" title="安装Golang插件"></a>安装Golang插件</h1><ul>
<li>打开扩展面板<br>  VSCode-&gt;查看-&gt;扩展</li>
<li>找到Go插件 在搜索框里输入Go, 找到第二行写有 Rich Go language support for Visual Studio Code的插件, 点击安装</li>
<li>重启编辑器</li>
</ul>
<h1 id="配置启动项"><a href="#配置启动项" class="headerlink" title="配置启动项"></a>配置启动项</h1><ul>
<li>打开调试面板<br>  VSCode-&gt;查看-&gt;调试</li>
<li>添加调试目标<br>  在”没有调试”的下拉框中点击”添加配置..”</li>
<li>添加目标调试配置</li>
</ul>
<pre><code class="line-numbers language-json">{
    &quot;version&quot;: &quot;0.2.0&quot;,
    &quot;configurations&quot;: [
        {
            &quot;name&quot;: &quot;Launch&quot;,
            &quot;type&quot;: &quot;go&quot;,
            &quot;request&quot;: &quot;launch&quot;,
            &quot;mode&quot;: &quot;debug&quot;,
            &quot;remotePath&quot;: &quot;&quot;,
            &quot;port&quot;: 2345,
            &quot;host&quot;: &quot;127.0.0.1&quot;,
            &quot;program&quot;: &quot;${fileDirname}&quot;,
            &quot;env&quot;: {
                &quot;GOPATH&quot;:&quot;D:/Develop/vscodegolang&quot;
            },
            &quot;args&quot;: [],
            &quot;showLog&quot;: true
        }
    ]
}</code></pre>
<p>其中: “port”, “host”都是go插件自动生成的<br>“env”为设置环境变量, 设置为你的工程目录就可以(包含bin, src的文件夹)</p>
<h1 id="准备调试插件"><a href="#准备调试插件" class="headerlink" title="准备调试插件"></a>准备调试插件</h1><p>我们使用go命令行编译调试器  </p>
<pre><code class="line-numbers language-bash">go get github.com/derekparker/delve/cmd/dlv</code></pre>
<h1 id="开始调试"><a href="#开始调试" class="headerlink" title="开始调试"></a>开始调试</h1><p>选中要调试的main.go, 点击F5, 既可以开始调试<br>调试快捷键和Visual Studio系一致</p>
<ul>
<li>F9 切换断点</li>
<li>F10 Step over</li>
<li>F11 Step in</li>
<li>Shift+F11 Step out</li>
</ul>
<h1 id="多项目调试"><a href="#多项目调试" class="headerlink" title="多项目调试"></a>多项目调试</h1><p>在launch.json中可以添加多组调试入口, 通过调试面板中选中对应的配置开启不同目标的调试</p>
<pre><code class="line-numbers language-json">{
    &quot;version&quot;: &quot;0.2.0&quot;,
    &quot;configurations&quot;: [
        {
            &quot;name&quot;: &quot;client&quot;,
            &quot;type&quot;: &quot;go&quot;,
            &quot;request&quot;: &quot;launch&quot;,
            &quot;mode&quot;: &quot;debug&quot;,
            &quot;remotePath&quot;: &quot;&quot;,
            &quot;port&quot;: 2345,
            &quot;host&quot;: &quot;127.0.0.1&quot;,
            &quot;program&quot;: &quot;${fileDirname}&quot;,
            &quot;env&quot;: {
                &quot;GOPATH&quot;:&quot;D:/Develop/vscodegolang&quot;
            },
            &quot;args&quot;: [],
            &quot;showLog&quot;: true
        },

        {
            &quot;name&quot;: &quot;server&quot;,
            &quot;type&quot;: &quot;go&quot;,
            &quot;request&quot;: &quot;launch&quot;,
            &quot;mode&quot;: &quot;debug&quot;,
            &quot;remotePath&quot;: &quot;&quot;,
            &quot;port&quot;: 2345,
            &quot;host&quot;: &quot;127.0.0.1&quot;,
            &quot;program&quot;: &quot;${workspaceRoot}/src/server&quot;,
            &quot;env&quot;: {
                &quot;GOPATH&quot;:&quot;D:/Develop/vscodegolang&quot;
            },
            &quot;args&quot;: [],
            &quot;showLog&quot;: true
        }
    ]
}</code></pre>
<p>“program”中的”${fileDirname}”是以当前选中文件作为启动点</p>
<p>更建议使用”program”的”${workspaceRoot}”, 以包名作为启动点的方式进行配置</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 中 file 读写 与 Zip 压缩解压</title>
    <url>/p/3fb3c00a.html</url>
    <content><![CDATA[<h2 id="以byte-读文件"><a href="#以byte-读文件" class="headerlink" title="以byte[]读文件"></a>以byte[]读文件</h2><a id="more"></a>
<pre><code class="line-numbers language-java">public static byte[] file2byte(String path)
{
    try {
        FileInputStream in =new FileInputStream(new File(path));
        //当文件没有结束时，每次读取一个字节显示
        byte[] data=new byte[in.available()];
        in.read(data);
       in.close();
        return data;
    } catch (Exception e) {
        e.printStackTrace();
        return null;
    }
}</code></pre>
<h2 id="byte-写文件"><a href="#byte-写文件" class="headerlink" title="byte[]写文件"></a>byte[]写文件</h2><pre><code class="line-numbers language-java">public static void byte2file(String path,byte[] data) {
    try {
        FileOutputStream outputStream  =new FileOutputStream(new File(path));
        outputStream.write(data);
        outputStream.close();
    } catch (Exception e) {
        e.printStackTrace();
    }
}</code></pre>
<h2 id="zip解压byte"><a href="#zip解压byte" class="headerlink" title="zip解压byte[]"></a>zip解压byte[]</h2><pre><code class="line-numbers language-java">public static byte[] unZip(byte[] data) {
    byte[] b = null;
    try {
        ByteArrayInputStream bis = new ByteArrayInputStream(data);
        ZipInputStream zip = new ZipInputStream(bis);
        while (zip.getNextEntry() != null) {
            byte[] buf = new byte[1024];
            int num = -1;
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            while ((num = zip.read(buf, 0, buf.length)) != -1) {
                baos.write(buf, 0, num);
            }
            b = baos.toByteArray();
            baos.flush();
            baos.close();
        }
        zip.close();
        bis.close();
    } catch (Exception ex) {
        ex.printStackTrace();
    }
    return b;
}</code></pre>
<h2 id="zip压缩byte"><a href="#zip压缩byte" class="headerlink" title="zip压缩byte[]"></a>zip压缩byte[]</h2><pre><code class="line-numbers language-java">public static byte[] zip(byte[] data) {
    byte[] b = null;
    try {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        ZipOutputStream zip = new ZipOutputStream(bos);
        ZipEntry entry = new ZipEntry(&quot;zip&quot;);
        entry.setSize(data.length);
        zip.putNextEntry(entry);
        zip.write(data);
        zip.closeEntry();
        zip.close();
        b = bos.toByteArray();
        bos.close();
    } catch (Exception ex) {
        ex.printStackTrace();
    }
    return b;
}</code></pre>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx转发阿里云内网Redis</title>
    <url>/p/cc40aacf.html</url>
    <content><![CDATA[<h2 id="修改Nginx配置文件，加入流转发"><a href="#修改Nginx配置文件，加入流转发" class="headerlink" title="修改Nginx配置文件，加入流转发"></a>修改Nginx配置文件，加入流转发</h2><a id="more"></a>
<pre><code class="line-numbers language-ini">#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

events {
    worker_connections  65535;
}

# redis 端口直接转发
stream {
    upstream redis {
        server  r-bp1234567890.redis.rds.aliyuncs.com:6379 max_fails=3 fail_timeout=30s; #*r-bp1234567890*替换为真实的redis地址
    }
    server {
        listen 6379;
        proxy_connect_timeout 1s;
        proxy_timeout 3s;
        proxy_pass redis;
    }
}</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 下端口转发rinetd</title>
    <url>/p/cda710eb.html</url>
    <content><![CDATA[<h2 id="1、下载，解压，安装"><a href="#1、下载，解压，安装" class="headerlink" title="1、下载，解压，安装"></a>1、下载，解压，安装</h2><a id="more"></a>
<pre><code class="line-numbers language-bash">$ wget http://www.boutell.com/rinetd/http/rinetd.tar.gz&amp;&amp;tar -xvf rinetd.tar.gz&amp;&amp;cd rinetd
$ sed -i &#39;s/65536/65535/g&#39; rinetd.c (修改端口范围)
$ mkdir /usr/man&amp;&amp;make&amp;&amp;make install</code></pre>
<h2 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h2><p>配置文件格式很简单：[Source Address] [Source Port] [Destination Address] [Destination Port]</p>
<pre><code class="line-numbers language-bash">vi /etc/rinetd.conf
0.0.0.0 8080 192.168.31.22 8080
logfile /var/log/rinetd.log</code></pre>
<h2 id="3、启动、关闭程序"><a href="#3、启动、关闭程序" class="headerlink" title="3、启动、关闭程序"></a>3、启动、关闭程序</h2><pre><code class="line-numbers language-bash">$ rinetd -c /etc/rinetd.conf
ps -ef | grep rinetd

$ killall rinetd</code></pre>
<h2 id="4、校验"><a href="#4、校验" class="headerlink" title="4、校验"></a>4、校验</h2><pre><code class="line-numbers language-bash">$ netstat -tanulp|grep rinetd</code></pre>
]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
</search>
